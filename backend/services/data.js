Alias

2D (128-8191):
- 128 (bit 7): 2D Đầu
- 256 (bit 8): 2D Đuôi
- 512 (bit 9): 2D Đầu-Đuôi
- 1024 (bit 10): 2D 27 Lô
- 2048 (bit 11): 2D 18 Lô
- 4096 (bit 12): 2D 7 Lô

.filter('game', function () {
    // GameType
    var gameList = [
        {id: 0, name: 'Miền Bắc 1'},
        {id: 1, name: 'Miền Bắc 2'},
        {id: 2, name: 'Miền Nam 18A'},
        {id: 3, name: 'Miền Nam 18B'},
        {id: 4, name: 'Miền Nam 18C'},
        {id: 5, name: 'Miền Nam 18A + 18B'}
    ];
    return function (input) {
        let game = $.grep(gameList, function (value, i) {
            return value.id === parseInt(input)
        });
        if (game.length) {
            return game[0].name;
        }
    }
})
.filter('bet', function () {
    // BetType
    let betList = [
        {id: 0, name: 'Đề'},
        {id: 1, name: 'Lô'},
        {id: 2, name: 'Xiên 2'},
        {id: 3, name: 'Xiên 3'},
        {id: 4, name: 'Xiên 4'},
        {id: 5, name: 'Đề trượt'},
        {id: 6, name: 'Lô Trượt'},
        {id: 7, name: '2D Đầu'},
        {id: 8, name: '2D Đuôi'},
        {id: 9, name: '2D 27Lô'},
        {id: 10, name: '3D Đầu'},
        {id: 11, name: '3D Đuôi', mb: 'Đề 3 Càng'},
        {id: 12, name: '3D 23Lô', mb: 'Lô 3 Càng'},
        {id: 13, name: '4D Đuôi', mb: 'Đề 4 Càng'},
        {id: 14, name: '4D 20Lô', mb: 'Lô 4 Càng'},
        {id: 15, name: '2D 18Lô'},
        {id: 16, name: '2D 7Lô'},
        {id: 17, name: '3D 17Lô'},
        {id: 18, name: '3D 7Lô'},
        {id: 19, name: '4D 16Lô'},
        {id: 20, name: 'Lô Live'},
        {id: 21, name: 'Đề Đầu'},
        {id: 22, name: 'Đề Giải 1'},
        {id: 23, name: 'Đề Đầu Giải 1', short: 'Đề Đầu G1'},
        {id: 24, name: 'Đề Thần Tài', short: 'Đề TT'},
        {id: 25, name: 'Đề Đầu Thần Tài', short: 'Đề Đầu TT'},
        {id: 26, name: 'Live 3D', mb: 'Live 3 Càng'},
        {id: 27, name: '2D 18Lô Live'},
        {id: 28, name: 'Live 3D'},
        {id: 29, name: 'Lô Đầu'},
        {id: 30, name: '2D 18Lô Đầu'},
    ];



(function (){
    'use strict';
    angular
        .module('app.traditional',[]).config(config);

    /** @ngInject */
    function config($stateProvider, msApiProvider){
        // State
        $stateProvider
            .state('app.traditional', {
                abstract: true,
                url     : '/traditional',
                views    : {
                    'main@': {
                        templateUrl: 'app/core/layouts/content-general.html',
                        controller : 'MainController as one'
                    },
                    'content@app.traditional': {
                        templateUrl: 'app/main/traditional/traditional.html',
                        controller : 'traditionalCtrl as one'
                    },
                    'toolbar@app.traditional'   : {
                        templateUrl: 'app/toolbar/layouts/vertical-navigation/toolbar.html',
                        controller : 'ToolbarController as vm'
                    },
                    'navigation@app.traditional': {
                        templateUrl: 'app/navigation/layouts/vertical-navigation/navigation.html',
                        controller : 'NavigationController as vm'
                    },
                    'accountPanel@app.traditional': {
                        templateUrl: 'app/account-panel/account-panel.html',
                        controller : 'accountPanelCtrl as vm'
                    },
                    'lottery-menu@app.traditional': {
                        templateUrl: 'app/main/traditional/menu/traditional.menu.html',
                        controller : 'traditionalMenuCtrl as vm'
                    }
                }
            })
            .state('app.traditional.northern', {
                url      : '/northern',
                abstract: true,
                resolve  : {
                    collections: function (msApi) {
                        return msApi.resolve('number.collection@get');
                    },
                    select: function (msApi) {
                        return msApi.resolve('number.select@get');
                    }
                }
            })
            .state('app.traditional.northern.jackpot', {
                url      : '/jackpot',
                views    : {
                    'traditional-content@app.traditional': {
                        templateUrl: 'app/main/traditional/northern/general/general.html',
                        controller : 'generalCtrl as vm'
                    }
                },
                resolve: {
                    betId: function () {
                        return 0
                    }
                },
                bodyClass: 'traditional'
            })
            .state('app.traditional.northern.head-jackpot', {
                url      : '/head-jackpot',
                views    : {
                    'traditional-content@app.traditional': {
                        templateUrl: 'app/main/traditional/northern/general/general.html',
                        controller : 'generalCtrl as vm'
                    }
                },
                resolve: {
                    betId: function () {
                        return 21
                    }
                },
                bodyClass: 'traditional'
            })
            .state('app.traditional.northern.jackpot-first', {
                url      : '/first',
                views    : {
                    'traditional-content@app.traditional': {
                        templateUrl: 'app/main/traditional/northern/general/general.html',
                        controller : 'generalCtrl as vm'
                    }
                },
                resolve: {
                    betId: function () {
                        return 22
                    }
                },
                bodyClass: 'traditional'
            })
            .state('app.traditional.northern.jackpot-head-first', {
                url      : '/head-first',
                views    : {
                    'traditional-content@app.traditional': {
                        templateUrl: 'app/main/traditional/northern/general/general.html',
                        controller : 'generalCtrl as vm'
                    }
                },
                resolve: {
                    betId: function () {
                        return 23
                    }
                },
                bodyClass: 'traditional'
            })
            .state('app.traditional.northern.jackpot-caishen', {
                url      : '/caishen',
                views    : {
                    'traditional-content@app.traditional': {
                        templateUrl: 'app/main/traditional/northern/general/general.html',
                        controller : 'generalCtrl as vm'
                    }
                },
                resolve: {
                    betId: function () {
                        return 24
                    }
                },
                bodyClass: 'traditional'
            })
            .state('app.traditional.northern.jackpot-head-caishen', {
                url      : '/head-caishen',
                views    : {
                    'traditional-content@app.traditional': {
                        templateUrl: 'app/main/traditional/northern/general/general.html',
                        controller : 'generalCtrl as vm'
                    }
                },
                resolve: {
                    betId: function () {
                        return 25
                    }
                },
                bodyClass: 'traditional'
            })
            .state('app.traditional.northern.lotto', {
                url      : '/lotto',
                views    : {
                    'traditional-content@app.traditional': {
                        templateUrl: 'app/main/traditional/northern/general/general.html',
                        controller : 'generalCtrl as vm'
                    }
                },
                resolve: {
                    betId: function () {
                        return 1
                    }
                },
                bodyClass: 'traditional'
            })
            .state('app.traditional.northern.lotto-head', {
                url      : '/lotto-head',
                views    : {
                    'traditional-content@app.traditional': {
                        templateUrl: 'app/main/traditional/northern/general/general.html',
                        controller : 'generalCtrl as vm'
                    }
                },
                resolve: {
                    betId: function () {
                        return 29
                    }
                },
                bodyClass: 'traditional'
            })
            .state('app.traditional.northern.live', {
                url      : '/live',
                views    : {
                    'traditional-content@app.traditional': {
                        templateUrl: 'app/main/traditional/northern/live/live.html',
                        controller : 'lotLiveCtrl as vm'
                    }
                },
                resolve: {
                    betId: function () {
                        return 20
                    }
                },
                bodyClass: 'traditional'
            })
            .state('app.traditional.northern.parlay', {
                url      : '/parlay',
                views    : {
                    'traditional-content@app.traditional': {
                        templateUrl: 'app/main/traditional/northern/parlay/parlay.html',
                        controller : 'parlayCtrl as vm'
                    }
                },
                resolve: {
                    betId: function () {
                        return 2
                    }
                },
                bodyClass: 'traditional'
            })
            .state('app.traditional.northern.except-jackpot', {
                url      : '/except-jackpot',
                views    : {
                    'traditional-content@app.traditional': {
                        templateUrl: 'app/main/traditional/northern/except/except.html',
                        controller : 'exceptCtrl as vm'
                    }
                },
                resolve: {
                    betId: function () {
                        return 5
                    },
                    param: function () {
                        return {minbet: 10, betTimes: 1, payouts: 650}
                    }
                },
                bodyClass: 'traditional'
            })
            .state('app.traditional.northern.except-lotto', {
                url      : '/except-lotto',
                views    : {
                    'traditional-content@app.traditional': {
                        templateUrl: 'app/main/traditional/northern/except/except.html',
                        controller : 'exceptCtrl as vm'
                    }
                },
                resolve: {
                    betId: function () {
                        return 6
                    },
                    param: function () {
                        return {minbet: 4, betTimes: 4, payouts: 21100}
                    }
                },
                bodyClass: 'traditional'
            })
            .state('app.traditional.northern-2nd', {
                url      : '/northern-2nd',
                abstract: true,
                resolve  : {
                    collections: function (msApi) {
                        return msApi.resolve('number.collection@get');
                    },
                    select: function (msApi) {
                        return msApi.resolve('number.select@get');
                    }
                }
            })
            .state('app.traditional.northern-2nd.quick-bet', {
                url: '/quick-bet',
                views   : {
                    'traditional-content@app.traditional': {
                        templateUrl: 'app/main/traditional/northern-2nd/quick-bet/quick-bet.html',
                        controller : 'qbController as vm'
                    }
                },
                bodyClass: 'traditional'
            })
            .state('app.traditional.northern-2nd.2d', {
                url      : '/2d',
                abstract: true
            })
            .state('app.traditional.northern-2nd.2d.dau', {
                url: '/dau',
                views   : {
                    'traditional-content@app.traditional': {
                        templateUrl: 'app/main/traditional/northern-2nd/2d/dau-duoi/dau-duoi.html',
                        controller : 'dauDuoiCtrl as vm'
                    }
                },
                resolve: {
                    betId: function () {
                        return 7
                    }
                },
                bodyClass: 'traditional'
            })
            .state('app.traditional.northern-2nd.2d.duoi', {
                url: '/duoi',
                views   : {
                    'traditional-content@app.traditional': {
                        templateUrl: 'app/main/traditional/northern-2nd/2d/dau-duoi/dau-duoi.html',
                        controller : 'dauDuoiCtrl as vm'
                    }
                },
                resolve: {
                    betId: function () {
                        return 8
                    }
                },
                bodyClass: 'traditional'
            })
            .state('app.traditional.northern-2nd.2d.27lo', {
                url: '/27lo',
                views   : {
                    'traditional-content@app.traditional': {
                        templateUrl: 'app/main/traditional/northern-2nd/2d/27lo/27lo.html',
                        controller : 'lo27Ctrl as vm'
                    }
                },
                resolve: {
                    betId: function () {
                        return 9
                    }
                },
                bodyClass: 'traditional'
            })
            .state('app.traditional.northern-2nd.2d.row-bet', {
                url: '/row-bet',
                views   : {
                    'traditional-content@app.traditional': {
                        templateUrl: 'app/main/traditional/northern-2nd/2d/row-bet/row-bet.html',
                        controller : 'rowBetCtrl as vm'
                    }
                },
                bodyClass: 'traditional'
            })
            .state('app.traditional.northern-2nd.3d', {
                url      : '/3d',
                abstract: true
            })
            .state('app.traditional.northern-2nd.3d.dau', {
                url: '/dau',
                views   : {
                    'traditional-content@app.traditional': {
                        templateUrl: 'app/main/traditional/northern-2nd/3d/dauduoi/dauduoi.html',
                        controller : 'dauDuoi3DCtrl as vm'
                    }
                },
                resolve: {
                    betId: function () {
                        return 10
                    }
                },
                bodyClass: 'traditional'
            })
            .state('app.traditional.northern-2nd.3d.duoi', {
                url: '/duoi',
                views   : {
                    'traditional-content@app.traditional': {
                        templateUrl: 'app/main/traditional/northern-2nd/3d/dauduoi/dauduoi.html',
                        controller : 'dauDuoi3DCtrl as vm'
                    }
                },
                resolve: {
                    betId: function () {
                        return 11
                    }
                },
                bodyClass: 'traditional'
            })
            .state('app.traditional.northern-2nd.3d.23lo', {
                url: '/23lo',
                views   : {
                    'traditional-content@app.traditional': {
                        templateUrl: 'app/main/traditional/northern-2nd/3d/23lo/23lo.html',
                        controller : 'd3lo23Ctrl as vm'
                    }
                },
                resolve: {
                    betId: function () {
                        return 12
                    }
                },
                bodyClass: 'traditional'
            })
            .state('app.traditional.northern-2nd.4d', {
                url      : '/4d',
                abstract: true
            })
            .state('app.traditional.northern-2nd.4d.duoi', {
                url: '/duoi',
                views   : {
                    'traditional-content@app.traditional': {
                        templateUrl: 'app/main/traditional/northern-2nd/4d/duoi/duoi.html',
                        controller : 'd4duoiCtrl as vm'
                    }
                },
                resolve: {
                    betId: function () {
                        return 13
                    }
                },
                bodyClass: 'traditional'
            })
            .state('app.traditional.northern-2nd.4d.20lo', {
                url: '/20lo',
                views   : {
                    'traditional-content@app.traditional': {
                        templateUrl: 'app/main/traditional/northern-2nd/4d/duoi/duoi.html',
                        controller : 'd4duoiCtrl as vm'
                    }
                },
                resolve: {
                    betId: function () {
                        return 14
                    }
                },
                bodyClass: 'traditional'
            })

            .state('app.traditional.northern-2nd.parlay', {
                url: '/parlay',
                views   : {
                    'traditional-content@app.traditional': {
                        templateUrl: 'app/main/traditional/northern-2nd/parlay/parlay.html',
                        controller : 'north2ParlayCtrl as vm'
                    }
                },
                resolve: {
                    betId: function () {
                        return 2
                    }
                },
                bodyClass: 'traditional'
            })
            .state('app.traditional.northern-2nd.live', {
                url: '/live',
                views   : {
                    'traditional-content@app.traditional': {
                        templateUrl: 'app/main/traditional/northern-2nd/live/live.html',
                        controller : 'b2LotLiveCtrl as vm'
                    }
                },
                resolve: {
                    betId: function () {
                        return 20
                    }
                },
                bodyClass: 'traditional'
            })
            .state('app.traditional.southern', {
                url      : '/southern',
                abstract: true,
                resolve  : {
                    select: function (msApi) {
                        return msApi.resolve('number.select@get');
                    }
                }
            })
            .state('app.traditional.southern.quick-bet', {
                url: '/quick-bet',
                views   : {
                    'traditional-content@app.traditional': {
                        templateUrl: 'app/main/traditional/southern/quick-bet/quick-bet.html',
                        controller : 'qbMnController as vm'
                    }
                },
                bodyClass: 'traditional'
            })
            .state('app.traditional.southern.2d', {
                url      : '/2d',
                abstract: true
            })
            .state('app.traditional.southern.2d.dau', {
                url: '/dau',
                views   : {
                    'traditional-content@app.traditional': {
                        templateUrl: 'app/main/traditional/southern/2d/dau/dau.html',
                        controller : 'haidDauController as vm'
                    }
                },
                bodyClass: 'traditional'
            })
            .state('app.traditional.southern.2d.duoi', {
                url: '/duoi',
                views   : {
                    'traditional-content@app.traditional': {
                        templateUrl: 'app/main/traditional/southern/2d/duoi/duoi.html',
                        controller : 'haidDauController as vm'
                    }
                },
                bodyClass: 'traditional'
            })
            .state('app.traditional.southern.2d.18lo', {
                url: '/18lo',
                views   : {
                    'traditional-content@app.traditional': {
                        templateUrl: 'app/main/traditional/southern/2d/18lo/18lo.html',
                        controller : 'lo18Ctrl as vm'
                    }
                },
                bodyClass: 'traditional'
            })
            .state('app.traditional.southern.2d.18lo-head', {
                url: '/18lo-head',
                views   : {
                    'traditional-content@app.traditional': {
                        templateUrl: 'app/main/traditional/southern/2d/18lodau/18lodau.html',
                        controller : 'lo18DauCtrl as vm'
                    }
                },
                bodyClass: 'traditional'
            })
            .state('app.traditional.southern.2d.row-bet', {
                url: '/row-bet',
                views   : {
                    'traditional-content@app.traditional': {
                        templateUrl: 'app/main/traditional/southern/2d/row-bet/row-bet.html',
                        controller : 'rowMNBetCtrl as vm'
                    }
                },
                bodyClass: 'traditional'
            })
            .state('app.traditional.southern.3d', {
                url      : '/3d',
                abstract: true
            })
            .state('app.traditional.southern.3d.dau', {
                url: '/dau',
                views   : {
                    'traditional-content@app.traditional': {
                        templateUrl: 'app/main/traditional/southern/3d/dau/dau.html',
                        controller : 'badDauCtrl as vm'
                    }
                },
                bodyClass: 'traditional'
            })
            .state('app.traditional.southern.3d.duoi', {
                url: '/duoi',
                views   : {
                    'traditional-content@app.traditional': {
                        templateUrl: 'app/main/traditional/southern/3d/duoi/duoi.html',
                        controller : 'badDauCtrl as vm'
                    }
                },
                bodyClass: 'traditional'
            })
            .state('app.traditional.southern.3d.17lo', {
                url: '/17lo',
                views   : {
                    'traditional-content@app.traditional': {
                        templateUrl: 'app/main/traditional/southern/3d/17lo/17lo.html',
                        controller : 'd3lo17Ctrl as vm'
                    }
                },
                bodyClass: 'traditional'
            })
            .state('app.traditional.southern.3d.7lo', {
                url: '/7lo',
                views   : {
                    'traditional-content@app.traditional': {
                        templateUrl: 'app/main/traditional/southern/3d/7lo/7lo.html',
                        controller : 'd3lo7Ctrl as vm'
                    }
                },
                bodyClass: 'traditional'
            })
            .state('app.traditional.southern.4d', {
                url      : '/4d',
                abstract: true
            })
            .state('app.traditional.southern.4d.duoi', {
                url: '/duoi',
                views   : {
                    'traditional-content@app.traditional': {
                        templateUrl: 'app/main/traditional/southern/4d/duoi/duoi.html',
                        controller : 'bonDController as vm'
                    }
                },
                bodyClass: 'traditional'
            })
            .state('app.traditional.southern.4d.16lo', {
                url: '/16lo',
                views   : {
                    'traditional-content@app.traditional': {
                        templateUrl: 'app/main/traditional/southern/4d/16lo/16lo.html',
                        controller : 'bonD16LoCtrl as vm'
                    }
                },
                bodyClass: 'traditional'
            })
            .state('app.traditional.southern.parlay', {
                url      : '/parlay',
                abstract: true
            })
            .state('app.traditional.southern.parlay.pair-2', {
                url: '/pair-2',
                views   : {
                    'traditional-content@app.traditional': {
                        templateUrl: 'app/main/traditional/southern/parlay/pair-2.html',
                        controller : 'southParlayCtrl as vm'
                    }
                },
                bodyClass: 'traditional'
            })
            .state('app.traditional.southern.parlay.pair-3', {
                url: '/pair-3',
                views   : {
                    'traditional-content@app.traditional': {
                        templateUrl: 'app/main/traditional/southern/parlay/pair-3.html',
                        controller : 'southParlayCtrl as vm'
                    }
                },
                bodyClass: 'traditional'
            })
            .state('app.traditional.southern.parlay.pair-4', {
                url: '/pair-4',
                views   : {
                    'traditional-content@app.traditional': {
                        templateUrl: 'app/main/traditional/southern/parlay/pair-4.html',
                        controller : 'southParlayCtrl as vm'
                    }
                },
                bodyClass: 'traditional'
            })
            .state('app.traditional.southern.7lo', {
                url: '/7lo',
                views   : {
                    'traditional-content@app.traditional': {
                        templateUrl: 'app/main/traditional/southern/7lo/7lo.html',
                        controller : 'lo7Controller as vm'
                    }
                },
                bodyClass: 'traditional'
            })
            .state('app.traditional.southern.live', {
                url: '/live',
                views   : {
                    'traditional-content@app.traditional': {
                        templateUrl: 'app/main/traditional/southern/live/live.html',
                        controller : 'liveSouthernCtrl as vm'
                    }
                },
                resolve: {
                    betId: function () {
                        return 27
                    },
                    collections: function (msApi) {
                        return msApi.resolve('number.collection@get');
                    },
                    select: function (msApi) {
                        return msApi.resolve('number.select@get');
                    }
                },
                bodyClass: 'traditional'
            })
            .state('app.traditional.18ab', {
                url: '/18ab',
                views   : {
                    'traditional-content@app.traditional': {
                        templateUrl: 'app/main/traditional/southern-parlay/southern-parlay.html',
                        controller : 'southABParlayCtrl as vm'
                    }
                },
                resolve  : {
                    collections: function (msApi) {
                        return msApi.resolve('number.collection@get');
                    },
                    select: function (msApi) {
                        return msApi.resolve('number.select@get');
                    }
                },
                bodyClass: 'traditional'
            })
            .state('app.traditional.manual', {
                url: '/manual',
                views   : {
                    'traditional-content@app.traditional': {
                        templateUrl: 'app/main/traditional/manual/manual.html',
                        controller : 'manualCtrl as vm'
                    }
                },
                resolve: {
                    aBetTypes: function (msApi){
                        return msApi.resolve('aBetTypes@get');
                    }
                },
                bodyClass: 'traditional'
            });


        msApiProvider.register('number.select', ['app/data/select.json']);
        msApiProvider.register('number.collection', ['app/data/collection.json']);
        msApiProvider.register('number.rowBet', ['app/data/keohang.json']);
        msApiProvider.register('aBetTypes', ['app/data/betTypes.json']);
    }
})();
(function (){
    'use strict';

    angular
        .module('app.traditional')
        .controller('d4duoiCtrl', d4duoiCtrl);

    function d4duoiCtrl($rootScope, $scope, $mdMedia, $mdSidenav, $timeout, $state, $interval, $document, msUtils, network, betId){
        let vm = this;

        vm.updatePrice = updatePrice;
        vm.createPopover = createPopover;
        vm.changeLabel = changeLabel;
        vm.init = init;
        vm.selectNumber = selectNumber;
        vm.groupNumbers = groupNumbers;
        vm.resetBetting = resetBetting;
        vm.submitBetting = submitBetting;
        vm.totalMoney = totalMoney;
        vm.ignorePrice = true;
        vm.basePrice = 0;
        vm.betID = betId;
        $scope.$mdMedia = $mdMedia;
        vm.createPopover();
        vm.selectedCheckbox = [];
        $timeout(function () {
            vm.changeLabel();
            vm.init();
        }, 300);

        $scope.$on('$destroy', function() {
            $rootScope.location = undefined;
        });
        $rootScope.location = {game: 1, bet: betId};

        $document.bind('keydown keypress', function (e) {
            if(e.which === 27) {
                vm.resetBetting();
                e.preventDefault()
            }
        });

        if ($rootScope.myParameters !== undefined){
            vm.basePrice = $rootScope.myParameters.filter(function (pr) {
                return pr.GameType === 1 && pr.BetType === betId
            })[0].Price;
        }

        function init() {
            if ($rootScope.isAuthenticated){
                if ($rootScope.myParameters !== undefined){
                    let myParamValues = $rootScope.myParameters.filter(function(item) { return item.GameType === 1 && item.BetType === betId })[0];
                    vm.purchaseLimit = myParamValues.MaxPointPerNumber;
                    vm.payouts = myParamValues.Payouts / 1000;
                }else{
                    $timeout(function () {
                        vm.init()
                    }, 1000)
                }
            }
        }

        function changeLabel(cond) {
            vm.cond4d = cond !== undefined ? cond : undefined;
            vm.selectedCheckbox = [];
            vm.numbers = [];
            for (let i = 0; i < 10000; i++) {
                if (i < 10){i = '000' + i}else if(i < 100){i = '00' + i}else if(i < 1000){i = '0' + i}
                let number = {
                    number: i.toString(),
                    selected: false,
                    price: vm.basePrice,
                    disabled: false
                }
                if (cond === undefined){
                    vm.numbers.push(number);
                }else{
                    if (i.toString().match(cond.id)){
                        vm.numbers.push(number);
                    }
                }
            }
            vm.numbers = vm.numbers.slice(0, 100);
            if (cond !== undefined){
                $timeout(function () {
                    if(vm.odds !== undefined){vm.updatePrice()}
                }, 200)
            }
        }

        $scope.$on('TradOdds::done', function (){
            vm.updatePrice();
        })

        function updatePrice() {
            if (vm.numbers === undefined){
                $timeout(function () {
                    vm.updatePrice();
                }, 100)
                return;
            }
            vm.odds = $rootScope.TradOdds.filter(function (odd) {
                return odd.GameType === 1 && msUtils.exists(odd.BetType, [betId]) && odd.Term === ($rootScope.isAuthenticated ? $rootScope.termName : 'Public')
            })
            vm.basePrice = vm.odds[0].Price;
            angular.forEach(vm.numbers, function (num) {
                vm.bPrice = angular.copy(num.price);
                let exNum = $.grep(vm.odds[0].Numbers, function (f) {
                    return f.Number === num.number
                });
                num.price = vm.basePrice;
                if (exNum.length){
                    num.disabled = exNum[0].Stop;
                    num.price = exNum[0].ExtraPrice !== undefined ? vm.basePrice + exNum[0].ExtraPrice : vm.basePrice
                }
                num.priceChanged = num.price !== vm.bPrice && vm.bPrice !== 0;
            });
            $timeout(function () {
                angular.forEach(vm.numbers, function (n) {
                    n.priceChanged = false;
                })
            }, 3000)
        }

        function createPopover() {
            vm.popooxx = [];
            vm.popoxxo = [];
            vm.popoxox = [];
            vm.popxoxo = [];
            vm.popxoox = [];
            vm.popxxoo = [];
            for (let i = 0; i < 100; i++){
                i = i < 10 ? '0' + i : i;
                i = i.toString();
                let j = i.split('');

                vm.popooxx.push({id: '^' + i + '([0-9]+)$', name: i + 'XX'});
                vm.popoxxo.push({id: '^' + j[0] + '([0-9]+)+' + j[1] + '$', name: i.split('').join('XX')});
                vm.popoxox.push({id: '^' + j[0] + '([0-9]+)+' + j[1] + '([0-9]+)$', name: i.split('').join('X') + 'X'});
                vm.popxoxo.push({id: '^([0-9]+)' + j[0] + '([0-9]+)' + j[1] +'$', name: 'X' + i.split('').join('X')});
                vm.popxoox.push({id: '^([0-9]+)' + i + '([0-9]+)$', name: 'X' + i + 'X'});
                vm.popxxoo.push({id: '^([0-9]+)' + i + '$', name: 'XX' + i})
            }
        }

        function selectNumber(n) {
            angular.forEach(vm.numbers, function (number) {
                if (number.number === n.number){
                    number.selected = !number.selected;
                }
            });
        }

        vm.exists = function (item) {
            return vm.selectedCheckbox.indexOf(item) > -1;
        };

        function groupNumbers(id){
            let idx = vm.selectedCheckbox.indexOf(id);
            if (idx > -1) {
                vm.selectedCheckbox.splice(idx, 1);
            }else {
                vm.selectedCheckbox.push(id);
            }
            vm.checked = idx === -1;

            angular.forEach(vm.numbers, function (number, index) {
                if (id < 10){
                    if (Math.floor(index/10) === id){
                        number.selected = vm.checked;
                    }
                }else{
                    if (index%10 === id%10){
                        number.selected = vm.checked;
                    }
                }
            });
        }

        function resetBetting(){
            angular.forEach(vm.numbers, function (number) {
                number.selected = false;
                number.point = 0;
            });
            vm.selectedCheckbox = [];
            vm.inputPoint = 0;
        }

        function totalMoney() {
            vm.sumPoint = 0;
            vm.sumMoney = 0;
            let betTimes = betId === 14 ? 20 : 1;
            vm.inputPoint = isNaN(vm.inputPoint) ? 0 : vm.inputPoint;
            angular.forEach(vm.numbers, function (num) {
                if (num.selected && !num.disabled){
                    vm.sumPoint += vm.inputPoint;
                    vm.sumMoney += num.price * vm.inputPoint * betTimes
                }
            });
            return vm.sumMoney
        }

        function submitBetting() {
            let ns = [];
            let betObj = {
                Term: $rootScope.termName,
                IgnorePrice: vm.ignorePrice,
                Tickets: [{
                    GameType: 1,
                    BetType: betId,
                    Items: [],
                    Additional: {
                        Row: 0,
                        Alias: betId === 13 ? 524288 : 2097152,
                        Reverse: false
                    }
                }]
            };
            vm.numbers.map(function (number){
                if (number.selected && !number.disabled){
                    let Number = {};
                    Number.Numbers = [number.number];
                    Number.Price = number.price;
                    Number.Point = vm.inputPoint;
                    betObj.Tickets[0].Items.push(Number);

                    ns.push(number.number)
                }
            })

            let eventData = {
                betObj: betObj,
                sumObj: {
                    numbers: ns,
                    point: vm.sumPoint,
                    money: vm.sumMoney
                }
            }
            $rootScope.$broadcast('EventBetting', eventData);
        }

        $rootScope.$on('ResetBetting', function (){
            vm.resetBetting();
        })

        $rootScope.$broadcast('TradOdds::get', {GameTypes: [1], BetTypes: [betId]})
    }
})();
(function (){
    'use strict';

    angular
        .module('app.traditional')
        .controller('dauDuoi3DCtrl', dauDuoi3DCtrl);

    function dauDuoi3DCtrl($rootScope, $scope, $mdMedia, $mdSidenav, $timeout, $state, $interval, $document, msUtils, network, betId){
        let vm = this;
        vm.init = init;
        vm.changeLabel = changeLabel;
        vm.updatePrice = updatePrice;
        vm.selectNumber = selectNumber;
        vm.groupNumbers = groupNumbers;
        vm.resetBetting = resetBetting;
        vm.submitBetting = submitBetting;
        vm.totalMoney = totalMoney;
        vm.aBetID = aBetID;
        vm.ignorePrice = true;

        vm.betID = betId;
        vm.pointDau = 0;
        vm.pointDuoi = 0;
        vm.basePrice = 0;
        $scope.$mdMedia = $mdMedia;
        $document.bind('keydown keypress', function (e) {
            if(e.which === 27) {
                vm.resetBetting();
                e.preventDefault()
            }
        });

        vm.changeLabel(0);

        $scope.$on('$destroy', function() {
            $rootScope.location = undefined;
        });
        $rootScope.location = {game: 1, bet: betId};

        $timeout(function () {
            vm.init();
        }, 300);

        if ($rootScope.myParameters !== undefined){
            vm.basePrice = $rootScope.myParameters.filter(function (pr) {
                return pr.GameType === 1 && pr.BetType === vm.betID
            })[0].Price;
        }

        vm.numbers = [];
        for (let i = 0; i < 1000; i++){
            if (i < 10){i = '00' + i}else if(i < 100){i = '0' + i}

            let number = {
                number: i.toString(),
                selected: false,
                price: {10: vm.basePrice,11: vm.basePrice},
                priceChanged: {10: false,11: false},
                disabled: {10: false,11: false}
            };
            if (Math.floor(i/100) === 0){
                vm.numbers.push(number)
            }
        }

        function init() {
            if ($rootScope.isAuthenticated){
                if ($rootScope.myParameters !== undefined){
                    let myParamValues = $rootScope.myParameters.filter(function(item) { return item.GameType === 1 && item.BetType === betId })[0];
                    vm.purchaseLimit = myParamValues.MaxPointPerNumber;
                    vm.payouts = myParamValues.Payouts / 1000;
                }else{
                    $timeout(function () {
                        vm.init()
                    }, 1000)
                }
            }
        }

        function changeLabel(value) {
            vm.label = value;
            vm.selectedCheckbox = [];
            vm.numbers = [];

            for (let i = 0; i < 1000; i++){
                if (i < 10){i = '00' + i}else if(i < 100){i = '0' + i}

                let number = {
                    number: i.toString(),
                    selected: false,
                    price: {10: 0,11: 0},
                    priceChanged: {10: false,11: false},
                    disabled: {10: false,11: false}
                };

                if (value < 10){
                    if (Math.floor(i/100) === value){
                        vm.numbers.push(number)
                    }
                }else{
                    if (Math.floor((i%100)/10) === value % 10){
                        vm.numbers.push(number)
                    }
                }
            }
            if (vm.odds !== undefined){vm.updatePrice()}
        }

        $scope.$on('TradOdds::done', function (){
            vm.updatePrice();
        })

        function updatePrice() {

            vm.odds = $rootScope.TradOdds.filter(function (odd) {
                return odd.GameType === 1 && msUtils.exists(odd.BetType, [10,11]) && odd.Term === ($rootScope.isAuthenticated ? $rootScope.termName : 'Public')
            })

            vm.basePrice = vm.odds.filter(function (item) {
                return item.BetType === betId
            })[0].Price;


            angular.forEach(vm.numbers, function (num) {
                angular.forEach(vm.odds, function (odd) {
                    num.price[odd.BetType] = num.price[odd.BetType] === 0 ? odd.Price : num.price[odd.BetType];
                    let bPrice = angular.copy(num.price[odd.BetType]);
                    angular.forEach(odd.Numbers, function (value) {
                        if (value.Number === num.number){
                            num.price[odd.BetType] = value.ExtraPrice !== undefined ? vm.basePrice + value.ExtraPrice : num.price[odd.BetType];
                            num.disabled[odd.BetType] = value.Stop;
                        }
                    });
                    num.priceChanged[odd.BetType] = num.price[odd.BetType] !== bPrice;
                })
            });

            $timeout(function () {
                angular.forEach(vm.numbers, function (n) {
                    n.priceChanged[vm.betID] = false;
                })
            }, 3000)
        }

        function selectNumber(n) {
            angular.forEach(vm.numbers, function (number) {
                if (number.number === n.number){
                    number.selected = !number.selected;
                }
            });
        }

        vm.exists = function (item) {
            return vm.selectedCheckbox.indexOf(item) > -1;
        };

        function groupNumbers(id){
            let idx = vm.selectedCheckbox.indexOf(id);
            if (idx > -1) {
                vm.selectedCheckbox.splice(idx, 1);
            }else {
                vm.selectedCheckbox.push(id);
            }
            vm.checked = idx === -1;

            angular.forEach(vm.numbers, function (number, index) {
                if (!number.disabled[betId]){
                    if (id < 10){
                        if (Math.floor(index/10) === id){
                            number.selected = vm.checked;
                        }
                    }else{
                        if (index%10 === id%10){
                            number.selected = vm.checked;
                        }
                    }
                }
            })
        }

        function resetBetting(){
            angular.forEach(vm.numbers, function (number) {
                number.selected = false;
                number.point = 0;
            });
            vm.selectedCheckbox = [];
            vm.inputPointDau = vm.inputPointDuoi = vm.inputPointDd = 0;
        }

        function aBetID() {
            vm.inputPointDau = isNaN(vm.inputPointDau) ? 0 : vm.inputPointDau;
            vm.inputPointDuoi = isNaN(vm.inputPointDuoi) ? 0 : vm.inputPointDuoi;
            vm.inputPointDd = isNaN(vm.inputPointDd) ? 0 : vm.inputPointDd;
            vm.pointDau = vm.inputPointDau + vm.inputPointDd;
            vm.pointDuoi = vm.inputPointDuoi + vm.inputPointDd;


            let aID = [];
            if (vm.pointDau !== 0){aID.push({id: 10, point: vm.pointDau})}
            if (vm.pointDuoi !== 0){aID.push({id: 11, point: vm.pointDuoi})}
            return aID
        }

        function totalMoney() {
            vm.sumPoint = 0;
            vm.sumMoney = 0;

            angular.forEach(vm.aBetID(), function (betid) {
                let betTimes = betid.id === 10 ? 3 : 1;
                angular.forEach(vm.numbers, function (num) {
                    if (num.selected && !num.disabled[betid.id]){
                        vm.sumPoint += betid.point;
                        vm.sumMoney += num.price[betid.id] * betid.point * betTimes
                    }
                })
            });
            return vm.sumMoney
        }

        function submitBetting() {
            vm.betDatas = [];

            let betAlias = 0;
            betAlias +=  parseInt(vm.inputPointDau) === 0 ? 0 : 8192;
            betAlias +=  parseInt(vm.inputPointDuoi) === 0 ? 0 : 16384;
            betAlias +=  parseInt(vm.inputPointDd) === 0 ? 0 : 32768;

            let betObj = {}, ticketObj;
            betObj.Term = $rootScope.termName;
            betObj.IgnorePrice = vm.ignorePrice;
            betObj.Tickets = [];

            angular.forEach(vm.aBetID(), function (betid) {
                if (betid.point !== 0){
                    ticketObj = {
                        GameType: 1,
                        BetType: betid.id,
                        Additional: {
                            Row: 0,
                            Alias: betAlias,
                            Reverse: false
                        },
                        Items: []
                    };
                    angular.forEach(vm.numbers, function (number) {
                        if (number.selected && !number.disabled[betid.id] ){
                            let Number = {};
                            Number.Numbers = [number.number];
                            Number.Price = number.price[betid.id];
                            Number.Point = betid.point;
                            ticketObj.Items.push(Number)
                        }
                    });
                    betObj.Tickets.push(ticketObj)
                }
            });

            let ns = [];
            vm.numbers.map(function (number){
                if (number.selected){
                    ns.push(number.number)
                }
            })
            let eventData = {
                betObj: betObj,
                sumObj: {
                    numbers: ns,
                    point: vm.sumPoint,
                    money: vm.sumMoney
                }
            }
            $rootScope.$broadcast('EventBetting', eventData);
        }

        $rootScope.$on('ResetBetting', function (){
            vm.resetBetting();
        })

        $rootScope.$broadcast('TradOdds::get', {GameTypes: [1], BetTypes: [10,11]})
    }
})();
(function (){
    'use strict';

    angular
        .module('app.traditional')
        .controller('d3lo23Ctrl', d3lo23Ctrl);

    function d3lo23Ctrl($rootScope, $scope, $mdMedia, $mdSidenav, $timeout, $state, $interval, $document, msUtils, network, betId){
        let vm = this;
        vm.init = init;

        vm.changeLabel = changeLabel;
        vm.updatePrice = updatePrice;

        vm.selectNumber = selectNumber;
        vm.groupNumbers = groupNumbers;
        vm.resetBetting = resetBetting;
        vm.submitBetting = submitBetting;
        vm.totalMoney = totalMoney;
        vm.ignorePrice = true;
        vm.betID = betId;
        vm.basePrice = 0;
        $scope.$mdMedia = $mdMedia;

        $document.bind('keydown keypress', function (e) {
            if(e.which === 27) {
                vm.resetBetting();
                e.preventDefault()
            }
        });

        vm.changeLabel(0);

        $scope.$on('$destroy', function() {
            $rootScope.location = undefined;
        });
        $rootScope.location = {game: 1, bet: betId};

        $timeout(function () {
            vm.init();
        }, 300);

        if ($rootScope.myParameters !== undefined){
            vm.basePrice = $rootScope.myParameters.filter(function (pr) {
                return pr.GameType === 1 && pr.BetType === vm.betID
            })[0].Price;
        }
        vm.numbers = [];
        for (let i = 0; i < 1000; i++){
            if (i < 10){i = '00' + i}else if(i < 100){i = '0' + i}

            let number = {
                number: i.toString(),
                selected: false,
                price: vm.basePrice,
                disabled: false
            };
            if (Math.floor(i/100) === 0){
                vm.numbers.push(number)
            }
        }

        function init() {
            if ($rootScope.isAuthenticated){
                if ($rootScope.myParameters !== undefined){
                    let myParamValues = $rootScope.myParameters.filter(function(item) { return item.GameType === 1 && item.BetType === betId })[0];
                    vm.purchaseLimit = myParamValues.MaxPointPerNumber;
                    vm.payouts = myParamValues.Payouts / 1000;
                }else{
                    $timeout(function () {
                        vm.init()
                    }, 1000)
                }
            }
        }

        function changeLabel(value) {
            vm.label = value;
            vm.selectedCheckbox = [];
            vm.numbers = [];

            for (let i = 0; i < 1000; i++){
                if (i < 10){i = '00' + i}else if(i < 100){i = '0' + i}

                let number = {
                    number: i.toString(),
                    selected: false,
                    price: 0,
                    disabled: false
                };

                if (value < 10){
                    if (Math.floor(i/100) === value){
                        vm.numbers.push(number)
                    }
                }else{
                    if (Math.floor((i%100)/10) === value % 10){
                        vm.numbers.push(number)
                    }
                }
            }
            if (vm.odds !== undefined){vm.updatePrice()}
        }

        $scope.$on('TradOdds::done', function (){
            vm.updatePrice();
        })

        function updatePrice() {
            vm.odds = $rootScope.TradOdds.filter(function (odd) {
                return odd.GameType === 1 && msUtils.exists(odd.BetType, [betId]) && odd.Term === ($rootScope.isAuthenticated ? $rootScope.termName : 'Public')
            })
            vm.basePrice = vm.odds[0].Price;
            angular.forEach(vm.numbers, function (num) {
                vm.bPrice = angular.copy(num.price);
                let exNum = $.grep(vm.odds[0].Numbers, function (f) {
                    return f.Number === num.number
                });
                num.price = vm.basePrice;
                if (exNum.length){
                    num.disabled = exNum[0].Stop;
                    num.price = exNum[0].ExtraPrice !== undefined ? vm.basePrice + exNum[0].ExtraPrice : vm.basePrice
                }
                num.priceChanged = num.price !== vm.bPrice && vm.bPrice !== 0;
            });
            $timeout(function () {
                angular.forEach(vm.numbers, function (n) {
                    n.priceChanged = false;
                })
            }, 3000)
        }

        function selectNumber(n) {
            angular.forEach(vm.numbers, function (number) {
                if (number.number === n.number){
                    number.selected = !number.selected;
                }
            });
        }

        vm.exists = function (item) {
            return vm.selectedCheckbox.indexOf(item) > -1;
        };

        function groupNumbers(id){
            let idx = vm.selectedCheckbox.indexOf(id);
            if (idx > -1) {
                vm.selectedCheckbox.splice(idx, 1);
            }else {
                vm.selectedCheckbox.push(id);
            }
            vm.checked = idx === -1;

            angular.forEach(vm.numbers, function (number, index) {
                if (!number.disabled[betId]){
                    if (id < 10){
                        if (Math.floor(index/10) === id){
                            number.selected = vm.checked;
                        }
                    }else{
                        if (index%10 === id%10){
                            number.selected = vm.checked;
                        }
                    }
                }
            })
        }

        function resetBetting(){
            vm.numbers.map(function (n) {return n.selected = false})
            vm.selectedCheckbox = [];
            vm.inputPoint = 0;
        }

        function totalMoney() {
            vm.sumPoint = 0;
            vm.sumMoney = 0;
            vm.inputPoint = isNaN(vm.inputPoint) ? 0 : vm.inputPoint;
            angular.forEach(vm.numbers, function (num) {
                if (num.selected && !num.disabled){
                    vm.sumPoint += vm.inputPoint;
                    vm.sumMoney += num.price * vm.inputPoint * 23
                }
            });
            return vm.sumMoney
        }

        function submitBetting() {
            let ns = [];
            let betObj = {
                Term: $rootScope.termName,
                IgnorePrice: vm.ignorePrice,
                Tickets: [{
                    GameType: 1,
                    BetType: 12,
                    Items: [],
                    Additional: {
                        Row: 0,
                        Alias: 65536,
                        Reverse: false
                    }
                }]
            };
            vm.numbers.map(function (number){
                if (number.selected && !number.disabled){
                    let Number = {};
                    Number.Numbers = [number.number];
                    Number.Price = number.price;
                    Number.Point = vm.inputPoint;
                    betObj.Tickets[0].Items.push(Number);

                    ns.push(number.number)
                }
            })

            let eventData = {
                betObj: betObj,
                sumObj: {
                    numbers: ns,
                    point: vm.sumPoint,
                    money: vm.sumMoney
                }
            }
            $rootScope.$broadcast('EventBetting', eventData);
        }

        $rootScope.$on('ResetBetting', function (){
            vm.resetBetting();
        })

        $rootScope.$broadcast('TradOdds::get', {GameTypes: [1], BetTypes: [betId]})
    }
})();
(function (){
    'use strict';

    angular
        .module('app.traditional')
        .controller('lo27Ctrl', lo27Ctrl);

    function lo27Ctrl($rootScope, $scope, $mdSidenav, $timeout, $mdMedia, $state, $interval, $document, msUtils, network, select, betId){
        let vm = this;
        vm.init = init;

        vm.buildPriceTable = buildPriceTable;
        vm.selectNumber = selectNumber;
        vm.groupNumbers = groupNumbers;
        vm.inputKeyNumber = inputKeyNumber;
        vm.submitKeyNumber = submitKeyNumber;
        vm.resetBetting = resetBetting;
        vm.submitBetting = submitBetting;
        vm.totalMoney = totalMoney;
        vm.ignorePrice = true;

        vm.betID = betId;
        vm.basePrice = 0;
        vm.numbers = [];
        $scope.$mdMedia = $mdMedia;

        $scope.$on('$destroy', function() {
            $rootScope.location = undefined;
        });
        $rootScope.location = {game: 1, bet: betId};

        $document.bind('keydown keypress', function (e) {
            if(e.which === 27) {
                vm.resetBetting();
                e.preventDefault()
            }
        });

        if ($rootScope.myParameters !== undefined){
            angular.forEach($rootScope.myParameters, function(pr){
                if (pr.GameType === 1) {
                    if (pr.BetType === vm.betID) { vm.basePrice = pr.Price }
                }
            })
        }

        for (let i = 0; i<100; i++){
            i = i < 10 ? i = '0' + i : i;
            let number = {
                number: i.toString(),
                selected: false,
                price: vm.basePrice,
                disabled: false
            };
            vm.numbers.push(number)
        }

        $timeout(function () {
            vm.init();
        }, 300);

        function init(){
            if ($rootScope.isAuthenticated){
                if ($rootScope.myParameters !== undefined){
                    let myParamValues = $rootScope.myParameters.filter(function(item) { return item.GameType === 1 && item.BetType === betId })[0];
                    vm.purchaseLimit = myParamValues.MaxPointPerNumber;
                    vm.payouts = myParamValues.Payouts / 1000;
                }else{
                    $timeout(function () {
                        vm.init()
                    }, 1000)
                }
            }
        }

        $scope.$on('TradOdds::done', function (){
            vm.buildPriceTable();
        })

        function buildPriceTable(){
            vm.odds = $rootScope.TradOdds.filter(function (odd) {
                return odd.GameType === 1 && msUtils.exists(odd.BetType, [betId]) && odd.Term === ($rootScope.isAuthenticated ? $rootScope.termName : 'Public')
            })

            vm.basePrice = vm.odds[0].Price;
            angular.forEach(vm.numbers, function (num) {
                vm.bPrice = angular.copy(num.price);
                let exNum = $.grep(vm.odds[0].Numbers, function (f) {
                    return f.Number === num.number
                });
                num.price = vm.basePrice;
                if (exNum.length){
                    num.disabled = exNum[0].Stop;
                    num.price = exNum[0].ExtraPrice !== undefined ? vm.basePrice + exNum[0].ExtraPrice : vm.basePrice
                }
                num.priceChanged = num.price !== vm.bPrice && vm.bPrice !== 0;
            });
            $timeout(function () {
                angular.forEach(vm.numbers, function (n) {
                    n.priceChanged = false;
                })
            }, 3000)
        }

        function selectNumber(n) {
            angular.forEach(vm.numbers, function (number) {
                if (number.number === n.number && !number.disabled){
                    number.selected = !number.selected;
                }
            });

            vm.inputPoint = 0;
            if ($mdMedia('gt-sm')){
                $timeout(function () {
                    document.getElementById('bet-input').select();
                }, 10)
            }
        }

        vm.selectedCheckbox = [];

        vm.exists = function (item) {
            return vm.selectedCheckbox.indexOf(item) > -1;
        };

        function groupNumbers(id){
            let idx = vm.selectedCheckbox.indexOf(id);
            if (idx > -1) {
                vm.selectedCheckbox.splice(idx, 1);
            }else {
                vm.selectedCheckbox.push(id);
            }
            vm.checked = idx === -1;
            vm.arrayNumber = $.grep(select.list, function(b){
                return b.id === id;
            })[0].content;
            angular.forEach(vm.numbers, function (number) {
                if ($.grep(vm.arrayNumber, function(b){return b === number.number}).length && !number.disabled){
                    number.selected = vm.checked;
                }
            });

            vm.inputPoint = 0;
            if ($mdMedia('gt-sm')){
                $timeout(function () {
                    document.getElementById('bet-input').select();
                }, 10)
            }
        }

        function inputKeyNumber(e) {
            if (!vm.keynumber){return}
            if(e.which === 8){
                if (vm.keynumber[vm.keynumber.length - 1] !== ','){
                    vm.keynumber = vm.keynumber.substring(0, vm.keynumber.length - 1)
                }
            }
            let value = vm.keynumber.split(',');
            if (value[value.length-1].length > 1){
                vm.keynumber = vm.keynumber + ','
            }
        }

        function submitKeyNumber(click) {
            if (!vm.keynumber){return}
            vm.keynumber = vm.keynumber.replace(/\s+/g, '');
            if (vm.keynumber.length === 0){return}
            let arr = vm.keynumber.split(',');
            let arrInput = [];
            for (let i = 0; i < arr.length; i++){
                let number = arr[i].slice(-2).replace(/\s+/g, '');
                number = number.length < 2 && number.length !== 0 ? '0' + number : number;
                if (!isNaN(number) && angular.isNumber(+number)){
                    if (number.length !== 0)
                        arrInput.push(number)
                }
            }
            angular.forEach(vm.numbers, function (val) {
                if (arrInput.indexOf(val.number) !== -1 && !val.disabled){
                    val.selected = true
                }
            });
            vm.keynumber = '';
            vm.inputPoint = 0;
            if (!click){
                $timeout(function () {
                    document.getElementById('bet-input').select();
                }, 10)
            }else{
                $timeout(function () {
                    document.getElementsByClassName('input-numbers-array')[0].focus();
                }, 10)
            }
        }

        function resetBetting(){
            vm.numbers.map(function (n) {return n.selected = false})
            vm.selectedCheckbox = [];
            vm.inputPoint = 0;
            vm.keynumber = '';
        }

        function totalMoney() {
            vm.ns = [];
            vm.sumPoint = 0;
            vm.sumMoney = 0;
            angular.forEach(vm.numbers, function (num) {
                if (num.selected && !num.disabled){
                    vm.sumPoint += vm.inputPoint;
                    vm.sumMoney += num.price * vm.inputPoint * 27;
                    vm.ns.push(num.number)
                }
            });
            return vm.sumMoney;
        }

        function submitBetting() {
            let betObj = {
                Term: $rootScope.termName,
                IgnorePrice: vm.ignorePrice,
                Tickets: [{
                    GameType: 1,
                    BetType: 9,
                    Items: [],
                    Additional: {
                        Row: 0,
                        Alias: 1024,
                        Reverse: false
                    }
                }]
            };
            angular.forEach(vm.numbers, function (number) {
                if (number.selected && !number.disabled){
                    let Number = {};
                    Number.Numbers = [number.number];
                    Number.Price = number.price;
                    Number.Point = vm.inputPoint;
                    betObj.Tickets[0].Items.push(Number)
                }
            });
            let eventData = {
                betObj: betObj,
                sumObj: {
                    numbers: vm.ns,
                    point: vm.sumPoint,
                    money: vm.sumMoney
                }
            }
            $rootScope.$broadcast('EventBetting', eventData);
        }

        $rootScope.$on('ResetBetting', function (){
            vm.resetBetting();
        })

        $rootScope.$broadcast('TradOdds::get', {GameTypes: [1], BetTypes: [betId]})
    }
})();
(function (){
    'use strict';

    angular
        .module('app.traditional')
        .controller('rowBetCtrl', rowBetCtrl);

    function rowBetCtrl($rootScope, $scope, $timeout, $interval, $document, msApi, network, msUtils, Analytics){
        let vm = this;

        vm.declareRow = declareRow;
        vm.checkDisabledReset = checkDisabledReset;
        vm.totalMoney = totalMoney;

        vm.submitBetting = submitBetting;

        vm.ignorePrice = true;
        vm.rowsBets = [];
        vm.declareRow();
        vm.ready = false;

        $document.bind('keydown keypress', function (e) {
            if(e.which === 27) {
                vm.declareRow();
                e.preventDefault()
            }
        });

        $scope.$on('TradOdds::done', function (){
            vm.ready = true;
            vm.odds = $rootScope.TradOdds.filter(function (odd) {
                return odd.GameType === 1 && msUtils.exists(odd.BetType, [7,8,9]) && odd.Term === ($rootScope.isAuthenticated ? $rootScope.termName : 'Public')
            })
        })

        function declareRow(){
            msApi.request('number.rowBet@get', {},  function (response){
                vm.rowsBets = response.list;
                angular.forEach(vm.rowsBets, function (row) {
                    row.point = {7: 0, 8: 0, 78: 0, 9: 0};
                })
            });
        }

        function checkDisabledReset() {
            if (!vm.ready){return}
            let disabled = 0;
            angular.forEach(vm.rowsBets, function (row) {
                Object.keys(row.point).forEach(function(betid){
                    disabled += Math.abs(row.point[betid]) !== 0 ? 1 : 0
                })
            });
            return disabled === 0
        }

        function totalMoney() {
            vm.sumMoney = 0;
            if (!vm.ready){return}
            angular.forEach(vm.rowsBets, function (row){
                let oBet = {7: 0, 8: 0, 9: 0};
                oBet[7] = Math.abs(row.point[7]) + Math.abs(row.point[78]);
                oBet[8] = Math.abs(row.point[8]) + Math.abs(row.point[78]);
                oBet[9] = Math.abs(row.point[9]);
                let rowMoney = 0;
                Object.keys(oBet).forEach(function(betid){
                    if (Math.abs(oBet[betid]) !== 0){
                        let oddNumber = $.grep(vm.odds, function (on) {
                            return on.BetType === parseInt(betid)
                        })[0];
                        let betTimes = $.grep([{id: 7, betTimes : 4}, {id: 8, betTimes : 1}, {id: 9, betTimes : 27}], function (p) {
                            return p.id === parseInt(betid)
                        })[0].betTimes;
                        angular.forEach(row.numbers, function (num) {
                            let findNumber = $.grep(oddNumber.Numbers, function (onb) {
                                return onb.Number === num
                            });
                            if (findNumber.length === 0){
                                rowMoney += oddNumber.Price * oBet[betid] * betTimes
                            }else{
                                if (findNumber[0].Stop === undefined){
                                    rowMoney += oBet[betid] * (oddNumber.Price + findNumber[0].ExtraPrice) * betTimes
                                }
                            }
                        })
                    }
                });
                row.money = rowMoney;
                vm.sumMoney += rowMoney;
            });
            return vm.sumMoney
        }

        function submitBetting() {
            vm.sumPoint = 0;
            vm.ns = [];
            vm.betDatas = [];
            let oddPrice, betObj, TicketObj, findExtra, betTypeAlias;
            betObj = {
                Term: $rootScope.termName,
                IgnorePrice: vm.ignorePrice,
                Tickets: []
            };
            angular.forEach(vm.rowsBets, function (row, rowId) {
                if (row.money !== 0){
                    let oBet = {7: 0, 8: 0, 9: 0};
                    oBet[7] = Math.abs(row.point[7]) + Math.abs(row.point[78]);
                    oBet[8] = Math.abs(row.point[8]) + Math.abs(row.point[78]);
                    oBet[9] = Math.abs(row.point[9]);

                    betTypeAlias = 0;
                    betTypeAlias += Math.abs(row.point[7]) !== 0 ? 128 : 0;
                    betTypeAlias += Math.abs(row.point[8]) !== 0 ? 256 : 0;
                    betTypeAlias += Math.abs(row.point[78]) !== 0 ? 512 : 0;
                    betTypeAlias += Math.abs(row.point[9]) !== 0 ? 1024 : 0;

                    Object.keys(oBet).forEach(function (betid) {
                        if (Math.abs(oBet[betid]) !== 0){
                            oddPrice = $.grep(vm.odds, function (bet) {
                                return bet.BetType === parseInt(betid)
                            })[0];
                            TicketObj = {
                                GameType: 1,
                                BetType: parseInt(betid),
                                Additional: {
                                    Row: rowId,
                                    Alias: betTypeAlias,
                                    Reverse: false
                                },
                                Items: []
                            };
                            angular.forEach(row.numbers, function (num) {
                                let Number = {};
                                Number.Numbers = [num];
                                Number.Point = oBet[betid];
                                vm.sumPoint += oBet[betid];
                                vm.ns = vm.ns.concat([num])
                                findExtra = $.grep(oddPrice.Numbers, function (n) {
                                    return n.Number === num
                                });
                                if (findExtra.length === 0){
                                    Number.Price = oddPrice.Price;
                                    TicketObj.Items.push(Number);
                                }else {
                                    if (findExtra[0].ExtraPrice !== undefined){
                                        Number.Price = oddPrice.Price + findExtra[0].ExtraPrice
                                    }
                                    if (!findExtra[0].Stop){
                                        TicketObj.Items.push(Number);
                                    }
                                }
                            });
                            if (TicketObj.Items.length){
                                betObj.Tickets.push(TicketObj)
                            }
                        }
                    });

                }
            });
            vm.ns = vm.ns.filter(function (item, index, inputArray) {	//Lọc trùng
                return inputArray.indexOf(item) === index;
            });
            let eventData = {
                betObj: betObj,
                sumObj: {
                    numbers: vm.ns,
                    point: vm.sumPoint,
                    money: vm.sumMoney
                }
            }
            $rootScope.$broadcast('EventBetting', eventData);

            let User = $rootScope.isAuthenticated ? $rootScope.User.Username : 'notAuthenticated';
            Analytics.trackEvent('ROW', 'Betting', User);
        }

        $rootScope.$on('ResetBetting', function (){
            vm.declareRow();
        })

        $rootScope.$broadcast('TradOdds::get', {GameTypes: [1], BetTypes: [7,8,9]})

        $timeout(function () {
            let User = $rootScope.isAuthenticated ? $rootScope.User.Username : 'notAuthenticated';
            Analytics.trackEvent('ROW', 'ENTER', User);
        }, 500)
    }
})();
(function (){
    'use strict';

    angular
        .module('app.traditional')
        .controller('dauDuoiCtrl', dauDuoiCtrl);

    function dauDuoiCtrl($rootScope, $scope, $mdMedia, $mdSidenav, $timeout, $state, $interval, $document, msUtils, network, select, betId){
        let vm = this;
        vm.init = init;

        vm.buildPriceTable = buildPriceTable;
        vm.selectNumber = selectNumber;
        vm.groupNumbers = groupNumbers;
        vm.inputKeyNumber = inputKeyNumber;
        vm.submitKeyNumber = submitKeyNumber;
        vm.resetBetting = resetBetting;
        vm.submitBetting = submitBetting;
        vm.totalMoney = totalMoney;
        vm.aBetID = aBetID;
        vm.ignorePrice = true;
        vm.betID = betId;
        vm.pointDau = 0;
        vm.pointDuoi = 0;
        vm.numbers = [];
        $scope.$mdMedia = $mdMedia;

        $scope.$on('$destroy', function() {
            $rootScope.location = undefined;
        });
        $rootScope.location = {game: 1, bet: betId};

        $document.bind('keydown keypress', function (e) {
            if(e.which === 27) {
                vm.resetBetting();
                e.preventDefault()
            }
        });

        vm.base = {7: 0, 8: 0};
        if ($rootScope.myParameters !== undefined){
            angular.forEach($rootScope.myParameters, function(pr){
                if (pr.GameType === 1) {
                    if (pr.BetType === 7) { vm.base[7] = pr.Price }
                    if (pr.BetType === 8) { vm.base[8] = pr.Price }
                }
            })
        }

        for (let i = 0; i<100; i++){
            i = i < 10 ? i = '0' + i : i;
            let number = {
                number: i.toString(),
                selected: false,
                price: {7: vm.base[7], 8: vm.base[8]},
                disabled: {7: false, 8: false},
                priceChanged: {7: false, 8: false},
            };
            vm.numbers.push(number)
        }

        $timeout(function () {
            vm.init();
        }, 300);

        function init(){
            if ($rootScope.isAuthenticated){
                if ($rootScope.myParameters !== undefined){
                    let myParamValues = $rootScope.myParameters.filter(function(item) { return item.GameType === 1 && item.BetType === betId })[0];
                    vm.purchaseLimit = myParamValues.MaxPointPerNumber;
                    vm.payouts = myParamValues.Payouts / 1000;
                }else{
                    $timeout(function () {
                        vm.init()
                    }, 1000)
                }
            }
        }

        $scope.$on('TradOdds::done', function (){
            vm.buildPriceTable();
        })

        function buildPriceTable(){
            vm.odds = $rootScope.TradOdds.filter(function (odd) {
                return odd.GameType === 1 && msUtils.exists(odd.BetType, [7,8]) && odd.Term === ($rootScope.isAuthenticated ? $rootScope.termName : 'Public')
            })

            angular.forEach(vm.numbers, function (num) {
                angular.forEach(vm.odds, function (odd) {
                    vm.basePrice = odd.Price;
                    num.price[odd.BetType] = num.price[odd.BetType] === 0 ? odd.Price : num.price[odd.BetType];
                    let bPrice = angular.copy(num.price[odd.BetType]);
                    angular.forEach(odd.Numbers, function (value) {
                        if (value.Number === num.number){
                            num.price[odd.BetType] = value.ExtraPrice !== undefined ? odd.Price + value.ExtraPrice : num.price[odd.BetType];
                            num.disabled[odd.BetType] = value.Stop;
                        }
                    });
                    num.priceChanged[odd.BetType] = num.price[odd.BetType] !== bPrice;
                })
            });
            $timeout(function () {
                angular.forEach(vm.numbers, function (n) {
                    n.priceChanged[vm.betID] = false;
                })
            }, 3000)
        }

        function selectNumber(n) {
            angular.forEach(vm.numbers, function (number) {
                if (number.number === n.number && !number.disabled[betId]){
                    number.selected = !number.selected;
                }
            });
        }

        vm.selectedCheckbox = [];

        vm.exists = function (item) {
            return vm.selectedCheckbox.indexOf(item) > -1;
        };

        function groupNumbers(id){
            let idx = vm.selectedCheckbox.indexOf(id);
            if (idx > -1) {
                vm.selectedCheckbox.splice(idx, 1);
            }else {
                vm.selectedCheckbox.push(id);
            }
            vm.checked = idx === -1;
            vm.arrayNumber = $.grep(select.list, function(b){
                return b.id === id;
            })[0].content;
            angular.forEach(vm.numbers, function (number) {
                if ($.grep(vm.arrayNumber, function(b){return b === number.number}).length && !number.disabled[betId]){
                    number.selected = vm.checked;
                }
            });
        }

        function inputKeyNumber(e) {
            if (!vm.keynumber){return}
            if(e.which === 8){
                if (vm.keynumber[vm.keynumber.length - 1] !== ','){
                    vm.keynumber = vm.keynumber.substring(0, vm.keynumber.length - 1)
                }
            }
            let value = vm.keynumber.split(',');
            if (value[value.length-1].length > 1){
                vm.keynumber = vm.keynumber + ','
            }
        }

        function submitKeyNumber(click) {
            if (!vm.keynumber){return}
            vm.keynumber = vm.keynumber.replace(/\s+/g, '');
            if (vm.keynumber.length === 0){return}
            let arr = vm.keynumber.split(',');
            let arrInput = [];
            for (let i = 0; i < arr.length; i++){
                let number = arr[i].slice(-2).replace(/\s+/g, '');
                number = number.length < 2 && number.length !== 0 ? '0' + number : number;
                if (!isNaN(number) && angular.isNumber(+number)){
                    if (number.length !== 0)
                        arrInput.push(number)
                }
            }
            angular.forEach(vm.numbers, function (val) {
                if (arrInput.indexOf(val.number) !== -1 && !val.disabled[betId]){
                    val.selected = true
                }
            });
            vm.keynumber = '';
            if (!click){
                $timeout(function () {
                    document.getElementsByClassName('bet-input')[0].select();
                }, 10)
            }else{
                $timeout(function () {
                    document.getElementsByClassName('input-numbers-array')[0].focus();
                }, 10)
            }
        }

        function resetBetting(){
            angular.forEach(vm.numbers, function (number) {
                number.selected = false;
                number.point = 0;
            });
            vm.selectedCheckbox = [];
            vm.inputPointDau = vm.inputPointDuoi = vm.inputPointDd = 0;
            vm.keynumber = '';
        }

        function totalMoney() {
            if (!$rootScope.allowBetting){
                vm.resetBetting()
            }
            vm.sumPoint = 0;
            vm.sumMoney = 0;

            angular.forEach(vm.aBetID(), function (betid){
                let betTimes = betid.id === 7 ? 4 : 1;
                angular.forEach(vm.numbers, function (num) {
                    if (num.selected && !num.disabled[betid.id]){
                        vm.sumPoint += betid.point;
                        vm.sumMoney += num.price[betid.id] * betid.point * betTimes
                    }
                })
            });
            return vm.sumMoney;
        }

        function aBetID() {
            vm.inputPointDau = isNaN(vm.inputPointDau) ? 0 : vm.inputPointDau;
            vm.inputPointDuoi = isNaN(vm.inputPointDuoi) ? 0 : vm.inputPointDuoi;
            vm.inputPointDd = isNaN(vm.inputPointDd) ? 0 : vm.inputPointDd;
            vm.pointDau = Math.abs(vm.inputPointDau) + Math.abs(vm.inputPointDd);
            vm.pointDuoi = Math.abs(vm.inputPointDuoi) + Math.abs(vm.inputPointDd);
            return [{id: 7, point: vm.pointDau}, {id: 8, point: vm.pointDuoi}]
        }

        function submitBetting() {
            let betAlias = 0;
            betAlias +=  parseInt(vm.inputPointDau) === 0 ? 0 : 128;
            betAlias +=  parseInt(vm.inputPointDuoi) === 0 ? 0 : 256;
            betAlias +=  parseInt(vm.inputPointDd) === 0 ? 0 : 512;

            let betObj = {}, ticketObj;
            betObj.Term = $rootScope.termName;
            betObj.IgnorePrice = vm.ignorePrice;
            betObj.Tickets = [];

            angular.forEach(vm.aBetID(), function (betid) {
                if (betid.point !== 0){
                    ticketObj = {
                        GameType: 1,
                        BetType: betid.id,
                        Items: [],
                        Additional: {
                            Row: 0,
                            Alias: betAlias,
                            Reverse: false
                        }
                    };
                    vm.numbers.map(function (number){
                        if (number.selected && !number.disabled[betid.id] ){
                            let Number = {};
                            Number.Numbers = [number.number];
                            Number.Price = number.price[betid.id];
                            Number.Point = betid.point;
                            ticketObj.Items.push(Number)
                        }
                    })
                    betObj.Tickets.push(ticketObj)
                }
            });
            let ns = [];
            vm.numbers.map(function (number){
                if(number.selected){
                    ns.push(number.number)
                }
            })
            let eventData = {
                betObj: betObj,
                sumObj: {
                    numbers: ns,
                    point: vm.sumPoint,
                    money: vm.sumMoney
                }
            }
            $rootScope.$broadcast('EventBetting', eventData);
        }

        $rootScope.$on('ResetBetting', function (){
            vm.resetBetting();
        })

        $rootScope.$broadcast('TradOdds::get', {GameTypes: [1], BetTypes: [7,8]})
    }
})();
(function (){
    'use strict';

    angular
        .module('app.traditional')
        .controller('bonD16LoCtrl', bonD16LoCtrl);

    function bonD16LoCtrl($rootScope, $scope, $mdMedia, $mdSidenav, $timeout, $state, $interval, $document, msUtils, network, select){
        let vm = this;

        vm.updatePrice = updatePrice;
        vm.createPopover = createPopover;
        vm.changeLabel = changeLabel;
        vm.selectNumber = selectNumber;
        vm.groupNumbers = groupNumbers;
        vm.resetBetting = resetBetting;
        vm.submitBetting = submitBetting;
        vm.totalPoint = totalPoint;
        vm.totalMoney = totalMoney;
        vm.purchaseLimit = purchaseLimit;
        vm.payouts = payouts;
        vm.ignorePrice = true;
        vm.basePrice = 0;
        $scope.$mdMedia = $mdMedia;
        $rootScope.location = {game: 4, bet: 19};

        vm.createPopover();
        vm.selectedCheckbox = [];
        $timeout(function () {
            vm.changeLabel();
        }, 300);

        vm.base = {19: {2: 0, 3: 0, 4: 0}};
        if ($rootScope.myParameters !== undefined){
            angular.forEach($rootScope.myParameters, function(pr){
                if (pr.BetType === 19) {
                    if (pr.GameType === 2) { vm.base[19][2] = pr.Price }
                    if (pr.GameType === 3) { vm.base[19][3] = pr.Price }
                    if (pr.GameType === 4) { vm.base[19][4] = pr.Price }
                }
            })
        }

        //for fast render
        vm.numbers = [];
        for (let i = 0; i < 1000; i++){
            if (i < 10){i = '00' + i}else if(i < 100){i = '0' + i}
            let number = {
                number: i.toString(),
                selected: false,
                price: {
                    19: {2: vm.base[19][2], 3: vm.base[19][3], 4: vm.base[19][4]}
                },
                disabled: {
                    19: {2: false, 3: false, 4: false}
                }
            };
            if (Math.floor(i/100) === 0){
                vm.numbers.push(number)
            }
        }

        $document.bind('keydown keypress', function (e) {
            if(e.which === 27) {
                vm.resetBetting();
                e.preventDefault()
            }
        });

        function purchaseLimit(gameid, betid) {
            if ($rootScope.isAuthenticated){
                if ($rootScope.myParameters !== undefined){
                    return $rootScope.myParameters.filter(function(item) { return item.GameType === gameid && item.BetType === betid })[0].MaxPointPerNumber;
                }else{
                    $timeout(function () {
                        vm.purchaseLimit(gameid, betid)
                    }, 1000)
                }
            }
        }
        function payouts(gameid, betid) {
            if ($rootScope.isAuthenticated){
                if ($rootScope.myParameters !== undefined){
                    return $rootScope.myParameters.filter(function(item) { return item.GameType === gameid && item.BetType === betid })[0].Payouts / 1000;
                }else{
                    $timeout(function () {
                        vm.payouts(gameid, betid)
                    }, 1000)
                }
            }
        }
        function changeLabel(cond) {
            vm.cond4d = cond !== undefined ? cond : undefined;
            vm.selectedCheckbox = [];
            vm.numbers = [];

            for (let i = 0; i < 10000; i++) {
                if (i < 10){i = '000' + i}else if(i < 100){i = '00' + i}else if(i < 1000){i = '0' + i}
                let number = {
                    number: i.toString(),
                    selected: false,
                    price: {
                        19: {2: vm.base[19][2], 3: vm.base[19][3], 4: vm.base[19][4]}
                    },
                    disabled: {
                        19: {2: false, 3: false, 4: false}
                    }
                };

                if (cond === undefined){
                    vm.numbers.push(number);
                }else{
                    if (i.toString().match(cond.id)){
                        vm.numbers.push(number);
                    }
                }
            }
            vm.numbers = vm.numbers.slice(0, 100);
            if (cond !== undefined){
                vm.updatePrice()
            }
        }

        $scope.$on('TradOdds::done', function (){
            vm.updatePrice();
        })

        function updatePrice() {
            vm.odds = $rootScope.TradOdds.filter(function (odd) {
                return msUtils.exists(odd.GameType, [2,3,4]) && msUtils.exists(odd.BetType, [19]) && odd.Term === ($rootScope.isAuthenticated ? $rootScope.termName : 'Public')
            })
            vm.basePrice = vm.odds[0].Price;
            angular.forEach(vm.numbers, function (num) {
                angular.forEach(vm.odds, function (odd) {
                    let exNumber = $.grep(odd.Numbers, function(n){return n.Number === num.number});
                    let extPrice = exNumber.length && exNumber[0].ExtraPrice !== undefined ? odd.Price + exNumber[0].ExtraPrice : odd.Price;
                    if (exNumber.length && exNumber[0].Stop){
                        num.disabled[odd.BetType][odd.GameType] = exNumber[0].Stop;
                    }
                    num.basePrice = odd.Price;
                    if (num.price[odd.BetType][odd.GameType] !== extPrice && num.price[odd.BetType][odd.GameType] !== 0){
                        num.priceChanged = true
                    }
                    num.price[odd.BetType][odd.GameType] = extPrice;
                })
            });
            $timeout(function () {
                angular.forEach(vm.numbers, function (n) {
                    n.priceChanged = false;
                })
            }, 3000)
        }

        function createPopover() {
            vm.popooxx = [];
            vm.popoxxo = [];
            vm.popoxox = [];
            vm.popxoxo = [];
            vm.popxoox = [];
            vm.popxxoo = [];

            for (let i = 0; i < 100; i++){
                i = i < 10 ? '0' + i : i;
                i = i.toString();
                let j = i.split('');

                vm.popooxx.push({id: '^' + i + '([0-9]+)$', name: i + 'XX'});
                vm.popoxxo.push({id: '^' + j[0] + '([0-9]+)+' + j[1] + '$', name: i.split('').join('XX')});
                vm.popoxox.push({id: '^' + j[0] + '([0-9]+)+' + j[1] + '([0-9]+)$', name: i.split('').join('X') + 'X'});
                vm.popxoxo.push({id: '^([0-9]+)' + j[0] + '([0-9]+)' + j[1] +'$', name: 'X' + i.split('').join('X')});
                vm.popxoox.push({id: '^([0-9]+)' + i + '([0-9]+)$', name: 'X' + i + 'X'});
                vm.popxxoo.push({id: '^([0-9]+)' + i + '$', name: 'XX' + i})
            }
        }

        function selectNumber(n) {
            angular.forEach(vm.numbers, function (number) {
                if (number.number === n.number){
                    number.selected = !number.selected;
                }
            });
        }

        vm.exists = function (item) {
            return vm.selectedCheckbox.indexOf(item) > -1;
        };

        function groupNumbers(id){
            let idx = vm.selectedCheckbox.indexOf(id);
            if (idx > -1) {
                vm.selectedCheckbox.splice(idx, 1);
            }else {
                vm.selectedCheckbox.push(id);
            }
            vm.checked = idx === -1;

            angular.forEach(vm.numbers, function (number, index) {
                if (id < 10){
                    if (Math.floor(index/10) === id){
                        number.selected = vm.checked;
                    }
                }else{
                    if (index%10 === id%10){
                        number.selected = vm.checked;
                    }
                }
            });
        }

        function resetBetting(){
            angular.forEach(vm.numbers, function (number) {
                number.selected = false;
                number.point = 0;
            });
            vm.selectedCheckbox = [];
            vm.inputPoint = 0;
        }

        function totalPoint() {
            vm.sumPoint = 0;
            angular.forEach($rootScope.regironSelected, function (gameid) {
                angular.forEach(vm.numbers, function (num) {
                    if (num.selected && !num.disabled[19][gameid]){
                        vm.sumPoint += vm.inputPoint
                    }
                })
            });
            return vm.sumPoint
        }

        function totalMoney() {
            vm.sumMoney = 0;
            angular.forEach($rootScope.regironSelected, function (gameid) {
                angular.forEach(vm.numbers, function (num) {
                    if (num.selected && !num.disabled[19][gameid]){
                        vm.sumMoney += num.price[19][gameid] * vm.inputPoint * 16
                    }
                })
            });
            return vm.sumMoney
        }

        function submitBetting() {
            let betObj = {
                Term: $rootScope.termName,
                IgnorePrice: vm.ignorePrice,
                Tickets: []
            };

            angular.forEach($rootScope.regironSelected, function (gameid) {
                let TicketObj = {
                    GameType: gameid,
                    BetType: 19,
                    Items: [],
                    Additional: {
                        Row: 0,
                        Alias: 1048576,
                        Reverse: false
                    }
                };

                angular.forEach(vm.numbers, function (number) {
                    if (number.selected && !number.disabled[19][gameid] ){
                        let Number = {};
                        Number.Numbers = [number.number];
                        Number.Price = number.price[19][gameid];
                        Number.Point = vm.inputPoint;
                        TicketObj.Items.push(Number)
                    }
                });
                betObj.Tickets.push(TicketObj)
            });

            let ns = [];
            vm.numbers.map(function (number) {
                if (number.selected){
                    ns.push(number.number)
                }
            })
            let eventData = {
                betObj: betObj,
                sumObj: {
                    numbers: ns,
                    point: vm.sumPoint,
                    money: vm.sumMoney
                }
            }
            $rootScope.$broadcast('EventBetting', eventData);

        }

        $rootScope.$on('ResetBetting', function (){
            vm.resetBetting();
        })

        $rootScope.$broadcast('TradOdds::get', {GameTypes: [2,3,4], BetTypes: [19]})
    }
})();
(function (){
    'use strict';

    angular
        .module('app.traditional')
        .controller('bonDController', bonDController);

    function bonDController($rootScope, $scope, $mdMedia, $mdSidenav, $timeout, $state, $interval, $document, msUtils, network, select){
        let vm = this;

        vm.updatePrice = updatePrice;
        vm.createPopover = createPopover;
        vm.changeLabel = changeLabel;
        vm.selectNumber = selectNumber;
        vm.groupNumbers = groupNumbers;
        vm.resetBetting = resetBetting;
        vm.submitBetting = submitBetting;
        vm.totalPoint = totalPoint;
        vm.totalMoney = totalMoney;
        vm.purchaseLimit = purchaseLimit;
        vm.payouts = payouts;
        vm.ignorePrice = true;
        vm.basePrice = 0;

        $scope.$mdMedia = $mdMedia;
        $rootScope.location = {game: 4, bet: 13};
        vm.selectedCheckbox = [];
        vm.createPopover();

        $timeout(function () {
            vm.changeLabel();
        }, 300);

        vm.base = {13: {2: 0, 3: 0, 4: 0}};
        if ($rootScope.myParameters !== undefined){
            angular.forEach($rootScope.myParameters, function(pr){
                if (pr.BetType === 13) {
                    if (pr.GameType === 2) { vm.base[13][2] = pr.Price }
                    if (pr.GameType === 3) { vm.base[13][3] = pr.Price }
                    if (pr.GameType === 4) { vm.base[13][4] = pr.Price }
                }
            })
        }

        //for fast render
        vm.numbers = [];
        for (let i = 0; i < 1000; i++){
            if (i < 10){i = '00' + i}else if(i < 100){i = '0' + i}

            let number = {
                number: i.toString(),
                selected: false,
                price: {
                    13: {2: vm.base[13][2], 3: vm.base[13][3], 4: vm.base[13][4]}
                },
                disabled: {
                    13: {2: false, 3: false, 4: false}
                }
            };
            if (Math.floor(i/100) === 0){
                vm.numbers.push(number)
            }
        }

        $document.bind('keydown keypress', function (e) {
            if(e.which === 27) {
                vm.resetBetting();
                e.preventDefault()
            }
        });

        function purchaseLimit(gameid, betid) {
            if ($rootScope.isAuthenticated){
                if ($rootScope.myParameters !== undefined){
                    return $rootScope.myParameters.filter(function(item) { return item.GameType === gameid && item.BetType === betid })[0].MaxPointPerNumber;
                }else{
                    $timeout(function () {
                        vm.purchaseLimit(gameid, betid)
                    }, 1000)
                }
            }
        }

        function payouts(gameid, betid) {
            if ($rootScope.isAuthenticated){
                if ($rootScope.myParameters !== undefined){
                    return $rootScope.myParameters.filter(function(item) { return item.GameType === gameid && item.BetType === betid })[0].Payouts / 1000;
                }else{
                    $timeout(function () {
                        vm.payouts(gameid, betid)
                    }, 1000)
                }
            }
        }

        function changeLabel(cond) {
            vm.cond4d = cond !== undefined ? cond : undefined;
            vm.selectedCheckbox = [];
            vm.numbers = [];

            for (let i = 0; i < 10000; i++) {
                if (i < 10){i = '000' + i}else if(i < 100){i = '00' + i}else if(i < 1000){i = '0' + i}
                let number = {
                    number: i.toString(),
                    selected: false,
                    price: {
                        13: {2: vm.base[13][2], 3: vm.base[13][3], 4: vm.base[13][4]}
                    },
                    disabled: {
                        13: {2: false, 3: false, 4: false}
                    }
                };

                if (cond === undefined){
                    vm.numbers.push(number);
                }else{
                    if (i.toString().match(cond.id)){
                        vm.numbers.push(number);
                    }
                }
            }
            vm.numbers = vm.numbers.slice(0, 100);
            if (cond !== undefined){
                $timeout(function () {
                    vm.updatePrice()
                }, 200)
            }
        }

        $scope.$on('TradOdds::done', function (){
            vm.updatePrice();
        })

        function updatePrice() {
            vm.odds = $rootScope.TradOdds.filter(function (odd) {
                return msUtils.exists(odd.GameType, [2,3,4]) && msUtils.exists(odd.BetType, [13]) && odd.Term === ($rootScope.isAuthenticated ? $rootScope.termName : 'Public')
            })
            vm.basePrice = vm.odds[0].Price;
            angular.forEach(vm.numbers, function (num) {
                angular.forEach(vm.odds, function (odd) {
                    let exNumber = $.grep(odd.Numbers, function(n){return n.Number === num.number});
                    let extPrice = exNumber.length && exNumber[0].ExtraPrice !== undefined ? odd.Price + exNumber[0].ExtraPrice : odd.Price;
                    if (exNumber.length && exNumber[0].Stop){
                        num.disabled[odd.BetType][odd.GameType] = exNumber[0].Stop;
                    }
                    num.basePrice = odd.Price;
                    if (num.price[odd.BetType][odd.GameType] !== extPrice && num.price[odd.BetType][odd.GameType] !== 0){
                        num.priceChanged = true
                    }
                    num.price[odd.BetType][odd.GameType] = extPrice;
                })
            });
            $timeout(function () {
                angular.forEach(vm.numbers, function (n) {
                    n.priceChanged = false;
                })
            }, 3000)
        }

        function createPopover() {
            vm.popooxx = [];
            vm.popoxxo = [];
            vm.popoxox = [];
            vm.popxoxo = [];
            vm.popxoox = [];
            vm.popxxoo = [];

            for (let i = 0; i < 100; i++){
                i = i < 10 ? '0' + i : i;
                i = i.toString();
                let j = i.split('');

                vm.popooxx.push({id: '^' + i + '([0-9]+)$', name: i + 'XX'});
                vm.popoxxo.push({id: '^' + j[0] + '([0-9]+)+' + j[1] + '$', name: i.split('').join('XX')});
                vm.popoxox.push({id: '^' + j[0] + '([0-9]+)+' + j[1] + '([0-9]+)$', name: i.split('').join('X') + 'X'});
                vm.popxoxo.push({id: '^([0-9]+)' + j[0] + '([0-9]+)' + j[1] +'$', name: 'X' + i.split('').join('X')});
                vm.popxoox.push({id: '^([0-9]+)' + i + '([0-9]+)$', name: 'X' + i + 'X'});
                vm.popxxoo.push({id: '^([0-9]+)' + i + '$', name: 'XX' + i})
            }
        }

        function selectNumber(n) {
            angular.forEach(vm.numbers, function (number) {
                if (number.number === n.number){
                    number.selected = !number.selected;
                }
            });
        }

        vm.exists = function (item) {
            return vm.selectedCheckbox.indexOf(item) > -1;
        };

        function groupNumbers(id){
            let idx = vm.selectedCheckbox.indexOf(id);
            if (idx > -1) {
                vm.selectedCheckbox.splice(idx, 1);
            }else {
                vm.selectedCheckbox.push(id);
            }
            vm.checked = idx === -1;

            angular.forEach(vm.numbers, function (number, index) {
                if (id < 10){
                    if (Math.floor(index/10) === id){
                        number.selected = vm.checked;
                    }
                }else{
                    if (index%10 === id%10){
                        number.selected = vm.checked;
                    }
                }
            });
        }

        function resetBetting(){
            angular.forEach(vm.numbers, function (number) {
                number.selected = false;
                number.point = 0;
            });
            vm.selectedCheckbox = [];
            vm.inputPoint = 0;
        }

        function totalPoint() {
            vm.sumPoint = 0;
            angular.forEach($rootScope.regironSelected, function (gameid) {
                angular.forEach(vm.numbers, function (num) {
                    if (num.selected && !num.disabled[13][gameid]){
                        vm.sumPoint += vm.inputPoint
                    }
                })
            });
            return vm.sumPoint
        }

        function totalMoney() {
            vm.sumMoney = 0;
            angular.forEach($rootScope.regironSelected, function (gameid) {
                angular.forEach(vm.numbers, function (num) {
                    if (num.selected && !num.disabled[13][gameid]){
                        vm.sumMoney += num.price[13][gameid] * vm.inputPoint
                    }
                })
            });
            return vm.sumMoney
        }

        function submitBetting() {
            let betObj = {
                Term: $rootScope.termName,
                IgnorePrice: vm.ignorePrice,
                Tickets: []
            };

            angular.forEach($rootScope.regironSelected, function (gameid) {
                let TicketObj = {
                    GameType: gameid,
                    BetType: 13,
                    Items: [],
                    Additional: {
                        Row: 0,
                        Alias: 524288,
                        Reverse: false
                    }
                };

                angular.forEach(vm.numbers, function (number) {
                    if (number.selected && !number.disabled[13][gameid] ){
                        let Number = {};
                        Number.Numbers = [number.number];
                        Number.Price = number.price[13][gameid];
                        Number.Point = vm.inputPoint;
                        TicketObj.Items.push(Number)
                    }
                });
                betObj.Tickets.push(TicketObj)
            });

            let ns = [];
            vm.numbers.map(function (number) {
                if (number.selected){
                    ns.push(number.number)
                }
            })
            let eventData = {
                betObj: betObj,
                sumObj: {
                    numbers: ns,
                    point: vm.sumPoint,
                    money: vm.sumMoney
                }
            }
            $rootScope.$broadcast('EventBetting', eventData);

        }

        $rootScope.$on('ResetBetting', function (){
            vm.resetBetting();
        })

        $rootScope.$broadcast('TradOdds::get', {GameTypes: [2,3,4], BetTypes: [13]})
    }
})();
(function (){
    'use strict';

    angular
        .module('app.traditional')
        .controller('badDauCtrl', badDauCtrl);

    function badDauCtrl($rootScope, $scope, $mdMedia, $mdSidenav, $timeout, $state, $interval, $document, msUtils, network, select){
        let vm = this;

        vm.changeLabel = changeLabel;
        vm.buildPriceTable = buildPriceTable;
        vm.selectNumber = selectNumber;
        vm.groupNumbers = groupNumbers;
        vm.resetBetting = resetBetting;
        vm.submitBetting = submitBetting;
        vm.totalPoint = totalPoint;
        vm.totalMoney = totalMoney;
        vm.aBetID = aBetID;
        vm.purchaseLimit = purchaseLimit;
        vm.payouts = payouts;
        vm.ignorePrice = true;
        $scope.$mdMedia = $mdMedia;

        if ($state.current.url === '/dau'){
            vm.betID = 10
        }else {
            vm.betID = 11
        }

        $rootScope.location = {game: 4, bet: vm.betID};

        vm.pointDau = 0;
        vm.pointDuoi = 0;
        vm.basePrice = 0;
        vm.selectedCheckbox = [];
        $timeout(function () {
            vm.changeLabel(0);
        }, 300);

        $document.bind('keydown keypress', function (e) {
            if(e.which === 27) {
                vm.resetBetting();
                e.preventDefault()
            }
        });

        vm.base = {10: {2: 0, 3: 0, 4: 0}, 11: {2: 0, 3: 0, 4: 0}};
        if ($rootScope.myParameters !== undefined){
            angular.forEach($rootScope.myParameters, function(pr){
                if (pr.BetType === 10) {
                    if (pr.GameType === 2) { vm.base[10][2] = pr.Price }
                    if (pr.GameType === 3) { vm.base[10][3] = pr.Price }
                    if (pr.GameType === 4) { vm.base[10][4] = pr.Price }
                }
                if (pr.BetType === 11) {
                    if (pr.GameType === 2) { vm.base[11][2] = pr.Price }
                    if (pr.GameType === 3) { vm.base[11][3] = pr.Price }
                    if (pr.GameType === 4) { vm.base[11][4] = pr.Price }
                }
            })
        }

        //For fast render
        vm.numbers = [];
        for (let i = 0; i < 1000; i++){
            if (i < 10){i = '00' + i}else if(i < 100){i = '0' + i}
            let number = {
                number: i.toString(),
                selected: false,
                price: {
                    10: {2: vm.base[10][2], 3: vm.base[10][3], 4: vm.base[10][4]},
                    11: {2: vm.base[11][2], 3: vm.base[11][3], 4: vm.base[11][4]}
                },
                disabled: {
                    10: {2: false, 3: false, 4: false},
                    11: {2: false, 3: false, 4: false}
                }
            };
            if (Math.floor(i/100) === 0){
                vm.numbers.push(number)
            }
        }

        function purchaseLimit(gameid, betid) {
            if ($rootScope.isAuthenticated){
                if ($rootScope.myParameters !== undefined){
                    return $rootScope.myParameters.filter(function(item) { return item.GameType === gameid && item.BetType === betid })[0].MaxPointPerNumber;
                }else{
                    $timeout(function () {
                        vm.purchaseLimit(gameid, betid)
                    }, 1000)
                }
            }
        }

        function payouts(gameid, betid) {
            if ($rootScope.isAuthenticated){
                if ($rootScope.myParameters !== undefined){
                    return $rootScope.myParameters.filter(function(item) { return item.GameType === gameid && item.BetType === betid })[0].Payouts / 1000;
                }else{
                    $timeout(function () {
                        vm.payouts(gameid, betid)
                    }, 1000)
                }
            }
        }

        function changeLabel(value) {
            vm.label = value;
            vm.selectedCheckbox = [];
            vm.numbers = [];
            for (let i = 0; i < 1000; i++){
                if (i < 10){i = '00' + i}else if(i < 100){i = '0' + i}
                let number = {
                    number: i.toString(),
                    selected: false,
                    price: {
                        10: {2: vm.base[10][2], 3: vm.base[10][3], 4: vm.base[10][4]},
                        11: {2: vm.base[11][2], 3: vm.base[11][3], 4: vm.base[11][4]}
                    },
                    disabled: {
                        10: {2: false, 3: false, 4: false},
                        11: {2: false, 3: false, 4: false}
                    }
                };
                if (value < 10){
                    if (Math.floor(i/100) === value){
                        vm.numbers.push(number)
                    }
                }else{
                    if (Math.floor((i%100)/10) === value % 10){
                        vm.numbers.push(number)
                    }
                }
            }

            if (vm.odds !== undefined){
                vm.buildPriceTable();
            }
        }

        $scope.$on('TradOdds::done', function (){
            vm.buildPriceTable();
        })

        function buildPriceTable() {
            vm.odds = $rootScope.TradOdds.filter(function (odd) {
                return msUtils.exists(odd.GameType, [2,3,4]) && msUtils.exists(odd.BetType, [vm.betID]) && odd.Term === ($rootScope.isAuthenticated ? $rootScope.termName : 'Public')
            })
            vm.basePrice = vm.odds[0].Price;
            angular.forEach(vm.numbers, function (num) {
                angular.forEach(vm.odds, function (odd) {
                    let exNumber = $.grep(odd.Numbers, function(n){return n.Number === num.number});
                    let extPrice = exNumber.length && exNumber[0].ExtraPrice !== undefined ? odd.Price + exNumber[0].ExtraPrice : odd.Price;
                    if (exNumber.length && exNumber[0].Stop){
                        num.disabled[odd.BetType][odd.GameType] = exNumber[0].Stop;
                    }
                    num.basePrice = odd.Price;
                    if (odd.BetType === vm.betID && num.price[odd.BetType][odd.GameType] !== extPrice && num.price[odd.BetType][odd.GameType] !== 0){
                        num.priceChanged = true
                    }
                    num.price[odd.BetType][odd.GameType] = extPrice;
                })
            });
            $timeout(function () {
                angular.forEach(vm.numbers, function (n) {
                    n.priceChanged = false;
                })
            }, 3000)
        }

        function selectNumber(n) {
            angular.forEach(vm.numbers, function (number) {
                if (number.number === n.number){
                    number.selected = !number.selected;
                }
            });
        }

        vm.exists = function (item) {
            return vm.selectedCheckbox.indexOf(item) > -1;
        };

        function groupNumbers(id){
            let idx = vm.selectedCheckbox.indexOf(id);
            if (idx > -1) {
                vm.selectedCheckbox.splice(idx, 1);
            }else {
                vm.selectedCheckbox.push(id);
            }
            vm.checked = idx === -1;

            angular.forEach(vm.numbers, function (number, index) {
                if (id < 10){
                    if (Math.floor(index/10) === id){
                        number.selected = vm.checked;
                    }
                }else{
                    if (index%10 === id%10){
                        number.selected = vm.checked;
                    }
                }
            });
        }

        function resetBetting(){
            angular.forEach(vm.numbers, function (number) {
                number.selected = false;
                number.point = 0;
            });
            vm.selectedCheckbox = [];
            vm.inputPointDau = vm.inputPointDuoi = vm.inputPointDd = 0;
        }

        function aBetID() {
            vm.inputPointDau = isNaN(vm.inputPointDau) ? 0 : vm.inputPointDau;
            vm.inputPointDuoi = isNaN(vm.inputPointDuoi) ? 0 : vm.inputPointDuoi;
            vm.inputPointDd = isNaN(vm.inputPointDd) ? 0 : vm.inputPointDd;
            vm.pointDau = vm.inputPointDau + vm.inputPointDd;
            vm.pointDuoi = vm.inputPointDuoi + vm.inputPointDd;


            let aID = [];
            if (vm.pointDau !== 0){aID.push({betid: 10, point: vm.pointDau})}
            if (vm.pointDuoi !== 0){aID.push({betid: 11, point: vm.pointDuoi})}
            return aID
        }

        function totalPoint() {
            vm.sumPoint = 0;
            angular.forEach($rootScope.regironSelected, function (gameid) {
                angular.forEach(vm.aBetID(), function (betid) {
                    angular.forEach(vm.numbers, function (num) {
                        if (num.selected && !num.disabled[betid.betid][gameid]){
                            vm.sumPoint += betid.point
                        }
                    })
                })
            });
            return vm.sumPoint
        }

        function totalMoney() {
            vm.sumMoney = 0;
            angular.forEach($rootScope.regironSelected, function (gameid) {
                angular.forEach(vm.aBetID(), function (betid) {
                    angular.forEach(vm.numbers, function (num) {
                        if (num.selected && !num.disabled[betid.betid][gameid]){
                            vm.sumMoney += num.price[betid.betid][gameid] * betid.point
                        }
                    })
                })
            });
            return vm.sumMoney
        }

        function submitBetting() {
            let betAlias = 0;
            betAlias +=  parseInt(vm.inputPointDau) === 0 ? 0 : 8192;
            betAlias +=  parseInt(vm.inputPointDuoi) === 0 ? 0 : 16384;
            betAlias +=  parseInt(vm.inputPointDd) === 0 ? 0 : 32768;
            let betObj = {
                Term: $rootScope.termName,
                IgnorePrice: vm.ignorePrice,
                Tickets: []
            };

            angular.forEach($rootScope.regironSelected, function (gameid) {
                angular.forEach(vm.aBetID(), function (betid) {

                    let ticketObj = {
                        GameType: gameid,
                        BetType: betid.betid,
                        Additional: {Row: 0, Alias: betAlias, Reverse: false},
                        Items: []
                    };

                    angular.forEach(vm.numbers, function (number) {
                        if (number.selected && !number.disabled[betid.betid][gameid] ){
                            let Number = {};
                            Number.Numbers = [number.number];
                            Number.Price = number.price[betid.betid][gameid];
                            Number.Point = betid.betid === 10 ? vm.pointDau : vm.pointDuoi;
                            ticketObj.Items.push(Number)
                        }
                    });
                    betObj.Tickets.push(ticketObj)
                })
            });

            let ns = [];
            vm.numbers.map(function (number) {
                if (number.selected){
                    ns.push(number.number)
                }
            })
            let eventData = {
                betObj: betObj,
                sumObj: {
                    numbers: ns,
                    point: vm.sumPoint,
                    money: vm.sumMoney
                }
            }
            $rootScope.$broadcast('EventBetting', eventData);
        }

        $rootScope.$on('ResetBetting', function (){
            vm.resetBetting();
        })

        $rootScope.$broadcast('TradOdds::get', {GameTypes: [2,3,4], BetTypes: [vm.betID]})
    }
})();
(function (){
    'use strict';

    angular
        .module('app.traditional')
        .controller('d3lo7Ctrl', d3lo7Ctrl);

    function d3lo7Ctrl($rootScope, $scope, $mdMedia, $mdSidenav, $timeout, $state, $interval, $document, msUtils, network, select){
        let vm = this;

        vm.changeLabel = changeLabel;
        vm.updatePrice = updatePrice;
        vm.selectNumber = selectNumber;
        vm.groupNumbers = groupNumbers;
        vm.resetBetting = resetBetting;
        vm.submitBetting = submitBetting;
        vm.totalPoint = totalPoint;
        vm.totalMoney = totalMoney;
        vm.purchaseLimit = purchaseLimit;
        vm.payouts = payouts;
        vm.ignorePrice = true;
        vm.basePrice = 0;
        $scope.$mdMedia = $mdMedia;
        $rootScope.location = {game: 4, bet: 18};
        vm.selectedCheckbox = [];
        $timeout(function () {
            vm.changeLabel(0);
        }, 300);


        vm.base = {18: {2: 0, 3: 0, 4: 0}};
        if ($rootScope.myParameters !== undefined){
            angular.forEach($rootScope.myParameters, function(pr){
                if (pr.BetType === 18) {
                    if (pr.GameType === 2) { vm.base[18][2] = pr.Price }
                    if (pr.GameType === 3) { vm.base[18][3] = pr.Price }
                    if (pr.GameType === 4) { vm.base[18][4] = pr.Price }
                }
            })
        }

        //for fast render
        vm.numbers = [];
        for (let i = 0; i < 1000; i++){
            if (i < 10){i = '00' + i}else if(i < 100){i = '0' + i}

            let number = {
                number: i.toString(),
                selected: false,
                price: {
                    18: {2: vm.base[18][2], 3: vm.base[18][3], 4: vm.base[18][4]}
                },
                disabled: {
                    18: {2: false, 3: false, 4: false}
                }
            };
            if (Math.floor(i/100) === 0){
                vm.numbers.push(number)
            }
        }

        $document.bind('keydown keypress', function (e) {
            if(e.which === 27) {
                vm.resetBetting();
                e.preventDefault()
            }
        });

        function purchaseLimit(gameid, betid) {
            if ($rootScope.isAuthenticated){
                if ($rootScope.myParameters !== undefined){
                    return $rootScope.myParameters.filter(function(item) { return item.GameType === gameid && item.BetType === betid })[0].MaxPointPerNumber;
                }else{
                    $timeout(function () {
                        vm.purchaseLimit(gameid, betid)
                    }, 1000)
                }
            }

        }

        function payouts(gameid, betid) {
            if ($rootScope.isAuthenticated){
                if ($rootScope.myParameters !== undefined){
                    return $rootScope.myParameters.filter(function(item) { return item.GameType === gameid && item.BetType === betid })[0].Payouts / 1000;
                }else{
                    $timeout(function () {
                        vm.payouts(gameid, betid)
                    }, 1000)
                }
            }

        }

        function changeLabel(value) {
            vm.label = value;
            vm.selectedCheckbox = [];
            vm.numbers = [];
            for (let i = 0; i < 1000; i++){
                if (i < 10){i = '00' + i}else if(i < 100){i = '0' + i}

                let number = {
                    number: i.toString(),
                    selected: false,
                    price: {
                        18: {2: vm.base[18][2], 3: vm.base[18][3], 4: vm.base[18][4]}
                    },
                    disabled: {
                        18: {2: false, 3: false, 4: false}
                    }
                };

                if (value < 10){
                    if (Math.floor(i/100) === value){
                        vm.numbers.push(number)
                    }
                }else{
                    if (Math.floor((i%100)/10) === value % 10){
                        vm.numbers.push(number)
                    }
                }
            }
            if (vm.odds !== undefined){
                vm.updatePrice()
            }
        }

        $scope.$on('TradOdds::done', function (){
            vm.updatePrice();
        })

        function updatePrice() {
            vm.odds = $rootScope.TradOdds.filter(function (odd) {
                return msUtils.exists(odd.GameType, [2,3,4]) && msUtils.exists(odd.BetType, [18]) && odd.Term === ($rootScope.isAuthenticated ? $rootScope.termName : 'Public')
            })
            vm.basePrice = vm.odds[0].Price;
            angular.forEach(vm.numbers, function (num) {
                angular.forEach(vm.odds, function (odd) {
                    let exNumber = $.grep(odd.Numbers, function(n){return n.Number === num.number});
                    let extPrice = exNumber.length && exNumber[0].ExtraPrice !== undefined ? odd.Price + exNumber[0].ExtraPrice : odd.Price;
                    if (exNumber.length && exNumber[0].Stop){
                        num.disabled[odd.BetType][odd.GameType] = exNumber[0].Stop;
                    }
                    num.basePrice = odd.Price;
                    if (num.price[odd.BetType][odd.GameType] !== extPrice && num.price[odd.BetType][odd.GameType] !== 0){
                        num.priceChanged = true
                    }
                    num.price[odd.BetType][odd.GameType] = extPrice;
                })
            });
            $timeout(function () {
                angular.forEach(vm.numbers, function (n) {
                    n.priceChanged = false;
                })
            }, 3000)
        }

        function selectNumber(n) {
            angular.forEach(vm.numbers, function (number) {
                if (number.number === n.number){
                    number.selected = !number.selected;
                }
            });
        }

        vm.exists = function (item) {
            return vm.selectedCheckbox.indexOf(item) > -1;
        };

        function groupNumbers(id){
            let idx = vm.selectedCheckbox.indexOf(id);
            if (idx > -1) {
                vm.selectedCheckbox.splice(idx, 1);
            }else {
                vm.selectedCheckbox.push(id);
            }
            vm.checked = idx === -1;

            angular.forEach(vm.numbers, function (number, index) {
                if (id < 10){
                    if (Math.floor(index/10) === id){
                        number.selected = vm.checked;
                    }
                }else{
                    if (index%10 === id%10){
                        number.selected = vm.checked;
                    }
                }
            });
        }

        function resetBetting(){
            angular.forEach(vm.numbers, function (number) {
                number.selected = false;
                number.point = 0;
            });
            vm.selectedCheckbox = [];
            vm.inputPoint = 0;
        }

        function totalPoint() {
            vm.sumPoint = 0;
            angular.forEach($rootScope.regironSelected, function (gameid) {
                angular.forEach(vm.numbers, function (num) {
                    if (num.selected && !num.disabled[18][gameid]){
                        vm.sumPoint += vm.inputPoint
                    }
                })
            });
            return vm.sumPoint
        }

        function totalMoney() {
            vm.sumMoney = 0;
            angular.forEach($rootScope.regironSelected, function (gameid) {
                angular.forEach(vm.numbers, function (num) {
                    if (num.selected && !num.disabled[18][gameid]){
                        vm.sumMoney += num.price[18][gameid] * vm.inputPoint * 7
                    }
                })
            });
            return vm.sumMoney
        }

        function submitBetting() {
            let betObj = {
                Term: $rootScope.termName,
                IgnorePrice: vm.ignorePrice,
                Tickets: []
            };

            angular.forEach($rootScope.regironSelected, function (gameid) {
                let TicketObj = {
                    GameType: gameid,
                    BetType: 18,
                    Items: [],
                    Additional: {
                        Row: 0,
                        Alias: 131072,
                        Reverse: false
                    }
                };

                angular.forEach(vm.numbers, function (number) {
                    if (number.selected && !number.disabled[18][gameid] ){
                        let Number = {};
                        Number.Numbers = [number.number];
                        Number.Price = number.price[18][gameid];
                        Number.Point = vm.inputPoint;
                        TicketObj.Items.push(Number)
                    }
                });
                betObj.Tickets.push(TicketObj)
            });

            let ns = [];
            vm.numbers.map(function (number) {
                if (number.selected){
                    ns.push(number.number)
                }
            })
            let eventData = {
                betObj: betObj,
                sumObj: {
                    numbers: ns,
                    point: vm.sumPoint,
                    money: vm.sumMoney
                }
            }
            $rootScope.$broadcast('EventBetting', eventData);

        }

        $rootScope.$on('ResetBetting', function (){
            vm.resetBetting();
        })

        $rootScope.$broadcast('TradOdds::get', {GameTypes: [2,3,4], BetTypes: [18]})
    }
})();
(function (){
    'use strict';

    angular
        .module('app.traditional')
        .controller('d3lo17Ctrl', d3lo17Ctrl);

    function d3lo17Ctrl($rootScope, $scope, $mdMedia, $mdSidenav, $timeout, $state, $interval, $document, msUtils, network, select){
        let vm = this;

        vm.changeLabel = changeLabel;
        vm.updatePrice = updatePrice;

        vm.selectNumber = selectNumber;
        vm.groupNumbers = groupNumbers;
        vm.resetBetting = resetBetting;
        vm.submitBetting = submitBetting;
        vm.totalPoint = totalPoint;
        vm.totalMoney = totalMoney;
        vm.purchaseLimit = purchaseLimit;
        vm.payouts = payouts;
        vm.ignorePrice = true;
        vm.basePrice = 0;
        $scope.$mdMedia = $mdMedia;
        $rootScope.location = {game: 4, bet: 17};
        vm.selectedCheckbox = [];
        $timeout(function () {
            vm.changeLabel(0);
        }, 300);


        vm.base = {17: {2: 0, 3: 0, 4: 0}};
        if ($rootScope.myParameters !== undefined){
            angular.forEach($rootScope.myParameters, function(pr){
                if (pr.BetType === 17) {
                    if (pr.GameType === 2) { vm.base[17][2] = pr.Price }
                    if (pr.GameType === 3) { vm.base[17][3] = pr.Price }
                    if (pr.GameType === 4) { vm.base[17][4] = pr.Price }
                }
            })
        }

        //for fast render
        vm.numbers = [];
        for (let i = 0; i < 1000; i++){
            if (i < 10){i = '00' + i}else if(i < 100){i = '0' + i}

            let number = {
                number: i.toString(),
                selected: false,
                price: {
                    17: {2: vm.base[17][2], 3: vm.base[17][3], 4: vm.base[17][4]}
                },
                disabled: {
                    17: {2: false, 3: false, 4: false}
                }
            };
            if (Math.floor(i/100) === 0){
                vm.numbers.push(number)
            }
        }

        $document.bind('keydown keypress', function (e) {
            if(e.which === 27) {
                vm.resetBetting();
                e.preventDefault()
            }
        });

        function purchaseLimit(gameid, betid) {
            if ($rootScope.isAuthenticated){
                if ($rootScope.myParameters !== undefined){
                    return $rootScope.myParameters.filter(function(item) { return item.GameType === gameid && item.BetType === betid })[0].MaxPointPerNumber;
                }else{
                    $timeout(function () {
                        vm.purchaseLimit(gameid, betid)
                    }, 1000)
                }
            }
        }
        function payouts(gameid, betid) {
            if ($rootScope.isAuthenticated){
                if ($rootScope.myParameters !== undefined){
                    return $rootScope.myParameters.filter(function(item) { return item.GameType === gameid && item.BetType === betid })[0].Payouts / 1000;
                }else{
                    $timeout(function () {
                        vm.payouts(gameid, betid)
                    }, 1000)
                }
            }
        }

        function changeLabel(value) {
            vm.label = value;
            vm.selectedCheckbox = [];
            vm.numbers = [];

            for (let i = 0; i < 1000; i++){
                if (i < 10){i = '00' + i}else if(i < 100){i = '0' + i}

                let number = {
                    number: i.toString(),
                    selected: false,
                    price: {
                        17: {2: vm.base[17][2], 3: vm.base[17][3], 4: vm.base[17][4]}
                    },
                    disabled: {
                        17: {2: false, 3: false, 4: false}
                    }
                };

                if (value < 10){
                    if (Math.floor(i/100) === value){
                        vm.numbers.push(number)
                    }
                }else{
                    if (Math.floor((i%100)/10) === value % 10){
                        vm.numbers.push(number)
                    }
                }
            }
            if (vm.odds !== undefined){
                vm.updatePrice()
            }
        }

        $scope.$on('TradOdds::done', function (){
            vm.updatePrice();
        })

        function updatePrice() {
            vm.odds = $rootScope.TradOdds.filter(function (odd) {
                return msUtils.exists(odd.GameType, [2,3,4]) && msUtils.exists(odd.BetType, [17]) && odd.Term === ($rootScope.isAuthenticated ? $rootScope.termName : 'Public')
            })
            vm.basePrice = vm.odds[0].Price;
            angular.forEach(vm.numbers, function (num) {
                angular.forEach(vm.odds, function (odd) {
                    let exNumber = $.grep(odd.Numbers, function(n){return n.Number === num.number});
                    let extPrice = exNumber.length && exNumber[0].ExtraPrice !== undefined ? odd.Price + exNumber[0].ExtraPrice : odd.Price;
                    if (exNumber.length && exNumber[0].Stop){
                        num.disabled[odd.BetType][odd.GameType] = exNumber[0].Stop;
                    }
                    num.basePrice = odd.Price;
                    if (num.price[odd.BetType][odd.GameType] !== extPrice && num.price[odd.BetType][odd.GameType] !== 0){
                        num.priceChanged = true
                    }
                    num.price[odd.BetType][odd.GameType] = extPrice;
                })
            });
            $timeout(function () {
                angular.forEach(vm.numbers, function (n) {
                    n.priceChanged = false;
                })
            }, 3000)
        }

        function selectNumber(n) {
            angular.forEach(vm.numbers, function (number) {
                if (number.number === n.number){
                    number.selected = !number.selected;
                }
            });
        }

        vm.exists = function (item) {
            return vm.selectedCheckbox.indexOf(item) > -1;
        };

        function groupNumbers(id){
            let idx = vm.selectedCheckbox.indexOf(id);
            if (idx > -1) {
                vm.selectedCheckbox.splice(idx, 1);
            }else {
                vm.selectedCheckbox.push(id);
            }
            vm.checked = idx === -1;

            angular.forEach(vm.numbers, function (number, index) {
                if (id < 10){
                    if (Math.floor(index/10) === id){
                        number.selected = vm.checked;
                    }
                }else{
                    if (index%10 === id%10){
                        number.selected = vm.checked;
                    }
                }
            });
        }

        function resetBetting(){
            angular.forEach(vm.numbers, function (number) {
                number.selected = false;
                number.point = 0;
            });
            vm.selectedCheckbox = [];
            vm.inputPoint = 0;
        }

        function totalPoint() {
            vm.sumPoint = 0;
            angular.forEach($rootScope.regironSelected, function (gameid) {
                angular.forEach(vm.numbers, function (num) {
                    if (num.selected && !num.disabled[17][gameid]){
                        vm.sumPoint += vm.inputPoint
                    }
                })
            });
            return vm.sumPoint
        }

        function totalMoney() {
            vm.sumMoney = 0;
            angular.forEach($rootScope.regironSelected, function (gameid) {
                angular.forEach(vm.numbers, function (num) {
                    if (num.selected && !num.disabled[17][gameid]){
                        vm.sumMoney += num.price[17][gameid] * vm.inputPoint * 17
                    }
                })
            });
            return vm.sumMoney
        }

        function submitBetting() {
            let betObj = {
                Term: $rootScope.termName,
                IgnorePrice: vm.ignorePrice,
                Tickets: []
            };

            angular.forEach($rootScope.regironSelected, function (gameid) {
                let TicketObj = {
                    GameType: gameid,
                    BetType: 17,
                    Items: [],
                    Additional: {
                        Row: 0,
                        Alias: 262144,
                        Reverse: false
                    }
                };

                angular.forEach(vm.numbers, function (number) {
                    if (number.selected && !number.disabled[17][gameid] ){
                        let Number = {};
                        Number.Numbers = [number.number];
                        Number.Price = number.price[17][gameid];
                        Number.Point = vm.inputPoint;
                        TicketObj.Items.push(Number)
                    }
                });
                betObj.Tickets.push(TicketObj)
            });

            let ns = [];
            vm.numbers.map(function (number) {
                if (number.selected){
                    ns.push(number.number)
                }
            })
            let eventData = {
                betObj: betObj,
                sumObj: {
                    numbers: ns,
                    point: vm.sumPoint,
                    money: vm.sumMoney
                }
            }
            $rootScope.$broadcast('EventBetting', eventData);
        }

        $rootScope.$on('ResetBetting', function (){
            vm.resetBetting();
        })

        $rootScope.$broadcast('TradOdds::get', {GameTypes: [2,3,4], BetTypes: [17]})
    }
})();
(function (){
    'use strict';

    angular
        .module('app.traditional')
        .controller('rowMNBetCtrl', rowMNBetCtrl);

    function rowMNBetCtrl($rootScope, $scope, $timeout, $interval, $document, msApi, network, msUtils){
        let vm = this;

        vm.declareRow = declareRow;
        vm.toggleAll = toggleAll;
        vm.checkedAll = checkedAll;
        vm.isIndeterminate = isIndeterminate;
        vm.checkDisabledReset = checkDisabledReset;
        vm.sumRowMoney = sumRowMoney;
        vm.totalMoney = totalMoney;
        vm.submitBetting = submitBetting;

        vm.ignorePrice = true;
        vm.rowsBets = [];
        vm.declareRow();
        vm.ready = false;

        $document.bind('keydown keypress', function (e) {
            if(e.which === 27) {
                vm.declareRow();
                e.preventDefault()
            }
        });

        function declareRow(){
            msApi.request('number.rowBet@get', {},  function (response){
                vm.rowsBets = response.list;
                angular.forEach(vm.rowsBets, function (row) {
                    row.regirons = {2: false, 3: false, 4: false};
                    row.point = {7: 0, 8: 0, 78: 0, 15: 0};
                })
            })
        }

        $scope.$on('TradOdds::done', function (){
            vm.ready = true;
            vm.odds = $rootScope.TradOdds.filter(function (odd) {
                return msUtils.exists(odd.GameType, [2,3,4]) && msUtils.exists(odd.BetType, [7,8,15]) && odd.Term === ($rootScope.isAuthenticated ? $rootScope.termName : 'Public')
            })
        })

        function checkedAll(id) {
            if (!vm.ready){return}
            let count = 0;
            angular.forEach(vm.rowsBets, function (row) {
                count += row.regirons[id] === true ? 1 : 0
            });
            return count === vm.rowsBets.length
        }

        function toggleAll(id) {
            if (!vm.ready){return}
            let check = vm.checkedAll(id);
            angular.forEach(vm.rowsBets, function (row) {
                row.regirons[id] = !check;
            })
        }

        function isIndeterminate(id) {
            if (!vm.ready){return}
            let count = 0;
            angular.forEach(vm.rowsBets, function (row) {
                count += row.regirons[id] === true ? 1 : 0
            });
            if (count === 0 || count === vm.rowsBets.length){
                return false
            }else{
                return true
            }
        }

        function checkDisabledReset() {
            if (!vm.ready){return}
            let disabled = 0;
            angular.forEach(vm.rowsBets, function (row) {
                Object.keys(row.regirons).forEach(function(gameid){
                    disabled += row.regirons[gameid] ? 1 : 0

                });
                Object.keys(row.point).forEach(function(betid){
                    disabled += Math.abs(row.point[betid]) !== 0 ? 1 : 0
                })
            });
            return disabled === 0
        }

        function sumRowMoney(row) {
            if (!vm.ready){return}
            let oBet = {7: 0, 8: 0, 15: 0};
            oBet[7] = Math.abs(row.point[7]) + Math.abs(row.point[78]);
            oBet[8] = Math.abs(row.point[8]) + Math.abs(row.point[78]);
            oBet[15] = Math.abs(row.point[15]);
            let rowMoney = 0;
            Object.keys(row.regirons).forEach(function(gameid){
                if (row.regirons[gameid]){
                    Object.keys(oBet).forEach(function(betid){
                        if (Math.abs(oBet[betid]) !== 0){
                            let oddValues = vm.odds.filter(function (item) {
                                return item.GameType === parseInt(gameid) && item.BetType === parseInt(betid)
                            })[0];
                            let betTimes = parseInt(betid) === 15 ? 18 : 1;
                            angular.forEach(row.numbers, function (num) {
                                let findNumber = $.grep(oddValues.Numbers, function (onb) {
                                    return onb.Number === num
                                });
                                if (findNumber.length === 0){
                                    rowMoney += oddValues.Price * oBet[betid] * betTimes
                                }else{
                                    if (findNumber[0].Stop === undefined){
                                        rowMoney += oBet[betid] * (oddValues.Price + findNumber[0].ExtraPrice) * betTimes
                                    }
                                }
                            })
                        }
                    })
                }
            });
            row.sumRowMoney = rowMoney;
            return rowMoney
        }

        function totalMoney() {
            vm.sumMoney = 0;
            angular.forEach(vm.rowsBets, function (row) {
                vm.sumMoney += row.sumRowMoney !== undefined ? row.sumRowMoney : 0
            });
            return vm.sumMoney;
        }

        function submitBetting() {
            vm.sumPoint = 0;
            let oddValues, oddPrice, betObj, TicketObj, findExtra, betTypeAlias, ns = [];
            betObj = {
                Term: $rootScope.termName,
                IgnorePrice: vm.ignorePrice,
                Tickets: []
            };
            angular.forEach(vm.rowsBets, function (row, rowId) {
                if (row.sumRowMoney !== 0){
                    let oBet = {7: 0, 8: 0, 15: 0};
                    oBet[7] = Math.abs(row.point[7]) + Math.abs(row.point[78]);
                    oBet[8] = Math.abs(row.point[8]) + Math.abs(row.point[78]);
                    oBet[15] = Math.abs(row.point[15]);
                    betTypeAlias = 0;
                    betTypeAlias += Math.abs(row.point[7]) !== 0 ? 128 : 0;
                    betTypeAlias += Math.abs(row.point[8]) !== 0 ? 256 : 0;
                    betTypeAlias += Math.abs(row.point[78]) !== 0 ? 512 : 0;
                    betTypeAlias += Math.abs(row.point[15]) !== 0 ? 2048 : 0;
                    Object.keys(row.regirons).forEach(function(gameid){
                        if (row.regirons[gameid]){
                            oddValues = $.grep(vm.odds, function (game) {
                                return game.GameType === parseInt(gameid)
                            });
                            Object.keys(oBet).forEach(function (betid) {
                                if (Math.abs(oBet[betid]) !== 0){
                                    oddPrice = $.grep(oddValues, function (bet) {
                                        return bet.BetType === parseInt(betid)
                                    })[0];
                                    TicketObj = {
                                        GameType: parseInt(gameid),
                                        BetType: parseInt(betid),
                                        Items: [],
                                        Additional: {
                                            Row: rowId,
                                            Alias: betTypeAlias,
                                            Reverse: false
                                        }
                                    };
                                    angular.forEach(row.numbers, function (num) {
                                        let Number = {};
                                        Number.Numbers = [num];
                                        ns = ns.concat([num]);
                                        Number.Point = oBet[betid];
                                        vm.sumPoint += oBet[betid];

                                        findExtra = $.grep(oddPrice.Numbers, function (n) {
                                            return n.Number === num
                                        });
                                        if (findExtra.length === 0){
                                            Number.Price = oddPrice.Price;
                                            TicketObj.Items.push(Number);
                                        }else {
                                            if (findExtra[0].ExtraPrice !== undefined){
                                                Number.Price = oddPrice.Price + findExtra[0].ExtraPrice
                                            }
                                            if (!findExtra[0].Stop){
                                                TicketObj.Items.push(Number);
                                            }
                                        }
                                    });
                                    if (TicketObj.Items.length){
                                        betObj.Tickets.push(TicketObj)
                                    }
                                }
                            });
                        }
                    })
                }
            });
            ns = ns.filter(function (item, index, inputArray) {	//Lọc trùng
                return inputArray.indexOf(item) === index;
            });
            let eventData = {
                betObj: betObj,
                sumObj: {
                    numbers: ns,
                    point: vm.sumPoint,
                    money: vm.sumMoney
                }
            }
            $rootScope.$broadcast('EventBetting', eventData);
        }

        $rootScope.$on('ResetBetting', function (){
            vm.resetBetting();
        })

        $rootScope.$broadcast('TradOdds::get', {GameTypes: [2,3,4], BetTypes: [7,8,15]})
    }
})();
(function (){
    'use strict';

    angular
        .module('app.traditional')
        .controller('lo18DauCtrl', lo18DauCtrl);

    function lo18DauCtrl($rootScope, $scope, $mdMedia, $mdSidenav, $timeout, $state, $interval, $document, msUtils, network, select){
        let vm = this;
        vm.buildPriceTable = buildPriceTable;
        vm.selectNumber = selectNumber;
        vm.groupNumbers = groupNumbers;
        vm.inputKeyNumber = inputKeyNumber;
        vm.submitKeyNumber = submitKeyNumber;
        vm.resetBetting = resetBetting;
        vm.submitBetting = submitBetting;
        vm.totalPoint = totalPoint;
        vm.totalMoney = totalMoney;
        vm.purchaseLimit = purchaseLimit;
        vm.payouts = payouts;
        vm.ignorePrice = true;
        vm.basePrice = 0;
        vm.numbers = [];
        $scope.$mdMedia = $mdMedia;

        vm.base = {30: {2: 0, 3: 0, 4: 0}};
        if ($rootScope.myParameters !== undefined){
            angular.forEach($rootScope.myParameters, function(pr){
                if (pr.BetType === 30) {
                    if (pr.GameType === 2) { vm.base[30][2] = pr.Price }
                    if (pr.GameType === 3) { vm.base[30][3] = pr.Price }
                    if (pr.GameType === 4) { vm.base[30][4] = pr.Price }
                }
            })
        }

        for (let i = 0; i<100; i++){
            i = i < 10 ? i = '0' + i : i;
            let number = {
                number: i.toString(),
                selected: false,
                price: {
                    30: {2: vm.base[30][2], 3: vm.base[30][3], 4: vm.base[30][4]}
                },
                disabled: {
                    30: {2: false, 3: false, 4: false}
                }
            };
            vm.numbers.push(number)
        }

        $rootScope.location = {game: 4, bet: 30};

        $document.bind('keydown keypress', function (e) {
            if(e.which === 27) {
                vm.resetBetting();
                e.preventDefault()
            }
        });

        function purchaseLimit(gameid, betid) {
            if ($rootScope.isAuthenticated){
                if ($rootScope.myParameters !== undefined){
                    return $rootScope.myParameters.filter(function(item) { return item.GameType === gameid && item.BetType === betid })[0].MaxPointPerNumber;
                }else{
                    $timeout(function () {
                        vm.purchaseLimit(gameid, betid)
                    }, 1000)
                }
            }
        }

        function payouts(gameid, betid) {
            if ($rootScope.isAuthenticated){
                if ($rootScope.myParameters !== undefined){
                    return $rootScope.myParameters.filter(function(item) { return item.GameType === gameid && item.BetType === betid })[0].Payouts / 1000;
                }else{
                    $timeout(function () {
                        vm.payouts(gameid, betid)
                    }, 1000)
                }
            }
        }

        $scope.$on('TradOdds::done', function (){
            vm.buildPriceTable();
        })

        function buildPriceTable(){
            vm.odds = $rootScope.TradOdds.filter(function (odd) {
                return msUtils.exists(odd.GameType, [2,3,4]) && msUtils.exists(odd.BetType, [30]) && odd.Term === ($rootScope.isAuthenticated ? $rootScope.termName : 'Public')
            })

            vm.basePrice = vm.odds[0].Price;
            angular.forEach(vm.numbers, function (num) {
                angular.forEach(vm.odds, function (odd) {
                    let exNumber = $.grep(odd.Numbers, function(n){return n.Number === num.number});
                    let extPrice = exNumber.length && exNumber[0].ExtraPrice !== undefined ? odd.Price + exNumber[0].ExtraPrice : odd.Price;
                    if (exNumber.length && exNumber[0].Stop){
                        num.disabled[odd.BetType][odd.GameType] = exNumber[0].Stop;
                    }
                    num.basePrice = odd.Price;
                    if (odd.BetType === 30 && num.price[odd.BetType][odd.GameType] !== extPrice && num.price[odd.BetType][odd.GameType] !== 0){
                        num.priceChanged = true
                    }
                    num.price[odd.BetType][odd.GameType] = extPrice;
                })
            });
            $timeout(function () {
                angular.forEach(vm.numbers, function (n) {
                    n.priceChanged = false;
                })
            }, 3000)
        }

        function selectNumber(n) {
            angular.forEach(vm.numbers, function (number) {
                if (number.number === n.number){
                    number.selected = !number.selected;
                }
            });
        }

        vm.selectedCheckbox = [];

        vm.exists = function (item) {
            return vm.selectedCheckbox.indexOf(item) > -1;
        };

        function groupNumbers(id){
            let idx = vm.selectedCheckbox.indexOf(id);
            if (idx > -1) {
                vm.selectedCheckbox.splice(idx, 1);
            }else {
                vm.selectedCheckbox.push(id);
            }
            vm.checked = idx === -1;
            vm.arrayNumber = $.grep(select.list, function(b){
                return b.id === id;
            })[0].content;
            angular.forEach(vm.numbers, function (number) {
                if ($.grep(vm.arrayNumber, function(b){return b === number.number}).length){
                    number.selected = vm.checked;
                }
            });
        }

        function inputKeyNumber(e) {
            if (!vm.keynumber){return}
            if(e.which === 8){
                if (vm.keynumber[vm.keynumber.length - 1] !== ','){
                    vm.keynumber = vm.keynumber.substring(0, vm.keynumber.length - 1)
                }
            }
            let value = vm.keynumber.split(',');
            if (value[value.length-1].length > 1){
                vm.keynumber = vm.keynumber + ','
            }
        }

        function submitKeyNumber(click) {
            if (!vm.keynumber){return}
            vm.keynumber = vm.keynumber.replace(/\s+/g, '');
            if (vm.keynumber.length === 0){return}
            let arr = vm.keynumber.split(',');
            let arrInput = [];
            for (let i = 0; i < arr.length; i++){
                let number = arr[i].slice(-2).replace(/\s+/g, '');
                number = number.length < 2 && number.length !== 0 ? '0' + number : number;
                if (!isNaN(number) && angular.isNumber(+number)){
                    if (number.length !== 0)
                        arrInput.push(number)
                }
            }
            angular.forEach(vm.numbers, function (val) {
                if (arrInput.indexOf(val.number) !== -1){
                    val.selected = true
                }
            });
            vm.keynumber = '';
            if (!click){
                $timeout(function () {
                    document.getElementById('bet-input').select();
                }, 10)
            }else{
                $timeout(function () {
                    document.getElementsByClassName('input-numbers-array')[0].focus();
                }, 10)
            }
        }

        function resetBetting(){
            angular.forEach(vm.numbers, function (number) {
                number.selected = false;
                number.point = 0;
            });
            vm.inputPoint = 0;
            vm.selectedCheckbox = [];
            vm.keynumber = '';
        }

        function totalPoint() {
            vm.sumPoint = 0;
            angular.forEach($rootScope.regironSelected, function (gameid) {
                angular.forEach(vm.numbers, function (num) {
                    if (num.selected && !num.disabled[gameid]){
                        vm.sumPoint += vm.inputPoint
                    }
                })
            });
            return vm.sumPoint;
        }

        function totalMoney() {
            vm.sumMoney = 0;
            angular.forEach($rootScope.regironSelected, function (gameid) {
                angular.forEach(vm.numbers, function (num) {
                    if (num.selected && !num.disabled[gameid]){
                        vm.sumMoney += num.price[30][gameid] * vm.inputPoint * 18
                    }
                })
            });
            return vm.sumMoney
        }

        function submitBetting() {
            vm.betDatas = [];

            let betObj = {}, TicketObj;
            betObj.Term = $rootScope.termName;
            betObj.IgnorePrice = vm.ignorePrice;
            betObj.Tickets = [];


            angular.forEach($rootScope.regironSelected, function (gameid) {

                TicketObj = {
                    GameType: gameid,
                    BetType: 30,
                    Items: [],
                    Additional: {
                        Row: 0,
                        Alias: 2048,
                        Reverse: false
                    }
                };
                angular.forEach(vm.numbers, function (number) {
                    if (number.selected && !number.disabled[30][gameid] ){
                        let Number = {};
                        Number.Numbers = [number.number];
                        Number.Price = number.price[30][gameid];
                        Number.Point = vm.inputPoint;
                        TicketObj.Items.push(Number)
                    }
                });
                betObj.Tickets.push(TicketObj)
            });


            let ns = [];
            vm.numbers.map(function (number) {
                if (number.selected){
                    ns.push(number.number)
                }
            })
            let eventData = {
                betObj: betObj,
                sumObj: {
                    numbers: ns,
                    point: vm.sumPoint,
                    money: vm.sumMoney
                }
            }
            $rootScope.$broadcast('EventBetting', eventData);

        }

        $rootScope.$on('ResetBetting', function (){
            vm.resetBetting();
        })

        $rootScope.$broadcast('TradOdds::get', {GameTypes: [2,3,4], BetTypes: [30]})
    }
})();
(function (){
    'use strict';

    angular
        .module('app.traditional')
        .controller('haidDauController', haidDauController);

    function haidDauController($rootScope, $scope, $mdMedia, $mdSidenav, $timeout, $state, $interval, $document, msUtils, network, select){
        let vm = this;

        vm.buildPriceTable = buildPriceTable;
        vm.selectNumber = selectNumber;
        vm.groupNumbers = groupNumbers;
        vm.inputKeyNumber = inputKeyNumber;
        vm.submitKeyNumber = submitKeyNumber;
        vm.resetBetting = resetBetting;
        vm.submitBetting = submitBetting;
        vm.totalPoint = totalPoint;
        vm.totalMoney = totalMoney;
        vm.aBetID = aBetID;
        vm.purchaseLimit = purchaseLimit;
        vm.payouts = payouts;
        vm.ignorePrice = true;
        $scope.$mdMedia = $mdMedia;

        if ($state.current.url === '/dau'){
            vm.betID = 7
        }else {
            vm.betID = 8
        }

        $rootScope.location = {game: 4, bet: vm.betID};
        vm.pointDau = 0;
        vm.pointDuoi = 0;
        vm.basePrice = 0;
        vm.numbers = [];

        vm.base = {7: {2: 0, 3: 0, 4: 0}, 8: {2: 0, 3: 0, 4: 0}};
        if ($rootScope.myParameters !== undefined){
            angular.forEach($rootScope.myParameters, function(pr){
                if (pr.BetType === 7) {
                    if (pr.GameType === 2) { vm.base[7][2] = pr.Price }
                    if (pr.GameType === 3) { vm.base[7][3] = pr.Price }
                    if (pr.GameType === 4) { vm.base[7][4] = pr.Price }
                }
                if (pr.BetType === 8) {
                    if (pr.GameType === 2) { vm.base[8][2] = pr.Price }
                    if (pr.GameType === 3) { vm.base[8][3] = pr.Price }
                    if (pr.GameType === 4) { vm.base[8][4] = pr.Price }
                }
            })
        }

        for (let i = 0; i<100; i++){
            i = i < 10 ? i = '0' + i : i;
            let number = {
                number: i.toString(),
                selected: false,
                price: {
                    7: {2: vm.base[7][2], 3: vm.base[7][3], 4: vm.base[7][4]},
                    8: {2: vm.base[8][2], 3: vm.base[8][3], 4: vm.base[8][4]}
                },
                disabled: {
                    7: {2: false, 3: false, 4: false},
                    8: {2: false, 3: false, 4: false}
                }
            };
            vm.numbers.push(number)
        }

        $document.bind('keydown keypress', function (e) {
            if(e.which === 27) {
                vm.resetBetting();
                e.preventDefault()
            }
        });

        function purchaseLimit(gameid, betid) {
            if ($rootScope.isAuthenticated){
                if ($rootScope.myParameters !== undefined){
                    return $rootScope.myParameters.filter(function(item) { return item.GameType === gameid && item.BetType === betid })[0].MaxPointPerNumber;
                }else{
                    $timeout(function () {
                        vm.purchaseLimit(gameid, betid)
                    }, 1000)
                }
            }
        }

        function payouts(gameid, betid) {
            if ($rootScope.isAuthenticated){
                if ($rootScope.myParameters !== undefined){
                    return $rootScope.myParameters.filter(function(item) { return item.GameType === gameid && item.BetType === betid })[0].Payouts / 1000;
                }else{
                    $timeout(function () {
                        vm.payouts(gameid, betid)
                    }, 1000)
                }
            }
        }

        $scope.$on('TradOdds::done', function (){
            vm.buildPriceTable();
        })

        function buildPriceTable(){
            vm.odds = $rootScope.TradOdds.filter(function (odd) {
                return msUtils.exists(odd.GameType, [2,3,4]) && msUtils.exists(odd.BetType, [vm.betID]) && odd.Term === ($rootScope.isAuthenticated ? $rootScope.termName : 'Public')
            })

            vm.basePrice = vm.odds[0].Price;
            angular.forEach(vm.numbers, function (num) {
                angular.forEach(vm.odds, function (odd) {
                    let exNumber = $.grep(odd.Numbers, function(n){return n.Number === num.number});
                    let extPrice = exNumber.length && exNumber[0].ExtraPrice !== undefined ? odd.Price + exNumber[0].ExtraPrice : odd.Price;
                    if (exNumber.length && exNumber[0].Stop){
                        num.disabled[odd.BetType][odd.GameType] = exNumber[0].Stop;
                    }
                    num.basePrice = odd.Price;
                    if (odd.BetType === vm.betID && num.price[odd.BetType][odd.GameType] !== extPrice && num.price[odd.BetType][odd.GameType] !== 0){
                        num.priceChanged = true
                    }
                    num.price[odd.BetType][odd.GameType] = extPrice;
                })
            });
            $timeout(function () {
                angular.forEach(vm.numbers, function (n) {
                    n.priceChanged = false;
                })
            }, 3000)

            // console.log(vm.numbers)
        }

        function selectNumber(n) {
            angular.forEach(vm.numbers, function (number) {
                if (number.number === n.number){
                    number.selected = !number.selected;
                }
            });
        }

        vm.selectedCheckbox = [];

        vm.exists = function (item) {
            return vm.selectedCheckbox.indexOf(item) > -1;
        };

        function groupNumbers(id){
            let idx = vm.selectedCheckbox.indexOf(id);
            if (idx > -1) {
                vm.selectedCheckbox.splice(idx, 1);
            }else {
                vm.selectedCheckbox.push(id);
            }
            vm.checked = idx === -1;
            vm.arrayNumber = $.grep(select.list, function(b){
                return b.id === id;
            })[0].content;
            angular.forEach(vm.numbers, function (number) {
                if ($.grep(vm.arrayNumber, function(b){return b === number.number}).length){
                    number.selected = vm.checked;
                }
            });
        }

        function inputKeyNumber(e) {
            if (!vm.keynumber){return}
            if(e.which === 8){
                if (vm.keynumber[vm.keynumber.length - 1] !== ','){
                    vm.keynumber = vm.keynumber.substring(0, vm.keynumber.length - 1)
                }
            }
            let value = vm.keynumber.split(',');
            if (value[value.length-1].length > 1){
                vm.keynumber = vm.keynumber + ','
            }
        }

        function submitKeyNumber(click) {
            if (!vm.keynumber){return}
            vm.keynumber = vm.keynumber.replace(/\s+/g, '');
            if (vm.keynumber.length === 0){return}
            let arr = vm.keynumber.split(',');
            let arrInput = [];
            for (let i = 0; i < arr.length; i++){
                let number = arr[i].slice(-2).replace(/\s+/g, '');
                number = number.length < 2 && number.length !== 0 ? '0' + number : number;
                if (!isNaN(number) && angular.isNumber(+number)){
                    if (number.length !== 0)
                        arrInput.push(number)
                }
            }
            angular.forEach(vm.numbers, function (val) {
                if (arrInput.indexOf(val.number) !== -1){
                    val.selected = true
                }
            });
            vm.keynumber = '';
            if (!click){
                $timeout(function () {
                    document.getElementsByClassName('bet-input')[0].select();
                }, 10)
            }else{
                $timeout(function () {
                    document.getElementsByClassName('input-numbers-array')[0].focus();
                }, 10)
            }
        }

        function resetBetting(){
            angular.forEach(vm.numbers, function (number) {
                number.selected = false;
                number.point = 0;
            });
            vm.selectedCheckbox = [];
            vm.inputPointDau = vm.inputPointDuoi = vm.inputPointDd = 0;
            vm.keynumber = '';
        }

        function totalPoint() {
            vm.sumPoint = 0;

            vm.inputPointDau = isNaN(vm.inputPointDau) ? 0 : vm.inputPointDau;
            vm.inputPointDuoi = isNaN(vm.inputPointDuoi) ? 0 : vm.inputPointDuoi;
            vm.inputPointDd = isNaN(vm.inputPointDd) ? 0 : vm.inputPointDd;
            vm.pointDau = vm.inputPointDau + vm.inputPointDd;
            vm.pointDuoi = vm.inputPointDuoi + vm.inputPointDd;

            angular.forEach($rootScope.regironSelected, function (gameid) {
                angular.forEach(vm.numbers, function (num) {
                    if (num.selected && !num.disabled[gameid]){
                        vm.sumPoint += vm.pointDau + vm.pointDuoi
                    }
                })
            });
            return vm.sumPoint;
        }

        function totalMoney() {
            vm.sumMoney = 0;
            angular.forEach($rootScope.regironSelected, function (gameid) {
                angular.forEach(vm.numbers, function (num) {
                    if (num.selected && !num.disabled[gameid]){
                        vm.sumMoney += num.price[7][gameid] * vm.pointDau + num.price[8][gameid] * vm.pointDuoi
                    }
                })
            });
            return vm.sumMoney
        }

        function aBetID() {
            let aID = [];
            if (vm.pointDau !== 0){aID.push({betid: 7, point: vm.pointDau})}
            if (vm.pointDuoi !== 0){aID.push({betid: 8, point: vm.pointDuoi})}
            return aID
        }

        function submitBetting() {
            let betAlias = 0;
            betAlias +=  parseInt(vm.inputPointDau) === 0 ? 0 : 128;
            betAlias +=  parseInt(vm.inputPointDuoi) === 0 ? 0 : 256;
            betAlias +=  parseInt(vm.inputPointDd) === 0 ? 0 : 512;

            let betObj = {};
            betObj.Term = $rootScope.termName;
            betObj.IgnorePrice = vm.ignorePrice;
            betObj.Tickets = [];

            angular.forEach($rootScope.regironSelected, function (gameid) {
                angular.forEach(vm.aBetID(), function (betid) {
                    let ticketObj = {
                        GameType: gameid,
                        BetType: betid.betid,
                        Additional: {Row: 0, Alias: betAlias, Reverse: false},
                        Items: []
                    };
                    angular.forEach(vm.numbers, function (number) {
                        if (number.selected && !number.disabled[betid.betid][gameid] ){
                            let Number = {};
                            Number.Numbers = [number.number];
                            Number.Price = number.price[betid.betid][gameid];
                            Number.Point = betid.betid === 7 ? vm.pointDau : vm.pointDuoi;
                            ticketObj.Items.push(Number)
                        }
                    });
                    betObj.Tickets.push(ticketObj)
                });
            });


            let ns = [];
            vm.numbers.map(function (number) {
                if (number.selected){
                    ns.push(number.number)
                }
            })
            let eventData = {
                betObj: betObj,
                sumObj: {
                    numbers: ns,
                    point: vm.sumPoint,
                    money: vm.sumMoney
                }
            }
            $rootScope.$broadcast('EventBetting', eventData);


        }

        $rootScope.$on('ResetBetting', function (){
            vm.resetBetting();
        })

        $rootScope.$broadcast('TradOdds::get', {GameTypes: [2,3,4], BetTypes: [vm.betID]})
    }
})();
(function (){
    'use strict';

    angular
        .module('app.traditional')
        .controller('lo18Ctrl', lo18Ctrl);

    function lo18Ctrl($rootScope, $scope, $mdMedia, $mdSidenav, $timeout, $state, $interval, $document, msUtils, network, select){
        let vm = this;

        vm.buildPriceTable = buildPriceTable;
        vm.selectNumber = selectNumber;
        vm.groupNumbers = groupNumbers;
        vm.inputKeyNumber = inputKeyNumber;
        vm.submitKeyNumber = submitKeyNumber;
        vm.resetBetting = resetBetting;
        vm.submitBetting = submitBetting;
        vm.totalPoint = totalPoint;
        vm.totalMoney = totalMoney;
        vm.purchaseLimit = purchaseLimit;
        vm.payouts = payouts;
        vm.ignorePrice = true;
        vm.basePrice = 0;
        vm.numbers = [];
        $scope.$mdMedia = $mdMedia;

        vm.base = {15: {2: 0, 3: 0, 4: 0}};
        if ($rootScope.myParameters !== undefined){
            angular.forEach($rootScope.myParameters, function(pr){
                if (pr.BetType === 15) {
                    if (pr.GameType === 2) { vm.base[15][2] = pr.Price }
                    if (pr.GameType === 3) { vm.base[15][3] = pr.Price }
                    if (pr.GameType === 4) { vm.base[15][4] = pr.Price }
                }
            })
        }

        for (let i = 0; i<100; i++){
            i = i < 10 ? i = '0' + i : i;
            let number = {
                number: i.toString(),
                selected: false,
                price: {
                    15: {2: vm.base[15][2], 3: vm.base[15][3], 4: vm.base[15][4]}
                },
                disabled: {
                    15: {2: false, 3: false, 4: false}
                }
            };
            vm.numbers.push(number)
        }

        $rootScope.location = {game: 4, bet: 15};

        $document.bind('keydown keypress', function (e) {
            if(e.which === 27) {
                vm.resetBetting();
                e.preventDefault()
            }
        });

        function purchaseLimit(gameid, betid) {
            if ($rootScope.isAuthenticated){
                if ($rootScope.myParameters !== undefined){
                    return $rootScope.myParameters.filter(function(item) { return item.GameType === gameid && item.BetType === betid })[0].MaxPointPerNumber;
                }else{
                    $timeout(function () {
                        vm.purchaseLimit(gameid, betid)
                    }, 1000)
                }
            }
        }

        function payouts(gameid, betid) {
            if ($rootScope.isAuthenticated){
                if ($rootScope.myParameters !== undefined){
                    return $rootScope.myParameters.filter(function(item) { return item.GameType === gameid && item.BetType === betid })[0].Payouts / 1000;
                }else{
                    $timeout(function () {
                        vm.payouts(gameid, betid)
                    }, 1000)
                }
            }
        }

        $scope.$on('TradOdds::done', function (){
            vm.buildPriceTable();
        })

        function buildPriceTable(){
            vm.odds = $rootScope.TradOdds.filter(function (odd) {
                return msUtils.exists(odd.GameType, [2,3,4]) && msUtils.exists(odd.BetType, [15]) && odd.Term === ($rootScope.isAuthenticated ? $rootScope.termName : 'Public')
            })

            vm.basePrice = vm.odds[0].Price;
            angular.forEach(vm.numbers, function (num) {
                angular.forEach(vm.odds, function (odd) {
                    let exNumber = $.grep(odd.Numbers, function(n){return n.Number === num.number});
                    let extPrice = exNumber.length && exNumber[0].ExtraPrice !== undefined ? odd.Price + exNumber[0].ExtraPrice : odd.Price;
                    if (exNumber.length && exNumber[0].Stop){
                        num.disabled[odd.BetType][odd.GameType] = exNumber[0].Stop;
                    }
                    num.basePrice = odd.Price;
                    if (odd.BetType === 15 && num.price[odd.BetType][odd.GameType] !== extPrice && num.price[odd.BetType][odd.GameType] !== 0){
                        num.priceChanged = true
                    }
                    num.price[odd.BetType][odd.GameType] = extPrice;
                })
            });
            $timeout(function () {
                angular.forEach(vm.numbers, function (n) {
                    n.priceChanged = false;
                })
            }, 3000)
        }

        function selectNumber(n) {
            angular.forEach(vm.numbers, function (number) {
                if (number.number === n.number){
                    number.selected = !number.selected;
                }
            });
        }

        vm.selectedCheckbox = [];

        vm.exists = function (item) {
            return vm.selectedCheckbox.indexOf(item) > -1;
        };

        function groupNumbers(id){
            let idx = vm.selectedCheckbox.indexOf(id);
            if (idx > -1) {
                vm.selectedCheckbox.splice(idx, 1);
            }else {
                vm.selectedCheckbox.push(id);
            }
            vm.checked = idx === -1;
            vm.arrayNumber = $.grep(select.list, function(b){
                return b.id === id;
            })[0].content;
            angular.forEach(vm.numbers, function (number) {
                if ($.grep(vm.arrayNumber, function(b){return b === number.number}).length){
                    number.selected = vm.checked;
                }
            });
        }

        function inputKeyNumber(e) {
            if (!vm.keynumber){return}
            if(e.which === 8){
                if (vm.keynumber[vm.keynumber.length - 1] !== ','){
                    vm.keynumber = vm.keynumber.substring(0, vm.keynumber.length - 1)
                }
            }
            let value = vm.keynumber.split(',');
            if (value[value.length-1].length > 1){
                vm.keynumber = vm.keynumber + ','
            }
        }

        function submitKeyNumber(click) {
            if (!vm.keynumber){return}
            vm.keynumber = vm.keynumber.replace(/\s+/g, '');
            if (vm.keynumber.length === 0){return}
            let arr = vm.keynumber.split(',');
            let arrInput = [];
            for (let i = 0; i < arr.length; i++){
                let number = arr[i].slice(-2).replace(/\s+/g, '');
                number = number.length < 2 && number.length !== 0 ? '0' + number : number;
                if (!isNaN(number) && angular.isNumber(+number)){
                    if (number.length !== 0)
                        arrInput.push(number)
                }
            }
            angular.forEach(vm.numbers, function (val) {
                if (arrInput.indexOf(val.number) !== -1){
                    val.selected = true
                }
            });
            vm.keynumber = '';
            if (!click){
                $timeout(function () {
                    document.getElementById('bet-input').select();
                }, 10)
            }else{
                $timeout(function () {
                    document.getElementsByClassName('input-numbers-array')[0].focus();
                }, 10)
            }
        }

        function resetBetting(){
            angular.forEach(vm.numbers, function (number) {
                number.selected = false;
                number.point = 0;
            });
            vm.inputPoint = 0;
            vm.selectedCheckbox = [];
            vm.keynumber = '';
        }

        function totalPoint() {
            vm.sumPoint = 0;
            angular.forEach($rootScope.regironSelected, function (gameid) {
                angular.forEach(vm.numbers, function (num) {
                    if (num.selected && !num.disabled[gameid]){
                        vm.sumPoint += vm.inputPoint
                    }
                })
            });
            return vm.sumPoint;
        }

        function totalMoney() {
            vm.sumMoney = 0;
            angular.forEach($rootScope.regironSelected, function (gameid) {
                angular.forEach(vm.numbers, function (num) {
                    if (num.selected && !num.disabled[gameid]){
                        vm.sumMoney += num.price[15][gameid] * vm.inputPoint * 18
                    }
                })
            });
            return vm.sumMoney
        }

        function submitBetting() {
            vm.betDatas = [];

            let betObj = {}, TicketObj;
            betObj.Term = $rootScope.termName;
            betObj.IgnorePrice = vm.ignorePrice;
            betObj.Tickets = [];

            angular.forEach($rootScope.regironSelected, function (gameid) {
                TicketObj = {
                    GameType: gameid,
                    BetType: 15,
                    Items: [],
                    Additional: {
                        Row: 0,
                        Alias: 2048,
                        Reverse: false
                    }
                };
                angular.forEach(vm.numbers, function (number) {
                    if (number.selected && !number.disabled[15][gameid] ){
                        let Number = {};
                        Number.Numbers = [number.number];
                        Number.Price = number.price[15][gameid];
                        Number.Point = vm.inputPoint;
                        TicketObj.Items.push(Number)
                    }
                });
                betObj.Tickets.push(TicketObj)
            });

            let ns = [];
            vm.numbers.map(function (number) {
                if (number.selected){
                    ns.push(number.number)
                }
            })
            let eventData = {
                betObj: betObj,
                sumObj: {
                    numbers: ns,
                    point: vm.sumPoint,
                    money: vm.sumMoney
                }
            }
            $rootScope.$broadcast('EventBetting', eventData);

        }

        $rootScope.$on('ResetBetting', function (){
            vm.resetBetting();
        })

        $rootScope.$broadcast('TradOdds::get', {GameTypes: [2,3,4], BetTypes: [15]})
    }
})();
(function (){
    'use strict';
    angular.module('app.legendary', []).config(config);

    /** @ngInject */
    function config($stateProvider, msApiProvider){

        $stateProvider
            .state('app.legendary', {
                abstract: true,
                url     : '/legendary',
                views    : {
                    'main@': {
                        templateUrl: 'app/core/layouts/content-general.html',
                        controller : 'MainController as one'
                    },
                    'content@app.legendary': {
                        templateUrl: 'app/main/legendary/legendary.html',
                        controller : 'legendaryCtrl as legend'
                    },
                    'toolbar@app.legendary'   : {
                        templateUrl: 'app/toolbar/layouts/vertical-navigation/toolbar.html',
                        controller : 'ToolbarController as vm'
                    },
                    'navigation@app.legendary': {
                        templateUrl: 'app/navigation/layouts/vertical-navigation/navigation.html',
                        controller : 'NavigationController as vm'
                    },
                    'accountPanel@app.legendary': {
                        templateUrl: 'app/account-panel/account-panel.html',
                        controller : 'accountPanelCtrl as vm'
                    },
                    'legendary-menu@app.legendary': {
                        templateUrl: 'app/main/legendary/menu/menu.html',
                        controller : 'legendaryMenuCtrl as vm'
                    }
                }
            })
            .state('app.legendary.northern', {
                url      : '/northern',
                abstract: true,
                resolve  : {
                    selectBox: function (msApi) {
                        return msApi.resolve('number.select@get');
                    },
                    collections: function (msApi) {
                        return msApi.resolve('number.collection@get');
                    }
                }
            })
            .state('app.legendary.northern.quick', {
                url      : '/quick',
                views    : {
                    'legendary-content@app.legendary': {
                        templateUrl: 'app/main/legendary/northern/quick/quick.html',
                        controller : 'northernQuickCtrl as vm'
                    }
                },
                resolve: {
                    GameType: function () {
                        return 0
                    }
                },
                bodyClass: 'legendary light'
            })
            .state('app.legendary.northern.jackpot', {
                url      : '/jackpot',
                views    : {
                    'legendary-content@app.legendary': {
                        templateUrl: 'app/main/legendary/northern/general/legendary.general.html',
                        controller : 'legendaryGeneralCtrl as vm'
                    }
                },
                resolve: {
                    config: function () {
                        return {GameType: 0, BetType: 0, BetTimes: 1, StatsType: 0}
                    }
                },
                bodyClass: 'legendary light'
            })
            .state('app.legendary.northern.lotto', {
                url      : '/lotto',
                views    : {
                    'legendary-content@app.legendary': {
                        templateUrl: 'app/main/legendary/northern/general/legendary.general.html',
                        controller : 'legendaryGeneralCtrl as vm'
                    }
                },
                resolve: {
                    config: function () {
                        return {GameType: 0, BetType: 1, BetTimes: 1, StatsType: 2}
                    }
                },
                bodyClass: 'legendary light'
            })
            .state('app.legendary.northern.lotto-head', {
                url      : '/lotto-head',
                views    : {
                    'legendary-content@app.legendary': {
                        templateUrl: 'app/main/legendary/northern/general/legendary.general.html',
                        controller : 'legendaryGeneralCtrl as vm'
                    }
                },
                resolve: {
                    config: function () {
                        return {GameType: 0, BetType: 29, BetTimes: 1, StatsType: 3}
                    }
                },
                bodyClass: 'legendary light'
            })
            .state('app.legendary.northern.head-jackpot', {
                url      : '/head',
                views    : {
                    'legendary-content@app.legendary': {
                        templateUrl: 'app/main/legendary/northern/general/legendary.general.html',
                        controller : 'legendaryGeneralCtrl as vm'
                    }
                },
                resolve: {
                    config: function () {
                        return {GameType: 0, BetType: 21, BetTimes: 1, StatsType: 1}
                    }
                },
                bodyClass: 'legendary light'
            })
            .state('app.legendary.northern.except-jackpot', {
                url      : '/except-jackpot',
                views    : {
                    'legendary-content@app.legendary': {
                        templateUrl: 'app/main/legendary/northern/except/legendary.except.html',
                        controller : 'legendaryExceptCtrl as vm'
                    }
                },
                resolve: {
                    betId: function () {
                        return 5
                    },
                    param: function () {
                        return {minBet: 10, betTimes: 1, payouts: 650}
                    }
                },
                bodyClass: 'legendary light'
            })
            .state('app.legendary.northern.except-lotto', {
                url      : '/except-lotto',
                views    : {
                    'legendary-content@app.legendary': {
                        templateUrl: 'app/main/legendary/northern/except/legendary.except.html',
                        controller : 'legendaryExceptCtrl as vm'
                    }
                },
                resolve: {
                    betId: function () {
                        return 6
                    },
                    param: function () {
                        return {minBet: 4, betTimes: 4, payouts: 21100}
                    }
                },
                bodyClass: 'legendary light'
            })
            .state('app.legendary.northern.parlay', {
                url      : '/pair',
                views    : {
                    'legendary-content@app.legendary': {
                        templateUrl: 'app/main/legendary/northern/parlay/legendary.parlay.html',
                        controller : 'legendaryNorthernPairCtrl as vm'
                    }
                },
                resolve: {
                    GameType: function () {
                        return 0
                    }
                },
                bodyClass: 'legendary light'
            })
            .state('app.legendary.northern.live', {
                url      : '/live/:tab',
                views    : {
                    'legendary-content@app.legendary': {
                        templateUrl: 'app/main/legendary/northern/live/legend.live.html',
                        controller : 'LegendNorthLiveCtrl as vm'
                    }
                },
                resolve: {
                    GameType: function () {
                        return 0
                    }
                },
                bodyClass: 'legendary light'
            })
            .state('app.legendary.northern.3d', {
                url      : '/3d',
                abstract: true
            })
            .state('app.legendary.northern.3d.jackpot', {
                url: '/jackpot',
                views   : {
                    'legendary-content@app.legendary': {
                        templateUrl: 'app/main/legendary/northern/3d/legendary.3d.html',
                        controller : 'legendNorthern3DCtrl as vm'
                    }
                },
                resolve: {
                    config: function () {
                        return {GameType: 0, BetType: 11, BetTimes: 1}
                    }
                },
                bodyClass: 'legendary light'
            })
            .state('app.legendary.northern.3d.lotto', {
                url: '/lotto',
                views   : {
                    'legendary-content@app.legendary': {
                        templateUrl: 'app/main/legendary/northern/3d/legendary.3d.html',
                        controller : 'legendNorthern3DCtrl as vm'
                    }
                },
                resolve: {
                    config: function () {
                        return {GameType: 0, BetType: 12, BetTimes: 1}
                    }
                },
                bodyClass: 'legendary light'
            })
            .state('app.legendary.northern.4d', {
                url      : '/4d',
                abstract: true
            })
            .state('app.legendary.northern.4d.jackpot', {
                url: '/jackpot',
                views   : {
                    'legendary-content@app.legendary': {
                        templateUrl: 'app/main/legendary/northern/4d/legendary.4d.html',
                        controller : 'legendNorthern4DCtrl as vm'
                    }
                },
                resolve: {
                    config: function () {
                        return {GameType: 0, BetType: 13, BetTimes: 1}
                    }
                },
                bodyClass: 'legendary light'
            })
            .state('app.legendary.northern.4d.lotto', {
                url: '/lotto',
                views   : {
                    'legendary-content@app.legendary': {
                        templateUrl: 'app/main/legendary/northern/4d/legendary.4d.html',
                        controller : 'legendNorthern4DCtrl as vm'
                    }
                },
                resolve: {
                    config: function () {
                        return {GameType: 0, BetType: 14, BetTimes: 1}
                    }
                },
                bodyClass: 'legendary light'
            })
            .state('app.legendary.southern', {
                url      : '/southern',
                abstract: true,
                resolve  : {
                    selectBox: function (msApi) {
                        return msApi.resolve('number.select@get');
                    },
                    collections: function (msApi) {
                        return msApi.resolve('number.collection@get');
                    }
                }
            })
            .state('app.legendary.southern.quick', {
                url      : '/quick',
                views    : {
                    'legendary-content@app.legendary': {
                        templateUrl: 'app/main/legendary/northern/quick/quick.html',
                        controller : 'southernQuickCtrl as vm'
                    }
                },
                resolve: {
                    GameType: function () {
                        return 1
                    }
                },
                bodyClass: 'legendary light'
            })
            .state('app.legendary.southern.parlay', {
                url      : '/pair',
                views    : {
                    'legendary-content@app.legendary': {
                        templateUrl: 'app/main/legendary/northern/parlay/legendary.parlay.html',
                        controller : 'legendaryNorthernPairCtrl as vm'
                    }
                },
                resolve: {
                    GameType: function () {
                        return 1
                    }
                },
                bodyClass: 'legendary light'
            })
            .state('app.legendary.southern.2d', {
                url      : '/2d',
                abstract: true
            })
            .state('app.legendary.southern.2d.eighth', {
                url: '/eighth',
                views   : {
                    'legendary-content@app.legendary': {
                        // templateUrl: 'app/main/legendary/southern/2d/jackpot/legend.southern.2d.jackpot.html',
                        // controller : 'legendSouthern2DJackpotCtrl as vm',
                        templateUrl: 'app/main/legendary/northern/general/legendary.general.html',
                        controller : 'legendaryGeneralCtrl as vm'
                    }
                },
                resolve: {
                    config: function () {
                        return {GameType: 1, BetType: 7, BetTimes: 1}
                    }
                    // betId: function () {
                    //     return 7
                    // }
                },
                bodyClass: 'legendary light'
            })
            .state('app.legendary.southern.2d.jackpot', {
                url: '/jackpot',
                views   : {
                    'legendary-content@app.legendary': {
                        // templateUrl: 'app/main/legendary/southern/2d/jackpot/legend.southern.2d.jackpot.html',
                        // controller : 'legendSouthern2DJackpotCtrl as vm'
                        templateUrl: 'app/main/legendary/northern/general/legendary.general.html',
                        controller : 'legendaryGeneralCtrl as vm'
                    }
                },
                resolve: {
                    config: function () {
                        return {GameType: 1, BetType: 8, BetTimes: 1}
                    }
                    // betId: function () {
                    //     return 8
                    // }
                },
                bodyClass: 'legendary light'
            })
            .state('app.legendary.southern.2d.lotto', {
                url: '/lotto',
                views   : {
                    'legendary-content@app.legendary': {
                        templateUrl: 'app/main/legendary/northern/general/legendary.general.html',
                        controller : 'legendaryGeneralCtrl as vm'
                    }
                },
                resolve: {
                    config: function () {
                        return {GameType: 1, BetType: 15, BetTimes: 1}
                    }
                },
                bodyClass: 'legendary light'
            })
            .state('app.legendary.southern.2d.lotto-head', {
                url: '/lotto-head',
                views   : {
                    'legendary-content@app.legendary': {
                        templateUrl: 'app/main/legendary/northern/general/legendary.general.html',
                        controller : 'legendaryGeneralCtrl as vm'
                    }
                },
                resolve: {
                    config: function () {
                        return {GameType: 1, BetType: 30, BetTimes: 1}
                    }
                },
                bodyClass: 'legendary light'
            })
            .state('app.legendary.southern.3d', {
                url      : '/3d',
                abstract: true
            })
            .state('app.legendary.southern.3d.seventh', {
                url: '/seventh',
                views   : {
                    'legendary-content@app.legendary': {
                        // templateUrl: 'app/main/legendary/southern/3d/jackpot/legend.southern.3d.jackpot.html',
                        // controller : 'legendSouthern3DCtrl as vm'
                        templateUrl: 'app/main/legendary/northern/3d/legendary.3d.html',
                        controller : 'legendNorthern3DCtrl as vm'
                    }
                },
                resolve: {
                    // betId: function () {
                    //     return 10
                    // }
                    config: function () {
                        return {GameType: 1, BetType: 10, BetTimes: 1}
                    }
                },
                bodyClass: 'legendary light'
            })
            .state('app.legendary.southern.3d.jackpot', {
                url: '/jackpot',
                views   : {
                    'legendary-content@app.legendary': {
                        // templateUrl: 'app/main/legendary/southern/3d/jackpot/legend.southern.3d.jackpot.html',
                        // controller : 'legendSouthern3DCtrl as vm'
                        templateUrl: 'app/main/legendary/northern/3d/legendary.3d.html',
                        controller : 'legendNorthern3DCtrl as vm'
                    }
                },
                resolve: {
                    // betId: function () {
                    //     return 11
                    // }
                    config: function () {
                        return {GameType: 1, BetType: 11, BetTimes: 1}
                    }
                },
                bodyClass: 'legendary light'
            })
            .state('app.legendary.southern.3d.lotto', {
                url: '/lotto',
                views   : {
                    'legendary-content@app.legendary': {
                        templateUrl: 'app/main/legendary/northern/3d/legendary.3d.html',
                        controller : 'legendNorthern3DCtrl as vm'
                    }
                },
                resolve: {
                    config: function () {
                        return {GameType: 1, BetType: 17, BetTimes: 1}
                    }
                },
                bodyClass: 'legendary light'
            })
            .state('app.legendary.southern.4d', {
                url      : '/4d',
                abstract: true
            })
            .state('app.legendary.southern.4d.jackpot', {
                url: '/jackpot',
                views   : {
                    'legendary-content@app.legendary': {
                        templateUrl: 'app/main/legendary/northern/4d/legendary.4d.html',
                        controller : 'legendNorthern4DCtrl as vm'
                    }
                },
                resolve: {
                    config: function () {
                        return {GameType: 1, BetType: 13, BetTimes: 1}
                    }
                },
                bodyClass: 'legendary light'
            })
            .state('app.legendary.southern.4d.lotto', {
                url: '/lotto',
                views   : {
                    'legendary-content@app.legendary': {
                        templateUrl: 'app/main/legendary/northern/4d/legendary.4d.html',
                        controller : 'legendNorthern4DCtrl as vm'
                    }
                },
                resolve: {
                    config: function () {
                        return {GameType: 1, BetType: 19, BetTimes: 1}
                    }
                },
                bodyClass: 'legendary light'
            })
            .state('app.legendary.southern.live', {
                url      : '/live',
                views    : {
                    'legendary-content@app.legendary': {
                        templateUrl: 'app/main/legendary/northern/live/legend.live.html',
                        controller : 'LegendNorthLiveCtrl as vm'
                    }
                },
                resolve: {
                    GameType: function () {
                        return 1
                    }
                },
                bodyClass: 'legendary light'
            })

        msApiProvider.register('number.select', ['app/data/select.json']);
        msApiProvider.register('number.collection', ['app/data/collection.json']);
    }
})();

(function (){
    'use strict';

    angular
        .module('app.legendary')
        .controller('legendSouthern3DCtrl', legendSouthern3DCtrl);

    /** @ngInject */
    function legendSouthern3DCtrl($rootScope, $scope, $mdMedia, $mdSidenav, $mdDialog, $timeout, $state, $interval, $document, msUtils, network, betId){
        var vm = this;

        vm.getOdds = getOdds;
        vm.changeLabel = changeLabel;
        vm.updatePrice = updatePrice;
        vm.purchaseLimit = purchaseLimit;

        vm.resetBetting = resetBetting;
        vm.submitBetting = submitBetting;
        vm.totalPoint = totalPoint;
        vm.totalMoney = totalMoney;
        vm.commitBetting = commitBetting;
        vm.sendBettingRequest = sendBettingRequest;
        vm.aBetID = aBetID;
        vm.ignorePrice = true;
        vm.betId = betId;
        vm.selectedCheckbox = []

        $scope.$mdMedia = $mdMedia;

        vm.betStepper = $rootScope.betStepper;
        vm.stepper = {
            select: function (item) {
                vm.betPoint = {10: item.value, 11: item.value, 101: item.value}
                angular.forEach(vm.betStepper, function (step) {
                    step.active = item.value === step.value;
                })
                vm.stepper.saveLocal();
            },
            getPoint: function () {
                let f = vm.betStepper.filter(function (s) {return s.active})
                if (f.length === 0){
                    vm.betStepper[0].active = true
                }
                return vm.betStepper.filter(function (s) {
                    return s.active
                })[0].value
            },
            update: function () {
                if (vm.betPoint === 0 || vm.betPoint === null){
                    vm.betStepper = vm.betStepper.filter(function (s) {return !s.individual})
                    vm.stepper.saveLocal();
                    return
                }
                let f = vm.betStepper.filter(function (s) {
                    return s.value === vm.betPoint
                })
                if (f.length){
                    angular.forEach(vm.betStepper, function (step) {
                        step.active = f[0].value === step.value;
                    })
                    if (!f[0].individual){
                        vm.betStepper = vm.betStepper.filter(function (s) {return !s.individual})
                    }
                }else{
                    let individual = vm.betStepper.filter(function (s) {
                        return s.individual
                    })
                    if (individual.length){
                        individual[0].value = vm.betPoint
                    }else{
                        vm.betStepper.unshift({individual: true, active: true, value: vm.betPoint});
                    }
                    angular.forEach(vm.betStepper, function (step) {
                        step.active = step.individual;
                    })
                }
                vm.stepper.saveLocal();
            },
            saveLocal: function () {
                localStorage.setItem('stepper', JSON.stringify(vm.betStepper))
            }
        }
        vm.number = {
            select: function (n) {
                angular.forEach(vm.numbers, function (number) {
                    if (number.number === n.number && !number.disabled[betId]){
                        number.selected = !number.selected;
                    }
                });
                vm.betPoint = {10: vm.stepper.getPoint(), 11: vm.stepper.getPoint(), 101: vm.stepper.getPoint()}
            },
            selected: function () {
                let ns = [];
                angular.forEach(vm.numbers, function (n) {
                    if (n.selected)
                        ns.push(n.number)
                })
                return ns.toString().replace(/\,+/g, ', ')
            },
            checkbox: {
                exists: function (item) {
                    return vm.selectedCheckbox.indexOf(item) > -1;
                },
                group: function (id) {
                    var idx = vm.selectedCheckbox.indexOf(id);
                    if (idx > -1) {
                        vm.selectedCheckbox.splice(idx, 1);
                    }else {
                        vm.selectedCheckbox.push(id);
                    }
                    vm.checked = idx === -1;
                    vm.betPoint = vm.stepper.getPoint();
                    angular.forEach(vm.numbers, function (number, index) {
                        if (!number.disabled[betId]){
                            if (id < 10){
                                if (Math.floor(index/10) === id){
                                    number.selected = vm.checked;
                                }
                            }else{
                                if (index%10 === id%10){
                                    number.selected = vm.checked;
                                }
                            }
                        }
                    })
                    vm.betPoint = {10: vm.stepper.getPoint(), 11: vm.stepper.getPoint(), 101: vm.stepper.getPoint()}
                }
            }
        }

        vm.betPoint = {10: 0, 11: 0, 101: 0}
        vm.basePrice = {10: 0, 11: 0}

        if ($rootScope.LegendParameters !== undefined){
            $rootScope.LegendParameters.map(function (p) {
                if (p.GameType === 1){
                    if (p.BetType === 10) vm.basePrice[10] = p.Price
                    if (p.BetType === 11) vm.basePrice[11] = p.Price
                }
            })
        }

        vm.numbers = [];
        for (let i = 0; i < 1000; i++){
            if (i < 10){i = '00' + i}else if(i < 100){i = '0' + i}

            let number = {
                number: i.toString(),
                selected: false,
                price: {10: vm.basePrice[10], 11: vm.basePrice[11]},
                disabled: {10: false, 11: false},
                base: {10: vm.basePrice[10], 11: vm.basePrice[11]}
            };
            if (Math.floor(i/100) === 0){
                vm.numbers.push(number)
            }
        }

        function purchaseLimit() {
            if ($rootScope.LegendParameters !== undefined) {
                vm.payouts = $rootScope.LegendParameters.filter(function (item) {
                    return item.GameType === 1 && item.BetType === betId
                })[0].Payouts;
            }
        }

        $scope.$on('oddsPrice::done', function (){
            vm.updatePrice();
            $timeout(function () {
                vm.purchaseLimit();
            })
        })

        function changeLabel(value) {
            vm.label = value
            vm.selectedCheckbox = []
            vm.numbers = []

            for (let i = 0; i < 1000; i++){
                if (i < 10){i = '00' + i}else if(i < 100){i = '0' + i}
                let number = {
                    number: i.toString(),
                    selected: false,
                    price: {10: vm.basePrice[10], 11: vm.basePrice[11]},
                    base: {10: vm.basePrice[10], 11: vm.basePrice[11]},
                    disabled: {10: false, 11: false}
                }
                if (value < 10){
                    if (Math.floor(i/100) === value){
                        vm.numbers.push(number)
                    }
                }else{
                    if (Math.floor((i%100)/10) === value % 10){
                        vm.numbers.push(number)
                    }
                }
            }
            vm.updatePrice()
        }

        function updatePrice() {
            vm.odds = $rootScope.LegendOdds.filter(function (odd) {
                return odd.GameType === 1 && msUtils.exists(odd.BetType, [10,11])
            })

            if (vm.odds.length === 0) {
                $timeout(function () {
                    vm.getOdds();
                }, 1000);
                return;
            }

            angular.forEach(vm.odds, function(pr){
                if (pr.GameType === 1) {
                    if (pr.BetType === 10) { vm.basePrice[10] = pr.Price }
                    if (pr.BetType === 11) { vm.basePrice[11] = pr.Price }
                }
            })

            angular.forEach(vm.numbers, function (num) {
                angular.forEach(vm.odds, function (odd) {
                    num.base[odd.BetType] = odd.Price;
                    num.price[odd.BetType] = num.price[odd.BetType] === 0 ? odd.Price : num.price[odd.BetType];
                    angular.forEach(odd.Numbers, function (value) {
                        if (value.Number === num.number){
                            var extPrice = value.ExtraPrice !== undefined ? odd.Price + value.ExtraPrice : num.price[odd.BetType];
                            num.disabled[odd.BetType] = value.Stop;
                            if (betId === odd.BetType &&(num.price[odd.BetType] !== 0) && (num.price[odd.BetType] !== extPrice)){
                                num.priceChanged = true
                            }
                            num.price[odd.BetType] = extPrice;
                        }
                    })
                })
            });
            $timeout(function () {
                vm.numbers.map(function (o) {return o.priceChanged = false})
            }, 3000)
        }

        function resetBetting(){
            vm.numbers.map(function (n) {return n.selected = false})
            vm.selectedCheckbox = [];
            vm.betPoint = {10: 0, 11: 0, 101: 0}
        }

        function totalPoint() {
            let total = 0;
            vm.betPoint[10] = isNaN(vm.betPoint[10]) ? 0 : vm.betPoint[10];
            vm.betPoint[11] = isNaN(vm.betPoint[11]) ? 0 : vm.betPoint[11];
            vm.betPoint[101] = isNaN(vm.betPoint[101]) ? 0 : vm.betPoint[101];
            vm.pointSeventh = vm.betPoint[10] + vm.betPoint[101];
            vm.pointJack = vm.betPoint[11] + vm.betPoint[101];

            angular.forEach(vm.numbers, function (num) {
                if (num.selected){
                    total += vm.pointSeventh + vm.pointJack
                }
            })
            return total;
        }

        function totalMoney() {
            let money = 0;
            angular.forEach(vm.numbers, function (num) {
                if (num.selected){
                    money += num.price[10] * vm.pointSeventh + num.price[11] * vm.pointJack
                }
            })
            return money
        }

        function aBetID() {
            let aID = [];
            if (vm.pointSeventh !== 0){aID.push(10)}
            if (vm.pointJack !== 0){aID.push(11)}
            return aID
        }

        function submitBetting() {
            let betAlias = 0;
            betAlias +=  parseInt(vm.betPoint[10]) === 0 ? 0 : 8192;
            betAlias +=  parseInt(vm.betPoint[11]) === 0 ? 0 : 16384;
            betAlias +=  parseInt(vm.betPoint[101]) === 0 ? 0 : 32768;

            let betObj = {};
            betObj.Term = $rootScope.LegendTermName[1];
            betObj.IgnorePrice = vm.ignorePrice;
            betObj.Tickets = [];

            angular.forEach(vm.aBetID(), function (bet) {
                let ticketObj = {
                    GameType: 1,
                    BetType: bet,
                    Additional: {Row: 0, Alias: betAlias, Reverse: false},
                    Items: []
                };
                angular.forEach(vm.numbers, function (number) {
                    if (number.selected && !number.disabled[bet]){
                        let Number = {};
                        Number.Numbers = [number.number];
                        Number.Price = number.price[bet];
                        Number.Point = bet === 10 ? vm.pointSeventh : vm.pointJack;
                        ticketObj.Items.push(Number)
                    }
                });
                if (ticketObj.Items.length){
                    betObj.Tickets.push(ticketObj)
                }
            });

            let always = JSON.parse(sessionStorage.getItem('alwaysBetting')) !== null;
            if (!$rootScope.isAuthenticated){always = true}
            if (always){
                vm.sendBettingRequest(betObj)
            }else{
                vm.commitBetting(betObj);
            }
        }

        function commitBetting(betObj) {
            $mdDialog.show({
                controller: commitBettingCtrl,
                templateUrl: 'app/main/legendary/betting/prompt.dialog.html',
                parent: angular.element(document.body),
                multiple: true,
                clickOutsideToClose: true
            });
            function commitBettingCtrl($rootScope, $scope, $mdDialog, $filter){
                $scope.cancel = function() {
                    $mdDialog.cancel();
                };
                $scope.alwaysBetting = false;
                $scope.costMoney = 0;
                angular.forEach(betObj.Tickets, function (ticket) {
                    ticket.Money = $filter('legendCostMoney')(ticket)
                    $scope.costMoney += ticket.Money
                });
                $scope.done = function () {
                    if($scope.alwaysBetting){
                        sessionStorage.setItem('alwaysBetting', true);
                    }
                    vm.sendBettingRequest(betObj)
                }
            }
        }

        function sendBettingRequest(betObj) {
            $rootScope.aBettingObject = betObj;
            $rootScope.$broadcast('LegendBetting', {message: 'dialog'});
            vm.resetBetting();
        }

        $document.bind('keydown keypress', function (e) {
            if(e.which === 27) {
                vm.resetBetting();
                e.preventDefault()
            }
        })

        function getOdds(){
            $rootScope.$broadcast('GetOdds', {GameType: 1, BetTypes: [10,11]})
        }

        $timeout(function () {
            vm.getOdds();
        })
    }
})();
(function (){
    'use strict';
    angular
        .module('app.legendary')
        .controller('legendSouthern2DJackpotCtrl', legendSouthern2DJackpotCtrl);

    function legendSouthern2DJackpotCtrl($rootScope, $scope, $mdMedia, $timeout, $mdDialog, $document, msUtils, message, selectBox, betId){
        let vm = this;
        vm.betId = betId;
        vm.ignorePrice = true;

        vm.getOdds = getOdds;
        vm.buildPriceTable = buildPriceTable;
        vm.purchaseLimit = purchaseLimit;
        vm.totalPoint = totalPoint;
        vm.totalMoney = totalMoney;
        vm.submitBetting = submitBetting;
        vm.resetBetting = resetBetting;
        vm.commitBetting = commitBetting;
        vm.sendBettingRequest = sendBettingRequest;
        vm.aBetID = aBetID;

        vm.selectedCheckbox = [];
        vm.numbers = [];

        vm.betStepper = $rootScope.betStepper;
        vm.stepper = {
            select: function (item) {
                vm.betPoint = {7: item.value, 8: item.value, 78: item.value}
                angular.forEach(vm.betStepper, function (step) {
                    step.active = item.value === step.value;
                });
            }
        }
        vm.number = {
            select: function (n) {
                angular.forEach(vm.numbers, function (number) {
                    if (number.number === n.number && !number.disabled[betId]){
                        number.selected = !number.selected;
                    }
                });
                if (n.selected){
                    vm.betPoint = {7: 0, 8: 0, 78: 0}
                }
            },
            selected: function () {
                let ns = [];
                angular.forEach(vm.numbers, function (n) {
                    if (n.selected)
                        ns.push(n.number)
                })
                return ns.toString().replace(/\,+/g, ', ')
            },
            typing: function (e) {
                if (!vm.keyNumber){return}
                if(e.which === 8){
                    if (vm.keyNumber[vm.keyNumber.length - 1] !== ','){
                        vm.keyNumber = vm.keyNumber.substring(0, vm.keyNumber.length - 1)
                    }
                }
                var value = vm.keyNumber.split(',');
                if (value[value.length-1].length > 1){
                    vm.keyNumber = vm.keyNumber + ','
                }
            },
            submit: function (click) {
                if (!vm.keyNumber){return}
                vm.keyNumber = vm.keyNumber.replace(/\s+/g, '');
                if (vm.keyNumber.length === 0){return}
                var arr = vm.keyNumber.split(',');
                var arrInput = [];
                for (var i = 0; i < arr.length; i++){
                    var number = arr[i].slice(-2).replace(/\s+/g, '');
                    number = number.length < 2 && number.length !== 0 ? '0' + number : number;
                    if (!isNaN(number) && angular.isNumber(+number)){
                        if (number.length !== 0)
                            arrInput.push(number)
                    }
                }
                angular.forEach(vm.numbers, function (number) {
                    if (arrInput.indexOf(number.number) !== -1 && !number.disabled[betId]){
                        if (!number.selected){
                            number.selected = true;
                        }
                    }
                });
                vm.keyNumber = '';
                vm.betPoint = {7: 0, 8: 0, 78: 0}
                $timeout(function () {
                    document.getElementsByClassName('input-numbers-array')[0].focus();
                }, 100)
            },
            checkbox: {
                exists: function (item) {
                    return vm.selectedCheckbox.indexOf(item) > -1;
                },
                group: function (id) {
                    var idx = vm.selectedCheckbox.indexOf(id);
                    if (idx > -1) {
                        vm.selectedCheckbox.splice(idx, 1);
                    }else {
                        vm.selectedCheckbox.push(id);
                    }
                    vm.checked = idx === -1;
                    vm.arrayNumber = $.grep(selectBox.list, function(b){
                        return b.id === id;
                    })[0].content;
                    angular.forEach(vm.numbers, function (number) {
                        if ($.grep(vm.arrayNumber, function(b){return b === number.number}).length && !number.disabled[betId]){
                            number.selected = vm.checked;
                        }
                    })
                    vm.betPoint = {7: 0, 8: 0, 78: 0}
                }
            }
        }

        vm.betPoint = {7: 0, 8: 0, 78: 0}
        vm.basePrice = {7: 0, 8: 0}

        if ($rootScope.LegendParameters !== undefined){
            $rootScope.LegendParameters.map(function (p) {
                if (p.GameType === 1){
                    if (p.BetType === 7) vm.basePrice[7] = p.Price
                    if (p.BetType === 8) vm.basePrice[8] = p.Price
                }
            })
        }

        for (let i = 0; i<100; i++){
            i = i < 10 ? i = '0' + i : i;
            vm.numbers.push({number: i.toString(), disabled: {7: false, 8: false}, selected: false, base: {7: vm.basePrice[7], 8: vm.basePrice[8]}, price: {7: vm.basePrice[7], 8: vm.basePrice[8]}})
        }

        function purchaseLimit() {
            if ($rootScope.LegendParameters !== undefined) {
                vm.payouts = $rootScope.LegendParameters.filter(function (item) {
                    return item.GameType === 1 && item.BetType === betId
                })[0].Payouts;
            }
        }

        $scope.$on('oddsPrice::done', function (){
            vm.buildPriceTable();
            $timeout(function () {
                vm.purchaseLimit();
            })
        })

        function buildPriceTable(){
            vm.odds = $rootScope.LegendOdds.filter(function (odd) {
                return odd.GameType === 1 && msUtils.exists(odd.BetType, [7,8])
            })

            if (vm.odds.length === 0) {
                $timeout(function () {
                    vm.getOdds();
                }, 1000);
                return;
            }

            angular.forEach(vm.odds, function(pr){
                if (pr.GameType === 1) {
                    if (pr.BetType === 7) { vm.basePrice[7] = pr.Price }
                    if (pr.BetType === 8) { vm.basePrice[8] = pr.Price }
                }
            })

            angular.forEach(vm.numbers, function (num) {
                angular.forEach(vm.odds, function (odd) {
                    num.base[odd.BetType] = odd.Price;
                    num.price[odd.BetType] = num.price[odd.BetType] === 0 ? odd.Price : num.price[odd.BetType];
                    angular.forEach(odd.Numbers, function (value) {
                        if (value.Number === num.number){
                            var extPrice = value.ExtraPrice !== undefined ? odd.Price + value.ExtraPrice : num.price[odd.BetType];
                            num.disabled[odd.BetType] = value.Stop;
                            if (betId === odd.BetType &&(num.price[odd.BetType] !== 0) && (num.price[odd.BetType] !== extPrice)){
                                num.priceChanged = true
                            }
                            num.price[odd.BetType] = extPrice;
                        }
                    })
                })
            });
            $timeout(function () {
                vm.numbers.map(function (o) {return o.priceChanged = false})
            }, 3000)
        }

        function totalPoint() {
            let total = 0;
            vm.betPoint[7] = isNaN(vm.betPoint[7]) ? 0 : vm.betPoint[7];
            vm.betPoint[8] = isNaN(vm.betPoint[8]) ? 0 : vm.betPoint[8];
            vm.betPoint[78] = isNaN(vm.betPoint[78]) ? 0 : vm.betPoint[78];
            vm.pointEighth = vm.betPoint[7] + vm.betPoint[78];
            vm.pointJack = vm.betPoint[8] + vm.betPoint[78];

            angular.forEach(vm.numbers, function (num) {
                if (num.selected){
                    total += vm.pointEighth + vm.pointJack
                }
            })
            return total;
        }

        function totalMoney() {
            let money = 0;
            angular.forEach(vm.numbers, function (num) {
                if (num.selected){
                    money += num.price[7] * vm.pointEighth + num.price[8] * vm.pointJack
                }
            })
            return money
        }

        function resetBetting(){
            vm.numbers.map(function (n) {return n.selected = false});
            vm.betStepper.map(function (a){
                return a.active = false;
            });
            vm.betPoint = {7: 0, 8: 0, 78: 0}
            vm.selectedCheckbox = [];
            vm.keynumber = '';
            vm.arrayTemporary = [];
        }

        function aBetID() {
            let aID = [];
            if (vm.pointEighth !== 0){aID.push(7)}
            if (vm.pointJack !== 0){aID.push(8)}
            return aID
        }

        function submitBetting() {
            let betAlias = 0;
            betAlias +=  parseInt(vm.betPoint[7]) === 0 ? 0 : 128;
            betAlias +=  parseInt(vm.betPoint[8]) === 0 ? 0 : 256;
            betAlias +=  parseInt(vm.betPoint[78]) === 0 ? 0 : 512;

            let betObj = {};
            betObj.Term = $rootScope.LegendTermName[1];
            betObj.IgnorePrice = vm.ignorePrice;
            betObj.Tickets = [];

            angular.forEach(vm.aBetID(), function (bet) {
                let ticketObj = {
                    GameType: 1,
                    BetType: bet,
                    Additional: {Row: 0, Alias: betAlias, Reverse: false},
                    Items: []
                };
                angular.forEach(vm.numbers, function (number) {
                    if (number.selected && !number.disabled[bet]){
                        let Number = {};
                        Number.Numbers = [number.number];
                        Number.Price = number.price[bet];
                        Number.Point = bet === 7 ? vm.pointEighth : vm.pointJack;
                        ticketObj.Items.push(Number)
                    }
                });
                if (ticketObj.Items.length){
                    betObj.Tickets.push(ticketObj)
                }
            });

            let always = JSON.parse(sessionStorage.getItem('alwaysBetting')) !== null;
            if (!$rootScope.isAuthenticated){always = true}
            if (always){
                vm.sendBettingRequest(betObj)
            }else{
                vm.commitBetting(betObj);
            }
        }

        function commitBetting(betObj) {
            $mdDialog.show({
                controller: commitBettingCtrl,
                templateUrl: 'app/main/legendary/betting/prompt.dialog.html',
                parent: angular.element(document.body),
                multiple: true,
                clickOutsideToClose: true
            });
            function commitBettingCtrl($rootScope, $scope, $mdDialog, $filter){
                $scope.cancel = function() {
                    $mdDialog.cancel();
                };
                $scope.alwaysBetting = false;
                $scope.costMoney = 0;
                angular.forEach(betObj.Tickets, function (ticket) {
                    ticket.Money = $filter('legendCostMoney')(ticket)

                    $scope.costMoney += ticket.Money
                });
                $scope.done = function () {
                    if($scope.alwaysBetting){
                        sessionStorage.setItem('alwaysBetting', true);
                    }
                    vm.sendBettingRequest(betObj)
                }
            }
        }

        function sendBettingRequest(betObj) {
            $rootScope.aBettingObject = betObj;
            $rootScope.$broadcast('LegendBetting', {message: 'dialog'});
            vm.resetBetting();
        }

        $document.bind('keydown keypress', function (e) {
            if(e.which === 27) {
                vm.resetBetting();
                $scope.$digest();
                e.preventDefault()
            }
        })

        function getOdds(){
            $rootScope.$broadcast('GetOdds', {GameType: 1, BetTypes: [7,8]})
        }

        $timeout(function () {
            vm.getOdds();
        })

    }
})();
(function () {
    'use strict';
    angular.module('app.account', []).config(config);
    function config($stateProvider, msApiProvider) {
        $stateProvider
            .state('app.account', {
                abstract: true,
                url     : '/account',
                views    : {
                    'main@':{
                        templateUrl: 'app/core/layouts/content-account.html',
                        controller : 'myAccountCtrl as vm'
                    },
                    'toolbar@app.account'   : {
                        templateUrl: 'app/toolbar/layouts/vertical-navigation/toolbar.html',
                        controller : 'ToolbarController as vm'
                    },
                    'navigation@app.account': {
                        templateUrl: 'app/navigation/layouts/vertical-navigation/navigation.html',
                        controller : 'NavigationController as vm'
                    },
                    'accountPanel@app.account': {
                        templateUrl: 'app/account-panel/account-panel.html',
                        controller : 'accountPanelCtrl as vm'
                    },
                    'menu-account@app.account': {
                        templateUrl: 'app/main/account/menu.html'
                    },
                }
            })
            .state('app.account.my', {
                url      : '/my',
                views    : {
                    'content@app.account': {
                        templateUrl: 'app/main/account/my-account/my-account.html',
                        controller : 'myCtrl as vm',
                        pageTrack  : '/my-account'
                    }
                },
                bodyClass: 'one-account'
            })

            .state('app.account.change-password', {
                url      : '/change-password',
                views    : {
                    'content@app.account': {
                        templateUrl: 'app/main/account/change-password/change-password.html',
                        controller : 'changePasswordCtrl as vm',
                        pageTrack  : '/change-password'
                    }
                },
                bodyClass: 'one-account'
            })
            .state('app.account.otp', {
                url      : '/otp',
                views    : {
                    'content@app.account': {
                        templateUrl: 'app/main/account/otp/otp.html'
                    },
                    'otpView@app.account.otp': {
                        templateUrl: 'app/main/account/otp/otp.template.html',
                        controller: 'otpController as vm',
                        pageTrack  : '/otp'
                    }
                },
                bodyClass: 'one-account'
            })
            .state('app.account.telegram', {
                url      : '/telegram',
                views    : {
                    'content@app.account': {
                        templateUrl: 'app/main/account/telegram/telegram.html',
                        controller : 'telegramCtrl as vm',
                        pageTrack  : '/telegram'
                    }
                },
                bodyClass: 'one-account'
            })
            .state('app.account.statement', {
                url      : '/statement',
                views    : {
                    'content@app.account': {
                        templateUrl: 'app/main/account/statement/statement.html',
                        controller : 'statementCtrl as vm',
                        pageTrack  : '/statement'
                    }
                },
                bodyClass: 'one-account'
            })
            .state('app.account.statement.lottery', {
                abstract: true,
                url    : '/lottery'
            })
            .state('app.account.statement.lottery.date', {
                url    : '/:time',
                views  : {
                    'content@app.account': {
                        templateUrl: 'app/main/account/statement/lottery/date/date.html',
                        controller : 'dateReportCtrl as vm',
                        pageTrack  : '/statement-lottery-date'
                    }
                },
                bodyClass: 'one-account'
            })
            .state('app.account.statement.lottery.game', {
                url    : '/:game/:time',
                views  : {
                    'content@app.account': {
                        templateUrl: 'app/main/account/statement/lottery/game/game.html',
                        controller : 'gameReportCtrl as vm',
                        pageTrack  : '/statement-lottery-game'
                    }
                },
                bodyClass: 'one-account'
            })
            .state('app.account.statement.lottery.bet', {
                url    : '/:game/:bet/:time',
                views  : {
                    'content@app.account': {
                        templateUrl: 'app/main/account/statement/lottery/bet/bet.html',
                        controller : 'betReportCtrl as vm',
                        pageTrack  : '/statement-lottery-bet'
                    }
                },
                bodyClass: 'one-account'
            })

            .state('app.account.statement.legend', {
                abstract: true,
                url    : '/legend'
            })
            .state('app.account.statement.legend.date', {
                url    : '/date?time',
                views  : {
                    'content@app.account': {
                        templateUrl: 'app/main/account/statement/legendary/date/date.html',
                        controller : 'legendDateReportCtrl as vm'
                    }
                },
                bodyClass: 'one-account'
            })
            .state('app.account.statement.legend.term', {
                url    : '/term?date&game',
                views  : {
                    'content@app.account': {
                        templateUrl: 'app/main/account/statement/legendary/term/term.html',
                        controller : 'legendTermReportCtrl as vm',
                        pageTrack  : '/statement-legend-term'
                    }
                },
                bodyClass: 'one-account'
            })
            .state('app.account.statement.legend.game', {
                url    : '/game?game&time&term',
                views  : {
                    'content@app.account': {
                        templateUrl: 'app/main/account/statement/legendary/game/game.html',
                        controller : 'legendGameReportCtrl as vm',
                        pageTrack  : '/statement-legend-game'
                    }
                },
                bodyClass: 'one-account'
            })
            .state('app.account.statement.legend.bet', {
                url    : '/bet?game&bet&term',
                views  : {
                    'content@app.account': {
                        templateUrl: 'app/main/account/statement/legendary/bet/bet.html',
                        controller : 'legendBetReportCtrl as vm',
                        pageTrack  : '/statement-legend-bet'
                    }
                },
                bodyClass: 'one-account'
            })

            .state('app.account.statement.wm-casino', {
                abstract: true,
                url    : '/wm-casino'
            })
            .state('app.account.statement.wm-casino.date', {
                url    : '/:time',
                views  : {
                    'content@app.account': {
                        templateUrl: 'app/main/account/statement/wm-casino/date/date.html',
                        controller : 'dateWmCasinoReportCtrl as vm',
                        pageTrack  : '/statement-wm-casino-date'
                    }
                },
                bodyClass: 'one-account'
            })
            .state('app.account.statement.wm-casino.game', {
                url    : '/:game/:time',
                views  : {
                    'content@app.account': {
                        templateUrl: 'app/main/account/statement/wm-casino/game/game.html',
                        controller : 'gameWmCasinoReportCtrl as vm',
                        pageTrack  : '/statement-wm-casino-game'
                    }
                },
                bodyClass: 'one-account'
            })

            .state('app.account.statement.casino', {
                abstract: true,
                url    : '/casino'
            })
            .state('app.account.statement.casino.date', {
                url    : '/:time',
                views  : {
                    'content@app.account': {
                        templateUrl: 'app/main/account/statement/casino/date/date.html',
                        controller : 'dateCasinoReportCtrl as vm',
                        pageTrack  : '/statement-casino-date'
                    }
                },
                bodyClass: 'one-account'
            })
            .state('app.account.statement.casino.game', {
                url    : '/:game/:time',
                views  : {
                    'content@app.account': {
                        templateUrl: 'app/main/account/statement/casino/game/game.html',
                        controller : 'gameCasinoReportCtrl as vm',
                        pageTrack  : '/statement-casino-game'
                    }
                },
                bodyClass: 'one-account'
            })
            .state('app.account.statement.casino.game.presidential', {
                url    : '/presidential',
                views  : {
                    'content@app.account': {
                        templateUrl: 'app/main/account/statement/casino/game/presidential/presidential.html',
                        controller : 'gameCasinoReportCtrl as vm',
                        pageTrack  : '/statement-casino-game'
                    }
                },
                bodyClass: 'one-account'
            })

            .state('app.account.statement.saba', {
                abstract: true,
                url    : '/saba'
            })
            .state('app.account.statement.saba.sport', {
                url    : '/sport?date',
                views  : {
                    'content@app.account': {
                        templateUrl: 'app/main/account/statement/saba/sport/sport.html',
                        controller : 'sabaSportReportCtrl as vm',
                        pageTrack  : '/statement-saba-sport-group'
                    }
                },
                bodyClass: 'one-account'
            })
            .state('app.account.statement.saba.items', {
                url    : '/items?sport&date',
                views  : {
                    'content@app.account': {
                        templateUrl: 'app/main/account/statement/saba/items/items.html',
                        controller : 'sabaItemsReportCtrl as vm',
                        pageTrack  : '/statement-saba-items'
                    }
                },
                resolve: {
                    sabaBetTypes: function (msApi) {
                        return msApi.resolve('saba@get');
                    },
                    sabaBetTypesVN: function (msApi) {
                        return msApi.resolve('saba-vn@get');
                    }
                },
                bodyClass: 'one-account'
            })

            .state('app.account.bet-list', {
                url      : '/bet-list',
                abstract: true,
            })
            .state('app.account.bet-list.traditional', {
                url      : '/traditional',
                views    : {
                    'content@app.account': {
                        templateUrl: 'app/main/account/bet-list/traditional/traditional.bet-list.html',
                        controller : 'betListCtrl as vm',
                        pageTrack  : '/bet-list.traditional'
                    }
                },
                bodyClass: 'one-account'
            })
            .state('app.account.bet-list.traditional.all', {
                url      : '/all',
                views    : {
                    'content@app.account': {
                        templateUrl: 'app/main/account/bet-list/traditional/full/full.html',
                        controller : 'blFullCtrl as vm',
                        pageTrack  : '/bet-list.traditional-all'
                    }
                },
                bodyClass: 'one-account'
            })
            .state('app.account.bet-list.traditional.batch', {
                url    : '/batch?term&id',
                views  : {
                    'content@app.account': {
                        templateUrl: 'app/main/account/bet-list/traditional/batch/batch.html',
                        controller : 'blBatchCtrl as vm',
                        pageTrack  : '/bet-list.traditional-batch'
                    }
                },
                bodyClass: 'one-account'
            })
            .state('app.account.bet-list.legendary', {
                url      : '/legendary',
                views    : {
                    'content@app.account': {
                        templateUrl: 'app/main/account/bet-list/legendary/legendary.bet-list.html',
                        controller : 'legendBetListCtrl as vm',
                        pageTrack  : '/bet-list.legendary'
                    }
                },
                bodyClass: 'one-account'
            })
            .state('app.account.bet-list.legendary.batch', {
                url    : '/batch?term&game&id',
                views  : {
                    'content@app.account': {
                        templateUrl: 'app/main/account/bet-list/legendary/batch/batch.html',
                        controller : 'legendBatchCtrl as vm',
                        pageTrack  : '/bet-list.legendary-batch'
                    }
                },
                bodyClass: 'one-account'
            })
            .state('app.account.bet-list.legendary.all', {
                url      : '/all',
                views    : {
                    'content@app.account': {
                        templateUrl: 'app/main/account/bet-list/legendary/full/full.html',
                        controller : 'legendFullCtrl as vm',
                        pageTrack  : '/bet-list.legendary-all'
                    }
                },
                bodyClass: 'one-account'
            })

            .state('app.account.limit', {
                url      : '/limit',
                views    : {
                    'content@app.account': {
                        templateUrl: 'app/main/account/limit/limit.html',
                        controller : 'limitCtrl as vm',
                        pageTrack  : '/account-limit'
                    }
                },
                bodyClass: 'one-account'
            })
            .state('app.account.rules', {
                url      : '/rules',
                views    : {
                    'content@app.account': {
                        templateUrl: 'app/main/account/rules/rules.html',
                        pageTrack  : '/account-rules'
                    }
                },
                bodyClass: 'one-account'
            })

            .state('app.account.cancelled', {
                url      : '/cancelled',
                abstract: true,
            })
            .state('app.account.cancelled.traditional', {
                url      : '/traditional',
                views    : {
                    'content@app.account': {
                        templateUrl: 'app/main/account/cancelled/traditional/traditional.cancelled.html',
                        controller : 'cancelledCtrl as vm',
                        pageTrack  : '/cancelled.traditional'
                    }
                },
                bodyClass: 'one-account'
            })

        msApiProvider.register('saba', ['app/data/saba.bet-type.json']);
        msApiProvider.register('saba-vn', ['app/data/saba.bet-type-vn.json']);
    }
})();
(function (){
    'use strict';

    angular
        .module('app.account')
        .controller('gameWmCasinoReportCtrl', gameWmCasinoReportCtrl);

    /** @ngInject */
    function gameWmCasinoReportCtrl($rootScope, $scope, $stateParams, $timeout, network){
        var vm = this;
        vm.data = $stateParams;
        vm.date = moment.unix(vm.data.time).format('dddd') + ', ngày ' + moment.unix(vm.data.time).format('DD/MM/YYYY');

        vm.loading = true;
        vm.fetchReport = fetchReport;
        vm.fetchReport();
        vm.reports = [];
        function fetchReport(ltId) {
            ltId = ltId === undefined ? '' : ltId;
            let data = {
                Date: moment.unix(vm.data.time).format('YYYY-MM-DD'),
                GameType: vm.data.game,
                LastId: ltId,
                Limit: 100
            };

            if ($rootScope.User !== undefined){
                network.Report.WMCasino.getPlayerBetItems(data).then(function (response) {
                    vm.thereMore = response.length === 100;
                    vm.loading = false;
                    vm.reports = vm.reports.concat(response);
                    $scope.$digest();
                })
            }else{
                $timeout(function () {
                    vm.fetchReport()
                }, 300)
            }
        }
    }
})();

(function (){
    'use strict';
    angular
        .module('app.account')
        .controller('dateWmCasinoReportCtrl', dateWmCasinoReportCtrl);

    /** @ngInject */
    function dateWmCasinoReportCtrl($rootScope, $scope, $stateParams, $timeout, network){
        var vm = this;
        vm.time = $stateParams.time;
        vm.date = moment.unix(vm.time).format('dddd') + ', ngày ' + moment.unix(vm.time).format('DD/MM/YYYY');
        vm.loading = true;

        vm.fetchReport = fetchReport;
        vm.fetchReport();

        function fetchReport() {
            if ($rootScope.User !== undefined){
                let data = {Date: moment.unix(vm.time).format('YYYY-MM-DD')};

                network.Report.WMCasino.getReportGroupByGameType(data).then(function (response){
                    vm.loading = false;
                    vm.reports = response;
                    $scope.$digest();
                })
            }else{
                $timeout(function () {
                    vm.fetchReport()
                }, 300)
            }
        }



    }
})();

(function (){
    'use strict';

    angular
        .module('app.account')
        .controller('sabaItemsReportCtrl', sabaItemsReportCtrl);

    function sabaItemsReportCtrl($rootScope, $scope, $stateParams, $timeout, $mdDialog, msUtils, sabaBetTypes, sabaBetTypesVN){
        let vm = this;
        vm.data = $stateParams;
        vm.data.SportGroup = parseInt($stateParams.sport)
        vm.sabaBetTypes = sabaBetTypes.data;
        vm.sabaBetTypesVN = sabaBetTypesVN.data;

        vm.localParlayData = sessionStorage.getItem('Parlay') === null ? {} : JSON.parse(sessionStorage.getItem('Parlay'));
        if (vm.localParlayData.Teams === undefined){vm.localParlayData.Teams = []}
        if (vm.localParlayData.Leagues === undefined){vm.localParlayData.Leagues = []}
        if (vm.localParlayData.Matchs === undefined){vm.localParlayData.Matchs = []}

        vm.date = moment.unix(vm.data.date).format('dddd') + ', ngày ' + moment.unix(vm.data.date).format('DD/MM/YYYY');

        vm.loading = true;
        vm.fetchReport = fetchReport;

        vm.getLeagueName = getLeagueName;
        vm.ParlayDetails = ParlayDetails;
        vm.showParlayData = showParlayData;
        vm.updateParlayData = updateParlayData;
        vm.getMatch = getMatch;
        vm.updateLeagueInfo = updateLeagueInfo;
        vm.getRNGBetItems = getRNGBetItems;
        vm.ticketResult = ticketResult;

        vm.ticketResultSingleParlay = ticketResultSingleParlay;
        vm.ticketResultIsLive = ticketResultIsLive;
        vm.ticketResultSystemParlay = ticketResultSystemParlay;

        vm.showScore = showScore;


        vm.fetchReport();
        vm.reports = [];
        function fetchReport(ltId) {
            ltId = ltId === undefined ? '' : ltId;
            let data = {
                Date: moment.unix(vm.data.date).format('YYYY-MM-DD'),
                SportGroup: vm.data.sport,
                LastId: ltId,
                Limit: 100
            };

            if ($rootScope.User !== undefined){
                let MatchIds = [];
                Lotus.Saba.Report.Statement.getBetItems(data).then(function (response) {
                    // console.log(response)
                    vm.thereMore = response.length === 100;
                    vm.loading = false;

                    //Translate BetType and BetTeam
                    response.map(function (item){
                        if (vm.data.SportGroup === 2 || vm.data.SportGroup === 1){ // Cần lấy thông tin của trận đấu
                            MatchIds.push(item.MatchId)
                        }
                        matchingData(item);

                        if (item.ParlayType === 'MixParlay' && item.ParlayData.length){
                            item.nOdds = 1;
                            item.ParlayData.map(function (par){
                                item.nOdds = item.nOdds * par.Odds
                            })
                        }
                    })
                    //Lấy thông tin trận đấu - dùng cho thể thao ảo và Number Game
                    MatchIds = MatchIds.filter(function (item, index, inputArray) {	//Lọc trùng
                        return inputArray.indexOf(item) === index;
                    });
                    if (MatchIds.length){
                        vm.getMatch(MatchIds).then(function (MatchInfo){
                            response.map(function (item){
                                let findMatch = MatchInfo.filter(function (match){
                                    return match.MatchId === item.MatchId;
                                })
                                if (findMatch.length){
                                    item.MatchDetails = findMatch[0]
                                }
                            })
                            vm.reports = vm.reports.concat(response);
                            $timeout(function () {
                                $scope.$digest();
                            }, 10)
                            // console.log(vm.members)
                        })
                    }else{
                        vm.reports = vm.reports.concat(response);
                        // console.log(vm.members)
                    }
                    $scope.$digest();
                })
            }else{
                $timeout(function () {
                    vm.fetchReport()
                }, 300)
            }
        }

        function showParlayData(item){
            if (item.showParlay){
                item.showParlay = !item.showParlay;
            }else{
                item.parlayUpdating = true;
                vm.updateParlayData(item).then(function (response){
                    item.parlayUpdating = false;
                    item.showParlay = !item.showParlay;
                    $timeout(function (){
                        $scope.$digest();
                        // console.log(item);
                    }, 10)
                })
            }
        }

        function updateParlayData(item){
            let PromiseTeamIds = []
            let PromiseLeagueIds = []
            item.ParlayData.map(function (parlay){
                PromiseTeamIds.push(parlay.HomeId)
                PromiseTeamIds.push(parlay.AwayId);
                PromiseLeagueIds.push(parlay.LeagueId)
            })
            PromiseTeamIds = PromiseTeamIds.filter(function (item, index, inputArray) {	//Lọc trùng
                return inputArray.indexOf(item) === index;
            });
            PromiseLeagueIds = PromiseLeagueIds.filter(function (item, index, inputArray) {	//Lọc trùng
                return inputArray.indexOf(item) === index;
            });
            let promiseTeams = PromiseTeamIds.map(function(id) {
                return getTeamName(id)
            })
            return Promise.all(promiseTeams).then(function() {
                item.ParlayData.map(function (parlay){
                    let findHome = vm.localParlayData.Teams.filter(function (team){
                        return team.Id === parlay.HomeId
                    })[0];
                    let findAway = vm.localParlayData.Teams.filter(function (team){
                        return team.Id === parlay.AwayId
                    })[0];
                    parlay.HomeTeamNameEn = findHome.Name
                    parlay.AwayTeamNameEn = findAway.Name
                    matchingData(parlay);
                })
                let promiseLeagues = PromiseLeagueIds.map(function(id) {
                    return getLeagueName(id)
                })
                return Promise.all(promiseLeagues).then(function (){
                    item.ParlayData.map(function (parlay){
                        let findLeague = vm.localParlayData.Leagues.filter(function (League){
                            return League.Id === parlay.LeagueId
                        })[0];
                        parlay.LeagueNameEn = findLeague.Name
                    })
                    return true
                })
            }).catch(function(e) {
                console.log(e);
            });
        }

        function getTeamName(id){
            let find = vm.localParlayData.Teams.filter(function (team){
                return team.Id === id
            })
            if (find.length !== 0){
                return find[0]
            }else{
                return Lotus.Saba.Team.getTeamName({TeamId: id}).then(function (response){
                    response.Id = id
                    vm.localParlayData.Teams.push(response);
                    sessionStorage.setItem('Parlay', JSON.stringify(vm.localParlayData));
                    return response
                })
            }
        }

        function getLeagueName(id){
            let find = vm.localParlayData.Leagues.filter(function (team){
                return team.Id === id
            })
            if (find.length !== 0){
                return $timeout(function (){
                    return find[0]
                })
            }else{
                return Lotus.Saba.League.getLeagueName({LeagueId: id}).then(function (response){
                    response.Id = id
                    vm.localParlayData.Leagues.push(response);
                    sessionStorage.setItem('Parlay', JSON.stringify(vm.localParlayData));
                    return response
                })
            }
        }

        function ParlayDetails(item, $event){
            $mdDialog.show({
                controller: ParlayDetailsCtrl,
                templateUrl: 'app/main/account/statement/saba/items/template/dialog.parlay.html',
                parent: angular.element(document.body),
                targetEvent: $event,
                clickOutsideToClose: true,
                locals: {item: item},
                fullscreen: true
            });
            function ParlayDetailsCtrl($scope, item){
                $scope.cancel = function () {
                    $mdDialog.cancel();
                };
                $scope.MixParlay = item.ParlayType === 'MixParlay';
                if (item.ParlayType === 'MixParlay'){
                    vm.updateParlayData(item).then(function (){
                        $scope.ticket = item;
                        $timeout(function (){
                            $scope.$digest();
                        }, 10)
                    })
                }else{
                    let TeamIds = [];
                    Lotus.Saba.Report.Statement.getSystemParlayDetails({ RefNo: item.ParlayRefNo }).then(function (response){
                        response.map(function (item){
                            if (item.SystemParlayDetail.length){
                                item.nOdds = 1;
                                item.SystemParlayDetail.map(function (par){
                                    item.nOdds = item.nOdds * par.Odds;
                                    TeamIds.push(par.HomeId)
                                    TeamIds.push(par.AwayId);
                                })
                            }
                        })
                        TeamIds = TeamIds.filter(function (item, index, inputArray) {	//Lọc trùng
                            return inputArray.indexOf(item) === index;
                        });
                        let promises = TeamIds.map(function(id) {
                            return getTeamName(id)
                        })
                        Promise.all(promises).then(function (teams){
                            response.map(function (item){
                                if (item.SystemParlayDetail.length){
                                    item.SystemParlayDetail.map(function (par){
                                        par.HomeTeamNameEn = teams.filter(function (tea){
                                            return tea.Id === par.HomeId
                                        })[0].Name;
                                        par.AwayTeamNameEn = teams.filter(function (tea){
                                            return tea.Id === par.AwayId
                                        })[0].Name;
                                    })
                                }
                            })
                            $scope.SystemParlay = response;
                            $timeout(function (){
                                $scope.$digest()
                            }, 10)
                        })
                    }).catch(function (error) {
                        console.log(error)
                    })
                }
            }
        }

        function matchingData(item){
            let data = vm.sabaBetTypes.filter(function (bet){
                return bet.i === item.BetType
            });
            let vn = vm.sabaBetTypesVN.filter(function (bet){
                return bet.i === item.BetType
            })
            item.BetTypeTrans = vn.length !== 0 ? vn[0].n : item.BetType;
            if (vn.length === 0){
                item.BetTypeTrans = data.length !== 0 ? data[0].n : item.BetType;
            }
            if (data.length !== 0){
                if (data[0].t !== undefined){
                    let trans = data[0].t[item.BetTeam];
                    item.BetTeamTrans = trans;
                    // console.log(trans)

                    if (msUtils.exists(vm.data.SportGroup, [0,2]) && trans !== undefined){
                        if (trans.includes('home')){
                            if (item.HomeTeamNameEn !== undefined){
                                item.BetTeamTrans = trans.replace(/home/g, item.HomeTeamNameEn);
                            }
                        }
                        if (trans.includes('away')){
                            if (item.HomeTeamNameEn !== undefined){
                                item.BetTeamTrans = trans.replace(/away/g, item.AwayTeamNameEn);
                            }
                        }
                    }
                }else{
                    item.BetTeamTrans = item.BetTeam;
                }
                if (item.BetType === 5){
                    item.BetTeamTrans = 'FT.' + item.BetTeam;
                    item.HomeHdp = '';
                    item.AwayHdp = ''
                }
                if (item.BetType === 15){
                    item.BetTeamTrans = 'HT.' + item.BetTeam;
                    item.HomeHdp = '';
                    item.AwayHdp = ''
                }
            }else{
                item.BetTeamTrans = item.BetTeam;
            }

            if (item.BetType === 10){
                item.BetTeamTrans = getTeamName(item.BetTeam).Name;
            }

            if (item.LotteryBetType !== undefined){
                item.LotteryBetType = convertSpecialNumberBetType(item.LotteryBetType)
            }
        }

        function convertSpecialNumberBetType (txt) {
            const prefix = 'special number';
            if (txt.startsWith(prefix)) {
                if (txt.length === prefix.length) {
                    return  "number select";
                }
                return txt.slice(prefix.length).trim();
            }
            return txt;
        }

        function getMatch(arItem){
            let Existed = [], ExistedId = [];
            vm.localParlayData.Matchs.map(function (item){
                if ( msUtils.exists(item.MatchId, arItem) ){
                    Existed.push(item);
                    ExistedId.push(item.MatchId);
                }
            })
            let dnExist = arItem.filter(function(item) {
                return ExistedId.indexOf(item) === -1;
            });

            if (dnExist.length === 0){
                return $timeout(function(){
                    return Existed
                })
            }else{
                return Lotus.Saba.Match.getMatchDetails({MatchIds: dnExist}).then(function (response){
                    // console.log(response)
                    vm.localParlayData.Matchs = Existed.concat(response);
                    sessionStorage.setItem('Parlay', JSON.stringify(vm.localParlayData));
                    return vm.localParlayData.Matchs
                })
            }
        }

        function updateLeagueInfo(item){
            vm.getLeagueName(item.MatchDetails.LeagueId).then(function (response){
                item.LeagueName = response.Name;
                $timeout(function (){
                    $scope.$digest();
                })
            })
        }

        function ticketResult(item, $event){
            // console.log(item)
            if (vm.data.SportGroup === 0 && item.SingleParlayData !== undefined){
                vm.ticketResultSingleParlay(item, $event);
            }else if (vm.data.SportGroup === 0 && item.SingleParlayData === undefined && item.ParlayType !== 'System Parlay' && item.ParlayType !== 'MixParlay'){
                vm.ticketResultIsLive(item, $event);
            }else if (vm.data.SportGroup === 0 && item.SingleParlayData === undefined && (item.ParlayType === 'System Parlay' || item.ParlayType === 'MixParlay')){
                vm.ticketResultSystemParlay(item, $event);
            }else if (vm.data.SportGroup === 2){
                vm.ticketResultIsLive(item, $event);
            }
        }

        function ticketResultSingleParlay(item, $event){
            $mdDialog.show({
                controller: resultSingleParlayCtrl,
                templateUrl: 'app/main/account/statement/saba/items/template/result/single-parlay.html',
                parent: angular.element(document.body),
                targetEvent: $event,
                clickOutsideToClose: true,
                locals: {item: item},
                fullscreen: true
            });
            function resultSingleParlayCtrl($scope, item){
                $scope.cancel = function () {
                    $mdDialog.cancel();
                };
                vm.getMatch([item.MatchId]).then(function (response){
                    item.MatchDetails = response[0];
                    $scope.item = item;
                    $timeout(function (){
                        $scope.$digest();
                        // console.log(item)
                    })
                })
            }
        }

        function ticketResultIsLive(item, $event){
            $mdDialog.show({
                controller: resultSportLiveCtrl,
                templateUrl: 'app/main/account/statement/saba/items/template/result/sport-live.html',
                parent: angular.element(document.body),
                targetEvent: $event,
                clickOutsideToClose: true,
                locals: {item: item},
                fullscreen: true
            });
            function resultSportLiveCtrl($scope, item){
                $scope.cancel = function () {
                    $mdDialog.cancel();
                };
                vm.getMatch([item.MatchId]).then(function (response){
                    item.MatchDetails = response[0];
                    $scope.item = item;
                    $timeout(function (){
                        $scope.$digest();
                        // console.log(item)
                    })
                })
            }
        }

        function ticketResultSystemParlay(item, $event){
            $mdDialog.show({
                controller: resultSystemParlayCtrl,
                templateUrl: 'app/main/account/statement/saba/items/template/result/system-parlay.html',
                parent: angular.element(document.body),
                targetEvent: $event,
                clickOutsideToClose: true,
                locals: {item: item},
                fullscreen: true
            });

            function resultSystemParlayCtrl($scope, item){
                $scope.cancel = function () {
                    $mdDialog.cancel();
                };
                let MatchIds = [];
                item.ParlayData.map(function (parlay){
                    MatchIds.push(parlay.MatchId)
                })
                vm.getMatch(MatchIds).then(function (response){
                    item.ParlayData.map(function (parlay, index){
                        let find = response.filter(function (res){
                            return res.MatchId === parlay.MatchId;
                        })
                        if (find.length){
                        	parlay.GameStatus = find[0].GameStatus;
                            parlay.HomeScore = find[0].HomeScore;
                            parlay.AwayScore = find[0].AwayScore;
                            parlay.HtAwayScore = find[0].HtAwayScore;
                            parlay.HtHomeScore = find[0].HtHomeScore;
                            item.ParlayData[index] = Object.assign(find[0], parlay);
                        }
                    })
                    vm.updateParlayData(item).then(function (response){
                        $timeout(function (){
                            $scope.item = item;
                            $scope.$digest();
                            // console.log(item);
                        }, 10)
                    })
                })
            }

        }

        function getRNGBetItems(item){
            if ( item.showBetItem === true ){
                item.showBetItem = false;
                return;
            }
            item.betItemUpdating = true;
            Lotus.Saba.Report.Statement.getRNGBetItems({RefNo: item.Tx}).then(function (response){
                response.map(function (res){
                    matchingData(res);
                })
                item.RNGBetItems = response;
                item.showBetItem = true;
                item.betItemUpdating = false;
                // console.log(response)
                $timeout(function () {
                    $scope.$digest();
                }, 10)
            })
        }

        function showScore(item){
            return msUtils.exists(item.SportType, [8, 1, 3, 4, 28, 26])
        }
    }
})();

(function (){
    'use strict';
    angular
        .module('app.account')
        .controller('sabaSportReportCtrl', sabaSportReportCtrl);

    function sabaSportReportCtrl($rootScope, $scope, $stateParams, $timeout, network){
        let vm = this;
        vm.time = $stateParams.date;
        vm.date = moment.unix(vm.time).format('dddd') + ', ngày ' + moment.unix(vm.time).format('DD/MM/YYYY');
        vm.loading = true;

        vm.fetchReport = fetchReport;
        vm.fetchReport();

        function fetchReport() {
            if ($rootScope.User !== undefined){
                let data = {Date: moment.unix(vm.time).format('YYYY-MM-DD')};
                Lotus.Saba.Report.Statement.getReportGroupBySportGroup(data).then(function (response){

                    vm.loading = false;
                    vm.reports = response;
                    $scope.$digest();
                })
            }else{
                $timeout(function () {
                    vm.fetchReport()
                }, 300)
            }
        }
    }
})();

(function (){
    'use strict';

    angular
        .module('app.account')
        .controller('gameReportCtrl', gameReportCtrl);

    /** @ngInject */
    function gameReportCtrl($rootScope, $scope, $stateParams, $timeout, network){
        var vm = this;
        vm.data = $stateParams;
        vm.date = moment.unix(vm.data.time).format('dddd') + ', ngày ' + moment.unix(vm.data.time).format('DD/MM/YYYY');

        vm.loading = true;
        vm.fetchReport = fetchReport;
        vm.fetchReport();
        function fetchReport() {
            if ($rootScope.User !== undefined){
                network.Report.getBetTypeReports({Date: moment.unix(vm.data.time).format('YYYY-MM-DD'), GameType: vm.data.game}).then(function (response) {
                    response.sort(function (a, b) {
                        return a.BetType - b.BetType
                    });
                    vm.loading = false;
                    vm.reports = response;
                    $scope.$digest();
                })
            }else{
                $timeout(function () {
                    vm.fetchReport()
                }, 300)
            }
        }
    }
})();

(function (){
    'use strict';
    angular
        .module('app.account')
        .controller('dateReportCtrl', dateReportCtrl);

    /** @ngInject */
    function dateReportCtrl($rootScope, $scope, $stateParams, $timeout, network){
        var vm = this;
        vm.time = $stateParams.time;
        vm.date = moment.unix(vm.time).format('dddd') + ', ngày ' + moment.unix(vm.time).format('DD/MM/YYYY');
        vm.loading = true;
        vm.fetchReport = fetchReport;
        vm.fetchReport();
        function fetchReport() {
            if ($rootScope.User !== undefined){
                network.Report.getGameTypeReports({Date: moment.unix(vm.time).format('YYYY-MM-DD')}).then(function (response){
                    vm.loading = false;
                    response = response.sort(function (a, b) {
                        return a.GameType - b.GameType
                    });
                    vm.reports = response;
                    $scope.$digest();
                })
            }else{
                $timeout(function () {
                    vm.fetchReport()
                }, 300)
            }
        }



    }
})();

(function (){
    'use strict';

    angular
        .module('app.account')
        .controller('betReportCtrl', betReportCtrl);

    /** @ngInject */
    function betReportCtrl($rootScope, $scope, $stateParams, $timeout, network){
        var vm = this;
        vm.data = $stateParams;
        // vm.date = moment(vm.data.time, 'YYYY-MM-DD').format('dddd') + ', ngày ' + moment(vm.data.time, 'YYYY-MM-DD').format('DD/MM/YYYY');
        vm.date = moment.unix(vm.data.time).format('dddd') + ', ngày ' + moment.unix(vm.data.time).format('DD/MM/YYYY');

        vm.loading = true;
        vm.fetchReport = fetchReport;
        vm.fetchReport();
        vm.reports = [];
        function fetchReport(ltId) {
            ltId = ltId === undefined ? '' : ltId;
            if ($rootScope.User !== undefined){
                let data = {
                    Date: moment.unix(vm.data.time).format('YYYY-MM-DD'),
                    GameType: vm.data.game,
                    BetType: vm.data.bet,
                    Limit: 100,
                    LastId: ltId
                };
                network.Report.getTicketItemsReports(data).then(function (response) {
                    vm.thereMore = response.length === 100;
                    vm.lastID = response[response.length - 1].Id;
                    response.sort(function (a, b) {
                        return a.TicketNumber - b.TicketNumber
                    });
                    vm.loading = false;
                    vm.reports = vm.reports.concat(response);
                    $scope.$digest();
                })
            }else{
                $timeout(function () {
                    vm.fetchReport()
                }, 300)
            }
        }



    }
})();

(function (){
    'use strict';
    angular
        .module('app.account')
        .controller('legendTermReportCtrl', legendTermReportCtrl);

    /** @ngInject */
    function legendTermReportCtrl($rootScope, $scope, $stateParams, $timeout, network){
        var vm = this;
        vm.time = $stateParams.date;
        vm.game = $stateParams.game;
        vm.date = moment.unix(vm.time).format('dddd') + ', ngày ' + moment.unix(vm.time).format('DD/MM/YYYY');
        vm.loading = true;
        vm.fetchReport = fetchReport;
        vm.fetchReport();


        function fetchReport() {
            if ($rootScope.User !== undefined){
                network.Report.Legend.getReportGroupByTerm({GameType: vm.game, Date: moment.unix(vm.time).format('YYYY-MM-DD')}).then(function (response){
                    vm.loading = false;
                    response = response.sort(function (a, b) {
                        return a.Term - b.Term
                    });
                    vm.reports = response;
                    $scope.$digest();
                })
            }else{
                $timeout(function () {
                    vm.fetchReport()
                }, 300)
            }
        }
    }
})();

(function (){
    'use strict';

    angular
        .module('app.account')
        .controller('legendGameReportCtrl', legendGameReportCtrl);

    /** @ngInject */
    function legendGameReportCtrl($rootScope, $scope, $stateParams, $timeout, network){
        var vm = this;
        vm.data = $stateParams;
        vm.date = moment.unix(vm.data.time).format('dddd') + ', ngày ' + moment.unix(vm.data.time).format('DD/MM/YYYY');
        vm.loading = true;
        vm.fetchReport = fetchReport;
        vm.fetchReport();
        function fetchReport() {
            if ($rootScope.User !== undefined){
                network.Report.Legend.getReportGroupByBetType({Date: moment.unix(vm.data.time).format('YYYY-MM-DD'), GameType: vm.data.game, Term: vm.data.term}).then(function (response) {
                    response.sort(function (a, b) {
                        return a.BetType - b.BetType
                    });
                    vm.loading = false;
                    vm.reports = response;
                    $scope.$digest();
                })
            }else{
                $timeout(function () {
                    vm.fetchReport()
                }, 300)
            }
        }
    }
})();

(function (){
    'use strict';
    angular
        .module('app.account')
        .controller('legendDateReportCtrl', legendDateReportCtrl);

    /** @ngInject */
    function legendDateReportCtrl($rootScope, $scope, $stateParams, $timeout, network){
        var vm = this;
        vm.time = $stateParams.time;
        vm.date = moment.unix(vm.time).format('dddd') + ', ngày ' + moment.unix(vm.time).format('DD/MM/YYYY');
        vm.loading = true;
        vm.fetchReport = fetchReport;
        vm.fetchReport();
        function fetchReport() {
            if ($rootScope.User !== undefined){
                network.Report.Legend.getReportGroupByGameType({Date: moment.unix(vm.time).format('YYYY-MM-DD')}).then(function (response){
                    vm.loading = false;
                    response = response.sort(function (a, b) {
                        return a.GameType - b.GameType
                    });
                    vm.reports = response;
                    $scope.$digest();
                })
            }else{
                $timeout(function () {
                    vm.fetchReport()
                }, 300)
            }
        }
    }
})();

(function (){
    'use strict';

    angular
        .module('app.account')
        .controller('legendBetReportCtrl', legendBetReportCtrl);

    /** @ngInject */
    function legendBetReportCtrl($rootScope, $scope, $stateParams, $timeout, $filter, network){
        let vm = this;
        vm.data = $stateParams;
        vm.BetType = parseInt(vm.data.bet);
        vm.date = 'Phiên '+ $filter('term')(vm.data.term);
        vm.loading = true;
        vm.fetchReport = fetchReport;
        vm.fetchReport();
        vm.reports = [];
        function fetchReport(ltId) {
            ltId = ltId === undefined ? '' : ltId;
            if ($rootScope.User !== undefined){
                let data = {
                    Term: vm.data.term,
                    GameType: vm.data.game,
                    BetType: vm.data.bet,
                    Limit: 100,
                    LastId: ltId
                };
                network.Report.Legend.getTicketItems(data).then(function (response) {
                    vm.thereMore = response.length === 100;
                    vm.lastID = response[response.length - 1].Id;
                    response.sort(function (a, b) {
                        return a.TicketNumber - b.TicketNumber
                    });
                    vm.loading = false;
                    vm.reports = vm.reports.concat(response);
                    $scope.$digest();
                })
            }else{
                $timeout(function () {
                    vm.fetchReport()
                }, 300)
            }
        }
    }
})();

(function (){
    'use strict';

    angular
        .module('app.account')
        .controller('gameCasinoReportCtrl', gameCasinoReportCtrl);

    /** @ngInject */
    function gameCasinoReportCtrl($rootScope, $scope, $stateParams, $timeout, network){
        var vm = this;
        vm.data = $stateParams;
        vm.date = moment.unix(vm.data.time).format('dddd') + ', ngày ' + moment.unix(vm.data.time).format('DD/MM/YYYY');

        vm.loading = true;
        vm.fetchReport = fetchReport;
        vm.fetchReport();
        vm.reports = [];


        // console.log(vm.data)

        function fetchReport(ltId) {
            ltId = ltId === undefined ? '' : ltId;
            let data = {
                From: moment.unix(vm.data.time).format('YYYY-MM-DD'),
                To: moment.unix(vm.data.time).format('YYYY-MM-DD'),
                LastId: ltId,
                Limit: 100
            };

            if ($rootScope.User !== undefined){
                if (parseInt(vm.data.game) === 0){
                    network.Report.LegendCasino.Sedie.getPlayerBetItems(data).then(function (response) {
                        vm.thereMore = response.length === 100;
                        vm.loading = false;
                        vm.reports = vm.reports.concat(response);
                        $scope.$digest();
                    })
                }else{
                    Lotus.SenCasino.Games.Politics.Report.getBetItems(data).then(function (response) {
                        vm.thereMore = response.length === 100;
                        vm.loading = false;
                        vm.reports = vm.reports.concat(response);
                        $scope.$digest();
                    })
                }
            }else{
                $timeout(function () {
                    vm.fetchReport()
                }, 300)
            }
        }
    }
})();

(function (){
    'use strict';
    angular
        .module('app.account')
        .controller('dateCasinoReportCtrl', dateCasinoReportCtrl);

    /** @ngInject */
    function dateCasinoReportCtrl($rootScope, $scope, $state, $stateParams, $timeout, network){
        let vm = this;
        vm.time = $stateParams.time;
        vm.date = moment.unix(vm.time).format('dddd') + ', ngày ' + moment.unix(vm.time).format('DD/MM/YYYY');
        vm.loading = true;

        vm.fetchReport = fetchReport;
        vm.gotoGame = gotoGame;
        vm.fetchReport();

        function fetchReport() {
            if ($rootScope.User !== undefined){
                let data = {Date: moment.unix(vm.time).format('YYYY-MM-DD')};
                network.Report.LegendCasino.getReportGroupByGameType(data).then(function (response){
                    vm.loading = false;
                    vm.reports = response;
                    $scope.$digest();
                })
            }else{
                $timeout(function () {
                    vm.fetchReport()
                }, 300)
            }
        }

        function gotoGame(params){
            // console.log(params)
            if (params.game === 100){
                $state.go('app.account.statement.casino.game.presidential', params)
            }else{
                $state.go('app.account.statement.casino.game', params)
            }
        }
    }
})();

(function (){
    'use strict';

    angular
        .module('app.account')
        .controller('legendFullCtrl', legendFullCtrl);

    /** @ngInject */
    function legendFullCtrl($rootScope, $scope, $stateParams, $timeout, network){
        var vm = this;

        vm.dtOptions = {
            autoWidth : true,
            responsive: true,
            searching:false,
            paging: false,
            bInfo: false,
            bPaginate: false,
            columnDefs: [
                {targets: 0, orderable: false},
                {targets: 1, orderable: false},
                // {targets: 2, orderable: false},
                {targets: 3, orderable: false},
                {targets: 4, orderable: false},
                {targets: 5, orderable: false}
            ]
        };


        vm.ticketByTerm = ticketByTerm;
        vm.term = $stateParams.term;

        let data = {};
        vm.tickets = [];
        vm.ticketByTerm();

        function ticketByTerm(ltId) {
            vm.loading = true;
            data.Limit = 50;
            data.LastId = ltId === undefined ? '' : ltId;

            if ($rootScope.currentTerm !== undefined){
                network.Legend.Ticket.getItemsByTerm(data).then(function (resp) {
                    vm.loading = false;
                    vm.ltID = resp[resp.length - 1].Id;
                    vm.hasMoreTickets = resp.length === 50;
                    vm.tickets = vm.tickets.concat(resp);
                    vm.tickets = vm.tickets.sort(function (a, b) {
                        return a.GameType - b.GameType || a.BetType - b.BetType
                    })
                    $scope.$digest();
                })
            }else{
                $timeout(function () {
                    vm.ticketByTerm()
                }, 1000)
            }
        }
    }
})();

(function (){
    'use strict';

    angular
        .module('app.account')
        .controller('legendBatchCtrl', legendBatchCtrl);

    /** @ngInject */
    function legendBatchCtrl($rootScope, $scope, $stateParams, $timeout, network){
        var vm = this;

        vm.dtOptions = {
            autoWidth : true,
            responsive: true,
            searching:false,
            paging: false,
            bInfo: false,
            bPaginate: false,
            columnDefs: [
                {targets: 0, orderable: false},
                {targets: 1, orderable: false},
                // {targets: 2, orderable: false},
                {targets: 3, orderable: false},
                {targets: 4, orderable: false},
                {targets: 5, orderable: false}
            ]
        };


        vm.ticketByBatchId = ticketByBatchId;
        vm.term = $stateParams.term;

        let data = {TicketNumbers: []};
        angular.forEach($stateParams.id.split(","), function (id) {
            data.TicketNumbers.push(parseInt(id))
        });
        data.GameType = $stateParams.game;

        vm.tickets = [];
        vm.ticketByBatchId();

        function ticketByBatchId(ltId) {
            vm.loading = true;
            data.Limit = 100;
            data.LastId = ltId === undefined ? '' : ltId;

            if ($rootScope.currentTerm !== undefined){
                network.Legend.Ticket.TicketItem(data).then(function (resp) {
                    vm.loading = false;
                    vm.ltID = resp[resp.length - 1].Id;
                    vm.hasMoreTickets = resp.length === 100;
                    vm.tickets = vm.tickets.concat(resp);
                    vm.tickets = vm.tickets.sort(function (a, b) {
                        return a.GameType - b.GameType || a.BetType - b.BetType
                    })
                    $scope.$digest();
                })
            }else{
                $timeout(function () {
                    vm.ticketByBatchId()
                }, 1000)
            }
        }
    }
})();

(function (){
    'use strict';

    angular
        .module('app.account')
        .controller('blBatchCtrl', blBatchCtrl);

    /** @ngInject */
    function blBatchCtrl($rootScope, $scope, $stateParams, $timeout, network){
        var vm = this;

        vm.dtOptions = {
            autoWidth : true,
            responsive: true,
            searching:false,
            paging: false,
            bInfo: false,
            bPaginate: false,
            columnDefs: [
                {targets: 0, orderable: false},
                {targets: 1, orderable: false},
                // {targets: 2, orderable: false},
                {targets: 3, orderable: false},
                {targets: 4, orderable: false},
                {targets: 5, orderable: false}
            ]
        };


        vm.ticketByBatchId = ticketByBatchId;
        vm.term = $stateParams.term;

        let data = {TicketNumbers: []};
        angular.forEach($stateParams.id.split(","), function (id) {
            data.TicketNumbers.push(parseInt(id))
        });
        vm.tickets = [];
        vm.ticketByBatchId();

        function ticketByBatchId(ltId) {
            vm.loading = true;
            data.Limit = 100;
            data.LastId = ltId === undefined ? '' : ltId;

            if ($rootScope.currentTerm !== undefined){
                network.Ticket.TicketItem(data).then(function (resp) {
                    vm.loading = false;
                    vm.ltID = resp[resp.length - 1].Id;
                    vm.hasMoreTickets = resp.length === 100;
                    vm.tickets = vm.tickets.concat(resp);
                    vm.tickets = vm.tickets.sort(function (a, b) {
                        return a.GameType - b.GameType || a.BetType - b.BetType
                    })
                    $scope.$digest();
                })
            }else{
                $timeout(function () {
                    vm.ticketByBatchId()
                }, 1000)
            }
        }
    }
})();

(function (){
    'use strict';

    angular
        .module('app.account')
        .controller('blFullCtrl', blFullCtrl);

    /** @ngInject */
    function blFullCtrl($rootScope, $scope, $stateParams, $timeout, network){
        var vm = this;

        vm.dtOptions = {
            autoWidth : true,
            responsive: true,
            searching:false,
            paging: false,
            bInfo: false,
            bPaginate: false,
            columnDefs: [
                {targets: 0, orderable: false},
                {targets: 1, orderable: false},
                // {targets: 2, orderable: false},
                {targets: 3, orderable: false},
                {targets: 4, orderable: false},
                {targets: 5, orderable: false}
            ]
        };


        vm.ticketByTerm = ticketByTerm;
        vm.term = $stateParams.term;

        let data = {};
        vm.tickets = [];
        vm.ticketByTerm();

        function ticketByTerm(ltId) {
            vm.loading = true;
            data.Limit = 50;
            data.LastId = ltId === undefined ? '' : ltId;

            if ($rootScope.currentTerm !== undefined){
                network.Ticket.getItemsByTerm(data).then(function (resp) {
                    vm.loading = false;
                    vm.ltID = resp[resp.length - 1].Id;
                    vm.hasMoreTickets = resp.length === 50;
                    vm.tickets = vm.tickets.concat(resp);
                    vm.tickets = vm.tickets.sort(function (a, b) {
                        return a.GameType - b.GameType || a.BetType - b.BetType
                    })
                    $scope.$digest();
                })
            }else{
                $timeout(function () {
                    vm.ticketByTerm()
                }, 1000)
            }
        }
    }
})();

(function (){
    'use strict';

    angular
        .module('app.traditional')
        .controller('qbController', qbController);

    function qbController($rootScope, $scope, $timeout, $interval, $document, msUtils, Analytics){
        let vm = this;

        vm.declareRow = declareRow;
        vm.checkRe = checkRe;
        vm.totalMoney = totalMoney;
        vm.checkDisabledReset = checkDisabledReset;
        vm.submitBetting = submitBetting;
        vm.ignorePrice = true;

        $document.bind('keydown keypress', function (e) {
            if(e.which === 27) {
                vm.declareRow();
                e.preventDefault()
            }
        });

        vm.declareRow();

        function declareRow(){
            vm.rows = [];
            for (let i=0; i<15; i++){
                let row = {};
                row.number = '';
                row.reverse = false;
                row.D2 = {dau: 0, duoi: 0, dd: 0, lo27: 0};
                row.D3 = {dau: 0, duoi: 0, dd: 0, lo23: 0};
                row.D4 = {duoi: 0, lo20: 0};
                row.money = 0;
                vm.rows.push(row)
            }
        }

        $scope.$on('TradOdds::done', function (){
            vm.ready = true;
            vm.odds = $rootScope.TradOdds.filter(function (odd) {
                return odd.GameType === 1 && msUtils.exists(odd.BetType, [7,8,9,10,11,12,13,14]) && odd.Term === ($rootScope.isAuthenticated ? $rootScope.termName : 'Public')
            })
        })

        function checkDisabledReset() {
            let check = 0;
            angular.forEach(vm.rows, function (row) {
                check += row.number.length ? 1 : 0
            });
            return check === 0
        }

        function checkRe(number){
            if (number.length === 4){
                return (number.split('')[0] === number.split('')[1] && number.split('')[1] === number.split('')[2] && number.split('')[2] === number.split('')[3])
            }else if (number.length === 3){
                return (number.split('')[0] === number.split('')[1] && number.split('')[1] === number.split('')[2])
            }else if (number.length === 2){
                return number.split('')[0] === number.split('')[1]
            }else if(number.length === 1){
                return false
            }else{
                return true
            }
        }

        function totalMoney() {
            vm.sumMoney = 0;
            let allNumbers = [];
            angular.forEach(vm.rows, function (rw){
                if (rw.number.length > 1){
                    let n = rw.number.length === 1 ? '0' + rw.number.toString() : rw.number;
                    if (rw.reverse){
                        allNumbers = allNumbers.concat(msUtils.permNumber(n))
                    }else {
                        allNumbers.push(n)
                    }
                }
            })
            angular.forEach(vm.rows, function (row) {
                if (row.number.length < 2){return}
                let number = row.number;
                let numbers = row.reverse ? msUtils.permNumber(number) : [number];

                let count = allNumbers.filter(function (c) {
                    return c === number
                })
                if (count.length > 1){
                    $timeout(function () {
                        row.number = '';
                        row.money = 0;
                    })
                }

                let rowMoney = 0, oddPrice;
                if (number.length === 4){
                    let point4DDuoi = Math.abs(row.D4.duoi);
                    let point4D20Lo = Math.abs(row.D4.lo20);
                    //Tính tiền cho 4D Đuôi.
                    if (point4DDuoi > 0){
                        oddPrice = $.grep(vm.odds, function (bet) {
                            return bet.BetType === 13
                        })[0];
                        angular.forEach(numbers, function (num) {
                            let findExtra = $.grep(oddPrice.Numbers, function (n) {
                                return n.Number === num
                            });
                            if (findExtra.length === 0){
                                rowMoney += point4DDuoi * oddPrice.Price
                            }else {
                                if (!findExtra[0].Stop && findExtra[0].ExtraPrice){
                                    rowMoney += point4DDuoi * (oddPrice.Price + findExtra[0].ExtraPrice)
                                }
                            }
                        })
                    }
                    //Tính tiền cho 4D-20Lô
                    if (point4D20Lo > 0){
                        oddPrice = $.grep(vm.odds, function (bet) {
                            return bet.BetType === 14
                        })[0];
                        angular.forEach(numbers, function (num) {
                            let findExtra = $.grep(oddPrice.Numbers, function (n) {
                                return n.Number === num
                            });
                            if (findExtra.length === 0){
                                rowMoney += point4D20Lo * oddPrice.Price * 20
                            }else {
                                if (!findExtra[0].Stop && findExtra[0].ExtraPrice){
                                    rowMoney += point4D20Lo * (oddPrice.Price + findExtra[0].ExtraPrice) * 20
                                }
                            }
                        })
                    }
                }else if (number.length === 3){
                    let point3DDau = Math.abs(row.D3.dau) + Math.abs(row.D3.dd);
                    let point3DDuoi = Math.abs(row.D3.duoi) + Math.abs(row.D3.dd);
                    let point3D23Lo = Math.abs(row.D3.lo23);

                    //Tính tiền 3D Đầu
                    if (point3DDau > 0){
                        oddPrice = $.grep(vm.odds, function (bet) {
                            return bet.BetType === 10
                        })[0];
                        angular.forEach(numbers, function (num) {
                            let findExtra = $.grep(oddPrice.Numbers, function (n) {
                                return n.number === num
                            });
                            if (findExtra.length === 0){
                                rowMoney += point3DDau * oddPrice.Price * 3
                            }else {
                                if (!findExtra[0].Stop && findExtra[0].ExtraPrice){
                                    rowMoney += point3DDau * (oddPrice.Price + findExtra[0].ExtraPrice) * 3
                                }
                            }
                        })
                    }
                    //Tính tiền 3D Đuôi
                    if (point3DDuoi > 0){
                        oddPrice = $.grep(vm.odds, function (bet) {
                            return bet.BetType === 11
                        })[0];
                        angular.forEach(numbers, function (num) {
                            let findExtra = $.grep(oddPrice.Numbers, function (n) {
                                return n.Number === num
                            });
                            if (findExtra.length === 0){
                                rowMoney += point3DDuoi * oddPrice.Price
                            }else {
                                if (!findExtra[0].Stop && findExtra[0].ExtraPrice){
                                    rowMoney += point3DDuoi * (oddPrice.Price + findExtra[0].ExtraPrice)
                                }
                            }
                        })
                    }
                    //Tính tiền 3D 23 Lô
                    if (point3D23Lo > 0){
                        oddPrice = $.grep(vm.odds, function (bet) {
                            return bet.BetType === 12
                        })[0];
                        angular.forEach(numbers, function (num) {
                            let findExtra = $.grep(oddPrice.Numbers, function (n) {
                                return n.Number === num
                            });
                            if (findExtra.length === 0){
                                rowMoney += point3D23Lo * oddPrice.Price * 23
                            }else {
                                if (!findExtra[0].Stop && findExtra[0].ExtraPrice){
                                    rowMoney += point3D23Lo * (oddPrice.Price + findExtra[0].ExtraPrice) * 23
                                }
                            }
                        })
                    }
                }else {
                    let point2DDau = Math.abs(row.D2.dau) + Math.abs(row.D2.dd);
                    let point2DDuoi = Math.abs(row.D2.duoi) + Math.abs(row.D2.dd);
                    let point2D27Lo = Math.abs(row.D2.lo27);
                    //Tính tiền 2D Đầu
                    if (point2DDau > 0){
                        oddPrice = $.grep(vm.odds, function (bet) {
                            return bet.BetType === 7
                        })[0];
                        angular.forEach(numbers, function (num) {
                            let findExtra = $.grep(oddPrice.Numbers, function (n) {
                                return n.Number === num
                            });
                            if (findExtra.length === 0){
                                rowMoney += point2DDau * oddPrice.Price * 4
                            }else {
                                if (!findExtra[0].Stop && findExtra[0].ExtraPrice){
                                    rowMoney += point2DDau * (oddPrice.Price + findExtra[0].ExtraPrice) * 4
                                }
                            }
                        });
                    }
                    //Tính tiền 2D Đuôi
                    if (point2DDuoi > 0){
                        oddPrice = $.grep(vm.odds, function (bet) {
                            return bet.BetType === 8
                        })[0];
                        angular.forEach(numbers, function (num) {
                            let findExtra = $.grep(oddPrice.Numbers, function (n) {
                                return n.Number === num
                            });
                            if (findExtra.length === 0){
                                rowMoney += point2DDuoi * oddPrice.Price
                            }else {
                                if (!findExtra[0].Stop && findExtra[0].ExtraPrice){
                                    rowMoney += point2DDuoi * (oddPrice.Price + findExtra[0].ExtraPrice)
                                }
                            }
                        })
                    }
                    //Tính tiền 2D 27 Lô
                    if (point2D27Lo > 0){
                        oddPrice = $.grep(vm.odds, function (bet) {
                            return bet.BetType === 9
                        })[0];
                        angular.forEach(numbers, function (num) {
                            let findExtra = $.grep(oddPrice.Numbers, function (n) {
                                return n.Number === num
                            });
                            if (findExtra.length === 0){
                                rowMoney += point2D27Lo * oddPrice.Price * 27
                            }else {
                                if (!findExtra[0].Stop && findExtra[0].ExtraPrice){
                                    rowMoney += point2D27Lo * (oddPrice.Price + findExtra[0].ExtraPrice) * 27
                                }
                            }
                        })
                    }
                }
                row.money = rowMoney;
                vm.sumMoney += rowMoney;
            });
            return vm.sumMoney
        }

        function submitBetting() {
            let oddPrice, betObj = {}, TicketObj, betTypeAlias;
            betObj.Term = $rootScope.termName;
            betObj.IgnorePrice = vm.ignorePrice;
            betObj.Tickets = [];
            vm.ns = [];
            vm.sumPoint = 0;
            angular.forEach(vm.rows, function (row, rowId) {
                if (row.number.length){
                    let number = row.number.length === 1 ? '0' + row.number.toString() : row.number;
                    let numbers = row.reverse ? msUtils.permNumber(number) : [number];
                    vm.ns = vm.ns.concat(numbers);
                    betTypeAlias = 0;

                    if (number.length === 4){
                        let point4DDuoi = Math.abs(row.D4.duoi);
                        let point4D20Lo = Math.abs(row.D4.lo20);
                        betTypeAlias += point4DDuoi > 0 ? 524288 : 0;
                        betTypeAlias += point4D20Lo > 0 ? 2097152 : 0;
                        //4D Đuôi.
                        if (point4DDuoi > 0){
                            oddPrice = $.grep(vm.odds, function (bet) {
                                return bet.BetType === 13
                            })[0];

                            TicketObj = {
                                GameType: 1,
                                BetType: 13,
                                Additional: {
                                    Row: rowId,
                                    Alias: betTypeAlias,
                                    Reverse: row.reverse
                                },
                                Items: []
                            };
                            angular.forEach(numbers, function (num) {
                                let Number = {};
                                Number.Numbers = [num];
                                Number.Point = point4DDuoi;
                                vm.sumPoint += point4DDuoi;
                                let findExtra = $.grep(oddPrice.Numbers, function (n) {
                                    return n.Number === num
                                });
                                if (findExtra.length === 0){
                                    Number.Price = oddPrice.Price;
                                    TicketObj.Items.push(Number);
                                }else {
                                    if (findExtra[0].ExtraPrice !== undefined){
                                        Number.Price = oddPrice.Price + findExtra[0].ExtraPrice
                                    }
                                    if (!findExtra[0].Stop){
                                        TicketObj.Items.push(Number);
                                    }
                                }
                            });
                            if (TicketObj.Items.length){
                                betObj.Tickets.push(TicketObj)
                            }
                        }
                        //4D-20Lô
                        if (point4D20Lo > 0){
                            oddPrice = $.grep(vm.odds, function (bet) {
                                return bet.BetType === 14
                            })[0];
                            TicketObj = {
                                GameType: 1,
                                BetType: 14,
                                Additional: {
                                    Row: rowId,
                                    Alias: betTypeAlias,
                                    Reverse: row.reverse
                                },
                                Items: []
                            };
                            angular.forEach(numbers, function (num) {
                                let Number = {};
                                Number.Numbers = [num];
                                Number.Point = point4D20Lo;
                                vm.sumPoint += point4D20Lo;
                                let findExtra = $.grep(oddPrice.Numbers, function (n) {
                                    return n.Number === num
                                });
                                if (findExtra.length === 0){
                                    Number.Price = oddPrice.Price;
                                    TicketObj.Items.push(Number);
                                }else {
                                    if (findExtra[0].ExtraPrice !== undefined){
                                        Number.Price = oddPrice.Price + findExtra[0].ExtraPrice
                                    }
                                    if (!findExtra[0].Stop){
                                        TicketObj.Items.push(Number);
                                    }
                                }
                            });
                            if (TicketObj.Items.length){
                                betObj.Tickets.push(TicketObj)
                            }
                        }
                    }else if (number.length === 3) {
                        let point3DDau = Math.abs(row.D3.dau) + Math.abs(row.D3.dd);
                        let point3DDuoi = Math.abs(row.D3.duoi) + Math.abs(row.D3.dd);
                        let point3D23Lo = Math.abs(row.D3.lo23);

                        betTypeAlias = Math.abs(row.D3.dd) !== 0 ? 32768 : 0;
                        betTypeAlias += Math.abs(row.D3.dau) ? 8192 : 0;
                        betTypeAlias += Math.abs(row.D3.duoi) ? 16384 : 0;
                        betTypeAlias += point3D23Lo ? 65536 : 0;

                        //3D Đầu.
                        if (point3DDau > 0){
                            oddPrice = $.grep(vm.odds, function (bet) {
                                return bet.BetType === 10
                            })[0];

                            TicketObj = {
                                GameType: 1,
                                BetType: 10,
                                Additional: {
                                    Row: rowId,
                                    Alias: betTypeAlias,
                                    Reverse: row.reverse
                                },
                                Items: []
                            };

                            angular.forEach(numbers, function (num) {
                                let Number = {};
                                Number.Numbers = [num];
                                Number.Point = point3DDau;
                                vm.sumPoint += point3DDau;
                                let findExtra = $.grep(oddPrice.Numbers, function (n) {
                                    return n.Number === num
                                });
                                if (findExtra.length === 0){
                                    Number.Price = oddPrice.Price;
                                    TicketObj.Items.push(Number);
                                }else {
                                    if (findExtra[0].ExtraPrice !== undefined){
                                        Number.Price = oddPrice.Price + findExtra[0].ExtraPrice
                                    }
                                    if (!findExtra[0].Stop){
                                        TicketObj.Items.push(Number);
                                    }
                                }
                            });
                            if (TicketObj.Items.length){
                                betObj.Tickets.push(TicketObj)
                            }
                        }
                        //3D Đuôi.
                        if (point3DDuoi > 0){
                            oddPrice = $.grep(vm.odds, function (bet) {
                                return bet.BetType === 11
                            })[0];
                            TicketObj = {
                                GameType: 1,
                                BetType: 11,
                                Additional: {
                                    Row: rowId,
                                    Alias: betTypeAlias,
                                    Reverse: row.reverse
                                },
                                Items: []
                            };
                            angular.forEach(numbers, function (num) {
                                let Number = {};
                                Number.Numbers = [num];
                                Number.Point = point3DDuoi;
                                vm.sumPoint += point3DDuoi;
                                let findExtra = $.grep(oddPrice.Numbers, function (n) {
                                    return n.Number === num
                                });
                                if (findExtra.length === 0){
                                    Number.Price = oddPrice.Price;
                                    TicketObj.Items.push(Number);
                                }else {
                                    if (findExtra[0].ExtraPrice){
                                        Number.Price = oddPrice.Price + findExtra[0].ExtraPrice
                                    }
                                    if (!findExtra[0].Stop){
                                        TicketObj.Items.push(Number);
                                    }
                                }
                            });
                            if (TicketObj.Items.length){
                                betObj.Tickets.push(TicketObj)
                            }
                        }
                        //3D 17Lô.
                        if (point3D23Lo > 0){
                            oddPrice = $.grep(vm.odds, function (bet) {
                                return bet.BetType === 12
                            })[0];

                            TicketObj = {
                                GameType: 1,
                                BetType: 12,
                                Additional: {
                                    Row: rowId,
                                    Alias: betTypeAlias,
                                    Reverse: row.reverse
                                },
                                Items: []
                            };

                            angular.forEach(numbers, function (num) {
                                let Number = {};
                                Number.Numbers = [num];
                                Number.Point = point3D23Lo;
                                vm.sumPoint += point3D23Lo;
                                let findExtra = $.grep(oddPrice.Numbers, function (n) {
                                    return n.Number === num
                                });
                                if (findExtra.length === 0){
                                    Number.Price = oddPrice.Price;
                                    TicketObj.Items.push(Number);
                                }else {
                                    if (findExtra[0].ExtraPrice !== undefined){
                                        Number.Price = oddPrice.Price + findExtra[0].ExtraPrice
                                    }
                                    if (!findExtra[0].stop){
                                        TicketObj.Items.push(Number);
                                    }
                                }
                            });
                            if (TicketObj.Items.length){
                                betObj.Tickets.push(TicketObj)
                            }
                        }
                    }else{
                        let point2DDau = Math.abs(row.D2.dau) + Math.abs(row.D2.dd);
                        let point2DDuoi = Math.abs(row.D2.duoi) + Math.abs(row.D2.dd);
                        let point2D27Lo = Math.abs(row.D2.lo27);
                        betTypeAlias = Math.abs(row.D2.dd) !== 0 ? 512 : 0;
                        betTypeAlias += Math.abs(row.D2.dau) > 0 ? 128 : 0;
                        betTypeAlias += Math.abs(row.D2.duoi) > 0 ? 256 : 0;
                        betTypeAlias += point2D27Lo > 0 ? 1024 : 0;

                        //2D Đầu.
                        if (point2DDau > 0){
                            oddPrice = $.grep(vm.odds, function (bet) {
                                return bet.BetType === 7
                            })[0];
                            TicketObj = {
                                GameType: 1,
                                BetType: 7,
                                Additional: {
                                    Row: rowId,
                                    Alias: betTypeAlias,
                                    Reverse: row.reverse
                                },
                                Items: []
                            };
                            angular.forEach(numbers, function (num) {
                                let Number = {};
                                Number.Numbers = [num];
                                Number.Point = point2DDau;
                                vm.sumPoint += point2DDau;
                                let findExtra = $.grep(oddPrice.Numbers, function (n) {
                                    return n.Number === num
                                });
                                if (findExtra.length === 0){
                                    Number.Price = oddPrice.Price;
                                    TicketObj.Items.push(Number);
                                }else {
                                    if (findExtra[0].ExtraPrice !== undefined){
                                        Number.Price = oddPrice.Price + findExtra[0].ExtraPrice
                                    }
                                    if (!findExtra[0].Stop){
                                        TicketObj.Items.push(Number);
                                    }
                                }
                            });
                            if (TicketObj.Items.length){
                                betObj.Tickets.push(TicketObj)
                            }
                        }
                        //2D Đuôi.
                        if (point2DDuoi > 0){
                            oddPrice = $.grep(vm.odds, function (bet) {
                                return bet.BetType === 8
                            })[0];

                            TicketObj = {
                                GameType: 1,
                                BetType: 8,
                                Additional: {
                                    Row: rowId,
                                    Alias: betTypeAlias,
                                    Reverse: row.reverse
                                },
                                Items: []
                            };

                            angular.forEach(numbers, function (num) {
                                let Number = {};
                                Number.Numbers = [num];
                                Number.Point = point2DDuoi;
                                vm.sumPoint += point2DDuoi;
                                let findExtra = $.grep(oddPrice.Numbers, function (n) {
                                    return n.Number === num
                                });
                                if (findExtra.length === 0){
                                    Number.Price = oddPrice.Price;
                                    TicketObj.Items.push(Number);
                                }else {
                                    if (findExtra[0].ExtraPrice !== undefined){
                                        Number.Price = oddPrice.Price + findExtra[0].ExtraPrice
                                    }
                                    if (!findExtra[0].Stop){
                                        TicketObj.Items.push(Number);
                                    }
                                }
                            });
                            if (TicketObj.Items.length){
                                betObj.Tickets.push(TicketObj)
                            }
                        }
                        //2D 27Lô.
                        if (point2D27Lo > 0){
                            oddPrice = $.grep(vm.odds, function (bet) {
                                return bet.BetType === 9
                            })[0];

                            TicketObj = {
                                GameType: 1,
                                BetType: 9,
                                Additional: {
                                    Row: rowId,
                                    Alias: betTypeAlias,
                                    Reverse: row.reverse
                                },
                                Items: []
                            };
                            angular.forEach(numbers, function (num) {
                                let Number = {};
                                Number.Numbers = [num];
                                Number.Point = point2D27Lo;
                                vm.sumPoint += point2D27Lo;
                                let findExtra = $.grep(oddPrice.Numbers, function (n) {
                                    return n.Number === num
                                });
                                if (findExtra.length === 0){
                                    Number.Price = oddPrice.Price;
                                    TicketObj.Items.push(Number);
                                }else {
                                    if (findExtra[0].ExtraPrice !== undefined){
                                        Number.Price = oddPrice.Price + findExtra[0].ExtraPrice
                                    }
                                    if (!findExtra[0].stop){
                                        TicketObj.Items.push(Number);
                                    }
                                }
                            });
                            if (TicketObj.Items.length){
                                betObj.Tickets.push(TicketObj)
                            }
                        }
                    }
                }
            });

            let eventData = {
                betObj: betObj,
                sumObj: {
                    numbers: vm.ns,
                    point: vm.sumPoint,
                    money: vm.sumMoney
                }
            }
            $rootScope.$broadcast('EventBetting', eventData);

            let User = $rootScope.isAuthenticated ? $rootScope.User.Username : 'notAuthenticated';
            Analytics.trackEvent('QUICK', 'Betting', User);
        }

        $rootScope.$on('ResetBetting', function (){
            vm.declareRow();
        })

        $rootScope.$broadcast('TradOdds::get', {GameTypes: [1], BetTypes: [7,8,9,10,11,12,13,14]});

        $timeout(function () {
            let User = $rootScope.isAuthenticated ? $rootScope.User.Username : 'notAuthenticated';
            Analytics.trackEvent('QUICK', 'ENTER', User);
        }, 500)
    }
})();
(function (){
    'use strict';

    angular
        .module('app.traditional')
        .controller('north2ParlayCtrl', north2ParlayCtrl);

    function north2ParlayCtrl($rootScope, $scope, $mdMedia, $mdSidenav, $timeout, $interval, $state, $document, msUtils, network, select){
        let vm = this;

        vm.buildPriceTable = buildPriceTable;
        vm.selectNumber = selectNumber;
        vm.groupNumbers = groupNumbers;
        vm.inputKeyNumber = inputKeyNumber;
        vm.submitKeyNumber = submitKeyNumber;
        vm.resetBetting = resetBetting;
        vm.costMoney = costMoney;
        vm.submitBetting = submitBetting;
        vm.purchaseLimit = purchaseLimit;
        vm.exists = exists;
        vm.ignorePrice = true;
        $scope.$mdMedia = $mdMedia;

        $document.bind('keydown keypress', function (e) {
            if(e.which === 27) {
                vm.resetBetting();
                e.preventDefault()
            }
        });

        $scope.$on('$destroy', function() {
            $rootScope.location = undefined;
        });
        $rootScope.location = {game: 1, bet: 2};

        vm.base = {2: 0, 3: 0, 4: 0};
        if ($rootScope.myParameters !== undefined){
            angular.forEach($rootScope.myParameters, function(pr){
                if (pr.GameType === 1) {
                    if (pr.BetType === 2) { vm.base[2] = pr.Price }
                    if (pr.BetType === 3) { vm.base[3] = pr.Price }
                    if (pr.BetType === 4) { vm.base[4] = pr.Price }
                }
            })
        }


        vm.pair = {count: {2: 0, 3: 0, 4: 0}, money: {2: 0, 3: 0, 4: 0}, limit: {2: 0, 3: 0, 4: 0}, payout: {2: 0, 3: 0, 4: 0}};
        vm.inputPoint = {2: 0, 3: 0, 4: 0};
        vm.betTimes = {2: 54, 3: 81, 4: 108};

        vm.numbers = [];
        for (let i = 0; i<100; i++){
            i = i < 10 ? i = '0' + i : i;
            let number = {
                number: i.toString(),
                selected: false,
                base: {2: vm.base[2], 3: vm.base[3], 4: vm.base[4]},
                price: {2: vm.base[2], 3: vm.base[3], 4: vm.base[4]},
                disabled: {2: false, 3: false, 4: false}
            };
            vm.numbers.push(number)
        }

        $timeout(function () {
            if ($rootScope.isAuthenticated){
                vm.purchaseLimit()
            }
        }, 300);

        function purchaseLimit() {
            if ($rootScope.myParameters !== undefined){
                angular.forEach([2,3,4], function (betid) {
                    vm.pair.limit[betid] = $rootScope.myParameters.filter(function (item) {return item.GameType === 1 && item.BetType === betid})[0].MaxPointPerNumber;
                    vm.pair.payout[betid] = $rootScope.myParameters.filter(function (item) {return item.GameType === 1 && item.BetType === betid})[0].Payouts / 1000;
                })
            }else{
                $timeout(function () {
                    vm.purchaseLimit()
                }, 1000)
            }
        }

        $scope.$on('TradOdds::done', function (){
            vm.buildPriceTable();
        })

        function buildPriceTable(){
            vm.odds = $rootScope.TradOdds.filter(function (odd) {
                return odd.GameType === 1 && msUtils.exists(odd.BetType, [2,3,4]) && odd.Term === ($rootScope.isAuthenticated ? $rootScope.termName : 'Public')
            })
            angular.forEach(vm.numbers, function (num) {
                angular.forEach(vm.odds, function (odd) {
                    num.base[odd.BetType] = odd.Price;
                    num.price[odd.BetType] = num.price[odd.BetType] === 0 ? odd.Price : num.price[odd.BetType];
                    angular.forEach(odd.Numbers, function (value) {
                        if (value.Number === num.number){
                            let extPrice = value.ExtraPrice !== undefined ? odd.Price + value.ExtraPrice : num.price[odd.BetType];
                            num.disabled[odd.BetType] = value.Stop;
                            if ((num.price[odd.BetType] !== 0) && (num.price[odd.BetType] !== extPrice)){
                                num.priceChanged = true
                            }
                            num.price[odd.BetType] = extPrice;
                        }
                    })
                })
            });
            $timeout(function () {
                angular.forEach(vm.numbers, function (n) {
                    n.priceChanged = false;
                })
            }, 3000)
        }

        function selectNumber(n) {
            angular.forEach(vm.numbers, function (number) {
                if (number.number === n.number){
                    number.selected = !number.selected;
                }
            });
        }

        vm.selectedCheckbox = [];
        function exists(item) {
            return vm.selectedCheckbox.indexOf(item) > -1;
        }

        function groupNumbers(id){
            let idx = vm.selectedCheckbox.indexOf(id);
            if (idx > -1) {
                vm.selectedCheckbox.splice(idx, 1);
            }else {
                vm.selectedCheckbox.push(id);
            }
            vm.checked = idx === -1;
            vm.arrayNumber = $.grep(select.list, function(b){
                return b.id === id;
            })[0].content;
            angular.forEach(vm.numbers, function (number) {
                if ($.grep(vm.arrayNumber, function(b){return b === number.number}).length){
                    number.selected = vm.checked;
                }
            });
        }

        function inputKeyNumber(e) {
            if (!vm.keynumber){return}
            if(e.which === 8){
                if (vm.keynumber[vm.keynumber.length - 1] !== ','){
                    vm.keynumber = vm.keynumber.substring(0, vm.keynumber.length - 1)
                }
            }
            let value = vm.keynumber.split(',');
            if (value[value.length-1].length > 1){
                vm.keynumber = vm.keynumber + ','
            }
        }

        function submitKeyNumber(click) {
            if (!vm.keynumber.length){return}
            vm.keynumber = vm.keynumber.replace(/\s+/g, '');
            if (vm.keynumber.length === 0){return}
            let arr = vm.keynumber.split(',');
            let arrInput = [];
            for (let i = 0; i < arr.length; i++){
                let number = arr[i].slice(-2).replace(/\s+/g, '');
                number = number.length < 2 && number.length !== 0 ? '0' + number : number;
                if (!isNaN(number) && angular.isNumber(+number)){
                    if (number.length !== 0)
                        arrInput.push(number)
                }
            }
            angular.forEach(vm.numbers, function (val) {
                if (arrInput.indexOf(val.number) !== -1){
                    val.selected = true
                }
            });
            vm.keynumber = '';
            if (!click){
                $timeout(function () {
                    document.getElementsByClassName('bet-input')[0].select();
                }, 10)
            }else{
                $timeout(function () {
                    document.getElementsByClassName('input-numbers-array')[0].focus();
                }, 10)
            }
        }

        function resetBetting(){
            angular.forEach(vm.numbers, function (number) {
                number.selected = false;
            });
            vm.selectedCheckbox = [];
            vm.inputPoint = {2: 0, 3: 0, 4: 0};
            vm.keynumber = '';
        }

        function costMoney() {
            vm.sumPoint = 0;
            let numberArr, sumMoney;
            angular.forEach([2,3,4], function (betid) {
                vm.pair.count[betid] = 0;
                sumMoney = 0;
                numberArr = [];
                angular.forEach(vm.numbers, function (num) {
                    if (num.selected){
                        if (!num.disabled[betid]){
                            numberArr.push(num.number)
                        }
                    }
                });
                vm.pair.count[betid] += numberArr.combinate(betid).length;

                let totalyArr = numberArr.combinate(betid);
                if (totalyArr.length <= 128){
                    angular.forEach(totalyArr, function (pairArr) {
                        let pricePerPair = 0;
                        angular.forEach(pairArr, function (number){
                            angular.forEach(vm.numbers, function (num) {
                                if (num.number === number){
                                    pricePerPair += num.price[betid]
                                }
                            });
                        });
                        pricePerPair = Math.ceil(pricePerPair/pairArr.length);
                        sumMoney += pricePerPair
                    });
                    vm.pair.money[betid] = sumMoney * vm.inputPoint[betid] * vm.betTimes[betid];
                    vm.sumPoint += vm.pair.count[betid] * vm.inputPoint[betid];
                }else{
                    vm.inputPoint[betid] = 0;
                }
            });
            vm.totalMoney = vm.pair.money[2] + vm.pair.money[3] + vm.pair.money[4];
            return vm.totalMoney
        }

        function submitBetting() {
            vm.betDatas = [];
            let betObj, ticketObj, selectedNumber, pairArrNum, Number;
            // inputPoint

            betObj = {};
            betObj.Term = $rootScope.termName;
            betObj.IgnorePrice = vm.ignorePrice;
            betObj.Tickets = [];

            Object.keys(vm.inputPoint).forEach(function(betid) {
                if (vm.inputPoint[betid] !== 0){
                    ticketObj = {
                        GameType: 1,
                        BetType: parseInt(betid),
                        Items: []
                    };

                    selectedNumber = [];
                    angular.forEach(vm.numbers, function (number) {
                        if (number.selected && !number.disabled[betid] ){
                            selectedNumber.push(number.number)
                        }
                    });
                    pairArrNum = selectedNumber.combinate(betid);
                    angular.forEach(pairArrNum, function (pair) {
                        Number = {};
                        Number.Numbers = pair;
                        Number.Point = vm.inputPoint[betid];
                        //Tính tiền cho cặp xiên
                        let pricePerPair = 0;
                        angular.forEach(pair, function (n) {
                            angular.forEach(vm.numbers, function (num) {
                                if (num.number === n){
                                    pricePerPair += num.price[betid]
                                }
                            })
                        });
                        pricePerPair = Math.ceil(pricePerPair/pair.length);
                        Number.Price = pricePerPair;
                        ticketObj.Items.push(Number)
                    });
                    betObj.Tickets.push(ticketObj)
                }
            });
            let ns = [];
            vm.numbers.map(function (n){
                if (n.selected){
                    ns.push(n.number)
                }
            })

            let eventData = {
                betObj: betObj,
                sumObj: {
                    numbers: ns,
                    point: vm.sumPoint,
                    money: vm.totalMoney
                }
            }
            $rootScope.$broadcast('EventBetting', eventData);
        }

        $rootScope.$on('ResetBetting', function (){
            vm.resetBetting();
        })

        $rootScope.$broadcast('TradOdds::get', {GameTypes: [1], BetTypes: [2,3,4]})
    }
})();
(function (){
    'use strict';

    angular
        .module('app.traditional')
        .controller('b2LotLiveCtrl', b2LotLiveCtrl);

    /** @ngInject */
    function b2LotLiveCtrl($rootScope, $scope, $timeout, $interval, $mdMedia, $document, network, betId, collections, msUtils, message){
        let vm = this;
        vm.init = init;
        vm.oddsPrice = oddsPrice;
        vm.buildPriceTable = buildPriceTable;
        vm.selectNumber = selectNumber;
        vm.singlePointClick = singlePointClick;
        vm.clearTemporary = clearTemporary;
        vm.changeBettingPoint = changeBettingPoint;
        vm.exists = exists;
        vm.groupNumbers = groupNumbers;
        vm.inputKeyNumber = inputKeyNumber;
        vm.submitKeyNumber = submitKeyNumber;
        vm.resetBetting = resetBetting;
        vm.totalPoint = totalPoint;
        vm.submitBetting = submitBetting;
        vm.betId = betId;
        vm.ignorePrice = true;
        vm.basePrice = 0;
        vm.numbers = [];
        vm.quickChoices = collections.list;
        vm.allowBetting = false;
        $scope.$mdMedia = $mdMedia;

        $scope.$on('$destroy', function() {
            $rootScope.location = undefined;
        });
        $rootScope.location = {game: 1, bet: betId};

        $document.bind('keydown keypress', function (e) {
            if(e.which === 27) {
                vm.resetBetting();
                e.preventDefault()
            }
        });

        for (let i = 0; i<100; i++){
            i = i < 10 ? i = '0' + i : i;
            vm.numbers.push({number: i.toString(), disabled: false, selected: false, price: 0, point: 0})
        }

        $timeout(function () {
            vm.init();
        }, 300);

        function init(){
            if ($rootScope.isAuthenticated){
                if ($rootScope.myParameters !== undefined){
                    let myParamValues = $rootScope.myParameters.filter(function(item) { return item.GameType === 1 && item.BetType === betId })[0];
                    vm.purchaseLimit = myParamValues.MaxPointPerNumber;
                    vm.payouts = myParamValues.Payouts / 1000;
                    vm.oddsPrice();
                }else{
                    $timeout(function () {
                        vm.init()
                    }, 1000)
                }
            }else{
                vm.oddsPrice();
            }
        }

        function oddsPrice() {
            if ($rootScope.isAuthenticated){
                if ($rootScope.termName !== undefined) {
                    network.Games.getLoLiveOdds({Term: $rootScope.termName, GameType: 1, BetType: 20}).then(function (resp) {
                        vm.odds = resp;
                        vm.buildPriceTable();
                    })
                } else {
                    $timeout(function () {
                        vm.oddsPrice();
                    }, 1000)
                }
            }else{
                network.Public.Lottery.getLoLiveOdds({GameType: 1, BetType: 20}).then(function (resp) {
                    vm.odds = resp;
                    vm.buildPriceTable();
                })
            }
        }

        function buildPriceTable() {
            if (vm.odds === undefined) {return}
            vm.allowBetting = vm.odds.Active;
            vm.basePrice = vm.odds.Price;
            angular.forEach(vm.numbers, function (num) {
                vm.bPrice = angular.copy(num.price);
                let exNum = $.grep(vm.odds.Numbers, function (f) {
                    return f.Number === num.number
                });
                num.price = vm.basePrice;
                if (exNum.length) {
                    num.disabled = exNum[0].Stop;
                    num.price = exNum[0].ExtraPrice !== undefined ? vm.basePrice + exNum[0].ExtraPrice : vm.basePrice
                }
                num.priceChanged = ((num.price !== vm.bPrice) && vm.bPrice !== 0);
            });
            vm.clearPriceChange = $timeout(function () {
                angular.forEach(vm.numbers, function (n) {
                    n.priceChanged = false;
                })
            }, 3000)
        }

        $scope.$on('extra-price-changed', function ($event, data){
            // console.log(data);
            if (vm.odds === undefined){return}
            let matchNumber = 0;
            angular.forEach(data, function (itemPrice) {
                if (1 === itemPrice.GameType && 20 === itemPrice.BetType){
                    let findNumber = $.grep(vm.odds.Numbers, function (n) {
                        return n.Number === itemPrice.Number
                    });
                    if (findNumber.length){
                        findNumber[0].ExtraPrice += itemPrice.PriceChange
                    }else {
                        vm.odds.Numbers.push( {Number: itemPrice.Number, ExtraPrice: itemPrice.PriceChange} )
                    }
                    matchNumber ++
                }
            });
            if (matchNumber !== 0){
                vm.buildPriceTable();
                if (vm.clearPriceChange){
                    clearTimeout(vm.clearPriceChange)
                }
            }
        });
        $scope.$on('stop-number-changed', function ($event, data){
            if (vm.odds === undefined){return}
            angular.forEach(data, function (item) {
                if (1 === item.GameType && 20 === item.BetType){
                    let findNumber = $.grep(vm.odds.Numbers, function (n) {
                        return n.Number === item.Number
                    });
                    if (findNumber.length){
                        findNumber[0].Stop = item.Stop
                    }else {
                        vm.odds.Numbers.push( {Number: item.Number, Stop: item.Stop} )
                    }
                }
            });
            vm.buildPriceTable();
        });
        $scope.$on('lo-live:event:prize-closed', function ($event, data) {
            if (vm.odds === undefined){return}
            if (data.Term === $rootScope.termName && data.GameType === 1 && data.IsLive){
                vm.odds.PrizeNr = data.PrizeNr;
                vm.buildPriceTable();
            }
        });
        $scope.$on('lo-live:event:game-opening', function ($event, data) {
            if (vm.odds === undefined){return}
            if (data.Term === $rootScope.termName && data.GameType === 1 && data.IsLive){
                vm.odds.Active = true;
                vm.buildPriceTable();
            }
        });
        $scope.$on('lo-live:event:game-closed', function ($event, data) {
            if (vm.odds === undefined){return}
            if (data.Term === $rootScope.termName && data.GameType === 1 && data.IsLive){
                vm.odds.Active = false;
                vm.odds.PrizeNr = data.PrizeNr;
                vm.buildPriceTable();
            }
        });
        $timeout(function () {
            vm.focusVar = true;
        }, 500);
        $rootScope.$on('closeBetPanel', function () {
            vm.focusVar = 'continuous';
        });

        vm.onlyNumbers = /^\d+$/;
        vm.arrayTemporary = [];
        vm.readyClear = false;
        vm.numbersCopy = [];
        function selectNumber(n) {
            angular.forEach(vm.numbers, function (number) {
                if (number.number === n.number && !number.disabled){
                    number.selected = !number.selected;
                    number.point = 0;
                }
            });
            if (n.selected){
                vm.betPoint = 0;

                if ($mdMedia('gt-sm')){
                    $timeout(function () {
                        document.getElementById('bet-input').select();
                    }, 10)
                }
                vm.arrayTemporary.push(n.number);
            }
        }
        function singlePointClick($event) {
            $event.target.select();
        }
        function clearTemporary(){
            if (vm.readyClear){
                vm.arrayTemporary = [];
                vm.readyClear = false;
                vm.numbersCopy = [];
            }
        }
        function changeBettingPoint() {
            vm.readyClear = true;
            if (vm.numbersCopy.length === 0){
                vm.numbersCopy = angular.copy(vm.numbers);
                angular.forEach(vm.numbers, function (number) {
                    if (msUtils.exists(number.number, vm.arrayTemporary) && !number.disabled){
                        number.point += parseInt(vm.betPoint);
                    }
                });
            }else{
                angular.forEach(vm.numbers, function (number) {
                    if (msUtils.exists(number.number, vm.arrayTemporary)){
                        number.point = vm.numbersCopy.filter(function (num) {
                            return num.number === number.number
                        })[0].point + parseInt(vm.betPoint);
                        // number.point += parseInt(vm.betPoint);
                    }
                });
            }
        }

        vm.selectedCheckbox = [];
        function exists(parent, id) {
            let ids = parent.toString() + id.toString();
            return vm.selectedCheckbox.indexOf(ids) > -1;
        }

        vm.data = {};
        function groupNumbers(parent, id){
            let ids = parent.toString() + id.toString();
            let idx = vm.selectedCheckbox.indexOf(ids);
            if (idx > -1) {
                vm.selectedCheckbox.splice(idx, 1);
            }else {
                vm.selectedCheckbox.push(ids);
            }
            vm.checked = idx === -1;
            vm.arrayNumber = vm.quickChoices[parent].collect[id].numbers;


            angular.forEach(vm.numbers, function (number) {
                if ($.grep(vm.arrayNumber, function(b){return b === number.number}).length && !number.disabled){
                    number.selected = vm.checked;
                    number.point = vm.checked === false ? 0 : number.point;
                }
            });
            //Xóa mảng ra khỏi temporary array
            if (!vm.checked){
                for(let i = vm.arrayTemporary.length - 1; i >= 0; i--) {
                    let px = vm.arrayNumber.indexOf(vm.arrayTemporary[i]);
                    if (px > -1) {
                        vm.arrayTemporary.splice(vm.arrayTemporary.indexOf(vm.arrayTemporary[i]), 1);
                    }
                }
            }else {
                vm.arrayTemporary = vm.arrayTemporary.concat(vm.arrayNumber);
                //Xong lọc trùng cái mảng này.
                vm.arrayTemporary = vm.arrayTemporary.filter( function( item, index, inputArray ) {	//Lọc trùng
                    return inputArray.indexOf(item) === index;
                });
            }
            vm.betPoint = 0;
            if ($mdMedia('gt-sm')){
                $timeout(function () {
                    document.getElementById('bet-input').select();
                }, 10)
            }
        }

        function inputKeyNumber(e) {
            if (!vm.keynumber){return}
            if(e.which === 8){
                if (vm.keynumber[vm.keynumber.length - 1] !== ','){
                    vm.keynumber = vm.keynumber.substring(0, vm.keynumber.length - 1)
                }
            }
            let value = vm.keynumber.split(',');
            if (value[value.length-1].length > 1){
                vm.keynumber = vm.keynumber + ','
            }
        }

        function submitKeyNumber() {
            if (!vm.keynumber.length){return}
            vm.keynumber = vm.keynumber.replace(/\s+/g, '');
            if (vm.keynumber.length === 0){return}
            let arr = vm.keynumber.split(',');
            let arrInput = [];
            for (let i = 0; i < arr.length; i++){
                let number = arr[i].slice(-2).replace(/\s+/g, '');
                number = number.length < 2 && number.length !== 0 ? '0' + number : number;
                if (!isNaN(number) && angular.isNumber(+number)){
                    if (number.length !== 0)
                        arrInput.push(number)
                }
            }
            angular.forEach(vm.numbers, function (val) {
                if (arrInput.indexOf(val.number) !== -1 && !val.disabled){
                    val.selected = true
                }
            });
            vm.arrayTemporary = vm.arrayTemporary.concat(arrInput);
            vm.keynumber = '';
            if ($mdMedia('gt-sm')){
                $timeout(function () {
                    document.getElementById('bet-input').select();
                }, 10)
            }
        }

        function resetBetting(){
            angular.forEach(vm.numbers, function (number) {
                number.selected = false;
                number.point = 0;
                vm.betPoint = 0;
            });
            vm.selectedCheckbox = [];
            vm.keynumber = '';
        }

        function totalPoint() {
            if (!vm.allowBetting){
                vm.resetBetting()
            }
            let total = 0, oddNumbers;
            vm.totalMoney = 0;
            angular.forEach(vm.numbers, function (num) {
                total += !num.disabled ? num.point : 0;

                if (vm.odds && num.selected){
                    oddNumbers = $.grep(vm.odds.Numbers, function (n) {
                        return n.Number === num.number
                    });
                    if (oddNumbers.length && !oddNumbers[0].stop && oddNumbers[0].ExtraPrice !== 0 ){
                        vm.totalMoney += num.point * (vm.basePrice + oddNumbers[0].ExtraPrice)
                    }else{
                        vm.totalMoney += num.point * vm.basePrice
                    }
                }
            });
            vm.totalMoney = vm.odds !== undefined ? vm.totalMoney * vm.odds.PrizeNr : vm.totalMoney;
            vm.sumPoint = total;
            return total;
        }

        function submitBetting() {
            let ns = [];
            let checkCount = 0;
            let betObj = {};
            betObj.Term = $rootScope.termName;
            betObj.IgnorePrice = vm.ignorePrice;
            betObj.Tickets = [{
                PrizeNr: vm.odds.PrizeNr,
                GameType: 1,
                BetType: betId,
                Items: []
            }];
            vm.numbers.map(function (number){
                if (number.selected && !number.disabled){
                    let Number = {};
                    Number.Numbers = [number.number];
                    Number.Point = number.point;
                    Number.Price = number.price;
                    betObj.Tickets[0].Items.push(Number);
                    ns.push(number.number)
                }
                checkCount += ( number.selected && (number.point === 0 || number.point === null || isNaN(number.point) ) ) ? 1 : 0;
            })

            if (checkCount === 0){
                let eventData = {
                    betObj: betObj,
                    sumObj: {
                        numbers: ns,
                        point: vm.sumPoint,
                        money: vm.totalMoney
                    }
                }
                $rootScope.$broadcast('EventBetting', eventData);
            }else{
                message.show('Quý khách vui lòng kiểm tra lại số điểm muốn đặt cược.')
            }
        }

        $rootScope.$on('ResetBetting', function (){
            vm.resetBetting();
        })
    }
})();
(function (){
    'use strict';

    angular
        .module('app.traditional')
        .controller('qbMnController', qbMnController);

    function qbMnController($rootScope, $scope, $timeout, $interval, $document, msUtils, Analytics){
        let vm = this;

        vm.declareRow = declareRow;
        vm.checkRe = checkRe;
        vm.sumRowMoney = sumRowMoney;
        vm.totalMoney = totalMoney;
        vm.toggleAll = toggleAll;
        vm.checkedAll = checkedAll;
        vm.isIndeterminate = isIndeterminate;
        vm.checkDisabledReset = checkDisabledReset;
        vm.submitBetting = submitBetting;
        vm.ignorePrice = true;

        $document.bind('keydown keypress', function (e) {
            if(e.which === 27) {
                vm.declareRow();
                e.preventDefault()
            }
        });

        vm.declareRow();

        function declareRow(){
            vm.rows = [];
            for (let i=0; i<15; i++){
                let row = {};
                row.number = '';
                row.reverse = false;
                row.regirons = {2: false, 3: false, 4: false};
                row.D2 = {dau: 0, duoi: 0, dd: 0, lo18: 0};
                row.D3 = {dau: 0, duoi: 0, dd: 0, lo17: 0};
                row.D4 = {duoi: 0, lo16: 0};
                row.money = 0;
                vm.rows.push(row)
            }
        }

        $scope.$on('TradOdds::done', function (){
            vm.ready = true;
            vm.odds = $rootScope.TradOdds.filter(function (odd) {
                return msUtils.exists(odd.GameType, [2,3,4]) && msUtils.exists(odd.BetType, [7,8,15,10,11,17,13,19]) && odd.Term === ($rootScope.isAuthenticated ? $rootScope.termName : 'Public')
            })
        })

        function checkedAll(id) {
            let count = 0;
            angular.forEach(vm.rows, function (row) {
                count += row.regirons[id] === true ? 1 : 0
            });
            return count === vm.rows.length
        }

        function toggleAll(id) {
            let check = vm.checkedAll(id);
            angular.forEach(vm.rows, function (row) {
                row.regirons[id] = !check;
            })
        }

        function isIndeterminate(id) {
            let count = 0;
            angular.forEach(vm.rows, function (row) {
                count += row.regirons[id] === true ? 1 : 0
            });
            if (count === 0 || count === vm.rows.length){
                return false
            }else{
                return true
            }
        }

        function checkDisabledReset() {
            let check = 0;
            angular.forEach(vm.rows, function (row) {
                check += row.number.length ? 1 : 0
            });
            return check === 0
        }

        function checkRe(number){
            if (number.length === 4){
                return (number.split('')[0] === number.split('')[1] && number.split('')[1] === number.split('')[2] && number.split('')[2] === number.split('')[3])
            }else if (number.length === 3){
                return (number.split('')[0] === number.split('')[1] && number.split('')[1] === number.split('')[2])
            }else if (number.length === 2){
                return number.split('')[0] === number.split('')[1]
            }else if(number.length === 1){
                return false
            }else{
                return true
            }
        }

        function sumRowMoney(row, index) {
            if (!row.number.length){
                return;
            }
            let number = row.number.length === 1 ? '0' + row.number.toString() : row.number;
            let allNumbers = [];
            angular.forEach(vm.rows, function (rw, rid){
                if (rw.number.length && rid !== index){
                    let n = rw.number.length === 1 ? '0' + rw.number.toString() : rw.number;
                    if (rw.reverse){
                        allNumbers = allNumbers.concat(msUtils.permNumber(n))
                    }else {
                        allNumbers.push(n)
                    }
                }
            })
            if (msUtils.exists(number, allNumbers)){
                row.number = ''
            }

            let numbers = row.reverse ? msUtils.permNumber(number) : [number];
            let sumMoney = 0, oddPrice;
            //Loop per gameID
            Object.keys(row.regirons).forEach(function(gameid) {
                if (row.regirons[gameid]){
                    if (number.length === 4){
                        let point4DDuoi = Math.abs(row.D4.duoi);
                        let point4D16Lo = Math.abs(row.D4.lo16);
                        //Tính tiền cho 4D Đuôi.
                        if (point4DDuoi > 0){
                            oddPrice = vm.odds.filter(function (item) {return item.GameType === parseInt(gameid) && item.BetType === 13})[0];
                            angular.forEach(numbers, function (num) {
                                let findExtra = $.grep(oddPrice.Numbers, function (n) {
                                    return n.Number === num
                                });
                                if (findExtra.length === 0){
                                    sumMoney += point4DDuoi * oddPrice.Price
                                }else {
                                    if (!findExtra[0].Stop && findExtra[0].ExtraPrice){
                                        sumMoney += point4DDuoi * (oddPrice.Price + findExtra[0].ExtraPrice)
                                    }
                                }
                            });
                            // console.log(oddPrice)
                        }
                        //Tính tiền cho 4D-16Lô
                        if (point4D16Lo > 0){
                            oddPrice = vm.odds.filter(function (item) {return item.GameType === parseInt(gameid) && item.BetType === 19})[0];
                            angular.forEach(numbers, function (num) {
                                let findExtra = $.grep(oddPrice.Numbers, function (n) {
                                    return n.Number === num
                                });
                                if (findExtra.length === 0){
                                    sumMoney += point4D16Lo * oddPrice.Price * 16
                                }else {
                                    if (!findExtra[0].Stop && findExtra[0].ExtraPrice){
                                        sumMoney += point4D16Lo * (oddPrice.Price + findExtra[0].ExtraPrice) * 16
                                    }
                                }
                            });
                        }
                    }else if (number.length === 3){
                        let point3DDau = Math.abs(row.D3.dau) + Math.abs(row.D3.dd);
                        let point3DDuoi = Math.abs(row.D3.duoi) + Math.abs(row.D3.dd);
                        let point3D17Lo = Math.abs(row.D3.lo17);

                        //Tính tiền 3D Đầu
                        if (point3DDau > 0){
                            oddPrice = vm.odds.filter(function (item) {return item.GameType === parseInt(gameid) && item.BetType === 10})[0];
                            angular.forEach(numbers, function (num) {
                                let findExtra = $.grep(oddPrice.Numbers, function (n) {
                                    return n.Number === num
                                });
                                if (findExtra.length === 0){
                                    sumMoney += point3DDau * oddPrice.Price
                                }else {
                                    if (!findExtra[0].Stop && findExtra[0].ExtraPrice){
                                        sumMoney += point3DDau * (oddPrice.Price + findExtra[0].ExtraPrice)
                                    }
                                }
                            });
                        }
                        //Tính tiền 3D Đuôi
                        if (point3DDuoi > 0){
                            oddPrice = vm.odds.filter(function (item) {return item.GameType === parseInt(gameid) && item.BetType === 11})[0];
                            angular.forEach(numbers, function (num) {
                                let findExtra = $.grep(oddPrice.Numbers, function (n) {
                                    return n.Number === num
                                });
                                if (findExtra.length === 0){
                                    sumMoney += point3DDuoi * oddPrice.Price
                                }else {
                                    if (!findExtra[0].Stop && findExtra[0].ExtraPrice){
                                        sumMoney += point3DDuoi * (oddPrice.Price + findExtra[0].ExtraPrice)
                                    }
                                }
                            });
                        }
                        //Tính tiền 3D 17 Lô
                        if (point3D17Lo > 0){
                            oddPrice = vm.odds.filter(function (item) {return item.GameType === parseInt(gameid) && item.BetType === 17})[0];
                            angular.forEach(numbers, function (num) {
                                let findExtra = $.grep(oddPrice.Numbers, function (n) {
                                    return n.Number === num
                                });
                                if (findExtra.length === 0){
                                    sumMoney += point3D17Lo * oddPrice.Price * 17
                                }else {
                                    if (!findExtra[0].Stop && findExtra[0].ExtraPrice){
                                        sumMoney += point3D17Lo * (oddPrice.Price + findExtra[0].ExtraPrice) * 17
                                    }
                                }
                            });
                        }
                    }else {
                        let point2DDau = Math.abs(row.D2.dau) + Math.abs(row.D2.dd);
                        let point2DDuoi = Math.abs(row.D2.duoi) + Math.abs(row.D2.dd);
                        let point2D18Lo = Math.abs(row.D2.lo18);
                        //Tính tiền 2D Đầu
                        if (point2DDau > 0){
                            oddPrice = vm.odds.filter(function (item) {return item.GameType === parseInt(gameid) && item.BetType === 7})[0];
                            angular.forEach(numbers, function (num) {
                                let findExtra = $.grep(oddPrice.Numbers, function (n) {
                                    return n.Number === num
                                });
                                if (findExtra.length === 0){
                                    sumMoney += point2DDau * oddPrice.Price
                                }else {
                                    if (!findExtra[0].Stop && findExtra[0].ExtraPrice){
                                        sumMoney += point2DDau * (oddPrice.Price + findExtra[0].ExtraPrice)
                                    }
                                }
                            });
                        }
                        //Tính tiền 2D Đuôi
                        if (point2DDuoi > 0){
                            oddPrice = vm.odds.filter(function (item) {return item.GameType === parseInt(gameid) && item.BetType === 8})[0];
                            angular.forEach(numbers, function (num) {
                                let findExtra = $.grep(oddPrice.Numbers, function (n) {
                                    return n.Number === num
                                });
                                if (findExtra.length === 0){
                                    sumMoney += point2DDuoi * oddPrice.Price
                                }else {
                                    if (!findExtra[0].Stop && findExtra[0].ExtraPrice){
                                        sumMoney += point2DDuoi * (oddPrice.Price + findExtra[0].ExtraPrice)
                                    }
                                }
                            });
                        }
                        //Tính tiền 2D 18 Lô
                        if (point2D18Lo > 0){
                            oddPrice = vm.odds.filter(function (item) {return item.GameType === parseInt(gameid) && item.BetType === 15})[0];
                            angular.forEach(numbers, function (num) {
                                let findExtra = $.grep(oddPrice.Numbers, function (n) {
                                    return n.Number === num
                                });
                                if (findExtra.length === 0){
                                    sumMoney += point2D18Lo * oddPrice.Price * 18
                                }else {
                                    if (!findExtra[0].Stop && findExtra[0].ExtraPrice){
                                        sumMoney += point2D18Lo * (oddPrice.Price + findExtra[0].ExtraPrice) * 18
                                    }
                                }
                            });
                        }
                    }
                }
            });
            row.money = sumMoney;
            return sumMoney;
        }

        function totalMoney() {
            let money = 0;
            angular.forEach(vm.rows, function (row) {
                money += row.money;
            });
            vm.sumMoney = money;
            return money
        }

        function submitBetting() {
            vm.betDatas = [];
            vm.ns = [];
            vm.sumPoint = 0;
            let oddPrice, betObj = {}, TicketObj, betTypeAlias;
            betObj.Term = $rootScope.termName;
            betObj.IgnorePrice = vm.ignorePrice;
            betObj.Tickets = [];

            angular.forEach(vm.rows, function (row, rowId) {
                if (row.number.length){
                    let number = row.number.length === 1 ? '0' + row.number.toString() : row.number;
                    let numbers = row.reverse ? msUtils.permNumber(number) : [number];
                    vm.ns = vm.ns.concat(numbers);
                    Object.keys(row.regirons).forEach(function(gameid){
                        if (row.regirons[gameid]){
                            let oddValues = $.grep(vm.odds, function (game) {
                                return game.GameType === parseInt(gameid)
                            });
                            betTypeAlias = 0;
                            if (number.length === 4){
                                let point4DDuoi = Math.abs(row.D4.duoi);
                                let point4D16Lo = Math.abs(row.D4.lo16);

                                betTypeAlias += point4DDuoi > 0 ? 524288 : 0;
                                betTypeAlias += point4D16Lo > 0 ? 1048576 : 0;
                                //4D Đuôi.
                                if (point4DDuoi > 0){
                                    oddPrice = $.grep(oddValues, function (bet) {
                                        return bet.BetType === 13
                                    })[0];
                                    TicketObj = {
                                        GameType: parseInt(gameid),
                                        BetType: 13,
                                        Additional: {
                                            Row: rowId,
                                            Alias: betTypeAlias,
                                            Reverse: row.reverse
                                        },
                                        Items: []
                                    };
                                    angular.forEach(numbers, function (num) {
                                        let Number = {};
                                        Number.Numbers = [num];
                                        Number.Point = point4DDuoi;
                                        vm.sumPoint += point4DDuoi;
                                        let findExtra = $.grep(oddPrice.Numbers, function (n) {
                                            return n.Number === num
                                        });
                                        if (findExtra.length === 0){
                                            Number.Price = oddPrice.Price;
                                            TicketObj.Items.push(Number);
                                        }else {
                                            if (findExtra[0].ExtraPrice !== undefined){
                                                Number.Price = oddPrice.Price + findExtra[0].ExtraPrice
                                            }
                                            if (!findExtra[0].stop){
                                                TicketObj.Items.push(Number);
                                            }
                                        }
                                    });
                                    if (TicketObj.Items.length){
                                        betObj.Tickets.push(TicketObj)
                                    }
                                }
                                //4D-16Lô
                                if (point4D16Lo > 0){
                                    oddPrice = $.grep(oddValues, function (bet) {
                                        return bet.BetType === 19
                                    })[0];
                                    TicketObj = {
                                        GameType: parseInt(gameid),
                                        BetType: 19,
                                        Additional: {
                                            Row: rowId,
                                            Alias: betTypeAlias,
                                            Reverse: row.reverse
                                        },
                                        Items: []
                                    };
                                    angular.forEach(numbers, function (num) {
                                        let Number = {};
                                        Number.Numbers = [num];
                                        Number.Point = point4D16Lo;
                                        vm.sumPoint += point4D16Lo;
                                        let findExtra = $.grep(oddPrice.Numbers, function (n) {
                                            return n.Number === num
                                        });
                                        if (findExtra.length === 0){
                                            Number.Price = oddPrice.Price;
                                            TicketObj.Items.push(Number);
                                        }else {
                                            if (findExtra[0].ExtraPrice !== undefined){
                                                Number.Price = oddPrice.Price + findExtra[0].ExtraPrice
                                            }
                                            if (!findExtra[0].Stop){
                                                TicketObj.Items.push(Number);
                                            }
                                        }
                                    });
                                    if (TicketObj.Items.length){
                                        betObj.Tickets.push(TicketObj)
                                    }
                                }
                            }else if (number.length === 3) {
                                let point3DDau = Math.abs(row.D3.dau) + Math.abs(row.D3.dd);
                                let point3DDuoi = Math.abs(row.D3.duoi) + Math.abs(row.D3.dd);
                                let point3D17Lo = Math.abs(row.D3.lo17);
                                betTypeAlias = Math.abs(row.D3.dd) !== 0 ? 32768 : 0;
                                betTypeAlias += Math.abs(row.D3.dau) > 0 ? 8192 : 0;
                                betTypeAlias += Math.abs(row.D3.duoi) > 0 ? 16384 : 0;
                                betTypeAlias += point3D17Lo > 0 ? 262144 : 0;
                                //3D Đầu.
                                if (point3DDau > 0){
                                    oddPrice = $.grep(oddValues, function (bet) {
                                        return bet.BetType === 10
                                    })[0];
                                    TicketObj = {
                                        GameType: parseInt(gameid),
                                        BetType: 10,
                                        Additional: {
                                            Row: rowId,
                                            Alias: betTypeAlias,
                                            Reverse: row.reverse
                                        },
                                        Items: []
                                    };
                                    angular.forEach(numbers, function (num) {
                                        let Number = {};
                                        Number.Numbers = [num];
                                        Number.Point = point3DDau;
                                        vm.sumPoint += point3DDau;
                                        let findExtra = $.grep(oddPrice.Numbers, function (n) {
                                            return n.Number === num
                                        });
                                        if (findExtra.length === 0){
                                            Number.Price = oddPrice.Price;
                                            TicketObj.Items.push(Number);
                                        }else {
                                            if (findExtra[0].ExtraPrice !== undefined){
                                                Number.Price = oddPrice.Price + findExtra[0].ExtraPrice
                                            }
                                            if (!findExtra[0].Stop){
                                                TicketObj.Items.push(Number);
                                            }
                                        }
                                    });
                                    if (TicketObj.Items.length){
                                        betObj.Tickets.push(TicketObj)
                                    }
                                }
                                //3D Đuôi.
                                if (point3DDuoi > 0){
                                    oddPrice = $.grep(oddValues, function (bet) {
                                        return bet.BetType === 11
                                    })[0];
                                    TicketObj = {
                                        GameType: parseInt(gameid),
                                        BetType: 11,
                                        Additional: {
                                            Row: rowId,
                                            Alias: betTypeAlias,
                                            Reverse: row.reverse
                                        },
                                        Items: []
                                    };
                                    angular.forEach(numbers, function (num) {
                                        let Number = {};
                                        Number.Numbers = [num];
                                        Number.Point = point3DDuoi;
                                        vm.sumPoint += point3DDuoi;
                                        let findExtra = $.grep(oddPrice.Numbers, function (n) {
                                            return n.Number === num
                                        });
                                        if (findExtra.length === 0){
                                            Number.Price = oddPrice.Price;
                                            TicketObj.Items.push(Number);
                                        }else {
                                            if (findExtra[0].ExtraPrice !== undefined){
                                                Number.Price = oddPrice.Price + findExtra[0].ExtraPrice
                                            }
                                            if (!findExtra[0].stop){
                                                TicketObj.Items.push(Number);
                                            }
                                        }
                                    });
                                    if (TicketObj.Items.length){
                                        betObj.Tickets.push(TicketObj)
                                    }
                                }
                                //3D 17Lô.
                                if (point3D17Lo > 0){
                                    oddPrice = $.grep(oddValues, function (bet) {
                                        return bet.BetType === 17
                                    })[0];

                                    TicketObj = {
                                        GameType: parseInt(gameid),
                                        BetType: 17,
                                        Additional: {
                                            Row: rowId,
                                            Alias: betTypeAlias,
                                            Reverse: row.reverse
                                        },
                                        Items: []
                                    };


                                    angular.forEach(numbers, function (num) {
                                        let Number = {};
                                        Number.Numbers = [num];
                                        Number.Point = point3D17Lo;
                                        vm.sumPoint += point3D17Lo;
                                        let findExtra = $.grep(oddPrice.Numbers, function (n) {
                                            return n.Number === num
                                        });
                                        if (findExtra.length === 0){
                                            Number.Price = oddPrice.Price;
                                            TicketObj.Items.push(Number);
                                        }else {
                                            if (findExtra[0].ExtraPrice !== undefined){
                                                Number.Price = oddPrice.Price + findExtra[0].ExtraPrice
                                            }
                                            if (!findExtra[0].Stop){
                                                TicketObj.Items.push(Number);
                                            }
                                        }
                                    });
                                    if (TicketObj.Items.length){
                                        betObj.Tickets.push(TicketObj)
                                    }
                                }
                            }else{
                                let point2DDau = Math.abs(row.D2.dau) + Math.abs(row.D2.dd);
                                let point2DDuoi = Math.abs(row.D2.duoi) + Math.abs(row.D2.dd);
                                let point2D18Lo = Math.abs(row.D2.lo18);
                                betTypeAlias = Math.abs(row.D2.dd) !== 0 ? 512 : 0;
                                betTypeAlias += Math.abs(row.D2.dau) > 0 ? 128 : 0;
                                betTypeAlias += Math.abs(row.D2.duoi) > 0 ? 256 : 0;
                                betTypeAlias += point2D18Lo > 0 ? 2048 : 0;
                                //2D Đầu.
                                if (point2DDau > 0){
                                    oddPrice = $.grep(oddValues, function (bet) {
                                        return bet.BetType === 7
                                    })[0];
                                    TicketObj = {
                                        GameType: parseInt(gameid),
                                        BetType: 7,
                                        Additional: {
                                            Row: rowId,
                                            Alias: betTypeAlias,
                                            Reverse: row.reverse
                                        },
                                        Items: []
                                    };
                                    angular.forEach(numbers, function (num) {
                                        let Number = {};
                                        Number.Numbers = [num];
                                        Number.Point = point2DDau;
                                        vm.sumPoint += point2DDau;
                                        let findExtra = $.grep(oddPrice.Numbers, function (n) {
                                            return n.Number === num
                                        });
                                        if (findExtra.length === 0){
                                            Number.Price = oddPrice.Price;
                                            TicketObj.Items.push(Number);
                                        }else {
                                            if (findExtra[0].ExtraPrice !== undefined){
                                                Number.Price = oddPrice.Price + findExtra[0].ExtraPrice
                                            }
                                            if (!findExtra[0].Stop){
                                                TicketObj.Items.push(Number);
                                            }
                                        }
                                    });
                                    if (TicketObj.Items.length){
                                        betObj.Tickets.push(TicketObj)
                                    }
                                }
                                //2D Đuôi.
                                if (point2DDuoi > 0){
                                    oddPrice = $.grep(oddValues, function (bet) {
                                        return bet.BetType === 8
                                    })[0];
                                    TicketObj = {
                                        GameType: parseInt(gameid),
                                        BetType: 8,
                                        Additional: {
                                            Row: rowId,
                                            Alias: betTypeAlias,
                                            Reverse: row.reverse
                                        },
                                        Items: []
                                    };
                                    angular.forEach(numbers, function (num) {
                                        let Number = {};
                                        Number.Numbers = [num];
                                        Number.Point = point2DDuoi;
                                        vm.sumPoint += point2DDuoi;
                                        let findExtra = $.grep(oddPrice.Numbers, function (n) {
                                            return n.Number === num
                                        });
                                        if (findExtra.length === 0){
                                            Number.Price = oddPrice.Price;
                                            TicketObj.Items.push(Number);
                                        }else {
                                            if (findExtra[0].ExtraPrice !== undefined){
                                                Number.Price = oddPrice.Price + findExtra[0].ExtraPrice
                                            }
                                            if (!findExtra[0].Stop){
                                                TicketObj.Items.push(Number);
                                            }
                                        }
                                    });
                                    if (TicketObj.Items.length){
                                        betObj.Tickets.push(TicketObj)
                                    }
                                }
                                //2D 18Lô.
                                if (point2D18Lo > 0){
                                    oddPrice = $.grep(oddValues, function (bet) {
                                        return bet.BetType === 15
                                    })[0];
                                    TicketObj = {
                                        GameType: parseInt(gameid),
                                        BetType: 15,
                                        Additional: {
                                            Row: rowId,
                                            Alias: betTypeAlias,
                                            Reverse: row.reverse
                                        },
                                        Items: []
                                    };
                                    angular.forEach(numbers, function (num) {
                                        let Number = {};
                                        Number.Numbers = [num];
                                        Number.Point = point2D18Lo;
                                        vm.sumPoint += point2D18Lo;
                                        let findExtra = $.grep(oddPrice.Numbers, function (n) {
                                            return n.Number === num
                                        });
                                        if (findExtra.length === 0){
                                            Number.Price = oddPrice.Price;
                                            TicketObj.Items.push(Number);
                                        }else {
                                            if (findExtra[0].ExtraPrice !== undefined){
                                                Number.Price = oddPrice.Price + findExtra[0].ExtraPrice
                                            }
                                            if (!findExtra[0].Stop){
                                                TicketObj.Items.push(Number);
                                            }
                                        }
                                    });
                                    if (TicketObj.Items.length){
                                        betObj.Tickets.push(TicketObj)
                                    }
                                }
                            }
                            //=======
                        }
                    })
                }
            });

            let eventData = {
                betObj: betObj,
                sumObj: {
                    numbers: vm.ns,
                    point: vm.sumPoint,
                    money: vm.sumMoney
                }
            }
            $rootScope.$broadcast('EventBetting', eventData);

            let User = $rootScope.isAuthenticated ? $rootScope.User.Username : 'notAuthenticated';
            Analytics.trackEvent('QUICK', 'Betting', User);
        }

        $rootScope.$on('ResetBetting', function (){
            vm.declareRow();
        })

        $rootScope.$broadcast('TradOdds::get', {GameTypes: [2,3,4], BetTypes: [7,8,15,10,11,17,13,19]});

        $timeout(function () {
            let User = $rootScope.isAuthenticated ? $rootScope.User.Username : 'notAuthenticated';
            Analytics.trackEvent('QUICK', 'ENTER', User);
        }, 500)
    }
})();
(function (){
    'use strict';

    angular
        .module('app.traditional')
        .controller('southParlayCtrl', southParlayCtrl);

    function southParlayCtrl($rootScope, $scope, $mdMedia, $mdSidenav, $timeout, $interval, $state, $document, msUtils, network, select){
        let vm = this;

        vm.buildPriceTable = buildPriceTable;
        vm.selectNumber = selectNumber;
        vm.groupNumbers = groupNumbers;
        vm.inputKeyNumber = inputKeyNumber;
        vm.submitKeyNumber = submitKeyNumber;
        vm.resetBetting = resetBetting;
        vm.costMoney = costMoney;
        vm.submitBetting = submitBetting;
        vm.purchaseLimit = purchaseLimit;
        vm.payouts = payouts;
        vm.ignorePrice = true;
        $scope.$mdMedia = $mdMedia;

        if ($state.current.url === '/pair-2'){
            vm.betID = 2
        }else if ($state.current.url === '/pair-3'){
            vm.betID = 3
        }else {
            vm.betID = 4
        }

        vm.base = {2: {2: 0, 3: 0, 4: 0}, 3: {2: 0, 3: 0, 4: 0}, 4: {2: 0, 3: 0, 4: 0}};
        if ($rootScope.myParameters !== undefined){
            angular.forEach($rootScope.myParameters, function(pr){
                if (pr.BetType === 2) {
                    if (pr.GameType === 2) { vm.base[2][2] = pr.Price }
                    if (pr.GameType === 3) { vm.base[2][3] = pr.Price }
                    if (pr.GameType === 4) { vm.base[2][4] = pr.Price }
                }
                if (pr.BetType === 3) {
                    if (pr.GameType === 2) { vm.base[3][2] = pr.Price }
                    if (pr.GameType === 3) { vm.base[3][3] = pr.Price }
                    if (pr.GameType === 4) { vm.base[3][4] = pr.Price }
                }
                if (pr.BetType === 4) {
                    if (pr.GameType === 2) { vm.base[4][2] = pr.Price }
                    if (pr.GameType === 3) { vm.base[4][3] = pr.Price }
                    if (pr.GameType === 4) { vm.base[4][4] = pr.Price }
                }
            })
        }

        $rootScope.location = {game: 4, bet: vm.betID};

        vm.pair = {count: {2: 0, 3: 0, 4: 0}, money: {2: 0, 3: 0, 4: 0}};

        vm.inputPoint = {2: 0, 3: 0, 4: 0};

        vm.basePrice = 0;
        vm.numbers = [];
        for (let i = 0; i<100; i++){
            i = i < 10 ? i = '0' + i : i;
            let number = {
                number: i.toString(),
                selected: false,
                price: {
                    2: {2: vm.base[2][2], 3: vm.base[2][3], 4: vm.base[2][4]},  //Xiên 2, đài ABC
                    3: {2: vm.base[3][2], 3: vm.base[3][3], 4: vm.base[3][4]},
                    4: {2: vm.base[4][2], 3: vm.base[4][3], 4: vm.base[4][4]}
                },
                disabled: {
                    2: {2: false, 3: false, 4: false},
                    3: {2: false, 3: false, 4: false},
                    4: {2: false, 3: false, 4: false}
                }
            };
            vm.numbers.push(number)
        }

        $document.bind('keydown keypress', function (e) {
            if(e.which === 27) {
                vm.resetBetting();
                e.preventDefault()
            }
        });

        function purchaseLimit(gameid, betid) {
            if ($rootScope.isAuthenticated){
                if ($rootScope.myParameters !== undefined){
                    return $rootScope.myParameters.filter(function(item) { return item.GameType === gameid && item.BetType === betid })[0].MaxPointPerNumber;
                }else{
                    $timeout(function () {
                        vm.purchaseLimit(gameid, betid)
                    }, 1000)
                }
            }
        }

        function payouts(gameid, betid) {
            if ($rootScope.isAuthenticated){
                if ($rootScope.myParameters !== undefined){
                    return $rootScope.myParameters.filter(function(item) { return item.GameType === gameid && item.BetType === betid })[0].Payouts / 1000;
                }else{
                    $timeout(function () {
                        vm.payouts(gameid, betid)
                    }, 1000)
                }
            }
        }

        $scope.$on('TradOdds::done', function (){
            vm.buildPriceTable();
        })

        function buildPriceTable(){
            vm.odds = $rootScope.TradOdds.filter(function (odd) {
                return msUtils.exists(odd.GameType, [2,3,4]) && msUtils.exists(odd.BetType, [2,3,4]) && odd.Term === ($rootScope.isAuthenticated ? $rootScope.termName : 'Public')
            })

            vm.basePrice = vm.odds[0].Price;
            angular.forEach(vm.numbers, function (num) {
                angular.forEach(vm.odds, function (odd) {
                    let exNumber = $.grep(odd.Numbers, function(n){return n.Number === num.number});
                    let extPrice = exNumber.length && exNumber[0].ExtraPrice !== undefined ? odd.Price + exNumber[0].ExtraPrice : odd.Price;
                    if (exNumber.length && exNumber[0].Stop){
                        num.disabled[odd.BetType][odd.GameType] = exNumber[0].Stop;
                    }
                    num.basePrice = odd.Price;
                    if (odd.BetType === vm.betID && num.price[odd.BetType][odd.GameType] !== extPrice && num.price[odd.BetType][odd.GameType] !== 0){
                        num.priceChanged = true
                    }
                    num.price[odd.BetType][odd.GameType] = extPrice;
                })
            });
            $timeout(function () {
                angular.forEach(vm.numbers, function (n) {
                    n.priceChanged = false;
                })
            }, 3000)
        }

        function selectNumber(n) {
            angular.forEach(vm.numbers, function (number) {
                if (number.number === n.number){
                    number.selected = !number.selected;
                }
            });
        }

        vm.selectedCheckbox = [];

        vm.exists = function (item) {
            return vm.selectedCheckbox.indexOf(item) > -1;
        };

        function groupNumbers(id){
            let idx = vm.selectedCheckbox.indexOf(id);
            if (idx > -1) {
                vm.selectedCheckbox.splice(idx, 1);
            }else {
                vm.selectedCheckbox.push(id);
            }
            vm.checked = idx === -1;
            vm.arrayNumber = $.grep(select.list, function(b){
                return b.id === id;
            })[0].content;
            angular.forEach(vm.numbers, function (number) {
                if ($.grep(vm.arrayNumber, function(b){return b === number.number}).length){
                    number.selected = vm.checked;
                }
            });
        }

        function inputKeyNumber(e) {
            if (!vm.keynumber){return}
            if(e.which === 8){
                if (vm.keynumber[vm.keynumber.length - 1] !== ','){
                    vm.keynumber = vm.keynumber.substring(0, vm.keynumber.length - 1)
                }
            }
            let value = vm.keynumber.split(',');
            if (value[value.length-1].length > 1){
                vm.keynumber = vm.keynumber + ','
            }
        }

        function submitKeyNumber(click) {
            if (!vm.keynumber){return}
            vm.keynumber = vm.keynumber.replace(/\s+/g, '');
            if (vm.keynumber.length === 0){return}
            let arr = vm.keynumber.split(',');
            let arrInput = [];
            for (let i = 0; i < arr.length; i++){
                let number = arr[i].slice(-2).replace(/\s+/g, '');
                number = number.length < 2 && number.length !== 0 ? '0' + number : number;
                if (!isNaN(number) && angular.isNumber(+number)){
                    if (number.length !== 0)
                        arrInput.push(number)
                }
            }
            angular.forEach(vm.numbers, function (val) {
                if (arrInput.indexOf(val.number) !== -1){
                    val.selected = true
                }
            });
            vm.keynumber = '';
            if (!click){
                $timeout(function () {
                    document.getElementsByClassName('bet-input')[0].select();
                }, 10)
            }else{
                $timeout(function () {
                    document.getElementsByClassName('input-numbers-array')[0].focus();
                }, 10)
            }
        }

        function resetBetting(){
            angular.forEach(vm.numbers, function (number) {
                number.selected = false;
            });
            vm.selectedCheckbox = [];
            vm.inputPoint = {2: 0, 3: 0, 4: 0};
            vm.keynumber = '';
        }

        function costMoney(pair) {
            let numberArr;
            let numberPair = 0;
            angular.forEach([2,3,4], function (betid) {
                numberPair = 0;
                angular.forEach($rootScope.regironSelected, function (regiron) {
                    numberArr = [];
                    angular.forEach(vm.numbers, function (num) {
                        if (num.selected){
                            if (!num.disabled[betid][regiron]){
                                numberArr.push(num.number)
                            }
                        }
                    });
                    numberPair += numberArr.combinate(betid).length
                });
                vm.pair.count[betid] = numberPair
            });


            let sumMoney = 0;
            angular.forEach($rootScope.regironSelected, function (regiron) {
                numberArr = [];
                angular.forEach(vm.numbers, function (num) {
                    if (num.selected){
                        if (!num.disabled[pair][regiron]){
                            numberArr.push(num.number)
                        }
                    }
                });

                let totalyArr = numberArr.combinate(pair);
                if (totalyArr.length <= 128){
                    angular.forEach(totalyArr, function (pairArr) {
                        let pricePerPair = 0;
                        angular.forEach(pairArr, function (number){
                            angular.forEach(vm.numbers, function (num) {
                                if (num.number === number){
                                    pricePerPair += num.price[pair][regiron]
                                }
                            });
                        });
                        pricePerPair = Math.ceil(pricePerPair/pairArr.length);
                        sumMoney += pricePerPair
                    })
                }else{
                    vm.inputPoint[pair] = 0;
                }
            });

            if (pair === 2){
                sumMoney = sumMoney * vm.inputPoint[2] * 36;
                vm.pair.money[2] = sumMoney
            }else if (pair === 3){
                sumMoney = sumMoney * vm.inputPoint[3] * 54;
                vm.pair.money[3] = sumMoney
            }else if (pair === 4){
                sumMoney = sumMoney * vm.inputPoint[4] * 72;
                vm.pair.money[4] = sumMoney
            }
            return sumMoney
        }

        function submitBetting() {
            let betObj, selectedNumber, pairArrNum, Number;
            betObj = {
                Term: $rootScope.termName,
                IgnorePrice: vm.ignorePrice,
                Tickets: []
            };
            // inputPoint
            angular.forEach($rootScope.regironSelected, function (gameid){
                Object.keys(vm.inputPoint).forEach(function(betid) {
                    if (vm.inputPoint[betid] !== 0){

                        let TicketObj = {
                            GameType: gameid,
                            BetType: parseInt(betid),
                            Items: []
                        };
                        selectedNumber = [];
                        angular.forEach(vm.numbers, function (number) {
                            if (number.selected && !number.disabled[betid][gameid] ){
                                selectedNumber.push(number.number)
                            }
                        });
                        pairArrNum = selectedNumber.combinate(betid);
                        angular.forEach(pairArrNum, function (pair) {
                            Number = {};
                            Number.Numbers = pair;
                            Number.Point = vm.inputPoint[betid];
                            //Tính tiền cho cặp xiên
                            let pricePerPair = 0;
                            angular.forEach(pair, function (n) {
                                angular.forEach(vm.numbers, function (num) {
                                    if (num.number === n){
                                        pricePerPair += num.price[betid][gameid]
                                    }
                                })
                            });
                            pricePerPair = Math.ceil(pricePerPair/pair.length);
                            Number.Price = pricePerPair;
                            TicketObj.Items.push(Number)
                        });
                        betObj.Tickets.push(TicketObj)
                    }
                })
            });

            vm.sumMoney = vm.pair.money[2] + vm.pair.money[3] + vm.pair.money[4];
            vm.sumPoint = (vm.pair.count[2] * vm.inputPoint[2]) + (vm.pair.count[3] * vm.inputPoint[3]) + (vm.pair.count[4] * vm.inputPoint[4])

            let ns = [];
            vm.numbers.map(function (number) {
                if (number.selected){
                    ns.push(number.number)
                }
            })
            let eventData = {
                betObj: betObj,
                sumObj: {
                    numbers: ns,
                    point: vm.sumPoint,
                    money: vm.sumMoney
                }
            }
            $rootScope.$broadcast('EventBetting', eventData);

        }

        $rootScope.$on('ResetBetting', function (){
            vm.resetBetting();
        })

        $rootScope.$broadcast('TradOdds::get', {GameTypes: [2,3,4], BetTypes: [2,3,4]})
    }
})();
(function () {
    'use strict';

    angular
        .module('app.traditional')
        .controller('liveSouthernCtrl', liveSouthernCtrl);

    function liveSouthernCtrl($rootScope, $scope, $timeout, $interval, $mdMedia, $document, network, betId, collections, msUtils, message) {
        let vm = this;
        vm.init = init;
        vm.oddsPrice = oddsPrice;
        vm.buildPriceTable = buildPriceTable;
        vm.selectNumber = selectNumber;
        vm.singlePointClick = singlePointClick;
        vm.clearTemporary = clearTemporary;
        vm.changeBettingPoint = changeBettingPoint;
        vm.exists = exists;
        vm.groupNumbers = groupNumbers;
        vm.inputKeyNumber = inputKeyNumber;
        vm.submitKeyNumber = submitKeyNumber;
        vm.resetBetting = resetBetting;
        vm.totalPoint = totalPoint;
        vm.submitBetting = submitBetting;
        vm.betId = betId;
        vm.ignorePrice = true;
        vm.basePrice = 0;
        vm.numbers = [];
        vm.quickChoices = collections.list;
        vm.allowBetting = false;

        $scope.$mdMedia = $mdMedia;

        $rootScope.location = {game: 2, bet: betId};

        for (let i = 0; i < 100; i++) {
            i = i < 10 ? i = '0' + i : i;
            vm.numbers.push({number: i.toString(), disabled: false, selected: false, price: 0, point: 0})
        }

        $timeout(function () {
            vm.init();
        }, 300);

        function init() {
            if ($rootScope.isAuthenticated){
                if ($rootScope.myParameters !== undefined) {
                    let myParamValues = $rootScope.myParameters.filter(function (item) {
                        return item.GameType === 2 && item.BetType === betId
                    })[0];
                    vm.purchaseLimit = myParamValues.MaxPointPerNumber;
                    vm.payouts = myParamValues.Payouts / 1000;
                    vm.oddsPrice();
                } else {
                    $timeout(function () {
                        vm.init()
                    }, 1000)
                }
            }else {
                vm.oddsPrice();
            }
        }

        function oddsPrice() {
            if ($rootScope.isAuthenticated){
                if ($rootScope.termName !== undefined) {
                    network.Games.getLoLiveOdds({Term: $rootScope.termName, GameType: 2, BetType: 27}).then(function (resp) {
                        // console.log(resp)
                        vm.odds = resp;
                        vm.buildPriceTable();
                    })
                } else {
                    $timeout(function () {
                        vm.oddsPrice();
                    }, 1000)
                }
            }else {
                network.Public.Lottery.getLoLiveOdds({GameType: 2, BetType: 27}).then(function (resp) {
                    vm.odds = resp;
                    vm.buildPriceTable();
                })
            }
        }

        function buildPriceTable() {
            if (vm.odds === undefined) {return}
            vm.allowBetting = vm.odds.Active;
            vm.basePrice = vm.odds.Price;
            angular.forEach(vm.numbers, function (num) {
                vm.bPrice = angular.copy(num.price);
                let exNum = $.grep(vm.odds.Numbers, function (f) {
                    return f.Number === num.number
                });
                num.price = vm.basePrice;
                if (exNum.length) {
                    num.Stop = exNum[0].Stop;
                    num.price = exNum[0].ExtraPrice !== undefined ? vm.basePrice + exNum[0].ExtraPrice : vm.basePrice
                }
                num.priceChanged = ((num.price !== vm.bPrice) && vm.bPrice !== 0);
            });

            vm.clearPriceChange = $timeout(function () {
                angular.forEach(vm.numbers, function (n) {
                    n.priceChanged = false;
                })
            }, 3000)
        }

        vm.onlyNumbers = /^\d+$/;
        vm.arrayTemporary = [];
        vm.readyClear = false;
        vm.numbersCopy = [];

        function selectNumber(n) {
            angular.forEach(vm.numbers, function (number) {
                if (number.number === n.number && !number.disabled) {
                    number.selected = !number.selected;
                    number.point = 0;
                }
            });
            if (n.selected) {
                vm.betPoint = 0;

                if ($mdMedia('gt-sm')) {
                    $timeout(function () {
                        document.getElementById('bet-input').select();
                    }, 10)
                }
                vm.arrayTemporary.push(n.number);
            }
        }

        function singlePointClick($event) {
            $event.target.select();
        }

        function clearTemporary() {
            if (vm.readyClear) {
                vm.arrayTemporary = [];
                vm.readyClear = false;
                vm.numbersCopy = [];
            }
        }

        function changeBettingPoint() {
            vm.readyClear = true;
            if (vm.numbersCopy.length === 0) {
                vm.numbersCopy = angular.copy(vm.numbers);
                angular.forEach(vm.numbers, function (number) {
                    if (msUtils.exists(number.number, vm.arrayTemporary) && !number.disabled) {
                        number.point += parseInt(vm.betPoint);
                    }
                });
            } else {
                angular.forEach(vm.numbers, function (number) {
                    if (msUtils.exists(number.number, vm.arrayTemporary)) {
                        number.point = vm.numbersCopy.filter(function (num) {
                            return num.number === number.number
                        })[0].point + parseInt(vm.betPoint);
                        // number.point += parseInt(vm.betPoint);
                    }
                });
            }
        }

        vm.selectedCheckbox = [];

        function exists(parent, id) {
            let ids = parent.toString() + id.toString();
            return vm.selectedCheckbox.indexOf(ids) > -1;
        }

        function groupNumbers(parent, id) {
            let ids = parent.toString() + id.toString();
            let idx = vm.selectedCheckbox.indexOf(ids);
            if (idx > -1) {
                vm.selectedCheckbox.splice(idx, 1);
            } else {
                vm.selectedCheckbox.push(ids);
            }
            vm.checked = idx === -1;
            vm.arrayNumber = vm.quickChoices[parent].collect[id].numbers;


            angular.forEach(vm.numbers, function (number) {
                if ($.grep(vm.arrayNumber, function (b) {
                    return b === number.number
                }).length && !number.disabled) {
                    number.selected = vm.checked;
                    number.point = vm.checked === false ? 0 : number.point;
                }
            });
            //Xóa mảng ra khỏi temporary array
            if (!vm.checked) {
                for (let i = vm.arrayTemporary.length - 1; i >= 0; i--) {
                    let px = vm.arrayNumber.indexOf(vm.arrayTemporary[i]);
                    if (px > -1) {
                        vm.arrayTemporary.splice(vm.arrayTemporary.indexOf(vm.arrayTemporary[i]), 1);
                    }
                }
            } else {
                vm.arrayTemporary = vm.arrayTemporary.concat(vm.arrayNumber);
                //Xong lọc trùng cái mảng này.
                vm.arrayTemporary = vm.arrayTemporary.filter(function (item, index, inputArray) {	//Lọc trùng
                    return inputArray.indexOf(item) === index;
                });
            }
            vm.betPoint = 0;
            if ($mdMedia('gt-sm')) {
                $timeout(function () {
                    document.getElementById('bet-input').select();
                }, 10)
            }
        }

        function inputKeyNumber(e) {
            if (!vm.keynumber) {
                return
            }
            if (e.which === 8) {
                if (vm.keynumber[vm.keynumber.length - 1] !== ',') {
                    vm.keynumber = vm.keynumber.substring(0, vm.keynumber.length - 1)
                }
            }
            let value = vm.keynumber.split(',');
            if (value[value.length - 1].length > 1) {
                vm.keynumber = vm.keynumber + ','
            }
        }

        function submitKeyNumber(click) {
            if (!vm.keynumber) {
                return
            }
            vm.keynumber = vm.keynumber.replace(/\s+/g, '');
            if (vm.keynumber.length === 0) {
                return
            }
            let arr = vm.keynumber.split(',');
            let arrInput = [];
            for (let i = 0; i < arr.length; i++) {
                let number = arr[i].slice(-2).replace(/\s+/g, '');
                number = number.length < 2 && number.length !== 0 ? '0' + number : number;
                if (!isNaN(number) && angular.isNumber(+number)) {
                    if (number.length !== 0)
                        arrInput.push(number)
                }
            }
            angular.forEach(vm.numbers, function (val) {
                if (arrInput.indexOf(val.number) !== -1 && !val.disabled) {
                    val.selected = true
                }
            });
            vm.arrayTemporary = vm.arrayTemporary.concat(arrInput);
            vm.keynumber = '';
            if (!click) {
                $timeout(function () {
                    document.getElementById('bet-input').select();
                }, 10)
            } else {
                $timeout(function () {
                    document.getElementsByClassName('input-numbers-array')[0].focus();
                }, 10)
            }
        }

        function resetBetting() {
            angular.forEach(vm.numbers, function (number) {
                number.selected = false;
                number.point = 0;
                vm.betPoint = 0;
            });
            vm.selectedCheckbox = [];
            vm.keynumber = '';
            vm.arrayTemporary = [];
        }

        function totalPoint() {
            if (!vm.allowBetting) {
                vm.resetBetting()
            }
            let total = 0, oddNumbers;
            vm.totalMoney = 0;
            angular.forEach(vm.numbers, function (num) {
                total += !num.disabled ? num.point : 0;

                if (vm.odds && num.selected) {
                    oddNumbers = $.grep(vm.odds.Numbers, function (n) {
                        return n.Number === num.number
                    });
                    if (oddNumbers.length && !oddNumbers[0].stop && oddNumbers[0].ExtraPrice !== 0) {
                        vm.totalMoney += num.point * (vm.basePrice + oddNumbers[0].ExtraPrice)
                    } else {
                        vm.totalMoney += num.point * vm.basePrice
                    }
                }
            });
            if (vm.odds !== undefined){
                vm.totalMoney = vm.totalMoney * vm.odds.PrizeNr;
            }
            vm.sumPoint = total;
            return total;
        }

        function submitBetting() {
            let checkCount = 0;
            let betObj = {};
            let ns = [];
            betObj.Term = $rootScope.termName;
            betObj.IgnorePrice = vm.ignorePrice;
            betObj.Tickets = [{
                PrizeNr: vm.odds.PrizeNr,
                GameType: 2,
                BetType: betId,
                Items: []
            }];

            vm.numbers.map(function (number){
                if (number.selected && !number.disabled){
                    let Number = {};
                    Number.Numbers = [number.number];
                    Number.Point = number.point;
                    Number.Price = number.price;
                    betObj.Tickets[0].Items.push(Number);

                    ns.push(number.number)
                }
                checkCount += ( number.selected && (number.point === 0 || number.point === null || isNaN(number.point) ) ) ? 1 : 0;
            })

            if (checkCount === 0){

                let eventData = {
                    betObj: betObj,
                    sumObj: {
                        numbers: ns,
                        point: vm.sumPoint,
                        money: vm.totalMoney
                    }
                }
                $rootScope.$broadcast('EventBetting', eventData);

            }else{
                message.show('Quý khách vui lòng kiểm tra lại số điểm muốn đặt cược.')
            }
        }

        $rootScope.$on('ResetBetting', function (){
            vm.resetBetting();
        })


        $document.bind('keydown keypress', function (e) {
            if (e.which === 27) {
                vm.resetBetting();
                e.preventDefault()
            }
        });
        $scope.$on('$destroy', function () {
            $rootScope.location = undefined;
        });
        $scope.$on('extra-price-changed', function ($event, data){
            // console.log(data);
            if (vm.odds === undefined){return}
            let matchNumber = 0;
            angular.forEach(data, function (itemPrice) {
                if (2 === itemPrice.GameType && 27 === itemPrice.BetType){
                    let findNumber = $.grep(vm.odds.Numbers, function (n) {
                        return n.Number === itemPrice.Number
                    });
                    if (findNumber.length){
                        findNumber[0].ExtraPrice += itemPrice.PriceChange
                    }else {
                        vm.odds.Numbers.push( {Number: itemPrice.Number, ExtraPrice: itemPrice.PriceChange} )
                    }
                    matchNumber ++
                }
            });
            if (matchNumber !== 0){
                vm.buildPriceTable();
                if (vm.clearPriceChange){
                    clearTimeout(vm.clearPriceChange)
                }
            }
        });
        $scope.$on('stop-number-changed', function ($event, data){
            if (vm.odds === undefined){return}
            angular.forEach(data, function (item) {
                if (2 === item.GameType && 27 === item.BetType){

                    let findNumber = $.grep(vm.odds.Numbers, function (n) {
                        return n.Number === item.Number
                    });
                    if (findNumber.length){
                        findNumber[0].Stop = item.Stop
                    }else {
                        vm.odds.Numbers.push( {Number: item.Number, Stop: item.Stop} )
                    }
                }
            });
            vm.buildPriceTable();
        });
        $scope.$on('lo-live:event:prize-closed', function ($event, data) {
            if (vm.odds === undefined){return}
            if (data.Term === $rootScope.termName && data.GameType === 2){
                vm.odds.PrizeNr = data.PrizeNr;
                vm.buildPriceTable();
            }
        });
        $scope.$on('lo-live:event:game-opening', function ($event, data) {
            if (vm.odds === undefined){return}
            if (data.Term === $rootScope.termName && data.GameType === 2){
                vm.odds.Active = true;
                vm.buildPriceTable();
            }
        });
        $scope.$on('lo-live:event:game-closed', function ($event, data) {
            if (vm.odds === undefined){return}
            if (data.Term === $rootScope.termName && data.GameType === 2){
                vm.odds.Active = false;
                vm.odds.PrizeNr = data.PrizeNr;
                vm.buildPriceTable();
            }
        });
    }
})();
(function (){
    'use strict';

    angular
        .module('app.traditional')
        .controller('lo7Controller', lo7Controller);

    function lo7Controller($rootScope, $scope, $timeout, $interval, $document, network, msUtils){
        let vm = this;
        vm.declareRow = declareRow;
        vm.totalMoney = totalMoney;
        vm.toggleAll = toggleAll;
        vm.checkedAll = checkedAll;
        vm.isIndeterminate = isIndeterminate;
        vm.checkDisabledReset = checkDisabledReset;
        vm.submitBetting = submitBetting;

        vm.ignorePrice = true;
        vm.declareRow();

        function declareRow(){
            vm.rowsBets = [];
            for (let i=0; i<15; i++){
                let row = {};
                row.number = '';
                row.regirons = {2: false, 3: false, 4: false};
                row.lo = {
                    16: {point: 0, reverse: false},
                    18: {point: 0, reverse: false}
                };
                row.money = 0;
                vm.rowsBets.push(row)
            }
        }

        $document.bind('keydown keypress', function (e) {
            if(e.which === 27) {
                vm.declareRow();
                e.preventDefault()
            }
        });

        $scope.$on('TradOdds::done', function (){
            vm.ready = true;
            vm.odds = $rootScope.TradOdds.filter(function (odd) {
                return msUtils.exists(odd.GameType, [2,3,4]) && msUtils.exists(odd.BetType, [16,18]) && odd.Term === ($rootScope.isAuthenticated ? $rootScope.termName : 'Public')
            })
        })

        function checkedAll(id) {
            let count = 0;
            angular.forEach(vm.rowsBets, function (row) {
                count += row.regirons[id] === true ? 1 : 0
            });
            return count === vm.rowsBets.length
        }

        function toggleAll(id) {
            let check = vm.checkedAll(id);
            angular.forEach(vm.rowsBets, function (row) {
                row.regirons[id] = !check;
            })
        }

        function isIndeterminate(id) {
            let count = 0;
            angular.forEach(vm.rowsBets, function (row) {
                count += row.regirons[id] === true ? 1 : 0
            });
            if (count === 0 || count === vm.rowsBets.length){
                return false
            }else{
                return true
            }
        }

        function checkDisabledReset() {
            let check = 0;
            angular.forEach(vm.rowsBets, function (row) {
                if(row.number !== null){
                    check += row.number.length ? 1 : 0
                }
            });
            return check === 0
        }

        function totalMoney() {
            let sumMoney = 0, rowMoney, oddValues, oddPrice, numbers;
            angular.forEach(vm.rowsBets, function (row) {
                rowMoney = 0;
                if (row.number){
                    if (row.number.length === 3){
                        row.lo[16].disabledReverse = true;
                        row.lo[18].disabledReverse = row.number.split('')[0] === row.number.split('')[1] && row.number.split('')[1] === row.number.split('')[2]
                    }else{
                        row.lo[16].disabledReverse = row.number.split('')[0] === row.number.split('')[1];
                        row.lo[18].disabledReverse = true
                    }

                    Object.keys(row.regirons).forEach(function(gameid){
                        if (row.regirons[gameid]){
                            oddValues = $.grep(vm.odds, function (game) {
                                return game.GameType === parseInt(gameid)
                            });

                            if (row.number.length === 3){
                                oddPrice = $.grep(oddValues, function (bet) {
                                    return bet.BetType === 18
                                })[0];
                                numbers = row.lo[18].reverse ? msUtils.permNumber(row.number) : [row.number];
                                angular.forEach(numbers, function (num) {
                                    let findExtra = $.grep(oddPrice.Numbers, function (n) {
                                        return n.Number === num
                                    });
                                    if (findExtra.length === 0){
                                        rowMoney += row.lo[18].point * oddPrice.Price * 7;
                                    }else {
                                        if (!findExtra[0].Stop && findExtra[0].ExtraPrice){
                                            rowMoney += row.lo[18].point * (oddPrice.Price + findExtra[0].ExtraPrice) * 7;
                                        }
                                    }
                                })
                            }else if (row.number.length === 1 || row.number.length === 2){

                                oddPrice = $.grep(vm.odds, function (bet) {
                                    return bet.BetType === 16
                                })[0];
                                let number = row.number.length === 1 ? '0' + row.number.toString() : row.number;
                                numbers = row.lo[16].reverse ? msUtils.permNumber(number) : [number];


                                angular.forEach(numbers, function (num) {
                                    let findExtra = $.grep(oddPrice.Numbers, function (n) {
                                        return n.Number === num
                                    });

                                    if (findExtra.length === 0){
                                        rowMoney += row.lo[16].point * oddPrice.Price * 7;
                                    }else {
                                        if (!findExtra[0].Stop && findExtra[0].ExtraPrice !== undefined){
                                            rowMoney += row.lo[16].point * (oddPrice.Price + findExtra[0].ExtraPrice) * 7;
                                        }
                                    }
                                })
                            }
                        }
                    });
                    row.money = rowMoney;
                    sumMoney += rowMoney;
                }else{
                    row.lo[16].disabledReverse = true;
                    row.lo[18].disabledReverse = true
                }
            });
            vm.sumMoney = sumMoney;
            return sumMoney
        }
        
        function submitBetting() {
            vm.sumPoint = 0;
            vm.ns = [];
            vm.betDatas = [];
            let oddPrice, betObj, numbers, oddValues;

            betObj = {
                Term: $rootScope.termName,
                IgnorePrice: vm.ignorePrice,
                Tickets: []
            };
            angular.forEach(vm.rowsBets, function (row, rowId) {
                Object.keys(row.regirons).forEach(function(gameid){
                   if (row.regirons[gameid]){
                       oddValues = $.grep(vm.odds, function (game) {
                           return game.GameType === parseInt(gameid)
                       });
                       if (row.number.length === 3){
                           numbers = row.lo[18].reverse ? msUtils.permNumber(row.number) : [row.number];
                           oddPrice = $.grep(oddValues, function (bet) {
                               return bet.BetType === 18
                           })[0];
                           let TicketObj = {
                               GameType: parseInt(gameid),
                               BetType: 18,
                               Items: [],
                               Additional: {
                                   Row: rowId,
                                   Alias: 131072,
                                   Reverse: row.lo[18].reverse
                               }
                           };
                           angular.forEach(numbers, function (num) {
                               let Number = {};
                               Number.Numbers = [num];
                               vm.ns = vm.ns.concat([num])
                               Number.Point = row.lo[18].point;
                               vm.sumPoint += row.lo[18].point;
                               let findExtra = $.grep(oddPrice.Numbers, function (n) {
                                   return n.Number === num
                               });
                               if (findExtra.length === 0){
                                   Number.Price = oddPrice.Price;
                                   TicketObj.Items.push(Number);
                               }else {
                                   if (findExtra[0].ExtraPrice !== undefined){
                                       Number.Price = oddPrice.Price + findExtra[0].ExtraPrice
                                   }
                                   if (!findExtra[0].Stop){
                                       TicketObj.Items.push(Number);
                                   }
                               }
                           });
                           if (TicketObj.Items.length){
                               betObj.Tickets.push(TicketObj)
                           }
                       }else if (row.number.length === 1 || row.number.length === 2){
                           let number = row.number.length === 1 ? '0' + row.number.toString() : row.number;
                           numbers = row.lo[16].reverse ? msUtils.permNumber(number) : [number];
                           oddPrice = $.grep(oddValues, function (bet) {
                               return bet.BetType === 16
                           })[0];

                           let TicketObj = {
                               GameType: parseInt(gameid),
                               BetType: 16,
                               Items: [],
                               Additional: {
                                   Row: rowId,
                                   Alias: 4096,
                                   Reverse: row.lo[16].reverse
                               }
                           };
                           angular.forEach(numbers, function (num) {
                               let Number = {};
                               Number.Numbers = [num];
                               vm.ns = vm.ns.concat([num])
                               Number.Point = row.lo[16].point;
                               vm.sumPoint += row.lo[16].point;
                               let findExtra = $.grep(oddPrice.Numbers, function (n) {
                                   return n.Number === num
                               });
                               if (findExtra.length === 0){
                                   Number.Price = oddPrice.Price;
                                   TicketObj.Items.push(Number);
                               }else {
                                   if (findExtra[0].ExtraPrice !== undefined){
                                       Number.Price = oddPrice.Price + findExtra[0].ExtraPrice
                                   }
                                   if (!findExtra[0].stop){
                                       TicketObj.Items.push(Number);
                                   }
                               }
                           });
                           if (TicketObj.Items.length){
                               betObj.Tickets.push(TicketObj)
                           }
                       }
                   }
                })
            });
            vm.ns = vm.ns.filter(function (item, index, inputArray) {	//Lọc trùng
                return inputArray.indexOf(item) === index;
            });
            let eventData = {
                betObj: betObj,
                sumObj: {
                    numbers: vm.ns,
                    point: vm.sumPoint,
                    money: vm.sumMoney
                }
            }
            $rootScope.$broadcast('EventBetting', eventData);

        }

        $rootScope.$on('ResetBetting', function (){
            vm.declareRow();
        })

        $rootScope.$broadcast('TradOdds::get', {GameTypes: [2,3,4], BetTypes: [16,18]})
    }
})();
(function (){
    'use strict';

    angular
        .module('app.traditional')
        .controller('parlayCtrl', parlayCtrl);

    function parlayCtrl($rootScope, $scope, $mdMedia, $mdSidenav, $timeout, $interval, $state, $document, msUtils, network, collections){
        let vm = this;
        vm.init = init;
        vm.buildPriceTable = buildPriceTable;
        vm.selectNumber = selectNumber;
        vm.groupNumbers = groupNumbers;
        vm.inputKeyNumber = inputKeyNumber;
        vm.submitKeyNumber = submitKeyNumber;
        vm.resetBetting = resetBetting;
        vm.costMoney = costMoney;
        vm.submitBetting = submitBetting;
        vm.purchaseLimit = purchaseLimit;
        vm.exists = exists;
        vm.ignorePrice = true;
        vm.quickChoices = collections.list;
        $scope.$mdMedia = $mdMedia;

        $scope.$on('$destroy', function() {
            $rootScope.location = undefined;
        });

        $rootScope.location = {game: 0, bet: 2};

        $document.bind('keydown keypress', function (e) {
            if(e.which === 27) {
                vm.resetBetting();
                e.preventDefault()
            }
        });

        vm.base = {2: 0, 3: 0, 4: 0};
        if ($rootScope.myParameters !== undefined){
            $rootScope.myParameters.map(function (pr){
                if (pr.GameType === 0) {
                    if (pr.BetType === 2) { vm.base[2] = pr.Price }
                    if (pr.BetType === 3) { vm.base[3] = pr.Price }
                    if (pr.BetType === 4) { vm.base[4] = pr.Price }
                }
            })
        }

        vm.pair = {count: {2: 0, 3: 0, 4: 0}, money: {2: 0, 3: 0, 4: 0}, limit: {2: 0, 3: 0, 4: 0}, payout: {2: 0, 3: 0, 4: 0}};
        vm.inputPoint = {2: 0, 3: 0, 4: 0};
        vm.numbers = [];
        for (let i = 0; i<100; i++){
            i = i < 10 ? i = '0' + i : i;
            let number = {
                number: i.toString(),
                selected: false,
                base: {2: vm.base[2], 3: vm.base[3], 4: vm.base[4]},
                price: {2: vm.base[2], 3: vm.base[3], 4: vm.base[4]},
                disabled: {2: false, 3: false, 4: false}
            };
            vm.numbers.push(number)
        }

        $timeout(function () {
            vm.init();
        }, 300);

        function init(){
            if ($rootScope.isAuthenticated){
                vm.purchaseLimit()
            }
        }

        function purchaseLimit() {
            if ($rootScope.isAuthenticated){
                if ($rootScope.myParameters !== undefined){
                    angular.forEach([2,3,4], function (betid) {
                        vm.pair.limit[betid] = $rootScope.myParameters.filter(function (item) {return item.GameType === 0 && item.BetType === betid})[0].MaxPointPerNumber;
                        vm.pair.payout[betid] = $rootScope.myParameters.filter(function (item) {return item.GameType === 0 && item.BetType === betid})[0].Payouts / 1000;
                    })
                }else{
                    $timeout(function () {
                        vm.purchaseLimit()
                    }, 1000)
                }
            }
        }

        $scope.$on('TradOdds::done', function (){
            vm.buildPriceTable();
        })

        function buildPriceTable(){
            vm.odds = $rootScope.TradOdds.filter(function (odd) {
                return odd.GameType === 0 && msUtils.exists(odd.BetType, [2,3,4]) && odd.Term === ($rootScope.isAuthenticated ? $rootScope.termName : 'Public')
            })
            if (!vm.odds.length){return}
            angular.forEach(vm.numbers, function (num) {
                angular.forEach(vm.odds, function (odd) {
                    num.base[odd.BetType] = odd.Price;
                    num.price[odd.BetType] = num.price[odd.BetType] === 0 ? odd.Price : num.price[odd.BetType];
                    angular.forEach(odd.Numbers, function (value) {
                        if (value.Number === num.number){
                            let extPrice = value.ExtraPrice !== undefined ? odd.Price + value.ExtraPrice : num.price[odd.BetType];
                            num.disabled[odd.BetType] = value.Stop;
                            if ((num.price[odd.BetType] !== 0) && (num.price[odd.BetType] !== extPrice)){
                                num.priceChanged = true
                            }
                            num.price[odd.BetType] = extPrice;
                        }
                    })
                })
            });
            vm.clearPriceChange = $timeout(function () {
                angular.forEach(vm.numbers, function (n) {
                    n.priceChanged = false;
                })
            }, 3000)
        }

        function selectNumber(n) {
            angular.forEach(vm.numbers, function (number) {
                if (number.number === n.number){
                    number.selected = !number.selected;
                }
            });
        }

        vm.selectedCheckbox = [];

        function exists(parent, id) {
            let ids = parent.toString() + id.toString();
            return vm.selectedCheckbox.indexOf(ids) > -1;
        }

        function groupNumbers(parent, id){
            let ids = parent.toString() + id.toString();
            let idx = vm.selectedCheckbox.indexOf(ids);
            if (idx > -1) {
                vm.selectedCheckbox.splice(idx, 1);
            }else {
                vm.selectedCheckbox.push(ids);
            }
            vm.checked = idx === -1;

            vm.arrayNumber = vm.quickChoices[parent].collect[id].numbers;


            angular.forEach(vm.numbers, function (number) {
                if ($.grep(vm.arrayNumber, function(b){return b === number.number}).length){
                    number.selected = vm.checked;
                }
            });
        }

        function inputKeyNumber(e) {
            if (!vm.keynumber){return}
            if(e.which === 8){
                if (vm.keynumber[vm.keynumber.length - 1] !== ','){
                    vm.keynumber = vm.keynumber.substring(0, vm.keynumber.length - 1)
                }
            }
            let value = vm.keynumber.split(',');
            if (value[value.length-1].length > 1){
                vm.keynumber = vm.keynumber + ','
            }
        }

        function submitKeyNumber(click) {
            if (!vm.keynumber){return}
            vm.keynumber = vm.keynumber.replace(/\s+/g, '');
            if (vm.keynumber.length === 0){return}
            let arr = vm.keynumber.split(',');
            let arrInput = [];
            for (let i = 0; i < arr.length; i++){
                let number = arr[i].slice(-2).replace(/\s+/g, '');
                number = number.length < 2 && number.length !== 0 ? '0' + number : number;
                if (!isNaN(number) && angular.isNumber(+number)){
                    if (number.length !== 0)
                        arrInput.push(number)
                }
            }
            angular.forEach(vm.numbers, function (val) {
                if (arrInput.indexOf(val.number) !== -1){
                    val.selected = true
                }
            });
            vm.keynumber = '';
            if (!click){
                $timeout(function () {
                    document.getElementsByClassName('bet-input')[0].select();
                }, 10)
            }else{
                $timeout(function () {
                    document.getElementsByClassName('input-numbers-array')[0].focus();
                }, 10)
            }
        }

        function resetBetting(){
            vm.numbers.map(function (n) {return n.selected = false})
            vm.selectedCheckbox = [];
            vm.inputPoint = {2: 0, 3: 0, 4: 0};
            vm.keynumber = '';
        }

        function costMoney() {
            vm.sumPoint = 0;
            let numberArr, sumMoney;
            angular.forEach([2,3,4], function (betid) {
                vm.pair.count[betid] = 0;
                sumMoney = 0;
                numberArr = [];
                angular.forEach(vm.numbers, function (num) {
                    if (num.selected){
                        if (!num.disabled[betid]){
                            numberArr.push(num.number)
                        }
                    }
                });
                vm.pair.count[betid] += numberArr.combinate(betid).length;

                let totalyArr = numberArr.combinate(betid);
                if (totalyArr.length <= 128){
                    angular.forEach(totalyArr, function (pairArr) {
                        let pricePerPair = 0;
                        angular.forEach(pairArr, function (number){
                            angular.forEach(vm.numbers, function (num) {
                                if (num.number === number){
                                    pricePerPair += num.price[betid]
                                }
                            });
                        });
                        pricePerPair = Math.ceil(pricePerPair/pairArr.length);
                        sumMoney += pricePerPair
                    });
                    vm.pair.money[betid] = sumMoney * vm.inputPoint[betid];
                    vm.sumPoint += vm.pair.count[betid] * vm.inputPoint[betid];
                }else{
                    vm.inputPoint[betid] = 0;
                }
            });
            vm.totalMoney = vm.pair.money[2] + vm.pair.money[3] + vm.pair.money[4];
            return vm.totalMoney
        }

        function submitBetting() {
            let betObj, ticketObj, selectedNumber, pairArrNum, Number;
            betObj = {};
            betObj.Term = $rootScope.termName;
            betObj.IgnorePrice = vm.ignorePrice;
            betObj.Tickets = [];

            Object.keys(vm.inputPoint).forEach(function(betid) {
                if (vm.inputPoint[betid] !== 0){
                    ticketObj = {
                        GameType: 0,
                        BetType: parseInt(betid),
                        Items: []
                    };
                    selectedNumber = [];
                    angular.forEach(vm.numbers, function (number) {
                        if (number.selected && !number.disabled[betid] ){
                            selectedNumber.push(number.number)
                        }
                    });
                    pairArrNum = selectedNumber.combinate(betid);
                    angular.forEach(pairArrNum, function (pair) {
                        Number = {};
                        Number.Numbers = pair;
                        Number.Point = vm.inputPoint[betid];
                        //Tính tiền cho cặp xiên
                        let pricePerPair = 0;
                        angular.forEach(pair, function (n) {
                            angular.forEach(vm.numbers, function (num) {
                                if (num.number === n){
                                    pricePerPair += num.price[betid]
                                }
                            })
                        });
                        pricePerPair = Math.ceil(pricePerPair/pair.length);
                        Number.Price = pricePerPair;
                        ticketObj.Items.push(Number)
                    });
                    betObj.Tickets.push(ticketObj)
                }
            });

            let ns = [];
            vm.numbers.map(function (n){
                if (n.selected){
                    ns.push(n.number)
                }
            })

            let eventData = {
                betObj: betObj,
                sumObj: {
                    numbers: ns,
                    point: vm.sumPoint,
                    money: vm.totalMoney
                }
            }
            $rootScope.$broadcast('EventBetting', eventData);

        }

        $rootScope.$on('ResetBetting', function (){
            vm.resetBetting();
        })

        if (!$rootScope.isAuthenticated){
            $timeout(function () {
                $rootScope.$broadcast('TradOdds::get', {GameTypes: [0], BetTypes: [2,3,4]})
            }, 200)
        }else{
            $rootScope.$broadcast('TradOdds::get', {GameTypes: [0], BetTypes: [2,3,4]})
        }

    }
})();

Array.prototype.combinate = function( iItems, aIn ) {
    if (!aIn) {
        aIn = [];
        this.combinate.aResult = [];
    }
    for(let i = 0; i < this.length; i++) {
        let a = aIn.concat(this[i]);
        let aRest = this.concat();
        aRest.splice(0, i + 1);
        if(iItems && iItems - 1 <= aRest.length){
            aRest.combinate(iItems - 1, a);
            if(iItems === 1) this.combinate.aResult.push(a);
        }
    }
    return this.combinate.aResult;
};
(function () {
    'use strict';

    angular
        .module('app.traditional')
        .controller('lotLiveCtrl', lotLiveCtrl);

    function lotLiveCtrl($rootScope, $scope, $timeout, $interval, $mdMedia, $document, $mdDialog, $state, network, betId, collections, msUtils, message) {
        let vm = this;
        vm.init = init;
        vm.oddsPrice = oddsPrice;
        vm.buildPriceTable = buildPriceTable;
        vm.selectNumber = selectNumber;
        vm.singlePointClick = singlePointClick;
        vm.clearTemporary = clearTemporary;
        vm.changeBettingPoint = changeBettingPoint;
        vm.exists = exists;
        vm.groupNumbers = groupNumbers;
        vm.inputKeyNumber = inputKeyNumber;
        vm.submitKeyNumber = submitKeyNumber;
        vm.resetBetting = resetBetting;
        vm.totalPoint = totalPoint;
        vm.submitBetting = submitBetting;
        vm.Promenade = Promenade;
        vm.betId = betId;
        vm.ignorePrice = true;
        vm.basePrice = 0;
        vm.numbers = [];
        vm.quickChoices = collections.list;
        vm.allowBetting = false;

        $scope.$mdMedia = $mdMedia;

        $rootScope.location = {game: 0, bet: betId};

        for (let i = 0; i < 100; i++) {
            i = i < 10 ? i = '0' + i : i;
            vm.numbers.push({number: i.toString(), disabled: false, selected: false, price: 0, point: 0})
        }

        $timeout(function () {
            vm.init();
        }, 300);

        function init() {
            if ($rootScope.isAuthenticated){
                if ($rootScope.myParameters !== undefined) {
                    let myParamValues = $rootScope.myParameters.filter(function (item) {
                        return item.GameType === 0 && item.BetType === betId
                    })[0];
                    vm.purchaseLimit = myParamValues.MaxPointPerNumber;
                    vm.payouts = myParamValues.Payouts / 1000;
                    vm.oddsPrice();
                } else {
                    $timeout(function () {
                        vm.init()
                    }, 1000)
                }
            }else {
                vm.oddsPrice();
            }
        }

        function oddsPrice() {
            if ($rootScope.isAuthenticated){
                if ($rootScope.termName !== undefined) {
                    network.Games.getLoLiveOdds({Term: $rootScope.termName, GameType: 0, BetType: 20}).then(function (resp) {
                        vm.odds = resp;
                        vm.buildPriceTable();
                    })
                } else {
                    $timeout(function () {
                        vm.oddsPrice();
                    }, 1000)
                }
            }else {
                network.Public.Lottery.getLoLiveOdds({GameType: 0, BetType: 20}).then(function (resp) {
                    vm.odds = resp;
                    vm.buildPriceTable();
                })
            }
        }

        function buildPriceTable() {
            if (vm.odds === undefined) {return}
            vm.allowBetting = vm.odds.Active;
            vm.basePrice = vm.odds.Price;
            angular.forEach(vm.numbers, function (num) {
                vm.bPrice = angular.copy(num.price);
                let exNum = $.grep(vm.odds.Numbers, function (f) {
                    return f.Number === num.number
                });
                num.price = vm.basePrice;
                if (exNum.length) {
                    num.Stop = exNum[0].Stop;
                    num.price = exNum[0].ExtraPrice !== undefined ? vm.basePrice + exNum[0].ExtraPrice : vm.basePrice
                }
                num.priceChanged = ((num.price !== vm.bPrice) && vm.bPrice !== 0);
            });

            vm.clearPriceChange = $timeout(function () {
                angular.forEach(vm.numbers, function (n) {
                    n.priceChanged = false;
                })
            }, 3000)
        }

        vm.onlyNumbers = /^\d+$/;
        vm.arrayTemporary = [];
        vm.readyClear = false;
        vm.numbersCopy = [];

        function selectNumber(n) {
            angular.forEach(vm.numbers, function (number) {
                if (number.number === n.number && !number.disabled) {
                    number.selected = !number.selected;
                    number.point = 0;
                }
            });
            if (n.selected) {
                vm.betPoint = 0;

                if ($mdMedia('gt-sm')) {
                    $timeout(function () {
                        document.getElementById('bet-input').select();
                    }, 10)
                }
                vm.arrayTemporary.push(n.number);
            }
        }

        function singlePointClick($event) {
            $event.target.select();
        }

        function clearTemporary() {
            if (vm.readyClear) {
                vm.arrayTemporary = [];
                vm.readyClear = false;
                vm.numbersCopy = [];
            }
        }

        function changeBettingPoint() {
            vm.readyClear = true;
            if (vm.numbersCopy.length === 0) {
                vm.numbersCopy = angular.copy(vm.numbers);
                angular.forEach(vm.numbers, function (number) {
                    if (msUtils.exists(number.number, vm.arrayTemporary) && !number.disabled) {
                        number.point += parseInt(vm.betPoint);
                    }
                });
            } else {
                angular.forEach(vm.numbers, function (number) {
                    if (msUtils.exists(number.number, vm.arrayTemporary)) {
                        number.point = vm.numbersCopy.filter(function (num) {
                            return num.number === number.number
                        })[0].point + parseInt(vm.betPoint);
                        // number.point += parseInt(vm.betPoint);
                    }
                });
            }
        }

        vm.selectedCheckbox = [];

        function exists(parent, id) {
            let ids = parent.toString() + id.toString();
            return vm.selectedCheckbox.indexOf(ids) > -1;
        }

        function groupNumbers(parent, id) {
            let ids = parent.toString() + id.toString();
            let idx = vm.selectedCheckbox.indexOf(ids);
            if (idx > -1) {
                vm.selectedCheckbox.splice(idx, 1);
            } else {
                vm.selectedCheckbox.push(ids);
            }
            vm.checked = idx === -1;
            vm.arrayNumber = vm.quickChoices[parent].collect[id].numbers;


            angular.forEach(vm.numbers, function (number) {
                if ($.grep(vm.arrayNumber, function (b) {
                    return b === number.number
                }).length && !number.disabled) {
                    number.selected = vm.checked;
                    number.point = vm.checked === false ? 0 : number.point;
                }
            });
            //Xóa mảng ra khỏi temporary array
            if (!vm.checked) {
                for (let i = vm.arrayTemporary.length - 1; i >= 0; i--) {
                    let px = vm.arrayNumber.indexOf(vm.arrayTemporary[i]);
                    if (px > -1) {
                        vm.arrayTemporary.splice(vm.arrayTemporary.indexOf(vm.arrayTemporary[i]), 1);
                    }
                }
            } else {
                vm.arrayTemporary = vm.arrayTemporary.concat(vm.arrayNumber);
                //Xong lọc trùng cái mảng này.
                vm.arrayTemporary = vm.arrayTemporary.filter(function (item, index, inputArray) {	//Lọc trùng
                    return inputArray.indexOf(item) === index;
                });
            }
            vm.betPoint = 0;
            if ($mdMedia('gt-sm')) {
                $timeout(function () {
                    document.getElementById('bet-input').select();
                }, 10)
            }
        }

        function inputKeyNumber(e) {
            if (!vm.keynumber) {
                return
            }
            if (e.which === 8) {
                if (vm.keynumber[vm.keynumber.length - 1] !== ',') {
                    vm.keynumber = vm.keynumber.substring(0, vm.keynumber.length - 1)
                }
            }
            let value = vm.keynumber.split(',');
            if (value[value.length - 1].length > 1) {
                vm.keynumber = vm.keynumber + ','
            }
        }

        function submitKeyNumber(click) {
            if (!vm.keynumber) {
                return
            }
            vm.keynumber = vm.keynumber.replace(/\s+/g, '');
            if (vm.keynumber.length === 0) {
                return
            }
            let arr = vm.keynumber.split(',');
            let arrInput = [];
            for (let i = 0; i < arr.length; i++) {
                let number = arr[i].slice(-2).replace(/\s+/g, '');
                number = number.length < 2 && number.length !== 0 ? '0' + number : number;
                if (!isNaN(number) && angular.isNumber(+number)) {
                    if (number.length !== 0)
                        arrInput.push(number)
                }
            }
            angular.forEach(vm.numbers, function (val) {
                if (arrInput.indexOf(val.number) !== -1 && !val.disabled) {
                    val.selected = true
                }
            });
            vm.arrayTemporary = vm.arrayTemporary.concat(arrInput);
            vm.keynumber = '';
            if (!click) {
                $timeout(function () {
                    document.getElementById('bet-input').select();
                }, 10)
            } else {
                $timeout(function () {
                    document.getElementsByClassName('input-numbers-array')[0].focus();
                }, 10)
            }
        }

        function resetBetting() {
            angular.forEach(vm.numbers, function (number) {
                number.selected = false;
                number.point = 0;
                vm.betPoint = 0;
            });
            vm.selectedCheckbox = [];
            vm.keynumber = '';
            vm.arrayTemporary = [];
        }

        function totalPoint() {
            if (!vm.allowBetting) {
                vm.resetBetting()
            }
            let total = 0, oddNumbers;
            vm.totalMoney = 0;
            vm.numbers.map(function (num){
                total += !num.disabled ? num.point : 0;
                if (vm.odds && num.selected) {
                    oddNumbers = $.grep(vm.odds.Numbers, function (n) {
                        return n.Number === num.number
                    });
                    if (oddNumbers.length && !oddNumbers[0].stop && oddNumbers[0].ExtraPrice !== 0) {
                        vm.totalMoney += num.point * (vm.basePrice + oddNumbers[0].ExtraPrice)
                    } else {
                        vm.totalMoney += num.point * vm.basePrice
                    }
                }
            });
            vm.sumPoint = total;
            return total;
        }

        function submitBetting() {
            let ns = [];
            let checkCount = 0;
            let betObj = {};
            betObj.Term = $rootScope.termName;
            betObj.IgnorePrice = vm.ignorePrice;
            betObj.Tickets = [{
                GameType: 0,
                BetType: betId,
                Items: []
            }];

            vm.numbers.map(function (number){
                if (number.selected && !number.disabled){
                    let Number = {};
                    Number.Numbers = [number.number];
                    Number.Point = number.point;
                    Number.Price = number.price;
                    betObj.Tickets[0].Items.push(Number);
                    ns.push(number.number)
                }
                checkCount += ( number.selected && (number.point === 0 || number.point === null || isNaN(number.point) ) ) ? 1 : 0;
            })
            if (checkCount === 0){
                let eventData = {
                    betObj: betObj,
                    sumObj: {
                        numbers: ns,
                        point: vm.sumPoint,
                        money: vm.totalMoney
                    }
                }
                $rootScope.$broadcast('EventBetting', eventData);
            }else{
                message.show('Quý khách vui lòng kiểm tra lại số điểm muốn đặt cược.')
            }
        }
        $rootScope.$on('ResetBetting', function (){
            vm.resetBetting();
        })

        $document.bind('keydown keypress', function (e) {
            if (e.which === 27) {
                vm.resetBetting();
                e.preventDefault()
            }
        });
        $scope.$on('$destroy', function () {
            $rootScope.location = undefined;
        });
        $scope.$on('extra-price-changed', function ($event, data){
            // console.log(data);
            if (vm.odds === undefined){return}
            let matchNumber = 0;
            angular.forEach(data, function (itemPrice) {
                if (0 === itemPrice.GameType && 20 === itemPrice.BetType){
                    let findNumber = $.grep(vm.odds.Numbers, function (n) {
                        return n.Number === itemPrice.Number
                    });
                    if (findNumber.length){
                        findNumber[0].ExtraPrice += itemPrice.PriceChange
                    }else {
                        vm.odds.Numbers.push( {Number: itemPrice.Number, ExtraPrice: itemPrice.PriceChange} )
                    }
                    matchNumber ++
                }
            });
            if (matchNumber !== 0){
                vm.buildPriceTable();
                if (vm.clearPriceChange){
                    clearTimeout(vm.clearPriceChange)
                }
            }
        });
        $scope.$on('stop-number-changed', function ($event, data){
            if (vm.odds === undefined){return}
            angular.forEach(data, function (item) {
                if (0 === item.GameType && 20 === item.BetType){

                    let findNumber = $.grep(vm.odds.Numbers, function (n) {
                        return n.Number === item.Number
                    });
                    if (findNumber.length){
                        findNumber[0].Stop = item.Stop
                    }else {
                        vm.odds.Numbers.push( {Number: item.Number, Stop: item.Stop} )
                    }
                }
            });
            vm.buildPriceTable();
        });
        $scope.$on('lo-live:event:prize-closed', function ($event, data) {
            if (vm.odds === undefined){return}
            // console.log(data)
            if (data.Term === $rootScope.termName && data.GameType === 0 && data.IsLive){
                vm.odds.Price = data.Pricing.filter(function (pr){return pr.BetType === 20})[0].Price;
                vm.odds.PrizeNr = data.PrizeNr;
                vm.buildPriceTable();
            }

            if (data.PrizeNr === 1){
                vm.Promenade();
            }
        });
        $scope.$on('lo-live:event:game-opening', function ($event, data) {
            // data = {Term: 0, GameType: 0}
            if (vm.odds === undefined){return}
            if (data.Term === $rootScope.termName && data.GameType === 0 && data.IsLive){
                vm.odds.Active = true;
                vm.buildPriceTable();
            }
        });
        $scope.$on('lo-live:event:game-closed', function ($event, data) {
            if (vm.odds === undefined){return}
            if (data.Term === $rootScope.termName && data.GameType === 0 && data.IsLive){
                vm.odds.Active = false;
                vm.odds.PrizeNr = data.PrizeNr;
                vm.odds.Price = data.Pricing.filter(function (pr){return pr.BetType === 20})[0].Price;
                vm.buildPriceTable();
            }
        });

        function Promenade(){
            $mdDialog.show({
                controller: PromenadeCtrl,
                templateUrl: 'app/main/traditional/northern/live/promenade.dialog.html',
                fullscreen: true
            });
            function PromenadeCtrl($scope) {

                $scope.doPromenade = function (){
                    $state.go('app.traditional.northern.jackpot');
                    $mdDialog.cancel();
                }

                $scope.cancel = function () {
                    $mdDialog.cancel();
                };
            }
        }

        // document.body.addEventListener('click', function (event){
        //     vm.Promenade();
        // }, true);
    }
})();
(function (){
    'use strict';
    angular
        .module('app.traditional')
        .controller('generalCtrl', generalCtrl);

    function generalCtrl($rootScope, $scope, $state, $mdSidenav, $mdMedia, $timeout, $interval, $document, $mdDialog, msUtils, network, collections, betId, message){
        let vm = this;

        vm.purchaseLimit = purchaseLimit;
        vm.buildPriceTable = buildPriceTable;
        vm.selectNumber = selectNumber;
        vm.singlePointClick = singlePointClick;
        vm.clearTemporary = clearTemporary;
        vm.changeBettingPoint = changeBettingPoint;
        vm.exists = exists;
        vm.groupNumbers = groupNumbers;
        vm.inputKeyNumber = inputKeyNumber;
        vm.submitKeyNumber = submitKeyNumber;
        vm.totalPoint = totalPoint;
        vm.resetBetting = resetBetting;
        vm.submitBetting = submitBetting;
        vm.onTabSelected = onTabSelected;

        vm.setupHighlight = setupHighlight;

        vm.betId = betId;
        vm.ignorePrice = true;
        vm.basePrice = 0;
        vm.numbers = [];
        vm.warnPriceChanges = [];
        vm.quickChoices = collections.list;

        $scope.$mdMedia = $mdMedia;

        $document.bind('keydown keypress', function (e) {
            if(e.which === 27) {
                vm.resetBetting();
                e.preventDefault()
            }
        });

        $scope.$on('$destroy', function() {
            $rootScope.location = undefined;
        });
        $rootScope.location = {game: 0, bet: vm.betId};

        vm.basePrice = 0;
        if ($rootScope.myParameters !== undefined){
            vm.basePrice = $rootScope.myParameters.filter(function (pr) {
                return pr.GameType === 0 && pr.BetType === vm.betId
            })[0].Price;
        }

        for (let i = 0; i<100; i++){
            i = i < 10 ? i = '0' + i : i;
            vm.numbers.push({number: i.toString(), disabled: false, selected: false, price: vm.basePrice, point: 0, selectCount: 0})
        }

        function purchaseLimit(){
            if ($rootScope.myParameters !== undefined){
                return $rootScope.myParameters.filter(function(item) { return item.GameType === 0 && item.BetType === betId })[0].MaxPointPerNumber;
            }
        }
        $scope.$on('TradOdds::done', function (){
            vm.buildPriceTable();
        })
        function buildPriceTable(){
            vm.odds = $rootScope.TradOdds.filter(function (odd) {
                return odd.GameType === 0 && odd.BetType === betId && odd.Term === ($rootScope.isAuthenticated ? $rootScope.termName : 'Public')
            })
            if (!vm.odds.length){return}
            vm.basePrice = vm.odds[0].Price;
            angular.forEach(vm.numbers, function (num) {
                vm.bPrice = angular.copy(num.price);
                let exNum = $.grep(vm.odds[0].Numbers, function (f) {
                    return f.Number === num.number
                });
                num.price = vm.basePrice;
                if (exNum.length){
                    num.disabled = exNum[0].Stop;
                    num.price = exNum[0].ExtraPrice !== undefined ? vm.basePrice + exNum[0].ExtraPrice : vm.basePrice;
                }
                num.price = num.price < vm.basePrice ? vm.basePrice : num.price;
                num.priceChanged = ((num.price !== vm.bPrice) && vm.bPrice !== 0);
            });
            $timeout(function () {
                $scope.$digest();
            })
            vm.clearPriceChange = $timeout(function () {
                angular.forEach(vm.numbers, function (n) {
                    n.priceChanged = false;
                })
            }, 3000)

            if ($rootScope.myParameters !== undefined) {
                vm.highlightObj = localStorage.getItem('highlight') === null ? {} : JSON.parse(localStorage.getItem('highlight'));
                vm.highlightObj[$rootScope.User.Username] === undefined ? vm.highlightObj[$rootScope.User.Username] = {} : vm.highlightObj[$rootScope.User.Username]

                vm.highlight = vm.highlightObj[$rootScope.User.Username][betId] === undefined ? {
                    enabled: false,
                    atPrice: vm.basePrice
                } : vm.highlightObj[$rootScope.User.Username][betId];
            }
            // console.log($rootScope.myParameters)
            // console.log(vm.highlight)
        }

        vm.onlyNumbers = /^\d+$/;
        vm.arrayTemporary = [];
        vm.readyClear = false;
        vm.numbersCopy = [];
        vm.selectedCheckbox = [];

        function selectNumber(n) {
            angular.forEach(vm.numbers, function (number) {
                if (number.number === n.number && !number.disabled){
                    if (!number.selected){
                        number.selected  = true;
                        number.selectCount = 1
                    }else{
                        if (number.selectCount === 1){
                            number.selectCount = 0;
                            number.selected = false;
                            number.point = 0;
                        }else{
                            number.selectCount --;
                            if (number.selectCount < 0){
                                number.selectCount = 0;
                                number.selected = false;
                                number.point = 0;
                            }
                        }
                    }
                }
                if ((number.selected && number.point === 0 && number.selectCount === 0)){
                    number.selectCount = 1;
                }
            });
            if (n.selected){
                vm.betPoint = 0;
                if ($mdMedia('gt-sm')){
                    $timeout(function () {
                        document.getElementById('bet-input').select();
                    }, 10)
                }
            }
        }

        function singlePointClick($event) {
            $event.target.select();
        }

        function clearTemporary(){
            if (vm.readyClear){
                vm.readyClear = false;
                vm.numbersCopy = [];
                angular.forEach(vm.numbers, function (number){
                    number.selectCount = 0;
                })
            }
        }

        function changeBettingPoint() {
            vm.betPoint = vm.betPoint === null ? 0 : vm.betPoint;
            vm.readyClear = vm.betPoint !== 0;
            if (vm.numbersCopy.length === 0){
                vm.numbersCopy = angular.copy(vm.numbers);
                angular.forEach(vm.numbers, function (number) {
                    if (!number.disabled && number.selected){
                        number.point += parseInt(vm.betPoint) * number.selectCount;
                    }
                })
            }else{
                angular.forEach(vm.numbers, function (number) {
                    if (!number.disabled && number.selected){
                        number.point = vm.numbersCopy.filter(function (num) {
                            return num.number === number.number
                        })[0].point + parseInt(vm.betPoint) * number.selectCount
                    }
                })
            }
        }

        function exists(parent, id) {
            let ids = parent.toString() + id.toString();
            return vm.selectedCheckbox.indexOf(ids) > -1;
        }

        function onTabSelected(tab) {
            vm.activeTab = tab;
        }

        function groupNumbers(parent, id){
            let ids = parent.toString() + id.toString();
            let idx = vm.selectedCheckbox.indexOf(ids);
            if (idx > -1) {
                vm.selectedCheckbox.splice(idx, 1);
            }else {
                vm.selectedCheckbox.push(ids);
            }
            vm.checked = idx === -1;
            vm.arrayNumber = vm.quickChoices[parent].collect[id].numbers;

            if (vm.checked){
                angular.forEach(vm.numbers, function (number) {
                    if ($.grep(vm.arrayNumber, function(b){return b === number.number}).length && !number.disabled){
                        if (!number.selected){
                            number.selected  = true;
                            number.selectCount = 1
                        }else{
                            if (parent !== 8){
                                number.selectCount ++
                            }else{
                                number.selectCount = 1;
                            }
                        }
                    }
                    if ((number.selected && number.point === 0 && number.selectCount === 0)){
                        number.selectCount = 1;
                    }
                })
            }else{
                angular.forEach(vm.numbers, function (number) {
                    if ($.grep(vm.arrayNumber, function(b){return b === number.number}).length && !number.disabled){
                        if(number.selectCount === 1){
                            number.selectCount = 0;
                            number.point = 0;
                            number.selected = false
                        }else{
                            number.selectCount --;
                            if (number.selectCount < 0){
                                number.selectCount = 0;
                                number.selected = false;
                                number.point = 0;
                            }
                        }
                    }
                })
            }

            vm.betPoint = 0;
            if ($mdMedia('gt-sm')){
                $timeout(function () {
                    document.getElementById('bet-input').select();
                }, 10)
            }
        }

        function inputKeyNumber(e) {
            if (!vm.keynumber){return}
            if(e.which === 8){
                if (vm.keynumber[vm.keynumber.length - 1] !== ','){
                    vm.keynumber = vm.keynumber.substring(0, vm.keynumber.length - 1)
                }
            }
            let value = vm.keynumber.split(',');
            if (value[value.length-1].length > 1){
                vm.keynumber = vm.keynumber + ','
            }

            if (e.which === 13){
                console.log('done button')
            }
        }

        function submitKeyNumber(click) {
            if (!vm.keynumber){return}
            vm.keynumber = vm.keynumber.replace(/\s+/g, '');
            if (vm.keynumber.length === 0){return}
            let arr = vm.keynumber.split(',');
            let arrInput = [];
            for (let i = 0; i < arr.length; i++){
                let number = arr[i].slice(-2).replace(/\s+/g, '');
                number = number.length < 2 && number.length !== 0 ? '0' + number : number;
                if (!isNaN(number) && angular.isNumber(+number)){
                    if (number.length !== 0)
                        arrInput.push(number)
                }
            }
            angular.forEach(vm.numbers, function (number) {
                let countNumber = arrInput.filter(function (n) {return n === number.number}).length;
                if (arrInput.indexOf(number.number) !== -1 && !number.disabled){
                    if (!number.selected){
                        number.selected = true;
                        number.selectCount = countNumber
                    }else{
                        number.selectCount += countNumber
                    }
                }
            });
            vm.keynumber = '';
            if (!click){
                $timeout(function () {
                    document.getElementById('bet-input').select();
                }, 10)
            }else{
                $timeout(function () {
                    document.getElementsByClassName('input-numbers-array')[0].focus();
                }, 100)
            }
        }

        function totalPoint() {
            if (!$rootScope.allowBetting){
                vm.resetBetting()
            }
            let total = 0, oddNumbers;
            vm.totalMoney = 0;
            vm.numbers.map(function (num){
                total += !num.disabled ? num.point : 0;
                if (vm.odds && num.selected){
                    oddNumbers = $.grep(vm.odds[0].Numbers, function (n) {
                        return n.Number === num.number
                    });
                    if (oddNumbers.length && !oddNumbers[0].stop && oddNumbers[0].ExtraPrice !== 0 ){
                        vm.totalMoney += num.point * (vm.basePrice + oddNumbers[0].ExtraPrice)
                    }else{
                        vm.totalMoney += num.point * vm.basePrice
                    }
                }
            })
            vm.sumPoint = total;
            return total;
        }

        function resetBetting(){
            angular.forEach(vm.numbers, function (number) {
                number.selected = false;
                number.point = 0;
                delete number.selectCount;
                vm.betPoint = 0;
            });
            vm.selectedCheckbox = [];
            vm.keynumber = '';
            vm.arrayTemporary = [];
            vm.warnPriceChanges = [];
        }

        function submitBetting() {
            let ns = [];
            let checkCount = 0;
            let betObj = {};
            betObj.Term = $rootScope.termName;
            betObj.IgnorePrice = vm.ignorePrice;
            betObj.Tickets = [{
                GameType: 0,
                BetType: betId,
                Items: []
            }];

            vm.numbers.map(function (number){
                if (number.selected && !number.disabled){
                    let Number = {};
                    Number.Numbers = [number.number];
                    Number.Point = number.point;
                    Number.Price = number.price;
                    betObj.Tickets[0].Items.push(Number);

                    ns.push(number.number)
                }
                checkCount += ( number.selected && (number.point === 0 || number.point === null || isNaN(number.point) ) ) ? 1 : 0;
            })

            if (checkCount === 0){
                if (vm.warnPriceChanges.length && !vm.ignorePrice){
                    $mdDialog.show({
                        clickOutsideToClose: false,
                        escapeToClose: false,
                        controllerAs: 'ctrl',
                        templateUrl: 'app/main/traditional/betting/prompt.dialog.html',
                        controller: warnPriceChangesCtrl
                    });
                    function warnPriceChangesCtrl($scope, $mdDialog) {
                        $scope.warnPriceChanges = vm.warnPriceChanges;
                        $scope.cancel = function () {
                            $mdDialog.hide();
                            vm.resetBetting();
                        };
                        $scope.continuous = function () {
                            vm.warnPriceChanges.length = 0;
                            vm.submitBetting();
                        }
                    }
                }else{
                    let eventData = {
                        betObj: betObj,
                        sumObj: {
                            numbers: ns,
                            point: vm.sumPoint,
                            money: vm.totalMoney
                        }
                    }
                    $rootScope.$broadcast('EventBetting', eventData);
                }
            }else{
                message.show('Quý khách vui lòng kiểm tra lại số điểm muốn đặt cược.')
            }
        }

        function setupHighlight($event){
            $mdDialog.show({
                clickOutsideToClose: true,
                escapeToClose: true,
                parent: angular.element(document.body),
                targetEvent: $event,
                templateUrl: 'app/main/traditional/northern/general/setup.html',
                controller: setupHighlightCtr,
                locals: {data: vm.highlight}
            });
            function setupHighlightCtr($scope, data){
                $scope.highlight = angular.copy(data);
                $scope.done = function (){
                    if ($scope.highlight.atPrice < parseInt(vm.basePrice)){
                        message.infoMultiple('Giá phải lớn hơn hoặc bằng ' + parseInt(vm.basePrice))
                    }else{
                        vm.highlightObj[$rootScope.User.Username][betId] = $scope.highlight;
                        localStorage.setItem('highlight', JSON.stringify(vm.highlightObj));
                        vm.highlight = $scope.highlight;
                        $mdDialog.hide();
                    }
                }
            }
        }

        $rootScope.$on('ResetBetting', function (){
            vm.resetBetting();
        })

        if (!$rootScope.isAuthenticated){
            $timeout(function () {
                $rootScope.$broadcast('TradOdds::get', {GameTypes: [0], BetTypes: [betId]})
            }, 200)
        }else{
            $rootScope.$broadcast('TradOdds::get', {GameTypes: [0], BetTypes: [betId]})
        }

        $scope.$on('lo-live:event:game-closed', function ($event, data) {
            if (data.Term === $rootScope.termName && data.GameType === 0){
                if ( $state.current.name === 'app.traditional.northern.lotto' ){
                    $timeout(function () {
                        $state.go('app.traditional.northern.live')
                    }, 10000)
                }
            }
        });

    }
})();
(function (){
    'use strict';
    angular
        .module('app.traditional')
        .controller('exceptCtrl', exceptCtrl);

    function exceptCtrl($rootScope, $scope, $mdSidenav, $mdMedia, $timeout, $interval, $document, msUtils, network, collections, betId, param){
        let vm = this;

        vm.init = init;
        vm.buildPriceTable = buildPriceTable;
        vm.selectNumber = selectNumber;
        vm.exists = exists;
        vm.groupNumbers = groupNumbers;
        vm.inputKeyNumber = inputKeyNumber;
        vm.submitKeyNumber = submitKeyNumber;
        vm.totalPoint = totalPoint;
        vm.resetBetting = resetBetting;
        vm.submitBetting = submitBetting;
        vm.calcMoney = calcMoney;

        vm.betId = betId;
        vm.param = param;
        vm.ignorePrice = true;
        vm.basePrice = 0;
        vm.numbers = [];
        vm.quickChoices = collections.list;
        $scope.$mdMedia = $mdMedia;

        $scope.$on('$destroy', function() {
            $rootScope.location = undefined;
        });

        $rootScope.location = {game: 0, bet: betId};

        $document.bind('keydown keypress', function (e) {
            if(e.which === 27) {
                vm.resetBetting();
                e.preventDefault()
            }
        });

        vm.basePrice = 0;
        if ($rootScope.myParameters !== undefined){
            vm.basePrice = $rootScope.myParameters.filter(function (pr) {
                return pr.GameType === 0 && pr.BetType === vm.betId
            })[0].Price;
        }

        for (let i = 0; i<100; i++){
            i = i < 10 ? i = '0' + i : i;
            vm.numbers.push({number: i.toString(), disabled: false, selected: false, price: vm.basePrice, point: 0})
        }

        $timeout(function () {
            vm.init();
        }, 300);

        function init(){
            if ($rootScope.isAuthenticated){
                if ($rootScope.myParameters !== undefined){
                    let myParamValues = $rootScope.myParameters.filter(function(item) { return item.GameType === 0 && item.BetType === betId })[0];
                    vm.purchaseLimit = myParamValues.MaxPointPerNumber;
                    vm.payouts = myParamValues.Payouts;
                }else{
                    $timeout(function () {
                        vm.init()
                    }, 1000)
                }
            }
        }

        $scope.$on('TradOdds::done', function (){
            vm.buildPriceTable();
        })

        function buildPriceTable(){
            vm.odds = $rootScope.TradOdds.filter(function (odd) {
                return odd.GameType === 0 && odd.BetType === betId && odd.Term === ($rootScope.isAuthenticated ? $rootScope.termName : 'Public')
            })
            if (!vm.odds.length){return}
            vm.basePrice = vm.odds[0].Price;
            angular.forEach(vm.numbers, function (num) {
                vm.bPrice = angular.copy(num.price);

                let exNum = $.grep(vm.odds[0].Numbers, function (f) {
                    return f.Number === num.number
                });
                num.price = vm.basePrice;
                if (exNum.length){
                    num.disabled = exNum[0].Stop;
                    num.price = exNum[0].ExtraPrice !== undefined ? vm.basePrice + exNum[0].ExtraPrice : vm.basePrice
                }
                num.priceChanged = num.price !== vm.bPrice && vm.bPrice !== 0;
                $timeout(function () {
                    angular.forEach(vm.numbers, function (n) {
                        n.priceChanged = false;
                    })
                }, 3000)
            });
            vm.clearPriceChange = $timeout(function () {
                angular.forEach(vm.numbers, function (n) {
                    n.priceChanged = false;
                })
            }, 3000)
        }

        function selectNumber(n) {
            angular.forEach(vm.numbers, function (number) {
                if (number.number === n.number && !number.disabled){
                    number.selected = !number.selected;
                }
            });
            if (n.selected){
                vm.betPoint = 0;
                if ($mdMedia('gt-sm')){
                    $timeout(function () {
                        document.getElementById('bet-input').select();
                    }, 10)
                }
            }
        }

        vm.selectedCheckbox = [];
        function exists(parent, id) {
            let ids = parent.toString() + id.toString();
            return vm.selectedCheckbox.indexOf(ids) > -1;
        }

        function groupNumbers(parent, id){
            let ids = parent.toString() + id.toString();
            let idx = vm.selectedCheckbox.indexOf(ids);
            if (idx > -1) {
                vm.selectedCheckbox.splice(idx, 1);
            }else {
                vm.selectedCheckbox.push(ids);
            }
            vm.checked = idx === -1;
            vm.arrayNumber = vm.quickChoices[parent].collect[id].numbers;

            angular.forEach(vm.numbers, function (number) {
                if ($.grep(vm.arrayNumber, function(b){return b === number.number}).length && !number.disabled){
                    number.selected = vm.checked;
                }
            });

            vm.betPoint = 0;
            if ($mdMedia('gt-sm')){
                $timeout(function () {
                    document.getElementById('bet-input').select();
                }, 10)
            }
        }

        function inputKeyNumber(e) {
            if (!vm.keynumber){return}
            if(e.which === 8){
                if (vm.keynumber[vm.keynumber.length - 1] !== ','){
                    vm.keynumber = vm.keynumber.substring(0, vm.keynumber.length - 1)
                }
            }
            let value = vm.keynumber.split(',');
            if (value[value.length-1].length > 1){
                vm.keynumber = vm.keynumber + ','
            }
        }

        function submitKeyNumber(click) {
            if (!vm.keynumber){return}
            vm.keynumber = vm.keynumber.replace(/\s+/g, '');
            if (vm.keynumber.length === 0){return}
            let arr = vm.keynumber.split(',');
            let arrInput = [];
            for (let i = 0; i < arr.length; i++){
                let number = arr[i].slice(-2).replace(/\s+/g, '');
                number = number.length < 2 && number.length !== 0 ? '0' + number : number;
                if (!isNaN(number) && angular.isNumber(+number)){
                    if (number.length !== 0)
                        arrInput.push(number)
                }
            }
            angular.forEach(vm.numbers, function (val) {
                if (arrInput.indexOf(val.number) !== -1 && !val.disabled){
                    val.selected = true
                }
            });
            vm.keynumber = '';
            if (!click){
                $timeout(function () {
                    document.getElementById('bet-input').select();
                }, 10)
            }else{
                $timeout(function () {
                    document.getElementsByClassName('input-numbers-array')[0].focus();
                }, 10)
            }
        }

        function totalPoint() {
            if (!$rootScope.allowBetting){
                vm.resetBetting()
            }
            let total = 0, oddNumbers;
            vm.totalMoney = 0;
            vm.numbers.map(function (num){
                total += !num.disabled && num.selected ? vm.betPoint : 0;
                if (vm.odds && num.selected){
                    oddNumbers = $.grep(vm.odds[0].Numbers, function (n) {
                        return n.Number === num.number
                    });
                    if (oddNumbers.length && !oddNumbers[0].stop && oddNumbers[0].ExtraPrice !== 0 ){
                        vm.totalMoney += vm.calcMoney(vm.basePrice + oddNumbers[0].ExtraPrice)
                    }else{
                        vm.totalMoney += vm.calcMoney(vm.basePrice)
                    }
                }
            })
            vm.sumPoint = total;
            return total;
        }

        function calcMoney(price) {
            //De truot:  Diem * (giá từng con - payout) * (bettimes/minbet)
            //Lo truot:  Diem * (giá từng con - payout) * bettimes
            if (vm.betId === 5){
                return vm.betPoint * (price - vm.payouts)/10
            }else{
                return vm.betPoint * (price - vm.payouts) * vm.param.betTimes
            }

        }

        function resetBetting(){
            vm.numbers.map(function (n) {return n.selected = false})
            vm.betPoint = 0;
            vm.selectedCheckbox = [];
            vm.keynumber = '';
        }

        function submitBetting() {
            let ns = [];
            let betObj = {};
            betObj.Term = $rootScope.termName;
            betObj.IgnorePrice = vm.ignorePrice;
            betObj.Tickets = [{
                GameType: 0,
                BetType: betId,
                Items: []
            }];
            vm.numbers.map(function (number){
                if (number.selected && !number.disabled){
                    let Number = {};
                    Number.Numbers = [number.number];
                    Number.Price = number.price;
                    Number.Point = vm.betPoint;
                    betObj.Tickets[0].Items.push(Number);
                    ns.push(number.number)
                }
            })

            let eventData = {
                betObj: betObj,
                sumObj: {
                    numbers: ns,
                    point: vm.sumPoint,
                    money: vm.totalMoney
                }
            }
            $rootScope.$broadcast('EventBetting', eventData);
        }

        $rootScope.$on('ResetBetting', function (){
            vm.resetBetting();
        })

        if (!$rootScope.isAuthenticated){
            $timeout(function () {
                $rootScope.$broadcast('TradOdds::get', {GameTypes: [0], BetTypes: [betId]})
            }, 200)
        }else{
            $rootScope.$broadcast('TradOdds::get', {GameTypes: [0], BetTypes: [betId]})
        }
    }
})();
(function (){
    'use strict';

    angular
        .module('app.legendary')
        .controller('northernQuickCtrl', northernQuickCtrl);

    /** @ngInject */
    function northernQuickCtrl($scope, $rootScope, $mdDialog, msUtils, GameType){
        let vm = this;
        vm.GameType = GameType;
        vm.parseNumbers = parseNumbers;
        vm.resetBetting = resetBetting;
        vm.buildTable = buildTable;
        vm.repeatLimitTo = repeatLimitTo;
        vm.checkAllowInput = checkAllowInput;
        vm.totalPoint = totalPoint;
        vm.submitBetting = submitBetting;
        vm.commitBetting = commitBetting;
        vm.sendBettingRequest = sendBettingRequest;

        vm.betStepper = $rootScope.betStepper;
        vm.stepper = {
            select: function (item) {
                vm.betPoint = item.value;
                angular.forEach(vm.betStepper, function (step) {
                    step.active = item.value === step.value;
                })
            }
        }
        vm.viewFull = {2: false, 3: false, 4: false};
        vm.numbers = {2: [], 3: [], 4: []};
        vm.numbersArr = [
            {id: 0, text: '0', type: 'single'},
            {id: 1, text: '1', type: 'single'},
            {id: 2, text: '2', type: 'single'},
            {id: 3, text: '3', type: 'single'},
            {id: 4, text: '4', type: 'single'},
            {id: 5, text: '5', type: 'single'},
            {id: 6, text: '6', type: 'single'},
            {id: 7, text: '7', type: 'single'},
            {id: 8, text: '8', type: 'single'},
            {id: 9, text: '9', type: 'single'}
        ];

        if (vm.GameType === 0){
            vm.BetTypes = [
                {
                    group: '2 Càng',
                    numbers: 2,
                    BetTypes: [
                        {
                            Label: 'Đề',
                            BetType: 0
                        },
                        {
                            Label: 'Lô',
                            BetType: 1
                        },
                        {
                            Label: 'Đề đầu',
                            BetType: 21
                        },
                        {
                            Label: 'Lô đầu',
                            BetType: 29
                        },
                        {
                            Label: 'Đề trượt',
                            BetType: 5
                        },
                        {
                            Label: 'Lô trượt',
                            BetType: 6
                        }
                    ]
                },
                {
                    group: '3 Càng',
                    numbers: 3,
                    BetTypes: [
                        {
                            Label: 'Đề 3 Càng',
                            BetType: 11
                        },
                        {
                            Label: 'Lô 3 Càng',
                            BetType: 12
                        }
                    ]
                },
                {
                    group: '4 Càng',
                    numbers: 4,
                    BetTypes: [
                        {
                            Label: 'Đề 4 Càng',
                            BetType: 13
                        },
                        {
                            Label: 'Lô 4 Càng',
                            BetType: 14
                        }
                    ]
                }
            ];
        }else{
            vm.BetTypes = [
                {
                    group: '2D',
                    numbers: 2,
                    BetTypes: [
                        {
                            Label: '2D Đầu',
                            BetType: 7
                        },
                        {
                            Label: '2D Đuôi',
                            BetType: 8
                        },
                        {
                            Label: '2D 18Lô',
                            BetType: 18
                        }
                    ]
                },
                {
                    group: '3D',
                    numbers: 3,
                    BetTypes: [
                        {
                            Label: '3D Đầu',
                            BetType: 10
                        },
                        {
                            Label: '3D Đuôi',
                            BetType: 11
                        },
                        {
                            Label: '3D 17Lô',
                            BetType: 17
                        }
                    ]
                },
                {
                    group: '4D',
                    numbers: 4,
                    BetTypes: [
                        {
                            Label: '4D Đuôi',
                            BetType: 13
                        },
                        {
                            Label: '4D 16Lô',
                            BetType: 19
                        }
                    ]
                }
            ];
        }

        vm.selected = [];
        vm.checkAllow = function(item, BetType){
            if (BetType !== undefined && $rootScope.LegendCurrentTerm !== undefined){
                let currentBetTypes = $rootScope.LegendCurrentTerm.filter(function(g){
                    return g.GameType === 0
                })[0].Games
                let currentAllowed = currentBetTypes.filter(function(b){
                    return b.BetType === BetType
                })[0].Status === 0
                if (!currentAllowed){
                    if (BetType === 5){
                        if (vm.numbers[2].length < 10 || vm.numbers[2].length > 100){
                            let index = vm.selected.indexOf(5)
                            if (index > -1){
                                vm.selected.splice(index, 1);
                            }
                            return true
                        }
                    }else if (BetType === 6){
                        if (vm.numbers[2].length < 4 || vm.numbers[2].length > 100){
                            let index = vm.selected.indexOf(6)
                            if (index > -1){
                                vm.selected.splice(index, 1);
                            }
                            return true
                        }
                    }else{
                        return vm.numbers[item].length > 100 || vm.numbers[item].length === 0
                    }
                }else{
                    return true
                }
            }else{
                return vm.numbers[item].length > 100 || vm.numbers[item].length === 0
            }
        };

        vm.Thousands = [];
        vm.Hundreds = [];
        vm.Dozens = [];
        vm.Units = [];

        vm.exists = function (item, list) {
            return list.indexOf(item) > -1;
        };
        vm.toggle = function (item, list) {
            let idx = list.indexOf(item);
            if (idx > -1) {
                list.splice(idx, 1);
            } else {
                list.push(item);
            }
            vm.parseNumbers();
        };
        vm.toggleEven = function (ar, list) {
            if (msUtils.containsAll(ar, list)){
                ar.map(function (el) {
                    let idx = list.indexOf(el);
                    if (msUtils.exists(el, ar)){
                        list.splice(idx, 1);
                    }
                })
            }else{
                ar.map(function (id){
                    if (!msUtils.exists(id, list)){
                        list.push(id);
                    }
                })
            }
            vm.parseNumbers();
        };
        vm.clear = function (list) {
            list.length = 0;
            vm.parseNumbers();
        }

        function parseNumbers() {
            vm.numberParsed = {2: [], 3: [], 4: []};
            vm.Thousands.map(function (t) {
                vm.Hundreds.map(function (h) {
                    vm.Dozens.map(function (d) {
                        vm.Units.map(function (u) {
                            vm.numberParsed[4].push( t.toString() + h.toString() + d.toString() + u.toString() );
                        })
                    })
                })
            })
            vm.numberParsed[4].sort();
            vm.Hundreds.map(function (h) {
                vm.Dozens.map(function (d) {
                    vm.Units.map(function (u) {
                        vm.numberParsed[3].push( h.toString() + d.toString() + u.toString() );
                    })
                })
            })
            vm.numberParsed[3].sort();
            vm.Dozens.map(function (d) {
                vm.Units.map(function (u) {
                    vm.numberParsed[2].push( d.toString() + u.toString() );
                })
            })
            vm.numberParsed[2].sort();

            vm.buildTable();
        }

        function buildTable() {
            vm.numbers = {2: [], 3: [], 4: []};
            vm.numberParsed[2].map(function (n) {
                vm.numbers[2].push({number: n})
            })
            vm.numberParsed[3].map(function (n) {
                vm.numbers[3].push({number: n})
            })
            vm.numberParsed[4].map(function (n) {
                vm.numbers[4].push({number: n})
            });
            vm.viewFull = {2: false, 3: false, 4: false};
            vm.betPoint = 0;

        }

        function repeatLimitTo(index) {
            if (vm.viewFull[index]){
                return 100
            }else{
                return 24
            }
        }

        function totalPoint() {
            if ( $rootScope.isAuthenticated ){
                vm.Parameters = $rootScope.LegendParameters
            }else{
                vm.Parameters = [
                    {
                        "GameType": 0,
                        "BetType": 0,
                        "Payouts": 70000,
                        "Price": 750
                    },
                    {
                        "GameType": 0,
                        "BetType": 1,
                        "Payouts": 80000,
                        "Price": 22690
                    },
                    {
                        "GameType": 0,
                        "BetType": 29,
                        "Payouts": 80000,
                        "Price": 22500
                    },
                    {
                        "GameType": 0,
                        "BetType": 2,
                        "Payouts": 10000,
                        "Price": 580
                    },
                    {
                        "GameType": 0,
                        "BetType": 3,
                        "Payouts": 40000,
                        "Price": 540
                    },
                    {
                        "GameType": 0,
                        "BetType": 4,
                        "Payouts": 100000,
                        "Price": 470
                    },
                    {
                        "GameType": 0,
                        "BetType": 5,
                        "Payouts": 650,
                        "Price": 71000
                    },
                    {
                        "GameType": 0,
                        "BetType": 6,
                        "Payouts": 21100,
                        "Price": 81000
                    },
                    {
                        "GameType": 0,
                        "BetType": 11,
                        "Payouts": 650000,
                        "Price": 690
                    },
                    {
                        "GameType": 0,
                        "BetType": 12,
                        "Payouts": 650000,
                        "Price": 15430
                    },
                    {
                        "GameType": 0,
                        "BetType": 13,
                        "Payouts": 6000000,
                        "Price": 690
                    },
                    {
                        "GameType": 0,
                        "BetType": 14,
                        "Payouts": 6000000,
                        "Price": 690
                    },
                    {
                        "GameType": 0,
                        "BetType": 20,
                        "Payouts": 80000,
                        "Price": 21740
                    },
                    {
                        "GameType": 0,
                        "BetType": 21,
                        "Payouts": 70000,
                        "Price": 730
                    },
                    {
                        "GameType": 0,
                        "BetType": 26,
                        "Payouts": 800000,
                        "Price": 19540
                    },
                    {
                        "GameType": 1,
                        "BetType": 2,
                        "Payouts": 800000,
                        "Price": 775
                    },
                    {
                        "GameType": 1,
                        "BetType": 3,
                        "Payouts": 5000000,
                        "Price": 775
                    },
                    {
                        "GameType": 1,
                        "BetType": 4,
                        "Payouts": 20000000,
                        "Price": 775
                    },
                    {
                        "GameType": 1,
                        "BetType": 7,
                        "Payouts": 75000,
                        "Price": 775
                    },
                    {
                        "GameType": 1,
                        "BetType": 8,
                        "Payouts": 75000,
                        "Price": 775
                    },
                    {
                        "GameType": 1,
                        "BetType": 10,
                        "Payouts": 650000,
                        "Price": 690
                    },
                    {
                        "GameType": 1,
                        "BetType": 11,
                        "Payouts": 650000,
                        "Price": 690
                    },
                    {
                        "GameType": 1,
                        "BetType": 13,
                        "Payouts": 6000000,
                        "Price": 690
                    },
                    {
                        "GameType": 1,
                        "BetType": 15,
                        "Payouts": 75000,
                        "Price": 773
                    },
                    {
                        "GameType": 1,
                        "BetType": 30,
                        "Payouts": 75000,
                        "Price": 13860
                    },
                    {
                        "GameType": 1,
                        "BetType": 17,
                        "Payouts": 650000,
                        "Price": 690
                    },
                    {
                        "GameType": 1,
                        "BetType": 19,
                        "Payouts": 6000000,
                        "Price": 690
                    },
                    {
                        "GameType": 1,
                        "BetType": 27,
                        "Payouts": 75000,
                        "Price": 774
                    },
                    {
                        "GameType": 1,
                        "BetType": 28,
                        "Payouts": 650000,
                        "Price": 690
                    }
                ]
            }
            let total = 0;
            vm.totalMoney = 0;
            vm.toPoint = 0;
            for (let key in vm.numbers){
                if(vm.numbers.hasOwnProperty(key)){
                    let value = vm.numbers[key];
                    key = parseInt(key);
                    if (key === 2){
                        total += vm.betPoint * value.length * vm.selected.filter(function (s) {
                            return msUtils.exists(s, [0,1,5,6,21,29])
                        }).length;

                        [0,1,21,29].map(function (BetType) {
                            if (msUtils.exists(BetType, vm.selected)){
                                let Price = vm.Parameters.filter(function (pam) {
                                    return pam.GameType === 0 && pam.BetType === BetType
                                })[0].Price;
                                vm.totalMoney += vm.betPoint * value.length * Price
                            }
                        })
                        if (msUtils.exists(5, vm.selected)){
                            let Parameters = vm.Parameters.filter(function (pam) {
                                return pam.GameType === 0 && pam.BetType === 5
                            })[0];
                            vm.totalMoney += vm.betPoint * value.length * (Parameters.Price - Parameters.Payouts)/10
                        }
                        if (msUtils.exists(6, vm.selected)){
                            let Parameters = vm.Parameters.filter(function (pam) {
                                return pam.GameType === 0 && pam.BetType === 6
                            })[0];
                            vm.totalMoney += vm.betPoint * value.length * (Parameters.Price - Parameters.Payouts) * 4
                        }
                    }else if (key === 3){
                        total += vm.betPoint * value.length * vm.selected.filter(function (s) {
                            return msUtils.exists(s, [11,12])
                        }).length;
                        [11,12].map(function (BetType) {
                            if (msUtils.exists(BetType, vm.selected)){
                                let Price = vm.Parameters.filter(function (pam) {
                                    return pam.GameType === 0 && pam.BetType === BetType
                                })[0].Price;
                                vm.totalMoney += vm.betPoint * value.length * Price
                            }
                        })
                    }else if (key === 4){
                        total += vm.betPoint * value.length * vm.selected.filter(function (s) {
                            return msUtils.exists(s, [13,14])
                        }).length;

                        [13,14].map(function (BetType) {
                            if (msUtils.exists(BetType, vm.selected)){
                                let Price = vm.Parameters.filter(function (pam) {
                                    return pam.GameType === 0 && pam.BetType === BetType
                                })[0].Price;
                                vm.totalMoney += vm.betPoint * value.length * Price
                            }
                        })
                    }
                }
            }
            vm.toPoint = total;
            return total;
        }

        function resetBetting() {
            vm.viewFull = {2: false, 3: false, 4: false};
            vm.numbers = {2: [], 3: [], 4: []};
            vm.Thousands = [];
            vm.Hundreds = [];
            vm.Dozens = [];
            vm.Units = [];
            vm.betStepper.map(function (a){
                return a.active = false;
            })
        }
        
        function checkAllowInput() {
            return (vm.numbers[2].length === 0 || vm.numbers[2].length > 100)
        }

        function submitBetting() {
            let betObj = {};
            betObj.Term = $rootScope.LegendTermName[0];
            betObj.IgnorePrice = true;
            betObj.Tickets = [];

            vm.selected.map(function (betType) {
                let Ticket = {};
                Ticket.GameType = GameType;
                Ticket.BetType = betType;
                Ticket.Items = [];

                let Price = vm.Parameters.filter(function (pam) {
                    return pam.GameType === 0 && pam.BetType === betType
                })[0].Price;

                if (msUtils.exists(betType, [0,1,5,6,21,29])){
                    vm.numbers[2].map(function (number) {
                        let Number = {};
                        Number.Numbers = [number.number];
                        Number.Price = Price;
                        Number.Point = vm.betPoint;
                        Ticket.Items.push(Number)
                    })
                }else if (msUtils.exists(betType, [11,12])){
                    vm.numbers[3].map(function (number) {
                        let Number = {};
                        Number.Numbers = [number.number];
                        Number.Price = Price;
                        Number.Point = vm.betPoint;
                        Ticket.Items.push(Number)
                    })
                }else if(msUtils.exists(betType, [13,14])){
                    vm.numbers[4].map(function (number) {
                        let Number = {};
                        Number.Numbers = [number.number];
                        Number.Price = Price;
                        Number.Point = vm.betPoint;
                        Ticket.Items.push(Number)
                    })
                }
                if (Ticket.Items.length !== 0 && Ticket.Items.length <= 100 ){
                    betObj.Tickets.push(Ticket);
                }
            })

            let always = JSON.parse(sessionStorage.getItem('alwaysBetting')) !== null;
            if (!$rootScope.isAuthenticated){always = true}
            if (always){
                vm.sendBettingRequest(betObj)
            }else{
                vm.commitBetting(betObj);
            }
        }

        function commitBetting(betObj) {
            let numbers = [];
            if ( msUtils.exists(0, vm.selected) || msUtils.exists(1, vm.selected) || msUtils.exists(29, vm.selected) || msUtils.exists(5, vm.selected) || msUtils.exists(6, vm.selected) || msUtils.exists(21, vm.selected) ){
                angular.forEach(vm.numbers[2], function (n) {
                    numbers.push(n.number)
                })
            }
            if ( msUtils.exists(11, vm.selected) || msUtils.exists(12, vm.selected) ){
                angular.forEach(vm.numbers[3], function (n) {
                    numbers.push(n.number)
                })
            }
            if ( msUtils.exists(13, vm.selected) || msUtils.exists(14, vm.selected) ){
                angular.forEach(vm.numbers[4], function (n) {
                    numbers.push(n.number)
                })
            }
            numbers = numbers.toString().replace(/\,+/g, ', ')
            $mdDialog.show({
                controller: commitBettingCtrl,
                templateUrl: 'app/main/legendary/betting/prompt.dialog.html',
                parent: angular.element(document.body),
                multiple: true,
                clickOutsideToClose: true,
                locals: {point: vm.toPoint, money: vm.totalMoney, numbers: numbers}
            });
            function commitBettingCtrl($rootScope, $scope, $mdDialog, $filter, point, money, numbers){
                $scope.cancel = function() {
                    $mdDialog.cancel();
                };
                $scope.alwaysBetting = false;
                $scope.Point = point;
                $scope.costMoney = money;
                $scope.numbers = numbers;
                $scope.done = function () {
                    if($scope.alwaysBetting){
                        sessionStorage.setItem('alwaysBetting', true);
                    }
                    vm.sendBettingRequest(betObj)
                }
            }
        }

        function sendBettingRequest(betObj) {
            $rootScope.aBettingObject = betObj;
            $rootScope.$broadcast('LegendBetting', {message: 'dialog'});
            vm.resetBetting();
        }
    }
})();
(function () {
    'use strict';

    angular
        .module('app.legendary')
        .controller('LegendNorthLiveCtrl', LegendNorthLiveCtrl);

    /** @ngInject */
    function LegendNorthLiveCtrl($rootScope, $scope, $timeout, $interval, $mdMedia, $document, $mdDialog, $stateParams, network, msUtils, message, GameType, collections) {
        let vm = this;
        $scope.$mdMedia = $mdMedia;
        vm.GameType = GameType;
        vm.purchaseLimit = purchaseLimit;
        vm.oddsPrice = oddsPrice;
        vm.buildPriceTable = buildPriceTable;
        vm.build3DTable = build3DTable;

        vm.resetBetting = resetBetting;
        vm.totalPoint = totalPoint;
        vm.submitBetting = submitBetting;
        vm.ignorePrice = true;
        vm.basePrice = 0;
        vm.numbers = [];
        vm.quickChoices = collections.list;
        vm.label3D = GameType === 0 ? 'Live 3 Càng' : 'Live 3D';

        vm.TabSelected = TabSelected;
        vm.checkPointDisabled = checkPointDisabled;
        vm.commitBetting = commitBetting;
        vm.sendBettingRequest = sendBettingRequest;

        vm.sortNumberByStat = sortNumberByStat;
        vm.sortNumbers = sortNumbers;

        vm.getFullResult = getFullResult;
        vm.Seamless = Seamless;

        vm.allowBetting = true;
        vm.selectedCheckbox = [];
        vm.InterfaceCheckbox = [];
        vm.selected3dNumber = [];
        vm.betStepper = $rootScope.betStepper;
        vm.stepper = {
            select: function (item) {
                vm.betPoint = item.value;
                angular.forEach(vm.betStepper, function (step) {
                    step.active = item.value === step.value;
                })
            }
        }
        vm.number = {
            select: function (n) {
                angular.forEach(vm.numbers, function (number) {
                    if (number.number === n.number && !number.disabled){
                        number.selected = !number.selected;
                    }
                });
                if (n.selected){
                    vm.betPoint = 0;
                    if ($mdMedia('gt-sm')){
                        $timeout(function () {
                            document.getElementById('bet-input').select();
                        }, 10)
                    }
                }
            },
            selected: function () {
                let ns = [];
                angular.forEach(vm.numbers, function (n) {
                    if (n.selected)
                        ns.push(n.number)
                })
                vm.selected = ns.toString().replace(/\,+/g, ', ')
                return vm.selected
            },
            typing: function (e) {
                if (!vm.keyNumber){return}
                if(e.which === 8){
                    if (vm.keyNumber[vm.keyNumber.length - 1] !== ','){
                        vm.keyNumber = vm.keyNumber.substring(0, vm.keyNumber.length - 1)
                    }
                }
                var value = vm.keyNumber.split(',');
                if (value[value.length-1].length > 1){
                    vm.keyNumber = vm.keyNumber + ','
                }
            },
            submit: function (click) {
                if (!vm.keyNumber){return}
                vm.keyNumber = vm.keyNumber.replace(/\s+/g, '');
                if (vm.keyNumber.length === 0){return}
                var arr = vm.keyNumber.split(',');
                var arrInput = [];
                for (var i = 0; i < arr.length; i++){
                    var number = arr[i].slice(-2).replace(/\s+/g, '');
                    number = number.length < 2 && number.length !== 0 ? '0' + number : number;
                    if (!isNaN(number) && angular.isNumber(+number)){
                        if (number.length !== 0)
                            arrInput.push(number)
                    }
                }
                angular.forEach(vm.numbers, function (number) {
                    if (arrInput.indexOf(number.number) !== -1 && !number.disabled){
                        if (!number.selected){
                            number.selected = true;
                        }
                    }
                });
                vm.keyNumber = '';
                vm.betPoint = 0;
                if (!click){
                    $timeout(function () {
                        document.getElementById('bet-input').select();
                    }, 10)
                }else{
                    $timeout(function () {
                        document.getElementsByClassName('input-numbers-array')[0].focus();
                    }, 100)
                }
            },
            typing3d: function (e) {
                if (!vm.keyNumber3D){return}
                if(e.which === 8){
                    if (vm.keyNumber3D[vm.keyNumber3D.length - 1] !== ','){
                        vm.keyNumber3D = vm.keyNumber3D.substring(0, vm.keyNumber3D.length - 1)
                    }
                }
                var value = vm.keyNumber3D.split(',');
                if (value[value.length-1].length > 2){
                    vm.keyNumber3D = vm.keyNumber3D + ','
                }
            },
            submit3D: function (click) {
                if (!vm.keyNumber3D || vm.disabled3D){return}
                vm.keyNumber3D = vm.keyNumber3D.replace(/\s+/g, '');
                if (vm.keyNumber3D.length === 0){return}
                let arr = vm.keyNumber3D.split(',');

                for (let i = 0; i < arr.length; i++){
                    let number = arr[i].slice(-3).replace(/\s+/g, '');
                    if (number.length){
                        number = msUtils.pad(number, 3)
                        if (!isNaN(number) && angular.isNumber(+number)){
                            if (number.length !== 0)
                                vm.selected3dNumber.push(number)
                        }
                    }
                }
                vm.selected3dNumber = msUtils.removeDup(vm.selected3dNumber)
                vm.build3DTable();

                vm.keyNumber3D = '';
                vm.betPoint = 0;

                if (!click){
                    $timeout(function () {
                        document.getElementById('bet-input').select();
                    }, 10)
                }else{
                    $timeout(function () {
                        document.getElementsByClassName('input-numbers-array')[1].focus();
                    }, 100)
                }
            },
            checkbox: {
                exists: function (parent, id) {
                    let ids = parent.toString() + id.toString();
                    return vm.selectedCheckbox.indexOf(ids) > -1;
                },
                group: function (parent, id) {
                    let ids = parent.toString() + id.toString();
                    let idx = vm.selectedCheckbox.indexOf(ids);
                    if (idx > -1) {
                        vm.selectedCheckbox.splice(idx, 1);
                    }else {
                        vm.selectedCheckbox.push(ids);
                    }
                    vm.checked = idx === -1;

                    vm.arrayNumber = vm.quickChoices[parent].collect[id].numbers;
                    angular.forEach(vm.numbers, function (number) {
                        if ($.grep(vm.arrayNumber, function(b){return b === number.number}).length){
                            number.selected = vm.checked;
                        }
                    });

                    vm.betPoint = 0;
                    if ($mdMedia('gt-sm')){
                        $timeout(function () {
                            document.getElementById('bet-input').select();
                        }, 10)
                    }
                }
            },
            interface: {
                exists: function (item) {
                    return vm.InterfaceCheckbox.indexOf(item) > -1;
                },
                group: function (id) {
                    let idx = vm.InterfaceCheckbox.indexOf(id);
                    if (idx > -1) {
                        vm.InterfaceCheckbox.splice(idx, 1);
                    }else {
                        vm.InterfaceCheckbox.push(id);
                    }
                    vm.checked = idx === -1;
                    vm.betPoint = 0;
                    angular.forEach(vm.numbers, function (number, index) {
                        if (!number.disabled){
                            if (id < 10){
                                if (Math.floor(index/10) === id){
                                    number.selected = vm.checked;
                                }
                            }else{
                                if (index%10 === id%10){
                                    number.selected = vm.checked;
                                }
                            }
                        }
                    })
                }
            }
        }

        vm.defaultTab = $stateParams.tab === '3d' ? 1 : 0

        function checkPointDisabled(){
            if (vm.onTabSelected === 0){
                return vm.numbers.filter(function (n) {return n.selected}).length === 0
            }else if (vm.onTabSelected === 1){
               return vm.selected3dNumber.length === 0
            }
        }

        $document.bind('keydown keypress', function (e) {
            if (e.which === 27) {
                vm.resetBetting();
                e.preventDefault()
            }
        });

        for (let i = 0; i < 100; i++) {
            i = i < 10 ? i = '0' + i : i;
            vm.numbers.push({number: i.toString(), disabled: false, selected: false, price: 0, point: 0})
        }

        $timeout(function () {
            vm.oddsPrice();
            vm.getFullResult();
        }, 300);

        function purchaseLimit() {
            let BetType
            if (GameType === 0){
                BetType = vm.onTabSelected === 0 ? 20 : 26;
            }else{
                BetType = vm.onTabSelected === 0 ? 27 : 28;
            }
            if ($rootScope.LegendParameters !== undefined) {
                vm.currentPayouts = $rootScope.LegendParameters.filter(function (item) {
                    return item.GameType === GameType && item.BetType === BetType
                })[0].Payouts;
            }
        }

        function oddsPrice() {
            let BetTypes = GameType === 0 ? [20,26] : [27,28];
            if ($rootScope.isAuthenticated){
                if ($rootScope.LegendCurrentTerm !== undefined) {
                    network.Legend.getLiveOdds({Term: $rootScope.LegendTermName[GameType], GameType: GameType, BetTypes: BetTypes}).then(function (resp) {
                        // console.log(resp)
                        vm.odds = resp;
                        vm.TabSelected();
                    })
                } else {
                    $timeout(function () {
                        vm.oddsPrice();
                    }, 1000)
                }
            }else {
                network.Public.Legend.getLiveOdds({GameType: 0, BetTypes: BetTypes}).then(function (resp) {
                    vm.odds = resp;
                    vm.TabSelected();
                })
            }
        }

        function TabSelected(i, ws) {
            i = i === undefined ? vm.onTabSelected : i;
            vm.onTabSelected = i;
            vm.resetBetting(ws);
            if (vm.odds === undefined) {return}
            let bet;
            if (i === 0 || i === 1){
                if (GameType === 0){
                    bet = i === 0 ? 20 : 26;
                }else {
                    bet = i === 0 ? 27 : 28;
                }
                vm.currentOdd = vm.odds.filter(function (o){return o.BetType === bet})[0];
                vm.allowBetting = vm.currentOdd.Active;
                vm.basePrice = vm.currentOdd.Price;
                vm.PrizeNr = vm.currentOdd.PrizeNr;
                vm.currentPayouts = vm.currentOdd.Payouts;

                if (GameType === 1){
                    vm.basePrice = vm.basePrice * vm.PrizeNr
                }
                vm.PrizeNr = bet === 26 ? (vm.PrizeNr-4) : vm.PrizeNr;

                if (bet === 28 && vm.PrizeNr === 18){
                    vm.PrizeNr = 17
                }
                vm.PrizeNr = vm.PrizeNr < 1 ? 0 : vm.PrizeNr;
                vm.disabled3D = vm.PrizeNr <= 1;
            }
            if (i === 0){
                vm.buildPriceTable();
            }
            if (GameType === 1){
                $timeout(function () {
                    vm.purchaseLimit();
                }, 1000)
            }
        }

        function buildPriceTable() {
            if (vm.clearPriceChange){
                clearTimeout(vm.clearPriceChange)
            }
            vm.numbers.map(function (num){
                vm.bPrice = angular.copy(num.price);
                let exNum = $.grep(vm.currentOdd.Numbers, function (f) {
                    return f.Number === num.number
                });
                num.price = vm.basePrice;
                if (exNum.length) {
                    num.disabled = exNum[0].Stop;
                    num.price = exNum[0].ExtraPrice !== undefined ? vm.basePrice + exNum[0].ExtraPrice : vm.basePrice
                }
                num.priceChanged = ((num.price !== vm.bPrice) && vm.bPrice !== 0);
            })
            // $scope.$digest();
            vm.clearPriceChange = $timeout(function () {
                vm.numbers.map(function (item){
                    item.priceChanged = false;
                })
            }, 3000)
        }

        function build3DTable(){
            vm.number3Ds = [];
            angular.forEach(vm.selected3dNumber, function (n) {
                let exNum = $.grep(vm.currentOdd.Numbers, function (f) {
                    return f.Number === n
                });
                if (exNum.length && exNum[0].Stop) {
                    vm.number3Ds.push({number: n, disabled: true})
                }else{
                    vm.number3Ds.push({number: n})
                }
            })
        }

        $scope.$on('legend::stop-number-changed', function ($event, data){
            //console.log(vm.currentOdd.Numbers, data)
            if (vm.currentOdd === undefined){return}
            angular.forEach(data, function (item) {
                if (0 === item.GameType && 20 === item.BetType){
                    let findNumber = $.grep(vm.currentOdd.Numbers, function (n) {
                        return n.Number === item.Number
                    });
                    if (findNumber.length){
                        findNumber[0].Stop = item.Stop
                    }else {
                        vm.currentOdd.Numbers.push( {Number: item.Number, Stop: item.Stop} )
                    }
                }
            });
            vm.buildPriceTable();
        });

        $scope.$on('live-legend:event:prize-closed', function ($event, data) {
            // data = {Term: "2020-05-16.2", GameType: 1, PrizeNr: 17}
            // data = {GameType: 0, Pricing: [{BetType: 20, Price: 20970},{BetType: 26, Price: 18730}], PrizeNr: 26, Term: "2020-05-16.3"}
            vm.priceChanged = true;
            $timeout(function () {
                vm.priceChanged = false;
            }, 3000)

            if (vm.odds === undefined){return}
            if (data.Term === $rootScope.LegendTermName[GameType]){
                if (data.GameType === 1){
                    vm.odds.map(function (o) {
                        o.PrizeNr = data.PrizeNr;
                        if (data.PrizeNr === 1){
                            o.Active = false
                        }
                    })
                }else{
                    vm.odds.map(function (o) {
                        o.PrizeNr = data.PrizeNr;
                        if (data.PrizeNr === 1){
                            o.Active = false
                        }
                        o.Payouts = data.Payouts.filter(function (p) {
                            return p.BetType === o.BetType
                        })[0].Payouts
                    })
                }
                vm.TabSelected(undefined, true);
            }
        });

        $scope.$on('live-legend:event:game-opening', function ($event, data) {
            // data = {GameType: 1, PrizeNr: 18, Term: "2020-05-16.2"}
            //data={"Term":"2020-05-16.1","GameType":0,"PrizeNr":27,"Pricing":[{"BetType":20,"Price":21740},{"BetType":26,"Price":19540}]}
            if (vm.odds === undefined){return}
            if (data.Term === $rootScope.LegendTermName[GameType] && data.GameType === GameType){
                vm.odds.map(function (o) {
                    o.Active = true;
                    o.PrizeNr = data.PrizeNr;
                    if (data.GameType === 0){
                        o.Payouts = data.Payouts.filter(function (p) {
                            return p.BetType === o.BetType
                        })[0].Payouts
                    }
                })
                vm.TabSelected();
            }
        });

        $scope.$on('live-legend:event:game-closed', function ($event, data) {
            // data={"Term":"2020-05-16.2","GameType":1,"PrizeNr":1}
            // data={"Term":"2020-05-16.3","GameType":0,"PrizeNr":1,"Pricing":[{"BetType":20,"Price":850},{"BetType":26,"Price":890}]}

            if (vm.odds === undefined){return}
            if (data.Term === $rootScope.LegendTermName[GameType] && data.GameType === GameType){
                vm.odds.map(function (o) {
                    o.Active = false
                    o.PrizeNr = data.PrizeNr
                })
                if (data.GameType === 0){
                    vm.odds.map(function (o) {
                        o.Payouts = data.Payouts.filter(function (p) {
                            return p.BetType === o.BetType
                        })[0].Payouts
                    })
                }
                vm.TabSelected();
            }
        });

        function resetBetting(ws) {
            if (!ws){
                vm.numbers.map(function (number){
                    number.selected = false;
                    number.point = 0;
                    vm.betPoint = 0;
                })
            }
            vm.betStepper.map(function (a){
                return a.active = false;
            })
            vm.selected3dNumber = [];
            vm.number3Ds = [];
            vm.selectedCheckbox = [];
            vm.InterfaceCheckbox = [];
            vm.keyNumber = '';
            vm.keyNumber3D = '';
        }

        function totalPoint() {
            let total = 0, oddNumbers;
            vm.totalMoney = 0;
            vm.toPoint = 0;
            if (vm.onTabSelected === 0){
                angular.forEach(vm.numbers, function (num) {
                    total += (!num.disabled && num.selected) ? vm.betPoint : 0;
                    if (vm.currentOdd && num.selected) {
                        oddNumbers = $.grep(vm.currentOdd.Numbers, function (n) {
                            return n.Number === num.number
                        });
                        if (oddNumbers.length && !oddNumbers[0].Stop && oddNumbers[0].ExtraPrice !== 0) {
                            vm.totalMoney += vm.betPoint * (vm.basePrice + oddNumbers[0].ExtraPrice)
                        } else {
                            vm.totalMoney += vm.betPoint * vm.basePrice
                        }
                    }
                })
            }else if (vm.onTabSelected === 1){
                angular.forEach(vm.number3Ds, function (n){
                    if (!n.disabled){
                        total += vm.betPoint;
                        vm.totalMoney += vm.betPoint * vm.basePrice;
                    }
                })
            }
            vm.toPoint = total;
            return total;
        }

        function submitBetting() {
            let betObj = {}, betType;
            if (GameType === 0){
                betType = vm.onTabSelected === 0 ? 20 : 26
            }else{
                betType = vm.onTabSelected === 0 ? 27 : 28
            }
            betObj.Term =  $rootScope.LegendTermName[GameType];
            betObj.IgnorePrice = vm.ignorePrice;
            betObj.Tickets = [{
                GameType: GameType,
                BetType: betType,
                Items: []
            }];

            if (vm.onTabSelected === 0){
                angular.forEach(vm.numbers, function (number) {
                    if (number.selected && !number.disabled){
                        var Number = {};
                        Number.Numbers = [number.number];
                        Number.Point = vm.betPoint;
                        Number.Price = number.price;
                        betObj.Tickets[0].Items.push(Number)
                    }
                })
            }else{
                angular.forEach(vm.number3Ds, function (number) {
                    if (!number.disabled){
                        let Number = {};
                        Number.Numbers = [number.number];
                        Number.Point = vm.betPoint;
                        Number.Price = vm.basePrice;
                        betObj.Tickets[0].Items.push(Number)
                    }
                })
            }

            let always = JSON.parse(sessionStorage.getItem('alwaysBetting')) !== null;
            if (!$rootScope.isAuthenticated){always = true}
            if (always){
                vm.sendBettingRequest(betObj)
            }else{
                vm.commitBetting(betObj);
            }
        }

        function commitBetting(betObj) {
            let numbers;
            if (vm.onTabSelected === 0){
                numbers = vm.selected
            }else{
                numbers = [];
                angular.forEach(vm.number3Ds, function (n) {
                    numbers.push(n.number)
                })
                numbers = numbers.toString().replace(/\,+/g, ', ')
            }

            $mdDialog.show({
                controller: commitBettingCtrl,
                templateUrl: 'app/main/legendary/betting/prompt.dialog.html',
                parent: angular.element(document.body),
                multiple: true,
                clickOutsideToClose: true,
                locals: {point: vm.toPoint, money: vm.totalMoney, numbers: numbers}
            });
            function commitBettingCtrl($rootScope, $scope, $mdDialog, $filter, point, money, numbers){
                $scope.cancel = function() {
                    $mdDialog.cancel();
                };
                $scope.alwaysBetting = false;
                $scope.Point = point;
                $scope.costMoney = money;
                $scope.numbers = numbers;
                $scope.done = function () {
                    if($scope.alwaysBetting){
                        sessionStorage.setItem('alwaysBetting', true);
                    }
                    vm.sendBettingRequest(betObj)
                }
            }
        }

        function sendBettingRequest(betObj) {
            $rootScope.aBettingObject = betObj;
            $rootScope.$broadcast('LegendBetting', {message: 'dialog'});
            vm.resetBetting();
        }

        $timeout(function () {
            $rootScope.$broadcast('getMissing', {GameType: GameType, StatsType: 2})
        });

        $scope.$on('getMissing::done', function (){
            // console.log($rootScope.missNumbers)
            vm.missingNumbers = [];
            let findByGame = $rootScope.missNumbers.filter(function(game){
                return game.GameType === GameType;
            })
            if (findByGame.length){
                let findByStats = findByGame[0].missNumbers.filter(function (item){
                    return item.StatsType === 2;
                })
                if (findByStats.length){
                    vm.missingNumbers = findByStats[0].Data;
                }
                if (vm.missingNumbers.length){
                    vm.sortNumberByStat();
                }
            }
        })

        vm.sortType = 0;
        function sortNumberByStat(){
            let totalTimes = 0;
            vm.missingNumbers.map(function (item){
                totalTimes += item.TimesDrawn
            })
            vm.numbers.map(function (number){
                let findMiss = vm.missingNumbers.filter(function (item){
                    return item.Number === number.number
                })
                if (findMiss.length){
                    number.TimesMissing = findMiss[0].TimesMissing;
                    number.AvgTimesMissing = findMiss[0].AvgTimesMissing;
                    number.LastTimesMissing = findMiss[0].LastTimesMissing;
                    number.Frequency = ((findMiss[0].TimesDrawn / totalTimes) * 100).toFixed(2);
                    number.high = findMiss[0].high;
                    vm.sortReady = true;
                    vm.sortNumbers(vm.sortType);
                    $timeout(function (){
                        $scope.$digest();
                    }, 100)
                }
            })
        }

        function sortNumbers(type){
            vm.selectedCheckbox = [];
            vm.InterfaceCheckbox = [];
            vm.sortType = type;
            if (vm.sortType === 0){
                vm.numbers.sort(function (a, b){
                    return a.number - b.number
                })
            }else if(vm.sortType === 1){
                vm.numbers.sort(function (a, b){
                    return b.TimesMissing - a.TimesMissing || a.AvgTimesMissing - b.AvgTimesMissing
                })
            }else{
                vm.numbers.sort(function (a, b){
                    return b.Frequency - a.Frequency
                })
            }
        }

        $scope.$on('highlight::number', function ($event, data){
            vm.numbers.map(function (item){
                item.priceChanged = item.number === data;
            })
            $timeout(function (){
                $scope.$digest();
            }, 100)
            vm.clearPriceChange = $timeout(function () {
                vm.numbers.map(function (item){
                    item.priceChanged = false;
                })
            }, 5000)
        })

        function getFullResult(call){
            Lotus.Lottery789.LotteryResult.getLatestResults({GameType: 0}).then(function (response){
                $rootScope.theResults = response;
                $rootScope.needUpdateResult = false;
                vm.updatingResult = false;
                if (call){
                    $timeout(function (){vm.Seamless()}, 100)
                }
            })
        }

        function Seamless(ev){
            if ($rootScope.needUpdateResult){
                vm.updatingResult = true;
                vm.getFullResult(true)
                return;
            }
            $mdDialog.show({
                controller: seamlessCtrl,
                templateUrl: 'app/main/legendary/seamless.dialog.html',
                parent: angular.element(document.body),
                targetEvent: ev,
                fullscreen: true,
                clickOutsideToClose: true,
                locals: {result: $rootScope.theResults}
            }).then(function (answer) {
                vm.numbers.map(function (number){
                    if (msUtils.exists(number.number, answer) && !number.disabled){
                        number.selected = true;
                    }
                })
            }, function () {});
            function seamlessCtrl($scope, $mdDialog, result) {
                $scope.cancel = function() {
                    $mdDialog.cancel();
                };
                $scope.confirm = function () {
                    $mdDialog.hide($scope.chooseNumbers);
                };
                $scope.chooseNumbers = [];
                $scope.Reverse = true;
                $scope.maxTimes = 5;
                $scope.maxTimesArray = [3,4,5,6,7,8,9,10];
                $scope.Frequency = 1;
                $scope.FrequencyArray = [1,2,3];
                $scope.setMaxTimes = function (item){
                    $scope.maxTimes = item;
                    $scope.changeMaxTimes();
                };
                $scope.setFrequency = function (item){
                    $scope.Frequency = item;
                    $scope.buildSeamless();
                };
                $scope.changeReverse = function (cond){
                    $scope.Reverse = cond;
                    $timeout(function (){
                        $scope.buildSeamless();
                    }, 300)
                }
                $scope.changeMaxTimes = function (){
                    $scope.SeamlessViews = [];
                    $scope.SeamlessResultFiltered = $scope.SeamlessResult.filter(function(item){
                        return item.Times === $scope.maxTimes
                    });
                    $scope.SeamlessResultFiltered.map(function (item){
                        if ($scope.SeamlessResult.filter(function(r){
                            return r.Times > $scope.maxTimes && item.Index === r.Index
                        }).length){
                            item.hasMore = true
                        }
                    })
                    $scope.SeamlessResultFiltered.sort(function(a,b){
                        return a.Number - b.Number;
                    });
                    // console.log($scope.SeamlessResultFiltered.length)
                    $timeout(function (){
                        $scope.buildView()
                    }, 100)
                }
                $scope.buildView = function (index){
                    index = index === undefined ? 0 : index;
                    for (let i = 0; i < 300; i++) {
                        if ($scope.SeamlessResultFiltered[index+i] !== undefined){
                            $scope.SeamlessViews.push($scope.SeamlessResultFiltered[index+i]);
                        }
                    }
                    index += 300;
                    if (index < $scope.SeamlessResultFiltered.length){
                        $timeout(function (){
                            $scope.buildView(index)
                        }, 100)
                    }
                }
                $scope.buildSeamless = function (){
                    $scope.SeamlessResult = Lotus.Lottery789.ResultStats.SeamlessResult.lookupNorthernResult(
                        {
                            LotteryResults: result,
                            AllowedReverseResult: $scope.Reverse,
                            WinNumberFrequence: $scope.Frequency,
                            Type: 1,
                        }
                    );
                    $scope.changeMaxTimes();
                }
                $scope.chooseBet = function (item){
                    $timeout(function (){
                        $scope.chooseNumbers.push(item.Number)
                        $scope.chooseNumbers = $scope.chooseNumbers.filter(function (item, index, inputArray) {	//Lọc trùng
                            return inputArray.indexOf(item) === index;
                        })
                    }, 200)
                }
                $scope.chooseClear = function (item){
                    $timeout(function (){
                        $scope.chooseNumbers = $scope.chooseNumbers.filter(function (nr){
                            return nr !== item.Number;
                        })
                    }, 200)
                }
                $scope.chooseView = function (item){
                    $mdDialog.show({
                        controller: seamlessFullCtrl,
                        templateUrl: 'app/main/legendary/seamless.full.dialog.html',
                        parent: angular.element(document.body),
                        targetEvent: ev,
                        multiple: true,
                        fullscreen: true,
                        clickOutsideToClose: true,
                        locals: {result: result, item: item, Reverse: $scope.Reverse}
                    })
                }
                $scope.exitsSelected = function (item){
                    return msUtils.exists(item.Number, $scope.chooseNumbers)
                }
                $timeout(function (){
                    $scope.buildSeamless();
                }, 300)
            }
            function seamlessFullCtrl($scope, result, item, Reverse){
                $scope.viewNumber = item;
                $scope.cancel = function() {
                    $mdDialog.cancel();
                };
                $scope.sliceResults = result.filter(function(re, index){
                    return index <= item.Times
                }).reverse()
                $scope.resultCalculated = [];
                let matchLotto;
                $scope.sliceResults.map(function (result){
                    let dataCalculated = getByPosition(item, result, matchLotto, Reverse)
                    matchLotto = dataCalculated.lotto;
                    dataCalculated.Term = result.Term;
                    dataCalculated.DrawResultAt = result.DrawResultAt;
                    $scope.resultCalculated.push(dataCalculated)
                })
                $scope.resultCalculated = $scope.resultCalculated.reverse();
            }
        }

        function getByPosition(itemNumber, Result, matchLotto, Reverse){
            let numbers;
            if (matchLotto === undefined){
                numbers = []
            }else{
                numbers = Reverse ? msUtils.permNumber(matchLotto) : [matchLotto];
            }
            let Lotto = '';
            let fullString = [];
            fullString = fullString
                .concat(sToa(Result.Jackpot))
                .concat(sToa(Result.First))
                .concat(sToa(Result.Second[0]))
                .concat(sToa(Result.Second[1]))
                .concat(sToa(Result.Third[0]))
                .concat(sToa(Result.Third[1]))
                .concat(sToa(Result.Third[2]))
                .concat(sToa(Result.Third[3]))
                .concat(sToa(Result.Third[4]))
                .concat(sToa(Result.Third[5]))
                .concat(sToa(Result.Fourth[0]))
                .concat(sToa(Result.Fourth[1]))
                .concat(sToa(Result.Fourth[2]))
                .concat(sToa(Result.Fourth[3]))
                .concat(sToa(Result.Fiveth[0]))
                .concat(sToa(Result.Fiveth[1]))
                .concat(sToa(Result.Fiveth[2]))
                .concat(sToa(Result.Fiveth[3]))
                .concat(sToa(Result.Fiveth[4]))
                .concat(sToa(Result.Fiveth[5]))
                .concat(sToa(Result.Sixth[0]))
                .concat(sToa(Result.Sixth[1]))
                .concat(sToa(Result.Sixth[2]))
                .concat(sToa(Result.Seventh[0]))
                .concat(sToa(Result.Seventh[1]))
                .concat(sToa(Result.Seventh[2]))
                .concat(sToa(Result.Seventh[3]))

            fullString.map(function (item, i){
                if (i === itemNumber.Index[0] || i === itemNumber.Index[1]){
                    item.position = true;
                }
            })
            Lotto = fullString[itemNumber.Index[0]].number.toString() + fullString[itemNumber.Index[1]].number.toString()
            //Jackpot
            if (msUtils.exists(fullString[3].number.toString() + fullString[4].number.toString(), numbers)){
                fullString[3].match = true;
                fullString[4].match = true;
            }
            //First
            if (msUtils.exists(fullString[8].number.toString() + fullString[9].number.toString(), numbers)){
                fullString[8].match = true;
                fullString[9].match = true;
            }
            //Second-1
            if (msUtils.exists(fullString[13].number.toString() + fullString[14].number.toString(), numbers)){
                fullString[13].match = true;
                fullString[14].match = true;
            }
            //Second-2
            if (msUtils.exists(fullString[18].number.toString() + fullString[19].number.toString(), numbers)){
                fullString[18].match = true;
                fullString[19].match = true;
            }
            //Third-1
            if (msUtils.exists(fullString[23].number.toString() + fullString[24].number.toString(), numbers)){
                fullString[23].match = true;
                fullString[24].match = true;
            }
            //Third-2
            if (msUtils.exists(fullString[28].number.toString() + fullString[29].number.toString(), numbers)){
                fullString[28].match = true;
                fullString[29].match = true;
            }
            //Third-3
            if (msUtils.exists(fullString[33].number.toString() + fullString[34].number.toString(), numbers)){
                fullString[33].match = true;
                fullString[34].match = true;
            }
            //Third-4
            if (msUtils.exists(fullString[38].number.toString() + fullString[39].number.toString(), numbers)){
                fullString[38].match = true;
                fullString[39].match = true;
            }
            //Third-5
            if (msUtils.exists(fullString[43].number.toString() + fullString[44].number.toString(), numbers)){
                fullString[43].match = true;
                fullString[44].match = true;
            }
            //Third-6
            if (msUtils.exists(fullString[48].number.toString() + fullString[49].number.toString(), numbers)){
                fullString[48].match = true;
                fullString[49].match = true;
            }
            //Fourth-1
            if (msUtils.exists(fullString[52].number.toString() + fullString[53].number.toString(), numbers)){
                fullString[52].match = true;
                fullString[53].match = true;
            }
            //Fourth-2
            if (msUtils.exists(fullString[56].number.toString() + fullString[57].number.toString(), numbers)){
                fullString[56].match = true;
                fullString[57].match = true;
            }
            //Fourth-3
            if (msUtils.exists(fullString[60].number.toString() + fullString[61].number.toString(), numbers)){
                fullString[60].match = true;
                fullString[61].match = true;
            }
            //Fourth-4
            if (msUtils.exists(fullString[64].number.toString() + fullString[65].number.toString(), numbers)){
                fullString[64].match = true;
                fullString[65].match = true;
            }
            //Fifth-1
            if (msUtils.exists(fullString[68].number.toString() + fullString[69].number.toString(), numbers)){
                fullString[68].match = true;
                fullString[69].match = true;
            }
            //Fifth-2
            if (msUtils.exists(fullString[72].number.toString() + fullString[73].number.toString(), numbers)){
                fullString[72].match = true;
                fullString[73].match = true;
            }
            //Fifth-3
            if (msUtils.exists(fullString[76].number.toString() + fullString[77].number.toString(), numbers)){
                fullString[76].match = true;
                fullString[77].match = true;
            }
            //Fifth-4
            if (msUtils.exists(fullString[80].number.toString() + fullString[81].number.toString(), numbers)){
                fullString[80].match = true;
                fullString[81].match = true;
            }
            //Fifth-5
            if (msUtils.exists(fullString[84].number.toString() + fullString[85].number.toString(), numbers)){
                fullString[84].match = true;
                fullString[85].match = true;
            }
            //Fifth-6
            if (msUtils.exists(fullString[88].number.toString() + fullString[89].number.toString(), numbers)){
                fullString[88].match = true;
                fullString[89].match = true;
            }
            //Sixth-1
            if (msUtils.exists(fullString[91].number.toString() + fullString[92].number.toString(), numbers)){
                fullString[91].match = true;
                fullString[92].match = true;
            }
            //Sixth-2
            if (msUtils.exists(fullString[94].number.toString() + fullString[95].number.toString(), numbers)){
                fullString[94].match = true;
                fullString[95].match = true;
            }
            //Sixth-3
            if (msUtils.exists(fullString[97].number.toString() + fullString[98].number.toString(), numbers)){
                fullString[97].match = true;
                fullString[98].match = true;
            }
            //Seventh-1
            if (msUtils.exists(fullString[99].number.toString() + fullString[100].number.toString(), numbers)){
                fullString[99].match = true;
                fullString[100].match = true;
            }
            //Seventh-2
            if (msUtils.exists(fullString[101].number.toString() + fullString[102].number.toString(), numbers)){
                fullString[101].match = true;
                fullString[102].match = true;
            }
            //Seventh-3
            if (msUtils.exists(fullString[103].number.toString() + fullString[104].number.toString(), numbers)){
                fullString[103].match = true;
                fullString[104].match = true;
            }
            //Seventh-4
            if (msUtils.exists(fullString[105].number.toString() + fullString[106].number.toString(), numbers)){
                fullString[105].match = true;
                fullString[106].match = true;
            }
            return {data: fullString, lotto: Lotto}
        }

        function sToa(string){
            let output = [];
            string.split('').map(function (item){
                output.push({number: item})
            })
            return output
        }

    }
})();
(function (){
    'use strict';

    angular
        .module('app.legendary')
        .controller('legendaryNorthernPairCtrl', legendaryNorthernPairCtrl);

    /** @ngInject */
    function legendaryNorthernPairCtrl($rootScope, $scope, $mdMedia, $mdSidenav, $timeout, $interval, $mdDialog, $state, $document, msUtils, network, selectBox, GameType){
        let vm = this;

        vm.getOdds = getOdds;
        vm.buildPriceTable = buildPriceTable;
        vm.resetBetting = resetBetting;
        vm.costMoney = costMoney;
        vm.submitBetting = submitBetting;
        vm.purchaseLimit = purchaseLimit;
        vm.commitBetting = commitBetting;
        vm.sendBettingRequest = sendBettingRequest;

        vm.GameType = GameType

        vm.ignorePrice = true;
        $scope.$mdMedia = $mdMedia;

        vm.selectedCheckbox = [];
        vm.betStepper = $rootScope.betStepper;
        vm.stepper = {
            select: function (item) {
                vm.inputPoint = {2: item.value, 3: item.value, 4: item.value};
                angular.forEach(vm.betStepper, function (step) {
                    step.active = item.value === step.value;
                })
            }
        }
        vm.number = {
            select: function (n) {
                angular.forEach(vm.numbers, function (number) {
                    if (number.number === n.number){
                        number.selected = !number.selected;
                    }
                });
                vm.inputPoint = {2: 0, 3: 0, 4: 0}
            },
            selected: function () {
                let ns = [];
                angular.forEach(vm.numbers, function (n) {
                    if (n.selected)
                        ns.push(n.number)
                })
                vm.selected = ns.toString().replace(/\,+/g, ', ')
                return vm.selected
            },
            typing: function (e) {
                if (!vm.keyNumber){return}
                if(e.which === 8){
                    if (vm.keyNumber[vm.keyNumber.length - 1] !== ','){
                        vm.keyNumber = vm.keyNumber.substring(0, vm.keyNumber.length - 1)
                    }
                }
                var value = vm.keyNumber.split(',');
                if (value[value.length-1].length > 1){
                    vm.keyNumber = vm.keyNumber + ','
                }
            },
            submit: function (click) {
                if (!vm.keyNumber){return}
                vm.keyNumber = vm.keyNumber.replace(/\s+/g, '');
                if (vm.keyNumber.length === 0){return}
                let arr = vm.keyNumber.split(',');
                let arrInput = [];
                for (let i = 0; i < arr.length; i++){
                    let number = arr[i].slice(-2).replace(/\s+/g, '');
                    number = number.length < 2 && number.length !== 0 ? '0' + number : number;
                    if (!isNaN(number) && angular.isNumber(+number)){
                        if (number.length !== 0)
                            arrInput.push(number)
                    }
                }
                angular.forEach(vm.numbers, function (number) {
                    if (arrInput.indexOf(number.number) !== -1){
                        if (!number.selected){
                            number.selected = true;
                        }
                    }
                });
                vm.keyNumber = '';
                vm.inputPoint = {2: 0, 3: 0, 4: 0}
                if (click){
                    $timeout(function () {
                        document.getElementsByClassName('input-numbers-array')[0].focus();
                    }, 100)
                }
            },
            checkbox: {
                exists: function (item) {
                    return vm.selectedCheckbox.indexOf(item) > -1;
                },
                group: function (id) {
                    var idx = vm.selectedCheckbox.indexOf(id);
                    if (idx > -1) {
                        vm.selectedCheckbox.splice(idx, 1);
                    }else {
                        vm.selectedCheckbox.push(id);
                    }
                    vm.checked = idx === -1;
                    vm.arrayNumber = $.grep(selectBox.list, function(b){
                        return b.id === id;
                    })[0].content;
                    angular.forEach(vm.numbers, function (number) {
                        if ($.grep(vm.arrayNumber, function(b){return b === number.number}).length){
                            number.selected = vm.checked;
                        }
                    });
                    vm.inputPoint = {2: 0, 3: 0, 4: 0}
                }
            }
        }

        vm.base = {2: 0, 3: 0, 4: 0};
        if ($rootScope.LegendParameters !== undefined){
            angular.forEach($rootScope.LegendParameters, function(pr){
                if (pr.GameType === vm.GameType) {
                    if (pr.BetType === 2) { vm.base[2] = pr.Price }
                    if (pr.BetType === 3) { vm.base[3] = pr.Price }
                    if (pr.BetType === 4) { vm.base[4] = pr.Price }
                }
            })
        }
        vm.pair = {count: {2: 0, 3: 0, 4: 0}, money: {2: 0, 3: 0, 4: 0}, limit: {2: 0, 3: 0, 4: 0}, payout: {2: 0, 3: 0, 4: 0}, point: {2: 0, 3: 0, 4: 0}};
        vm.inputPoint = {2: 0, 3: 0, 4: 0};
        vm.numbers = [];
        for (let i = 0; i<100; i++){
            i = i < 10 ? i = '0' + i : i;
            var number = {
                number: i.toString(),
                selected: false,
                base: {2: vm.base[2], 3: vm.base[3], 4: vm.base[4]},
                price: {2: vm.base[2], 3: vm.base[3], 4: vm.base[4]},
                disabled: {2: false, 3: false, 4: false}
            };
            vm.numbers.push(number)
        }

        $timeout(function () {
            if ($rootScope.isAuthenticated){
                vm.purchaseLimit()
            }
        }, 300);

        $scope.$on('oddsPrice::done', function (){
            vm.buildPriceTable();
        })

        function purchaseLimit() {
            if ($rootScope.isAuthenticated){
                if ($rootScope.LegendParameters !== undefined){
                    angular.forEach([2,3,4], function (betid) {
                        vm.pair.limit[betid] = $rootScope.LegendParameters.filter(function (item) {return item.GameType === vm.GameType && item.BetType === betid})[0].MaxPointPerNumber;
                        vm.pair.payout[betid] = $rootScope.LegendParameters.filter(function (item) {return item.GameType === vm.GameType && item.BetType === betid})[0].Payouts / 1000;
                    })
                }else{
                    $timeout(function () {
                        vm.purchaseLimit()
                    }, 1000)
                }
            }
        }

        function buildPriceTable(){
            vm.odds = $rootScope.LegendOdds.filter(function (odd) {
                return odd.GameType === vm.GameType && msUtils.exists(odd.BetType, [2,3,4])
            })

            if (vm.odds.length === 0) {
                $timeout(function () {
                    vm.getOdds();
                }, 1000);
                return;
            }

            angular.forEach(vm.odds, function(pr){
                if (pr.GameType === vm.GameType) {
                    if (pr.BetType === 2) { vm.base[2] = pr.Price }
                    if (pr.BetType === 3) { vm.base[3] = pr.Price }
                    if (pr.BetType === 4) { vm.base[4] = pr.Price }
                }
            })

            angular.forEach(vm.numbers, function (num) {
                angular.forEach(vm.odds, function (odd) {
                    num.base[odd.BetType] = odd.Price;
                    num.price[odd.BetType] = num.price[odd.BetType] === 0 ? odd.Price : num.price[odd.BetType];
                    angular.forEach(odd.Numbers, function (value) {
                        if (value.Number === num.number){
                            var extPrice = value.ExtraPrice !== undefined ? odd.Price + value.ExtraPrice : num.price[odd.BetType];
                            num.disabled[odd.BetType] = value.Stop;
                            if ((num.price[odd.BetType] !== 0) && (num.price[odd.BetType] !== extPrice)){
                                num.priceChanged = true
                            }
                            num.price[odd.BetType] = extPrice;
                        }
                    })
                })
            });
            $timeout(function () {
                vm.numbers.map(function (o) {return o.priceChanged = false})
            }, 3000)
        }

        function resetBetting(){
            vm.numbers.map(function (n) {return n.selected = false});
            vm.betStepper.map(function (a){
                return a.active = false;
            })
            vm.selectedCheckbox = [];
            vm.inputPoint = {2: 0, 3: 0, 4: 0};
            vm.keynumber = '';
        }

        function costMoney() {
            vm.toPoint = 0;
            var numberArr, sumMoney;
            angular.forEach([2,3,4], function (betId) {
                vm.pair.count[betId] = 0;
                sumMoney = 0;
                numberArr = [];
                angular.forEach(vm.numbers, function (num) {
                    if (num.selected){
                        if (!num.disabled[betId]){
                            numberArr.push(num.number)
                        }
                    }
                });
                vm.pair.count[betId] += numberArr.combinate(betId).length;

                var totalYArr = numberArr.combinate(betId);
                if (totalYArr.length <= 128){
                    angular.forEach(totalYArr, function (pairArr) {
                        var pricePerPair = 0;
                        angular.forEach(pairArr, function (number){
                            angular.forEach(vm.numbers, function (num) {
                                if (num.number === number){
                                    pricePerPair += num.price[betId]
                                }
                            });
                        });
                        pricePerPair = Math.ceil(pricePerPair/pairArr.length);
                        sumMoney += pricePerPair
                    });
                    vm.pair.money[betId] = sumMoney * vm.inputPoint[betId];
                    vm.pair.point[betId] = vm.pair.count[betId] * vm.inputPoint[betId];
                    vm.toPoint += vm.pair.count[betId] * vm.inputPoint[betId];
                }else{
                    vm.inputPoint[betId] = 0;
                }
            });
            vm.totalMoney = vm.pair.money[2] + vm.pair.money[3] + vm.pair.money[4]
            return vm.totalMoney
        }

        function submitBetting() {
            var betObj, ticketObj, selectedNumber, pairArrNum, Number;
            betObj = {};
            betObj.Term = $rootScope.LegendTermName[GameType];
            betObj.IgnorePrice = vm.ignorePrice;
            betObj.Tickets = [];

            Object.keys(vm.inputPoint).forEach(function(betId) {
                if (vm.inputPoint[betId] !== 0 && vm.inputPoint[betId] !== null){
                    ticketObj = {
                        GameType: vm.GameType,
                        BetType: parseInt(betId),
                        Items: []
                    };
                    selectedNumber = [];
                    angular.forEach(vm.numbers, function (number) {
                        if (number.selected && !number.disabled[betId] ){
                            selectedNumber.push(number.number)
                        }
                    });
                    pairArrNum = selectedNumber.combinate(betId);
                    angular.forEach(pairArrNum, function (pair) {
                        Number = {};
                        Number.Numbers = pair;
                        Number.Point = vm.inputPoint[betId];
                        //Tính tiền cho cặp xiên
                        var pricePerPair = 0;
                        angular.forEach(pair, function (n) {
                            angular.forEach(vm.numbers, function (num) {
                                if (num.number === n){
                                    pricePerPair += num.price[betId]
                                }
                            })
                        });
                        pricePerPair = Math.ceil(pricePerPair/pair.length);
                        Number.Price = pricePerPair;
                        ticketObj.Items.push(Number)
                    });
                    if (ticketObj.Items.length){
                        betObj.Tickets.push(ticketObj)
                    }
                }
            });
            let always = JSON.parse(sessionStorage.getItem('alwaysBetting')) !== null;
            if (!$rootScope.isAuthenticated){always = true}
            if (always){
                vm.sendBettingRequest(betObj)
            }else{
                vm.commitBetting(betObj);
            }
        }

        function commitBetting(betObj) {
            $mdDialog.show({
                controller: commitBettingCtrl,
                templateUrl: 'app/main/legendary/betting/prompt.dialog.html',
                parent: angular.element(document.body),
                multiple: true,
                clickOutsideToClose: true,
                locals: {point: vm.toPoint, money: vm.totalMoney, numbers: vm.selected}
            });
            function commitBettingCtrl($rootScope, $scope, $mdDialog, $filter, point, money, numbers){
                $scope.cancel = function() {
                    $mdDialog.cancel();
                };
                $scope.alwaysBetting = false;
                $scope.costMoney = money;
                $scope.Point = point;
                $scope.numbers = numbers;
                $scope.done = function () {
                    if($scope.alwaysBetting){
                        sessionStorage.setItem('alwaysBetting', true);
                    }
                    vm.sendBettingRequest(betObj)
                }
            }
        }

        function sendBettingRequest(betObj) {
            $rootScope.aBettingObject = betObj;
            $rootScope.$broadcast('LegendBetting', {message: 'dialog'});
            vm.resetBetting();
        }

        $document.bind('keydown keypress', function (e) {
            if(e.which === 27) {
                vm.resetBetting();
                e.preventDefault()
            }
        });

        function getOdds(){
            $rootScope.$broadcast('GetOdds', {GameType: vm.GameType, BetTypes: [2,3,4]});
        }

        $timeout(function () {
            vm.getOdds();
        })

    }
})();
(function () {
    'use strict';

    angular
        .module('app.legendary')
        .controller('legendaryGeneralCtrl', legendaryGeneralCtrl);

    function legendaryGeneralCtrl($rootScope, $scope, $mdMedia, $timeout, $mdDialog, $document, message, collections, config, msUtils) {
        let vm = this;
        vm.config = config;
        vm.ignorePrice = true;
        vm.quickChoices = collections.list;
        vm.getOdds = getOdds;
        vm.buildPriceTable = buildPriceTable;
        vm.purchaseLimit = purchaseLimit;
        vm.totalPoint = totalPoint;
        vm.submitBetting = submitBetting;
        vm.resetBetting = resetBetting;
        vm.commitBetting = commitBetting;
        vm.sendBettingRequest = sendBettingRequest;

        vm.sortNumberByStat = sortNumberByStat;
        vm.sortNumbers = sortNumbers;
        vm.showHelp = showHelp;

        vm.getFullResult = getFullResult;
        vm.Seamless = Seamless;

        vm.warnPriceChanges = [];
        vm.selectedCheckbox = [];
        vm.InterfaceCheckbox = [];
        vm.numbers = [];

        vm.betStepper = $rootScope.betStepper;
        vm.stepper = {
            select: function (item) {
                vm.betPoint = item.value;
                angular.forEach(vm.betStepper, function (step) {
                    step.active = item.value === step.value;
                })
            }
        }
        vm.number = {
            select: function (n) {
                angular.forEach(vm.numbers, function (number) {
                    if (number.number === n.number && !number.disabled){
                        number.selected = !number.selected;
                    }
                });
                if (n.selected){
                    vm.betPoint = 0;
                    if ($mdMedia('gt-sm')){
                        $timeout(function () {
                            document.getElementById('bet-input').select();
                        }, 10)
                    }
                }
            },
            selected: function () {
                let ns = [];
                angular.forEach(vm.numbers, function (n) {
                    if (n.selected)
                        ns.push(n.number)
                })
                vm.selected = ns.toString().replace(/\,+/g, ', ')
                return vm.selected
            },
            typing: function (e) {
                if (!vm.keyNumber){return}
                if(e.which === 8){
                    if (vm.keyNumber[vm.keyNumber.length - 1] !== ','){
                        vm.keyNumber = vm.keyNumber.substring(0, vm.keyNumber.length - 1)
                    }
                }
                let value = vm.keyNumber.split(',');
                if (value[value.length-1].length > 1){
                    vm.keyNumber = vm.keyNumber + ','
                }
            },
            submit: function (click) {
                if (!vm.keyNumber){return}
                vm.keyNumber = vm.keyNumber.replace(/\s+/g, '');
                if (vm.keyNumber.length === 0){return}
                let arr = vm.keyNumber.split(',');
                let arrInput = [];
                for (let i = 0; i < arr.length; i++){
                    let number = arr[i].slice(-2).replace(/\s+/g, '');
                    number = number.length < 2 && number.length !== 0 ? '0' + number : number;
                    if (!isNaN(number) && angular.isNumber(+number)){
                        if (number.length !== 0)
                            arrInput.push(number)
                    }
                }
                angular.forEach(vm.numbers, function (number) {
                    if (arrInput.indexOf(number.number) !== -1 && !number.disabled){
                        if (!number.selected){
                            number.selected = true;
                        }
                    }
                });
                vm.keyNumber = '';
                vm.betPoint = 0;
                if (!click){
                    $timeout(function () {
                        document.getElementById('bet-input').select();
                    }, 10)
                }else{
                    $timeout(function () {
                        document.getElementsByClassName('input-numbers-array')[0].focus();
                    }, 100)
                }
            },
            checkbox: {
                exists: function (parent, id) {
                    let ids = parent.toString() + id.toString();
                    return vm.selectedCheckbox.indexOf(ids) > -1;
                },
                group: function (parent, id) {
                    let ids = parent.toString() + id.toString();
                    let idx = vm.selectedCheckbox.indexOf(ids);
                    if (idx > -1) {
                        vm.selectedCheckbox.splice(idx, 1);
                    }else {
                        vm.selectedCheckbox.push(ids);
                    }
                    vm.checked = idx === -1;

                    vm.arrayNumber = vm.quickChoices[parent].collect[id].numbers;
                    angular.forEach(vm.numbers, function (number) {
                        if ($.grep(vm.arrayNumber, function(b){return b === number.number}).length){
                            number.selected = vm.checked;
                        }
                    });

                    vm.betPoint = 0;
                    if ($mdMedia('gt-sm')){
                        $timeout(function () {
                            document.getElementById('bet-input').select();
                        }, 10)
                    }
                }
            },
            interface: {
                exists: function (item) {
                    return vm.InterfaceCheckbox.indexOf(item) > -1;
                },
                group: function (id) {
                    let idx = vm.InterfaceCheckbox.indexOf(id);
                    if (idx > -1) {
                        vm.InterfaceCheckbox.splice(idx, 1);
                    }else {
                        vm.InterfaceCheckbox.push(id);
                    }
                    vm.checked = idx === -1;
                    vm.betPoint = 0;
                    angular.forEach(vm.numbers, function (number, index) {
                        if (!number.disabled){
                            if (id < 10){
                                if (Math.floor(index/10) === id){
                                    number.selected = vm.checked;
                                }
                            }else{
                                if (index%10 === id%10){
                                    number.selected = vm.checked;
                                }
                            }
                        }
                    })
                }
            }
        }

        vm.basePrice = 0;
        if ($rootScope.LegendParameters !== undefined){
            vm.basePrice = $rootScope.LegendParameters.filter(function (pr) {
                return pr.GameType === config.GameType && pr.BetType === config.BetType
            })[0].Price;
        }

        for (let i = 0; i<100; i++){
            i = i < 10 ? i = '0' + i : i;
            vm.numbers.push({number: i.toString(), disabled: false, selected: false, price: vm.basePrice})
        }

        function purchaseLimit() {
            if ($rootScope.LegendParameters !== undefined) {
                vm.Payouts = $rootScope.LegendParameters.filter(function (item) {
                    return item.GameType === config.GameType && item.BetType === config.BetType
                })[0].Payouts;
            }
        }

        $scope.$on('oddsPrice::done', function (){
            vm.purchaseLimit();
            vm.buildPriceTable();
        })

        function buildPriceTable(){
            vm.odds = $rootScope.LegendOdds.filter(function (odd) {
                return odd.GameType === config.GameType && odd.BetType === config.BetType
            })

            if (vm.odds.length === 0) {
                $timeout(function () {
                    vm.getOdds();
                }, 1000);
                return;
            }

            vm.basePrice = vm.odds[0].Price;
            angular.forEach(vm.numbers, function (num) {
                vm.bPrice = angular.copy(num.price);
                var exNum = $.grep(vm.odds[0].Numbers, function (f) {
                    return f.Number === num.number
                });
                num.price = vm.basePrice;
                if (exNum.length){
                    num.disabled = exNum[0].Stop;
                    num.price = exNum[0].ExtraPrice !== undefined ? vm.basePrice + exNum[0].ExtraPrice : vm.basePrice
                }
                num.priceChanged = ((num.price !== vm.bPrice) && vm.bPrice !== 0);
            });
            $timeout(function () {
                vm.numbers.map(function (o) {return o.priceChanged = false})
            }, 3000)
        }

        function totalPoint() {
            let total = 0, oddNumbers;
            vm.totalMoney = 0;
            vm.toPoint = 0;
            angular.forEach(vm.numbers, function (num) {
                total += (!num.disabled && num.selected) ? vm.betPoint : 0;
                if (vm.odds && num.selected){
                    oddNumbers = $.grep(vm.odds[0].Numbers, function (n) {
                        return n.Number === num.number
                    });
                    if (oddNumbers.length && !oddNumbers[0].stop && oddNumbers[0].ExtraPrice !== 0 ){
                        vm.totalMoney += vm.betPoint * (vm.basePrice + oddNumbers[0].ExtraPrice) * config.BetTimes
                    }else{
                        vm.totalMoney += vm.betPoint * vm.basePrice * config.BetTimes
                    }
                }
            });
            vm.toPoint = total;
            return total;
        }

        function resetBetting(){
            angular.forEach(vm.numbers, function (number) {
                number.selected = false;
                vm.betPoint = 0;
            });
            vm.betStepper.map(function (a){
                return a.active = false;
            });
            vm.selectedCheckbox = [];
            vm.InterfaceCheckbox = [];
            vm.keynumber = '';
            vm.arrayTemporary = [];
            vm.warnPriceChanges = [];
        }

        function submitBetting() {
            let betObj = {};
            betObj.Term = $rootScope.LegendTermName[config.GameType];
            betObj.IgnorePrice = vm.ignorePrice;
            betObj.Tickets = [{
                GameType: config.GameType,
                BetType: config.BetType,
                Items: []
            }];
            angular.forEach(vm.numbers, function (number) {
                if (number.selected && !number.disabled){
                    var Number = {};
                    Number.Numbers = [number.number];
                    Number.Point = vm.betPoint;
                    Number.Price = number.price;
                    betObj.Tickets[0].Items.push(Number)
                }
            });
            if (vm.warnPriceChanges.length && !vm.ignorePrice){
                $mdDialog.show({
                    clickOutsideToClose: false,
                    escapeToClose: false,
                    controllerAs: 'ctrl',
                    templateUrl: 'app/main/traditional/betting/prompt.dialog.html',
                    controller: warnPriceChangesCtrl
                });
                function warnPriceChangesCtrl($scope, $mdDialog) {
                    $scope.warnPriceChanges = vm.warnPriceChanges;
                    $scope.cancel = function () {
                        $mdDialog.hide();
                        vm.resetBetting();
                    };
                    $scope.continuous = function () {
                        vm.warnPriceChanges.length = 0;
                        vm.submitBetting();
                    }
                }
            }else{
                let always = JSON.parse(sessionStorage.getItem('alwaysBetting')) !== null;
                if (!$rootScope.isAuthenticated){always = true}
                if (always){
                    vm.sendBettingRequest(betObj)
                }else{
                    vm.commitBetting(betObj);
                }
            }
        }

        function commitBetting(betObj) {
            $mdDialog.show({
                controller: commitBettingCtrl,
                templateUrl: 'app/main/legendary/betting/prompt.dialog.html',
                parent: angular.element(document.body),
                multiple: true,
                clickOutsideToClose: true,
                locals: {point: vm.toPoint, money: vm.totalMoney, numbers: vm.selected}
            });
            function commitBettingCtrl($rootScope, $scope, $mdDialog, $filter, point, money, numbers){
                $scope.cancel = function() {
                    $mdDialog.cancel();
                };
                $scope.alwaysBetting = false;
                $scope.Point = point;
                $scope.costMoney = money;
                $scope.numbers = numbers;
                $scope.done = function () {
                    if($scope.alwaysBetting){
                        sessionStorage.setItem('alwaysBetting', true);
                    }
                    vm.sendBettingRequest(betObj)
                }
            }
        }

        function sendBettingRequest(betObj) {
            $rootScope.aBettingObject = betObj;
            $rootScope.$broadcast('LegendBetting', {message: 'dialog'});
            vm.resetBetting();
        }

        function getOdds(){
            $rootScope.$broadcast('GetOdds', {GameType: config.GameType, BetTypes: [config.BetType]})
        }

        $document.bind('keydown keypress', function (e) {
            if(e.which === 27) {
                vm.resetBetting();
                $scope.$digest();
                e.preventDefault()
            }
        })

        $timeout(function () {
            vm.getOdds();
            if (msUtils.exists(config.BetType, [0,1,21,29])){
                $rootScope.$broadcast('getMissing', {GameType: config.GameType, StatsType: config.StatsType})
            }
            // if (msUtils.exists(config.BetType, [1, 29]) && $rootScope.theResults === undefined){
            //     vm.getFullResult();
            // }
            if ($rootScope.theResults === undefined){
                vm.getFullResult();
            }
        });

        $scope.$on('getMissing::done', function (){
            // console.log($rootScope.missNumbers)
            vm.missingNumbers = [];
            let findByGame = $rootScope.missNumbers.filter(function(game){
                return game.GameType === config.GameType;
            })
            if (findByGame.length){
                let findByStats = findByGame[0].missNumbers.filter(function (item){
                    return item.StatsType === config.StatsType;
                })
                if (findByStats.length){
                    vm.missingNumbers = findByStats[0].Data;
                }
                if (vm.missingNumbers.length){
                    vm.sortNumberByStat();
                }
            }
        })

        vm.sortType = 0;
        function sortNumberByStat(){
            let totalTimes = 0;
            vm.missingNumbers.map(function (item){
                totalTimes += item.TimesDrawn
            })
            vm.numbers.map(function (number){
                let findMiss = vm.missingNumbers.filter(function (item){
                    return item.Number === number.number
                })
                if (findMiss.length){
                    number.TimesMissing = findMiss[0].TimesMissing;
                    number.AvgTimesMissing = findMiss[0].AvgTimesMissing;
                    number.LastTimesMissing = findMiss[0].LastTimesMissing;
                    number.Frequency = ((findMiss[0].TimesDrawn / totalTimes) * 100).toFixed(2);
                    number.high = findMiss[0].high;
                    vm.sortReady = true;
                    vm.sortNumbers(vm.sortType);
                    $timeout(function (){
                        $scope.$digest();
                    }, 100)
                }
            })
        }

        function sortNumbers(type){
            vm.selectedCheckbox = [];
            vm.InterfaceCheckbox = [];
            vm.sortType = type;
            if (vm.sortType === 0){
                vm.numbers.sort(function (a, b){
                    return a.number - b.number
                })
            }else if(vm.sortType === 1){
                vm.numbers.sort(function (a, b){
                    return b.TimesMissing - a.TimesMissing || a.AvgTimesMissing - b.AvgTimesMissing
                })
            }else{
                vm.numbers.sort(function (a, b){
                    return b.Frequency - a.Frequency
                })
            }
        }

        function showHelp(ev){
            $mdDialog.show({
                controller: missingHelpCtrl,
                templateUrl: 'app/main/legendary/missing.help.dialog.html',
                targetEvent: ev,
                clickOutsideToClose: true
            });
            function missingHelpCtrl($scope, $mdDialog) {
                $scope.cancel = function() {
                    $mdDialog.cancel();
                };
            }
        }

        function getFullResult(call){
            Lotus.Lottery789.LotteryResult.getLatestResults({GameType: 0}).then(function (response){
                // console.log(response)
                $rootScope.theResults = response;
                $rootScope.needUpdateResult = false;
                vm.updatingResult = false;
                if (call){
                    $timeout(function (){vm.Seamless()}, 100)
                }
            })
        }

        function Seamless(ev){
            if ($rootScope.needUpdateResult){
                vm.updatingResult = true;
                vm.getFullResult(true)
                return;
            }
            $mdDialog.show({
                controller: seamlessCtrl,
                templateUrl: 'app/main/legendary/seamless.dialog.html',
                parent: angular.element(document.body),
                targetEvent: ev,
                fullscreen: true,
                clickOutsideToClose: true,
                locals: {result: $rootScope.theResults}
            }).then(function (answer) {
                vm.numbers.map(function (number){
                    if (msUtils.exists(number.number, answer) && !number.disabled){
                        number.selected = true;
                    }
                })
            }, function () {});
            function seamlessCtrl($scope, $mdDialog, result) {
                $scope.cancel = function() {
                    $mdDialog.cancel();
                };
                $scope.confirm = function () {
                    $mdDialog.hide($scope.chooseNumbers);
                };
                $scope.chooseNumbers = [];
                $scope.Reverse = true;
                $scope.maxTimes = 5;
                $scope.maxTimesArray = [3,4,5,6,7,8,9,10];
                $scope.Frequency = 1;
                $scope.FrequencyArray = [1,2,3];
                $scope.setMaxTimes = function (item){
                    $scope.maxTimes = item;
                    $scope.changeMaxTimes();
                };
                $scope.setFrequency = function (item){
                    $scope.Frequency = item;
                    $scope.buildSeamless();
                };
                $scope.changeReverse = function (cond){
                    $scope.Reverse = cond;
                    $timeout(function (){
                        $scope.buildSeamless();
                    }, 300)
                }
                $scope.changeMaxTimes = function (){
                    $scope.SeamlessViews = [];
                    $scope.SeamlessResultFiltered = $scope.SeamlessResult.filter(function(item){
                        return item.Times === $scope.maxTimes
                    });
                    $scope.SeamlessResultFiltered.map(function (item){
                        if ($scope.SeamlessResult.filter(function(r){
                            return r.Times > $scope.maxTimes && item.Index === r.Index
                        }).length){
                            item.hasMore = true
                        }
                    })
                    $scope.SeamlessResultFiltered.sort(function(a,b){
                        return a.Number - b.Number;
                    });
                    // console.log($scope.SeamlessResultFiltered.length)
                    $timeout(function (){
                        $scope.buildView()
                    }, 100)
                }
                $scope.buildView = function (index){
                    index = index === undefined ? 0 : index;
                    for (let i = 0; i < 300; i++) {
                        if ($scope.SeamlessResultFiltered[index+i] !== undefined){
                            $scope.SeamlessViews.push($scope.SeamlessResultFiltered[index+i]);
                        }
                    }
                    index += 300;
                    if (index < $scope.SeamlessResultFiltered.length){
                        $timeout(function (){
                            $scope.buildView(index)
                        }, 100)
                    }
                }
                $scope.buildSeamless = function (){
                    $scope.SeamlessResult = Lotus.Lottery789.ResultStats.SeamlessResult.lookupNorthernResult(
                        {
                            LotteryResults: result,
                            AllowedReverseResult: $scope.Reverse,
                            WinNumberFrequence: $scope.Frequency,
                            Type: vm.config.BetType === 1 ? 1 : -1,
                        }
                    );
                    $scope.changeMaxTimes();
                }
                $scope.chooseBet = function (item){
                    $timeout(function (){
                        $scope.chooseNumbers.push(item.Number)
                        $scope.chooseNumbers = $scope.chooseNumbers.filter(function (item, index, inputArray) {	//Lọc trùng
                            return inputArray.indexOf(item) === index;
                        })
                    }, 200)
                }
                $scope.chooseClear = function (item){
                    $timeout(function (){
                        $scope.chooseNumbers = $scope.chooseNumbers.filter(function (nr){
                            return nr !== item.Number;
                        })
                    }, 200)
                }
                $scope.chooseView = function (item){
                    $mdDialog.show({
                        controller: seamlessFullCtrl,
                        templateUrl: 'app/main/legendary/seamless.full.dialog.html',
                        parent: angular.element(document.body),
                        targetEvent: ev,
                        multiple: true,
                        fullscreen: true,
                        clickOutsideToClose: true,
                        locals: {result: result, item: item, Reverse: $scope.Reverse}
                    })
                }
                $scope.exitsSelected = function (item){
                    return msUtils.exists(item.Number, $scope.chooseNumbers)
                }
                $timeout(function (){
                    $scope.buildSeamless();
                }, 300)
            }
            function seamlessFullCtrl($scope, result, item, Reverse){
                $scope.viewNumber = item;
                $scope.cancel = function() {
                    $mdDialog.cancel();
                };
                $scope.sliceResults = result.filter(function(re, index){
                    return index <= item.Times
                }).reverse()
                $scope.resultCalculated = [];
                let matchLotto;
                $scope.sliceResults.map(function (result){
                    let dataCalculated = getByPosition(item, result, matchLotto, Reverse)
                    matchLotto = dataCalculated.lotto;
                    dataCalculated.Term = result.Term;
                    dataCalculated.DrawResultAt = result.DrawResultAt;
                    $scope.resultCalculated.push(dataCalculated)
                })
                $scope.resultCalculated = $scope.resultCalculated.reverse();
            }
        }

        function getByPosition(itemNumber, Result, matchLotto, Reverse){
            let numbers;
            if (matchLotto === undefined){
                numbers = []
            }else{
                numbers = Reverse ? msUtils.permNumber(matchLotto) : [matchLotto];
            }
            let Lotto = '';
            let fullString = [];
            fullString = fullString
                .concat(sToa(Result.Jackpot))
                .concat(sToa(Result.First))
                .concat(sToa(Result.Second[0]))
                .concat(sToa(Result.Second[1]))
                .concat(sToa(Result.Third[0]))
                .concat(sToa(Result.Third[1]))
                .concat(sToa(Result.Third[2]))
                .concat(sToa(Result.Third[3]))
                .concat(sToa(Result.Third[4]))
                .concat(sToa(Result.Third[5]))
                .concat(sToa(Result.Fourth[0]))
                .concat(sToa(Result.Fourth[1]))
                .concat(sToa(Result.Fourth[2]))
                .concat(sToa(Result.Fourth[3]))
                .concat(sToa(Result.Fiveth[0]))
                .concat(sToa(Result.Fiveth[1]))
                .concat(sToa(Result.Fiveth[2]))
                .concat(sToa(Result.Fiveth[3]))
                .concat(sToa(Result.Fiveth[4]))
                .concat(sToa(Result.Fiveth[5]))
                .concat(sToa(Result.Sixth[0]))
                .concat(sToa(Result.Sixth[1]))
                .concat(sToa(Result.Sixth[2]))
                .concat(sToa(Result.Seventh[0]))
                .concat(sToa(Result.Seventh[1]))
                .concat(sToa(Result.Seventh[2]))
                .concat(sToa(Result.Seventh[3]))

            fullString.map(function (item, i){
                if (i === itemNumber.Index[0] || i === itemNumber.Index[1]){
                    item.position = true;
                }
            })
            Lotto = fullString[itemNumber.Index[0]].number.toString() + fullString[itemNumber.Index[1]].number.toString()

            if (vm.config.BetType === 1)
            {
                //Jackpot
                if (msUtils.exists(fullString[3].number.toString() + fullString[4].number.toString(), numbers)){
                    fullString[3].match = true;
                    fullString[4].match = true;
                }
                //First
                if (msUtils.exists(fullString[8].number.toString() + fullString[9].number.toString(), numbers)){
                    fullString[8].match = true;
                    fullString[9].match = true;
                }
                //Second-1
                if (msUtils.exists(fullString[13].number.toString() + fullString[14].number.toString(), numbers)){
                    fullString[13].match = true;
                    fullString[14].match = true;
                }
                //Second-2
                if (msUtils.exists(fullString[18].number.toString() + fullString[19].number.toString(), numbers)){
                    fullString[18].match = true;
                    fullString[19].match = true;
                }
                //Third-1
                if (msUtils.exists(fullString[23].number.toString() + fullString[24].number.toString(), numbers)){
                    fullString[23].match = true;
                    fullString[24].match = true;
                }
                //Third-2
                if (msUtils.exists(fullString[28].number.toString() + fullString[29].number.toString(), numbers)){
                    fullString[28].match = true;
                    fullString[29].match = true;
                }
                //Third-3
                if (msUtils.exists(fullString[33].number.toString() + fullString[34].number.toString(), numbers)){
                    fullString[33].match = true;
                    fullString[34].match = true;
                }
                //Third-4
                if (msUtils.exists(fullString[38].number.toString() + fullString[39].number.toString(), numbers)){
                    fullString[38].match = true;
                    fullString[39].match = true;
                }
                //Third-5
                if (msUtils.exists(fullString[43].number.toString() + fullString[44].number.toString(), numbers)){
                    fullString[43].match = true;
                    fullString[44].match = true;
                }
                //Third-6
                if (msUtils.exists(fullString[48].number.toString() + fullString[49].number.toString(), numbers)){
                    fullString[48].match = true;
                    fullString[49].match = true;
                }
                //Fourth-1
                if (msUtils.exists(fullString[52].number.toString() + fullString[53].number.toString(), numbers)){
                    fullString[52].match = true;
                    fullString[53].match = true;
                }
                //Fourth-2
                if (msUtils.exists(fullString[56].number.toString() + fullString[57].number.toString(), numbers)){
                    fullString[56].match = true;
                    fullString[57].match = true;
                }
                //Fourth-3
                if (msUtils.exists(fullString[60].number.toString() + fullString[61].number.toString(), numbers)){
                    fullString[60].match = true;
                    fullString[61].match = true;
                }
                //Fourth-4
                if (msUtils.exists(fullString[64].number.toString() + fullString[65].number.toString(), numbers)){
                    fullString[64].match = true;
                    fullString[65].match = true;
                }
                //Fifth-1
                if (msUtils.exists(fullString[68].number.toString() + fullString[69].number.toString(), numbers)){
                    fullString[68].match = true;
                    fullString[69].match = true;
                }
                //Fifth-2
                if (msUtils.exists(fullString[72].number.toString() + fullString[73].number.toString(), numbers)){
                    fullString[72].match = true;
                    fullString[73].match = true;
                }
                //Fifth-3
                if (msUtils.exists(fullString[76].number.toString() + fullString[77].number.toString(), numbers)){
                    fullString[76].match = true;
                    fullString[77].match = true;
                }
                //Fifth-4
                if (msUtils.exists(fullString[80].number.toString() + fullString[81].number.toString(), numbers)){
                    fullString[80].match = true;
                    fullString[81].match = true;
                }
                //Fifth-5
                if (msUtils.exists(fullString[84].number.toString() + fullString[85].number.toString(), numbers)){
                    fullString[84].match = true;
                    fullString[85].match = true;
                }
                //Fifth-6
                if (msUtils.exists(fullString[88].number.toString() + fullString[89].number.toString(), numbers)){
                    fullString[88].match = true;
                    fullString[89].match = true;
                }
                //Sixth-1
                if (msUtils.exists(fullString[91].number.toString() + fullString[92].number.toString(), numbers)){
                    fullString[91].match = true;
                    fullString[92].match = true;
                }
                //Sixth-2
                if (msUtils.exists(fullString[94].number.toString() + fullString[95].number.toString(), numbers)){
                    fullString[94].match = true;
                    fullString[95].match = true;
                }
                //Sixth-3
                if (msUtils.exists(fullString[97].number.toString() + fullString[98].number.toString(), numbers)){
                    fullString[97].match = true;
                    fullString[98].match = true;
                }
                //Seventh-1
                if (msUtils.exists(fullString[99].number.toString() + fullString[100].number.toString(), numbers)){
                    fullString[99].match = true;
                    fullString[100].match = true;
                }
                //Seventh-2
                if (msUtils.exists(fullString[101].number.toString() + fullString[102].number.toString(), numbers)){
                    fullString[101].match = true;
                    fullString[102].match = true;
                }
                //Seventh-3
                if (msUtils.exists(fullString[103].number.toString() + fullString[104].number.toString(), numbers)){
                    fullString[103].match = true;
                    fullString[104].match = true;
                }
                //Seventh-4
                if (msUtils.exists(fullString[105].number.toString() + fullString[106].number.toString(), numbers)){
                    fullString[105].match = true;
                    fullString[106].match = true;
                }
            }
            else
                {
                //Jackpot
                if (msUtils.exists(fullString[0].number.toString() + fullString[1].number.toString(), numbers)){
                    fullString[0].match = true;
                    fullString[1].match = true;
                }
                //First
                if (msUtils.exists(fullString[5].number.toString() + fullString[6].number.toString(), numbers)){
                    fullString[5].match = true;
                    fullString[6].match = true;
                }
                //Second-1
                if (msUtils.exists(fullString[10].number.toString() + fullString[11].number.toString(), numbers)){
                    fullString[10].match = true;
                    fullString[11].match = true;
                }
                //Second-2
                if (msUtils.exists(fullString[15].number.toString() + fullString[16].number.toString(), numbers)){
                    fullString[15].match = true;
                    fullString[16].match = true;
                }
                //Third-1
                if (msUtils.exists(fullString[20].number.toString() + fullString[21].number.toString(), numbers)){
                    fullString[20].match = true;
                    fullString[21].match = true;
                }
                //Third-2
                if (msUtils.exists(fullString[25].number.toString() + fullString[26].number.toString(), numbers)){
                    fullString[25].match = true;
                    fullString[26].match = true;
                }
                //Third-3
                if (msUtils.exists(fullString[30].number.toString() + fullString[31].number.toString(), numbers)){
                    fullString[30].match = true;
                    fullString[31].match = true;
                }
                //Third-4
                if (msUtils.exists(fullString[35].number.toString() + fullString[36].number.toString(), numbers)){
                    fullString[35].match = true;
                    fullString[36].match = true;
                }
                //Third-5
                if (msUtils.exists(fullString[40].number.toString() + fullString[41].number.toString(), numbers)){
                    fullString[40].match = true;
                    fullString[41].match = true;
                }
                //Third-6
                if (msUtils.exists(fullString[45].number.toString() + fullString[46].number.toString(), numbers)){
                    fullString[45].match = true;
                    fullString[46].match = true;
                }
                //Fourth-1
                if (msUtils.exists(fullString[50].number.toString() + fullString[51].number.toString(), numbers)){
                    fullString[50].match = true;
                    fullString[51].match = true;
                }
                //Fourth-2
                if (msUtils.exists(fullString[54].number.toString() + fullString[55].number.toString(), numbers)){
                    fullString[54].match = true;
                    fullString[55].match = true;
                }
                //Fourth-3
                if (msUtils.exists(fullString[58].number.toString() + fullString[59].number.toString(), numbers)){
                    fullString[58].match = true;
                    fullString[59].match = true;
                }
                //Fourth-4
                if (msUtils.exists(fullString[62].number.toString() + fullString[63].number.toString(), numbers)){
                    fullString[62].match = true;
                    fullString[63].match = true;
                }
                //Fifth-1
                if (msUtils.exists(fullString[66].number.toString() + fullString[67].number.toString(), numbers)){
                    fullString[66].match = true;
                    fullString[67].match = true;
                }
                //Fifth-2
                if (msUtils.exists(fullString[70].number.toString() + fullString[71].number.toString(), numbers)){
                    fullString[70].match = true;
                    fullString[71].match = true;
                }
                //Fifth-3
                if (msUtils.exists(fullString[74].number.toString() + fullString[75].number.toString(), numbers)){
                    fullString[74].match = true;
                    fullString[75].match = true;
                }
                //Fifth-4
                if (msUtils.exists(fullString[78].number.toString() + fullString[79].number.toString(), numbers)){
                    fullString[78].match = true;
                    fullString[79].match = true;
                }
                //Fifth-5
                if (msUtils.exists(fullString[82].number.toString() + fullString[83].number.toString(), numbers)){
                    fullString[82].match = true;
                    fullString[83].match = true;
                }
                //Fifth-6
                if (msUtils.exists(fullString[86].number.toString() + fullString[87].number.toString(), numbers)){
                    fullString[86].match = true;
                    fullString[87].match = true;
                }
                //Sixth-1
                if (msUtils.exists(fullString[90].number.toString() + fullString[91].number.toString(), numbers)){
                    fullString[90].match = true;
                    fullString[91].match = true;
                }
                //Sixth-2
                if (msUtils.exists(fullString[93].number.toString() + fullString[94].number.toString(), numbers)){
                    fullString[93].match = true;
                    fullString[94].match = true;
                }
                //Sixth-3
                if (msUtils.exists(fullString[96].number.toString() + fullString[97].number.toString(), numbers)){
                    fullString[96].match = true;
                    fullString[97].match = true;
                }
                //Seventh-1
                if (msUtils.exists(fullString[99].number.toString() + fullString[100].number.toString(), numbers)){
                    fullString[99].match = true;
                    fullString[100].match = true;
                }
                //Seventh-2
                if (msUtils.exists(fullString[101].number.toString() + fullString[102].number.toString(), numbers)){
                    fullString[101].match = true;
                    fullString[102].match = true;
                }
                //Seventh-3
                if (msUtils.exists(fullString[103].number.toString() + fullString[104].number.toString(), numbers)){
                    fullString[103].match = true;
                    fullString[104].match = true;
                }
                //Seventh-4
                if (msUtils.exists(fullString[105].number.toString() + fullString[106].number.toString(), numbers)){
                    fullString[105].match = true;
                    fullString[106].match = true;
                }

            }
            return {data: fullString, lotto: Lotto}
        }

        function sToa(string){
            let output = [];
            string.split('').map(function (item){
                output.push({number: item})
            })
            return output
        }

    }
})();
(function (){
    'use strict';
    angular
        .module('app.legendary')
        .controller('legendaryExceptCtrl', legendaryExceptCtrl);

    /** @ngInject */
    function legendaryExceptCtrl($rootScope, $scope, $mdSidenav, $mdMedia, $timeout, $interval, $mdDialog, $document, msUtils, network, selectBox, betId, param){
        let vm = this;
        vm.init = init;

        vm.getOdds = getOdds;
        vm.buildPriceTable = buildPriceTable;

        vm.totalPoint = totalPoint;
        vm.resetBetting = resetBetting;
        vm.submitBetting = submitBetting;
        vm.commitBetting = commitBetting;
        vm.sendBettingRequest = sendBettingRequest;
        vm.purchaseLimit = purchaseLimit;
        vm.calcMoney = calcMoney;
        vm.betId = betId;
        vm.param = param;
        vm.ignorePrice = true;
        vm.selectedCheckbox = [];
        vm.numbers = [];
        vm.betStepper = $rootScope.betStepper;
        vm.stepper = {
            select: function (item) {
                vm.betPoint = item.value;
                angular.forEach(vm.betStepper, function (step) {
                    step.active = item.value === step.value;
                })
            }
        }
        vm.number = {
            select: function (n) {
                angular.forEach(vm.numbers, function (number) {
                    if (number.number === n.number && !number.disabled){
                        number.selected = !number.selected;
                    }
                });
                if (n.selected){
                    vm.betPoint = 0;
                    if ($mdMedia('gt-sm')){
                        $timeout(function () {
                            document.getElementById('bet-input').select();
                        }, 10)
                    }
                }
            },
            selected: function () {
                let ns = [];
                angular.forEach(vm.numbers, function (n) {
                    if (n.selected)
                        ns.push(n.number)
                })
                vm.selected = ns.toString().replace(/\,+/g, ', ')
                return vm.selected
            },
            typing: function (e) {
                if (!vm.keyNumber){return}
                if(e.which === 8){
                    if (vm.keyNumber[vm.keyNumber.length - 1] !== ','){
                        vm.keyNumber = vm.keyNumber.substring(0, vm.keyNumber.length - 1)
                    }
                }
                var value = vm.keyNumber.split(',');
                if (value[value.length-1].length > 1){
                    vm.keyNumber = vm.keyNumber + ','
                }
            },
            submit: function (click) {
                if (!vm.keyNumber){return}
                vm.keyNumber = vm.keyNumber.replace(/\s+/g, '');
                if (vm.keyNumber.length === 0){return}
                var arr = vm.keyNumber.split(',');
                var arrInput = [];
                for (var i = 0; i < arr.length; i++){
                    var number = arr[i].slice(-2).replace(/\s+/g, '');
                    number = number.length < 2 && number.length !== 0 ? '0' + number : number;
                    if (!isNaN(number) && angular.isNumber(+number)){
                        if (number.length !== 0)
                            arrInput.push(number)
                    }
                }
                angular.forEach(vm.numbers, function (number) {
                    if (arrInput.indexOf(number.number) !== -1 && !number.disabled){
                        if (!number.selected){
                            number.selected = true;
                        }
                    }
                });
                vm.keyNumber = '';
                if (!click){
                    vm.betPoint = 0;
                    $timeout(function () {
                        document.getElementById('bet-input').select();
                    }, 10)
                }else{
                    $timeout(function () {
                        document.getElementsByClassName('input-numbers-array')[0].focus();
                    }, 100)
                }
            },
            checkbox: {
                exists: function (item) {
                    return vm.selectedCheckbox.indexOf(item) > -1;
                },
                group: function (id) {
                    var idx = vm.selectedCheckbox.indexOf(id);
                    if (idx > -1) {
                        vm.selectedCheckbox.splice(idx, 1);
                    }else {
                        vm.selectedCheckbox.push(id);
                    }
                    vm.checked = idx === -1;
                    vm.arrayNumber = $.grep(selectBox.list, function(b){
                        return b.id === id;
                    })[0].content;
                    angular.forEach(vm.numbers, function (number) {
                        if ($.grep(vm.arrayNumber, function(b){return b === number.number}).length){
                            number.selected = vm.checked;
                        }
                    });

                    vm.betPoint = 0;
                    if ($mdMedia('gt-sm')){
                        $timeout(function () {
                            document.getElementById('bet-input').select();
                        }, 10)
                    }
                }
            }
        }

        $timeout(function () {
            if ($rootScope.isAuthenticated){
                vm.init()
            }
        }, 300)

        function init() {
            if ($rootScope.LegendParameters !== undefined){
                vm.payouts = $rootScope.LegendParameters.filter(function (pr) {
                    return pr.GameType === 0 && pr.BetType === betId
                })[0].Payouts;
            }else{
                $timeout(function () {
                    vm.init()
                }, 1000)
            }
        }

        vm.basePrice = 0
        if ($rootScope.LegendParameters !== undefined){
            vm.basePrice = $rootScope.LegendParameters.filter(function (pr) {
                return pr.GameType === 0 && pr.BetType === betId
            })[0].Price;
        }

        for (let i = 0; i<100; i++){
            i = i < 10 ? i = '0' + i : i;
            vm.numbers.push({number: i.toString(), disabled: false, selected: false, price: vm.basePrice})
        }

        $scope.$on('oddsPrice::done', function (){
            vm.buildPriceTable();
        })

        function purchaseLimit() {
            if ($rootScope.LegendParameters !== undefined) {
                return $rootScope.LegendParameters.filter(function (item) {
                    return item.GameType === 0 && item.BetType === betId
                })[0].MaxPointPerNumber;
            }
        }

        function buildPriceTable(){
            vm.odds = $rootScope.LegendOdds.filter(function (odd) {
                return odd.GameType === 0 && odd.BetType === betId
            })

            if (vm.odds.length === 0) {
                $timeout(function () {
                    vm.getOdds();
                }, 1000);
                return;
            }

            vm.basePrice = vm.odds[0].Price;
            angular.forEach(vm.numbers, function (num) {
                vm.bPrice = angular.copy(num.price)
                let exNum = $.grep(vm.odds[0].Numbers, function (f) {
                    return f.Number === num.number
                })
                num.price = vm.basePrice
                if (exNum.length){
                    num.disabled = exNum[0].Stop
                    num.price = exNum[0].ExtraPrice !== undefined ? vm.basePrice + exNum[0].ExtraPrice : vm.basePrice
                }
                num.priceChanged = num.price !== vm.bPrice && vm.bPrice !== 0;
            })
            $timeout(function () {
                vm.numbers.map(function (o) {return o.priceChanged = false})
            }, 3000)
        }

        function totalPoint() {
            var total = 0, oddNumbers;
            vm.totalMoney = 0;
            vm.toPoint = 0;
            angular.forEach(vm.numbers, function (num) {
                total += !num.disabled && num.selected ? vm.betPoint : 0;
                if (vm.odds && num.selected){
                    oddNumbers = $.grep(vm.odds[0].Numbers, function (n) {
                        return n.Number === num.number
                    });
                    if (oddNumbers.length && !oddNumbers[0].stop && oddNumbers[0].ExtraPrice !== 0 ){
                        vm.totalMoney += vm.calcMoney(vm.basePrice + oddNumbers[0].ExtraPrice)
                    }else{
                        vm.totalMoney += vm.calcMoney(vm.basePrice)
                    }
                }
            });
            vm.toPoint = total;
            return total;
        }

        function calcMoney(price) {
            //De truot:  Diem * (giá từng con - payout) * (betTimes/minbet)
            //Lo truot:  Diem * (giá từng con - payout) * betTimes
            if (vm.numbers.filter(function (n) {return n.selected}).length < vm.param.minBet){
                return 0
            }
            if (vm.betId === 5){
                return vm.betPoint * (price - vm.payouts)/10
            }else{
                return vm.betPoint * (price - vm.payouts) * vm.param.betTimes
            }

        }

        function resetBetting(){
            angular.forEach(vm.numbers, function (number) {
                number.selected = false;
                vm.betPoint = 0;
            });
            vm.betStepper.map(function (a){
                return a.active = false;
            })
            vm.selectedCheckbox = [];
            vm.keynumber = '';
        }

        function submitBetting() {
            var betObj = {};
            betObj.Term = $rootScope.LegendTermName[0];
            betObj.IgnorePrice = vm.ignorePrice;
            betObj.Tickets = [{
                GameType: 0,
                BetType: betId,
                Items: []
            }];

            angular.forEach(vm.numbers, function (number) {
                if (number.selected && !number.disabled){
                    var Number = {};
                    Number.Numbers = [number.number];
                    Number.Price = number.price;
                    Number.Point = vm.betPoint;
                    betObj.Tickets[0].Items.push(Number)
                }
            });

            let always = JSON.parse(sessionStorage.getItem('alwaysBetting')) !== null;
            if (!$rootScope.isAuthenticated){always = true}
            if (always){
                vm.sendBettingRequest(betObj)
            }else{
                vm.commitBetting(betObj);
            }
        }

        function commitBetting(betObj) {
            $mdDialog.show({
                controller: commitBettingCtrl,
                templateUrl: 'app/main/legendary/betting/prompt.dialog.html',
                parent: angular.element(document.body),
                multiple: true,
                clickOutsideToClose: true,
                locals: {point: vm.toPoint, money: vm.totalMoney, numbers: vm.selected}
            });
            function commitBettingCtrl($rootScope, $scope, $mdDialog, $filter, point, money, numbers){
                $scope.cancel = function() {
                    $mdDialog.cancel();
                };
                $scope.alwaysBetting = false;
                $scope.Point = point;
                $scope.costMoney = money;
                $scope.numbers = numbers;
                $scope.done = function () {
                    if($scope.alwaysBetting){
                        sessionStorage.setItem('alwaysBetting', true);
                    }
                    vm.sendBettingRequest(betObj)
                }
            }
        }

        function sendBettingRequest(betObj) {
            $rootScope.aBettingObject = betObj;
            $rootScope.$broadcast('LegendBetting', {message: 'dialog'});
            vm.resetBetting();
        }

        $document.bind('keydown keypress', function (e) {
            if(e.which === 27) {
                vm.resetBetting();
                e.preventDefault()
            }
        })

        function getOdds(){
            $rootScope.$broadcast('GetOdds', {GameType: 0, BetTypes: [betId]})
        }

        $timeout(function () {
            vm.getOdds();
        })

    }
})();
(function (){
    'use strict';

    angular
        .module('app.legendary')
        .controller('legendNorthern4DCtrl', legendNorthern4DCtrl);

    /** @ngInject */
    function legendNorthern4DCtrl($rootScope, $scope, $mdMedia, $mdDialog, $mdSidenav, $timeout, $state, $interval, $document, msUtils, network, config){
        var vm = this;

        vm.getOdds = getOdds;
        vm.updatePrice = updatePrice;
        vm.changeLabel = changeLabel;
        vm.init = init;
        vm.resetBetting = resetBetting;
        vm.submitBetting = submitBetting;
        vm.totalMoney = totalMoney;
        vm.commitBetting = commitBetting;
        vm.sendBettingRequest = sendBettingRequest;
        vm.ignorePrice = true;
        vm.basePrice = 0;
        vm.config = config;
        $scope.$mdMedia = $mdMedia;

        vm.selectedCheckbox = [];
        vm.betStepper = $rootScope.betStepper;
        vm.stepper = {
            select: function (item) {
                vm.betPoint = item.value;
                angular.forEach(vm.betStepper, function (step) {
                    step.active = item.value === step.value;
                });
            }
        }
        vm.number = {
            select: function (n) {
                angular.forEach(vm.numbers, function (number) {
                    if (number.number === n.number && !number.disabled){
                        number.selected = !number.selected;
                    }
                });
                if (n.selected){
                    vm.betPoint = 0;
                    if ($mdMedia('gt-sm')){
                        $timeout(function () {
                            document.getElementById('bet-input').select();
                        }, 10)
                    }
                }
            },
            selected: function () {
                let ns = [];
                angular.forEach(vm.numbers, function (n) {
                    if (n.selected)
                        ns.push(n.number)
                })
                vm.selected = ns.toString().replace(/\,+/g, ', ')
                return vm.selected
            },
            checkbox: {
                exists: function (item) {
                    return vm.selectedCheckbox.indexOf(item) > -1;
                },
                group: function (id) {
                    var idx = vm.selectedCheckbox.indexOf(id);
                    if (idx > -1) {
                        vm.selectedCheckbox.splice(idx, 1);
                    }else {
                        vm.selectedCheckbox.push(id);
                    }
                    vm.checked = idx === -1;
                    angular.forEach(vm.numbers, function (number, index) {
                        if (id < 10){
                            if (Math.floor(index/10) === id){
                                number.selected = vm.checked;
                            }
                        }else{
                            if (index%10 === id%10){
                                number.selected = vm.checked;
                            }
                        }
                    });
                    vm.betPoint = 0;
                    if ($mdMedia('gt-sm')){
                        $timeout(function () {
                            document.getElementById('bet-input').select();
                        }, 10)
                    }
                }
            }
        }

        $timeout(function () {
            vm.init();
        }, 300);

        $scope.$on('oddsPrice::done', function (){
            vm.updatePrice();
        })

        vm.labels = ['OOXX', 'OXXO', 'OXOX', 'XOXO', 'XOOX', 'XXOO'];

        vm.dialogLabel = dialogLabel;

        function dialogLabel(label){
            $mdDialog.show({
                locals:{label: label, cond4d: vm.cond4d},
                clickOutsideToClose: true,
                escapeToClose: true,
                // fullscreen: true,
                templateUrl: 'app/main/legendary/dialog.label.html',
                controller: dialogLabelCtrl
            }).then(function (label) {
                vm.changeLabel(label)
            }, function () {});
            function dialogLabelCtrl($scope, $mdDialog, label, cond4d) {
                $scope.cancel = function() {
                    $mdDialog.cancel();
                }
                $scope.changeLabel = function(label){
                    $mdDialog.hide(label);
                }
                $scope.label = label;
                $scope.cond4d = cond4d;
                $scope.popLabels = [];
                for (let i = 0; i < 100; i++){
                    i = i < 10 ? '0' + i : i;
                    i = i.toString();
                    let j = i.split('');
                    if (label === 'OOXX') $scope.popLabels.push({id: '^' + i + '([0-9]+)$', name: i + 'XX'});
                    if (label === 'OXXO') $scope.popLabels.push({id: '^' + j[0] + '([0-9]+)+' + j[1] + '$', name: i.split('').join('XX')});
                    if (label === 'OXOX') $scope.popLabels.push({id: '^' + j[0] + '([0-9]+)+' + j[1] + '([0-9]+)$', name: i.split('').join('X') + 'X'});
                    if (label === 'XOXO') $scope.popLabels.push({id: '^([0-9]+)' + j[0] + '([0-9]+)' + j[1] +'$', name: 'X' + i.split('').join('X')});
                    if (label === 'XOOX') $scope.popLabels.push({id: '^([0-9]+)' + i + '([0-9]+)$', name: 'X' + i + 'X'});
                    if (label === 'XXOO') $scope.popLabels.push({id: '^([0-9]+)' + i + '$', name: 'XX' + i})
                }
            }
        }

        if ($rootScope.LegendParameters !== undefined){
            vm.basePrice = $rootScope.LegendParameters.filter(function (pr) {
                return pr.GameType === config.GameType && pr.BetType === config.BetType
            })[0].Price;
        }

        vm.numbers = [];

        for (let i = 0; i < 100; i++) {
            if (i < 10){i = '000' + i}else if(i < 100){i = '00' + i}else if(i < 1000){i = '0' + i}
            let number = {
                number: i.toString(),
                selected: false,
                price: vm.basePrice,
                disabled: false
            };
            vm.numbers.push(number);
        }

        function init() {
            if ($rootScope.isAuthenticated){
                if ($rootScope.LegendParameters !== undefined){
                    let myParamValues = $rootScope.LegendParameters.filter(function(item) { return item.GameType === config.GameType && item.BetType === config.BetType })[0];
                    vm.purchaseLimit = myParamValues.MaxPointPerNumber;
                    vm.payouts = myParamValues.Payouts;
                }else{
                    $timeout(function () {
                        vm.init()
                    }, 1000)
                }
            }
        }

        function changeLabel(cond) {
            vm.cond4d = cond !== undefined ? cond : undefined;
            vm.selectedCheckbox = [];
            vm.numbers = [];

            for (let i = 0; i < 10000; i++) {
                if (i < 10){i = '000' + i}else if(i < 100){i = '00' + i}else if(i < 1000){i = '0' + i}
                let number = {
                    number: i.toString(),
                    selected: false,
                    price: 0,
                    disabled: false
                };

                if (cond === undefined){
                    vm.numbers.push(number);
                }else{
                    if (i.toString().match(cond.id)){
                        vm.numbers.push(number);
                    }
                }
            }
            vm.numbers = vm.numbers.slice(0, 100);
            if (cond !== undefined){
                $timeout(function () {
                    vm.updatePrice()
                }, 200)
            }
        }

        function updatePrice() {
            vm.odds = $rootScope.LegendOdds.filter(function (odd) {
                return odd.GameType === config.GameType && odd.BetType === config.BetType
            })

            if (vm.odds.length === 0) {
                $timeout(function () {
                    vm.getOdds();
                }, 1000);
                return;
            }

            vm.basePrice = vm.odds[0].Price;
            angular.forEach(vm.numbers, function (num) {
                vm.bPrice = angular.copy(num.price);
                var exNum = $.grep(vm.odds[0].Numbers, function (f) {
                    return f.Number === num.number
                });
                num.price = vm.basePrice;
                if (exNum.length){
                    num.disabled = exNum[0].Stop;
                    num.price = exNum[0].ExtraPrice !== undefined ? vm.basePrice + exNum[0].ExtraPrice : vm.basePrice
                }
                num.priceChanged = num.price !== vm.bPrice && vm.bPrice !== 0;
            });
            $timeout(function () {
                vm.numbers.map(function (o) {return o.priceChanged = false})
            }, 3000)
        }

        function resetBetting(){
            angular.forEach(vm.numbers, function (number) {
                number.selected = false;
                number.point = 0;
            });
            vm.betStepper.map(function (a){
                return a.active = false;
            });
            vm.selectedCheckbox = [];
            vm.betPoint = 0;
        }

        function totalMoney() {
            vm.sumPoint = 0;
            vm.sumMoney = 0;
            vm.betPoint = isNaN(vm.betPoint) ? 0 : vm.betPoint;
            angular.forEach(vm.numbers, function (num) {
                if (num.selected && !num.disabled){
                    vm.sumPoint += vm.betPoint;
                    vm.sumMoney += num.price * vm.betPoint * config.BetTimes
                }
            });
            return vm.sumMoney
        }

        function submitBetting() {
            let Alias;
            if (config.BetType === 13){
                Alias = 524288
            }else if (config.BetType === 14){
                Alias = 2097152
            }else if (config.BetType === 19){
                Alias = 1048576
            }

            var betObj = {
                Term: $rootScope.LegendTermName[config.GameType],
                IgnorePrice: vm.ignorePrice,
                Tickets: [{
                    GameType: config.GameType,
                    BetType: config.BetType,
                    Items: [],
                    Additional: {
                        Row: 0,
                        Alias: Alias,
                        Reverse: false
                    }
                }]
            };
            angular.forEach(vm.numbers, function (number) {
                if (number.selected && !number.disabled){
                    var Number = {};
                    Number.Numbers = [number.number];
                    Number.Price = number.price;
                    Number.Point = vm.betPoint;
                    betObj.Tickets[0].Items.push(Number)
                }
            });

            let always = JSON.parse(sessionStorage.getItem('alwaysBetting')) !== null;
            if (!$rootScope.isAuthenticated){always = true}
            if (always){
                vm.sendBettingRequest(betObj)
            }else{
                vm.commitBetting(betObj);
            }
        }

        function commitBetting(betObj) {
            $mdDialog.show({
                controller: commitBettingCtrl,
                templateUrl: 'app/main/legendary/betting/prompt.dialog.html',
                parent: angular.element(document.body),
                multiple: true,
                clickOutsideToClose: true,
                locals: {point: vm.sumPoint, money: vm.sumMoney, numbers: vm.selected}
            });
            function commitBettingCtrl($rootScope, $scope, $mdDialog, $filter, point, money, numbers){
                $scope.cancel = function() {
                    $mdDialog.cancel();
                };
                $scope.alwaysBetting = false;
                $scope.Point = point;
                $scope.costMoney = money;
                $scope.numbers = numbers;
                $scope.done = function () {
                    if($scope.alwaysBetting){
                        sessionStorage.setItem('alwaysBetting', true);
                    }
                    vm.sendBettingRequest(betObj)
                }
            }
        }

        function sendBettingRequest(betObj) {
            $rootScope.aBettingObject = betObj;
            $rootScope.$broadcast('LegendBetting', {message: 'dialog'});
            vm.resetBetting();
        }

        $document.bind('keydown keypress', function (e) {
            if(e.which === 27) {
                vm.resetBetting();
                e.preventDefault()
            }
        })

        function getOdds(){
            $rootScope.$broadcast('GetOdds', {GameType: config.GameType, BetTypes: [config.BetType]})
        }

        $timeout(function () {
            vm.getOdds();
        })

    }
})();
(function (){
    'use strict';

    angular
        .module('app.legendary')
        .controller('southernQuickCtrl', southernQuickCtrl);

    /** @ngInject */
    function southernQuickCtrl($scope, $rootScope, $mdDialog, msUtils, GameType){
        let vm = this;
        vm.GameType = GameType;
        vm.parseNumbers = parseNumbers;
        vm.resetBetting = resetBetting;
        vm.buildTable = buildTable;
        vm.repeatLimitTo = repeatLimitTo;
        vm.checkAllowInput = checkAllowInput;
        vm.totalPoint = totalPoint;
        vm.submitBetting = submitBetting;
        vm.commitBetting = commitBetting;
        vm.sendBettingRequest = sendBettingRequest;

        vm.betStepper = $rootScope.betStepper;
        vm.stepper = {
            select: function (item) {
                vm.betPoint = item.value;
                angular.forEach(vm.betStepper, function (step) {
                    step.active = item.value === step.value;
                });
            }
        }
        vm.viewFull = {2: false, 3: false, 4: false};
        vm.numbers = {2: [], 3: [], 4: []};
        vm.numbersArr = [
            {id: 0, text: '0', type: 'single'},
            {id: 1, text: '1', type: 'single'},
            {id: 2, text: '2', type: 'single'},
            {id: 3, text: '3', type: 'single'},
            {id: 4, text: '4', type: 'single'},
            {id: 5, text: '5', type: 'single'},
            {id: 6, text: '6', type: 'single'},
            {id: 7, text: '7', type: 'single'},
            {id: 8, text: '8', type: 'single'},
            {id: 9, text: '9', type: 'single'}
        ];

        vm.BetTypes = [
            {
                group: '2D',
                numbers: 2,
                BetTypes: [
                    {
                        Label: '2D Đầu',
                        BetType: 7
                    },
                    {
                        Label: '2D Đuôi',
                        BetType: 8
                    },
                    {
                        Label: '2D 18Lô',
                        BetType: 15
                    },
                    {
                        Label: '2D 18Lô Đầu',
                        BetType: 30
                    }
                ]
            },
            {
                group: '3D',
                numbers: 3,
                BetTypes: [
                    {
                        Label: '3D Đầu',
                        BetType: 10
                    },
                    {
                        Label: '3D Đuôi',
                        BetType: 11
                    },
                    {
                        Label: '3D 17Lô',
                        BetType: 17
                    }
                ]
            },
            {
                group: '4D',
                numbers: 4,
                BetTypes: [
                    {
                        Label: '4D Đuôi',
                        BetType: 13
                    },
                    {
                        Label: '4D 16Lô',
                        BetType: 19
                    }
                ]
            }
        ];

        vm.selected = [];
        vm.checkAllow = function(item, BetType){
            if (BetType !== undefined && $rootScope.LegendCurrentTerm !== undefined){
                let currentBetTypes = $rootScope.LegendCurrentTerm.filter(function(g){
                    return g.GameType === 1
                })[0].Games
                let currentAllowed = currentBetTypes.filter(function(b){
                    return b.BetType === BetType
                })[0].Status === 0
                if (!currentAllowed){
                    return vm.numbers[item].length > 100 || vm.numbers[item].length === 0
                }else{
                    return true
                }
            }else{
                return vm.numbers[item].length > 100 || vm.numbers[item].length === 0
            }
        };

        vm.Thousands = [];
        vm.Hundreds = [];
        vm.Dozens = [];
        vm.Units = [];

        vm.exists = function (item, list) {
            return list.indexOf(item) > -1;
        };
        vm.toggle = function (item, list) {
            let idx = list.indexOf(item);
            if (idx > -1) {
                list.splice(idx, 1);
            } else {
                list.push(item);
            }
            vm.parseNumbers();
        };
        vm.toggleEven = function (ar, list) {
            let check = list.some(function (id) {
                return msUtils.exists(id, ar)
            });
            ar.map(function (id) {
                let idx = list.indexOf(id);
                if (check && list.indexOf(id) > -1) {
                    list.splice(idx, 1);
                }
                if (!check){
                    list.push(id);
                }
            });
            vm.parseNumbers();
        };
        vm.clear = function (list) {
            list.length = 0;
            vm.parseNumbers();
        }

        function parseNumbers() {
            vm.numberParsed = {2: [], 3: [], 4: []};
            vm.Thousands.map(function (t) {
                vm.Hundreds.map(function (h) {
                    vm.Dozens.map(function (d) {
                        vm.Units.map(function (u) {
                            vm.numberParsed[4].push( t.toString() + h.toString() + d.toString() + u.toString() );
                        })
                    })
                })
            })
            vm.numberParsed[4].sort();
            vm.Hundreds.map(function (h) {
                vm.Dozens.map(function (d) {
                    vm.Units.map(function (u) {
                        vm.numberParsed[3].push( h.toString() + d.toString() + u.toString() );
                    })
                })
            })
            vm.numberParsed[3].sort();
            vm.Dozens.map(function (d) {
                vm.Units.map(function (u) {
                    vm.numberParsed[2].push( d.toString() + u.toString() );
                })
            })
            vm.numberParsed[2].sort();

            vm.buildTable();
        }

        function buildTable() {
            vm.numbers = {2: [], 3: [], 4: []};
            vm.numberParsed[2].map(function (n) {
                vm.numbers[2].push({number: n})
            })
            vm.numberParsed[3].map(function (n) {
                vm.numbers[3].push({number: n})
            })
            vm.numberParsed[4].map(function (n) {
                vm.numbers[4].push({number: n})
            });
            vm.viewFull = {2: false, 3: false, 4: false};
            vm.betPoint = 0;

        }

        function repeatLimitTo(index) {
            if (vm.viewFull[index]){
                return 100
            }else{
                return 24
            }
        }

        function totalPoint() {
            if ( $rootScope.isAuthenticated ){
                vm.Parameters = $rootScope.LegendParameters
            }else{
                vm.Parameters = [
                    {
                        "GameType": 0,
                        "BetType": 0,
                        "Payouts": 70000,
                        "Price": 750
                    },
                    {
                        "GameType": 0,
                        "BetType": 1,
                        "Payouts": 80000,
                        "Price": 22690
                    },
                    {
                        "GameType": 0,
                        "BetType": 29,
                        "Payouts": 80000,
                        "Price": 22500
                    },
                    {
                        "GameType": 0,
                        "BetType": 2,
                        "Payouts": 10000,
                        "Price": 580
                    },
                    {
                        "GameType": 0,
                        "BetType": 3,
                        "Payouts": 40000,
                        "Price": 540
                    },
                    {
                        "GameType": 0,
                        "BetType": 4,
                        "Payouts": 100000,
                        "Price": 470
                    },
                    {
                        "GameType": 0,
                        "BetType": 5,
                        "Payouts": 650,
                        "Price": 71000
                    },
                    {
                        "GameType": 0,
                        "BetType": 6,
                        "Payouts": 21100,
                        "Price": 81000
                    },
                    {
                        "GameType": 0,
                        "BetType": 11,
                        "Payouts": 650000,
                        "Price": 690
                    },
                    {
                        "GameType": 0,
                        "BetType": 12,
                        "Payouts": 650000,
                        "Price": 15430
                    },
                    {
                        "GameType": 0,
                        "BetType": 13,
                        "Payouts": 6000000,
                        "Price": 690
                    },
                    {
                        "GameType": 0,
                        "BetType": 14,
                        "Payouts": 6000000,
                        "Price": 690
                    },
                    {
                        "GameType": 0,
                        "BetType": 20,
                        "Payouts": 80000,
                        "Price": 21740
                    },
                    {
                        "GameType": 0,
                        "BetType": 21,
                        "Payouts": 70000,
                        "Price": 730
                    },
                    {
                        "GameType": 0,
                        "BetType": 26,
                        "Payouts": 800000,
                        "Price": 19540
                    },
                    {
                        "GameType": 1,
                        "BetType": 2,
                        "Payouts": 800000,
                        "Price": 775
                    },
                    {
                        "GameType": 1,
                        "BetType": 3,
                        "Payouts": 5000000,
                        "Price": 775
                    },
                    {
                        "GameType": 1,
                        "BetType": 4,
                        "Payouts": 20000000,
                        "Price": 775
                    },
                    {
                        "GameType": 1,
                        "BetType": 7,
                        "Payouts": 75000,
                        "Price": 775
                    },
                    {
                        "GameType": 1,
                        "BetType": 8,
                        "Payouts": 75000,
                        "Price": 775
                    },
                    {
                        "GameType": 1,
                        "BetType": 10,
                        "Payouts": 650000,
                        "Price": 690
                    },
                    {
                        "GameType": 1,
                        "BetType": 11,
                        "Payouts": 650000,
                        "Price": 690
                    },
                    {
                        "GameType": 1,
                        "BetType": 13,
                        "Payouts": 6000000,
                        "Price": 690
                    },
                    {
                        "GameType": 1,
                        "BetType": 15,
                        "Payouts": 75000,
                        "Price": 773
                    },
                    {
                        "GameType": 1,
                        "BetType": 30,
                        "Payouts": 75000,
                        "Price": 13860
                    },
                    {
                        "GameType": 1,
                        "BetType": 17,
                        "Payouts": 650000,
                        "Price": 690
                    },
                    {
                        "GameType": 1,
                        "BetType": 19,
                        "Payouts": 6000000,
                        "Price": 690
                    },
                    {
                        "GameType": 1,
                        "BetType": 27,
                        "Payouts": 75000,
                        "Price": 774
                    },
                    {
                        "GameType": 1,
                        "BetType": 28,
                        "Payouts": 650000,
                        "Price": 690
                    }
                ]
            }
            let total = 0;
            vm.totalMoney = 0;
            vm.toPoint = 0;

            for (let key in vm.numbers){
                if(vm.numbers.hasOwnProperty(key)){
                    let value = vm.numbers[key];
                    key = parseInt(key);
                    if (key === 2){
                        total += vm.betPoint * value.length * vm.selected.filter(function (s) {
                            return msUtils.exists(s, [7,8,15,30])
                        }).length;

                        [7,8,30].map(function (BetType) {
                            if (msUtils.exists(BetType, vm.selected)){
                                let Price = vm.Parameters.filter(function (pam) {
                                    return pam.GameType === 1 && pam.BetType === BetType
                                })[0].Price;
                                vm.totalMoney += vm.betPoint * value.length * Price
                            }
                        })
                        if (msUtils.exists(15, vm.selected)){
                            let Parameters = vm.Parameters.filter(function (pam) {
                                return pam.GameType === 1 && pam.BetType === 15
                            })[0];
                            vm.totalMoney += vm.betPoint * value.length * Parameters.Price * 18
                        }
                    }else if (key === 3){
                        total += vm.betPoint * value.length * vm.selected.filter(function (s) {
                            return msUtils.exists(s, [10,11])
                        }).length;

                        [10,11].map(function (BetType) {
                            if (msUtils.exists(BetType, vm.selected)){
                                let Price = vm.Parameters.filter(function (pam) {
                                    return pam.GameType === 1 && pam.BetType === BetType
                                })[0].Price;
                                vm.totalMoney += vm.betPoint * value.length * Price
                            }
                        })
                        if (msUtils.exists(17, vm.selected)){
                            let Parameters = vm.Parameters.filter(function (pam) {
                                return pam.GameType === 1 && pam.BetType === 17
                            })[0];
                            vm.totalMoney += vm.betPoint * value.length * Parameters.Price * 17
                        }

                    }else if (key === 4){
                        total += vm.betPoint * value.length * vm.selected.filter(function (s) {
                            return msUtils.exists(s, [13,19])
                        }).length;

                        if (msUtils.exists(13, vm.selected)){
                            let Price = vm.Parameters.filter(function (pam) {
                                return pam.GameType === 1 && pam.BetType === 13
                            })[0].Price;
                            vm.totalMoney += vm.betPoint * value.length * Price
                        }
                        if (msUtils.exists(19, vm.selected)){
                            let Parameters = vm.Parameters.filter(function (pam) {
                                return pam.GameType === 1 && pam.BetType === 19
                            })[0];
                            vm.totalMoney += vm.betPoint * value.length * Parameters.Price * 16
                        }

                    }
                }
            }
            vm.toPoint = total;
            return total;
        }

        function resetBetting() {
            vm.viewFull = {2: false, 3: false, 4: false};
            vm.numbers = {2: [], 3: [], 4: []};
            vm.Thousands = [];
            vm.Hundreds = [];
            vm.Dozens = [];
            vm.Units = [];
            vm.betStepper.map(function (a){
                return a.active = false;
            });
        }
        
        function checkAllowInput() {
            return (vm.numbers[2].length === 0 || vm.numbers[2].length > 100)
        }

        function submitBetting() {

            let betObj = {};
            betObj.Term = $rootScope.LegendTermName[1];
            betObj.IgnorePrice = true;
            betObj.Tickets = [];

            vm.selected.map(function (betType) {
                let Ticket = {};
                Ticket.GameType = GameType;
                Ticket.BetType = betType;
                Ticket.Items = [];

                let Price = vm.Parameters.filter(function (pam) {
                    return pam.GameType === 1 && pam.BetType === betType
                })[0].Price;

                if (msUtils.exists(betType, [7,8,15,30])){
                    vm.numbers[2].map(function (number) {
                        let Number = {};
                        Number.Numbers = [number.number];
                        Number.Price = Price;
                        Number.Point = vm.betPoint;
                        Ticket.Items.push(Number)
                    })
                }else if (msUtils.exists(betType, [10,11,17])){
                    vm.numbers[3].map(function (number) {
                        let Number = {};
                        Number.Numbers = [number.number];
                        Number.Price = Price;
                        Number.Point = vm.betPoint;
                        Ticket.Items.push(Number)
                    })
                }else if(msUtils.exists(betType, [13,19])){
                    vm.numbers[4].map(function (number) {
                        let Number = {};
                        Number.Numbers = [number.number];
                        Number.Price = Price;
                        Number.Point = vm.betPoint;
                        Ticket.Items.push(Number)
                    })
                }
                if (Ticket.Items.length !== 0 && Ticket.Items.length <= 100 ){
                    betObj.Tickets.push(Ticket);
                }
            })

            let always = JSON.parse(sessionStorage.getItem('alwaysBetting')) !== null;
            if (!$rootScope.isAuthenticated){always = true}
            if (always){
                vm.sendBettingRequest(betObj)
            }else{
                vm.commitBetting(betObj);
            }
        }

        function commitBetting(betObj) {
            let numbers = [];
            if ( msUtils.exists(7, vm.selected) || msUtils.exists(8, vm.selected) || msUtils.exists(15, vm.selected)  || msUtils.exists(30, vm.selected) ){
                angular.forEach(vm.numbers[2], function (n) {
                    numbers.push(n.number)
                })
            }
            if ( msUtils.exists(10, vm.selected) || msUtils.exists(11, vm.selected) || msUtils.exists(17, vm.selected) ){
                angular.forEach(vm.numbers[3], function (n) {
                    numbers.push(n.number)
                })
            }
            if ( msUtils.exists(13, vm.selected) || msUtils.exists(19, vm.selected) ){
                angular.forEach(vm.numbers[4], function (n) {
                    numbers.push(n.number)
                })
            }
            numbers = numbers.toString().replace(/\,+/g, ', ')
            $mdDialog.show({
                controller: commitBettingCtrl,
                templateUrl: 'app/main/legendary/betting/prompt.dialog.html',
                parent: angular.element(document.body),
                multiple: true,
                clickOutsideToClose: true,
                locals: {point: vm.toPoint, money: vm.totalMoney, numbers: numbers}
            });
            function commitBettingCtrl($rootScope, $scope, $mdDialog, $filter, point, money, numbers){
                $scope.cancel = function() {
                    $mdDialog.cancel();
                };
                $scope.alwaysBetting = false;
                $scope.Point = point;
                $scope.costMoney = money;
                $scope.numbers = numbers;
                $scope.done = function () {
                    if($scope.alwaysBetting){
                        sessionStorage.setItem('alwaysBetting', true);
                    }
                    vm.sendBettingRequest(betObj)
                }
            }
        }

        function sendBettingRequest(betObj) {
            $rootScope.aBettingObject = betObj;
            $rootScope.$broadcast('LegendBetting', {message: 'dialog'});
            vm.resetBetting();
        }
    }
})();
(function (){
    'use strict';

    angular
        .module('app.legendary')
        .controller('legendNorthern3DCtrl', legendNorthern3DCtrl);

    /** @ngInject */
    function legendNorthern3DCtrl($rootScope, $scope, $mdMedia, $mdSidenav, $timeout, $state, $interval, $mdDialog, $document, msUtils, network, config){
        var vm = this;
        vm.init = init;

        vm.getOdds = getOdds;
        vm.changeLabel = changeLabel;
        vm.updatePrice = updatePrice;
        vm.resetBetting = resetBetting;
        vm.submitBetting = submitBetting;
        vm.totalMoney = totalMoney;
        vm.commitBetting = commitBetting;
        vm.sendBettingRequest = sendBettingRequest;

        vm.TabSelected = TabSelected;
        vm.build3DTable = build3DTable;
        vm.checkPointDisabled = checkPointDisabled;


        vm.ignorePrice = true;
        vm.config = config;
        vm.selectedCheckbox = []
        vm.selected3dNumber = [];

        $scope.$mdMedia = $mdMedia;

        vm.betStepper = $rootScope.betStepper;
        vm.stepper = {
            select: function (item) {
                vm.betPoint = item.value;
                angular.forEach(vm.betStepper, function (step) {
                    step.active = item.value === step.value;
                });
            }
        }
        vm.number = {
            select: function (n) {
                angular.forEach(vm.numbers, function (number) {
                    if (number.number === n.number && !number.disabled){
                        number.selected = !number.selected;
                    }
                });
                if (n.selected){
                    vm.betPoint = 0;
                    if ($mdMedia('gt-sm')){
                        $timeout(function () {
                            document.getElementById('bet-input').select();
                        }, 10)
                    }
                }
            },
            selected: function () {
                let ns = [];
                angular.forEach(vm.numbers, function (n) {
                    if (n.selected)
                        ns.push(n.number)
                })
                vm.selected = ns.toString().replace(/\,+/g, ', ')
                return vm.selected
            },
            checkbox: {
                exists: function (item) {
                    return vm.selectedCheckbox.indexOf(item) > -1;
                },
                group: function (id) {
                    var idx = vm.selectedCheckbox.indexOf(id);
                    if (idx > -1) {
                        vm.selectedCheckbox.splice(idx, 1);
                    }else {
                        vm.selectedCheckbox.push(id);
                    }
                    vm.checked = idx === -1;
                    vm.betPoint = 0;
                    angular.forEach(vm.numbers, function (number, index) {
                        if (!number.disabled){
                            if (id < 10){
                                if (Math.floor(index/10) === id){
                                    number.selected = vm.checked;
                                }
                            }else{
                                if (index%10 === id%10){
                                    number.selected = vm.checked;
                                }
                            }
                        }
                    })
                }
            },
            typing3d: function (e) {
                if (!vm.keyNumber3D){return}
                if(e.which === 8){
                    if (vm.keyNumber3D[vm.keyNumber3D.length - 1] !== ','){
                        vm.keyNumber3D = vm.keyNumber3D.substring(0, vm.keyNumber3D.length - 1)
                    }
                }
                var value = vm.keyNumber3D.split(',');
                if (value[value.length-1].length > 2){
                    vm.keyNumber3D = vm.keyNumber3D + ','
                }
            },
            submit3D: function (click) {
                if (!vm.keyNumber3D || vm.disabled3D){return}
                vm.keyNumber3D = vm.keyNumber3D.replace(/\s+/g, '');
                if (vm.keyNumber3D.length === 0){return}
                let arr = vm.keyNumber3D.split(',');

                for (let i = 0; i < arr.length; i++){
                    let number = arr[i].slice(-3).replace(/\s+/g, '');
                    if (number.length){
                        number = msUtils.pad(number, 3)
                        if (!isNaN(number) && angular.isNumber(+number)){
                            if (number.length !== 0)
                                vm.selected3dNumber.push(number)
                        }
                    }
                }
                vm.selected3dNumber = msUtils.removeDup(vm.selected3dNumber)
                vm.build3DTable();

                vm.keyNumber3D = '';
                vm.betPoint = 0;

                if (!click){
                    $timeout(function () {
                        document.getElementById('bet-input').select();
                    }, 10)
                }else{
                    $timeout(function () {
                        document.getElementsByClassName('input-numbers-array')[0].focus();
                    }, 100)
                }
            },
        }

        $timeout(function () {
            if ($rootScope.isAuthenticated){
                vm.init()
            }
        }, 300)

        vm.basePrice = 0
        if ($rootScope.LegendParameters !== undefined){
            vm.basePrice = $rootScope.LegendParameters.filter(function (pr) {
                return pr.GameType === config.GameType && pr.BetType === config.BetType
            })[0].Price;
        }

        vm.numbers = [];
        for (let i = 0; i < 1000; i++){
            if (i < 10){i = '00' + i}else if(i < 100){i = '0' + i}

            let number = {
                number: i.toString(),
                selected: false,
                price: vm.basePrice,
                disabled: false
            };
            if (Math.floor(i/100) === 0){
                vm.numbers.push(number)
            }
        }

        function init() {
            if ($rootScope.LegendParameters !== undefined){
                let myParamValues = $rootScope.LegendParameters.filter(function(item) { return item.GameType === config.GameType && item.BetType === config.BetType })[0];
                vm.purchaseLimit = myParamValues.MaxPointPerNumber;
                vm.payouts = myParamValues.Payouts;
            }else{
                $timeout(function () {
                    vm.init()
                }, 1000)
            }
        }

        $scope.$on('oddsPrice::done', function (){
            vm.updatePrice();
        })

        function TabSelected(i) {
            i = i === undefined ? vm.onTabSelected : i;
            vm.onTabSelected = i;
            vm.resetBetting();
        }

        function build3DTable(){
            vm.number3Ds = [];
            angular.forEach(vm.selected3dNumber, function (n) {
                let exNum = $.grep(vm.odds[0].Numbers, function (f) {
                    return f.Number === n
                });
                if (exNum.length && exNum[0].Stop) {
                    vm.number3Ds.push({number: n, disabled: true})
                }else{
                    vm.number3Ds.push({number: n})
                }
            })
        }

        function checkPointDisabled(){
            if (vm.onTabSelected === 0){
                return vm.numbers.filter(function (n) {return n.selected}).length === 0
            }else if (vm.onTabSelected === 1){
                return vm.selected3dNumber.length === 0
            }
        }

        function changeLabel(value) {
            vm.label = value
            vm.selectedCheckbox = []
            vm.numbers = []

            for (let i = 0; i < 1000; i++){
                if (i < 10){i = '00' + i}else if(i < 100){i = '0' + i}
                let number = {
                    number: i.toString(),
                    selected: false,
                    price: 0,
                    disabled: false
                }
                if (value < 10){
                    if (Math.floor(i/100) === value){
                        vm.numbers.push(number)
                    }
                }else{
                    if (Math.floor((i%100)/10) === value % 10){
                        vm.numbers.push(number)
                    }
                }
            }
            vm.updatePrice()
        }

        function updatePrice() {
            vm.odds = $rootScope.LegendOdds.filter(function (odd) {
                return odd.GameType === config.GameType && odd.BetType === config.BetType
            })

            if (vm.odds.length === 0) {
                $timeout(function () {
                    vm.getOdds();
                }, 1000);
                return;
            }


            vm.basePrice = vm.odds[0].Price;
            angular.forEach(vm.numbers, function (num) {
                vm.bPrice = angular.copy(num.price);
                var exNum = $.grep(vm.odds[0].Numbers, function (f) {
                    return f.Number === num.number
                });
                num.price = vm.basePrice;
                if (exNum.length){
                    num.disabled = exNum[0].Stop
                    num.price = exNum[0].ExtraPrice !== undefined ? vm.basePrice + exNum[0].ExtraPrice : vm.basePrice
                }
                num.priceChanged = num.price !== vm.bPrice && vm.bPrice !== 0
            })
            $timeout(function () {
                vm.numbers.map(function (o) {return o.priceChanged = false})
            }, 3000)
        }

        function resetBetting(){
            vm.numbers.map(function (n) {return n.selected = false});
            vm.betStepper.map(function (a){
                return a.active = false;
            });
            vm.betPoint = 0;
            vm.selected3dNumber = [];
            vm.number3Ds = [];
            vm.selectedCheckbox = [];
            vm.keyNumber3D = '';
        }

        function totalMoney() {
            vm.sumPoint = 0;
            vm.sumMoney = 0;
            vm.betPoint = isNaN(vm.betPoint) ? 0 : vm.betPoint;

            if (vm.onTabSelected === 0){
                angular.forEach(vm.numbers, function (num) {
                    if (num.selected && !num.disabled){
                        vm.sumPoint += vm.betPoint;
                        vm.sumMoney += num.price * vm.betPoint * config.BetTimes
                    }
                });
            }else{
                angular.forEach(vm.number3Ds, function (n){
                    if (!n.disabled){
                        vm.sumPoint += vm.betPoint;
                        vm.sumMoney += vm.betPoint * vm.basePrice;
                    }
                })
            }
            return vm.sumMoney
        }

        function submitBetting() {
            let betObj = {
                Term: $rootScope.LegendTermName[config.GameType],
                IgnorePrice: vm.ignorePrice,
                Tickets: [{
                    GameType: config.GameType,
                    BetType: config.BetType,
                    Items: []
                }]
            };
            if (vm.onTabSelected === 0){
                angular.forEach(vm.numbers, function (number) {
                    if (number.selected && !number.disabled){
                        let Number = {};
                        Number.Numbers = [number.number];
                        Number.Price = number.price;
                        Number.Point = vm.betPoint;
                        betObj.Tickets[0].Items.push(Number)
                    }
                });
            }else{
                angular.forEach(vm.number3Ds, function (number) {
                    if (!number.disabled){
                        let Number = {};
                        Number.Numbers = [number.number];
                        Number.Point = vm.betPoint;
                        Number.Price = vm.basePrice;
                        betObj.Tickets[0].Items.push(Number)
                    }
                })
            }
            let always = JSON.parse(sessionStorage.getItem('alwaysBetting')) !== null;
            if (!$rootScope.isAuthenticated){always = true}
            if (always){
                vm.sendBettingRequest(betObj)
            }else{
                vm.commitBetting(betObj);
            }
        }

        function commitBetting(betObj) {
            let numbers;
            if (vm.onTabSelected === 0){
                numbers = vm.selected
            }else{
                numbers = [];
                angular.forEach(vm.number3Ds, function (n) {
                    numbers.push(n.number)
                })
                numbers = numbers.toString().replace(/\,+/g, ', ')
            }
            $mdDialog.show({
                controller: commitBettingCtrl,
                templateUrl: 'app/main/legendary/betting/prompt.dialog.html',
                parent: angular.element(document.body),
                multiple: true,
                clickOutsideToClose: true,
                locals: {point: vm.sumPoint, money: vm.sumMoney, numbers: numbers}
            });
            function commitBettingCtrl($rootScope, $scope, $mdDialog, $filter, point, money, numbers){
                $scope.cancel = function() {
                    $mdDialog.cancel();
                };
                $scope.alwaysBetting = false;
                $scope.Point = point;
                $scope.costMoney = money;
                $scope.numbers = numbers;
                $scope.done = function () {
                    if($scope.alwaysBetting){
                        sessionStorage.setItem('alwaysBetting', true);
                    }
                    vm.sendBettingRequest(betObj)
                }
            }
        }

        function sendBettingRequest(betObj) {
            $rootScope.aBettingObject = betObj;
            $rootScope.$broadcast('LegendBetting', {message: 'dialog'});
            vm.resetBetting();
        }

        $document.bind('keydown keypress', function (e) {
            if(e.which === 27) {
                vm.resetBetting();
                e.preventDefault()
            }
        })

        function getOdds(){
            $rootScope.$broadcast('GetOdds', {GameType: config.GameType, BetTypes: [config.BetType]})
        }

        $timeout(function () {
            vm.getOdds();
        })

    }
})();
(function (){
    'use strict';
    angular.module('app.account')
        .controller('legendBetListCtrl', legendBetListCtrl)
        .filter('legendBlBet', legendBlBet);
    function legendBetListCtrl($rootScope, $scope, $mdDialog, $timeout, network, $state, msUtils, message){
        var vm = this;
        vm.betList = betList;
        vm.initBetList = initBetList;
        vm.viewBatch = viewBatch;
        vm.betList();

        vm.tickets = [];
        function betList(ltId){
            vm.loading = true;
            ltId = ltId === undefined ? '' : ltId;
            let data = {
                Limit: 100,
                LastId: ltId
            };

            if ($rootScope.currentTerm !== undefined){
                network.Legend.Ticket.Current(data).then(function (resp) {
                    vm.tickets = vm.tickets.concat(resp);
                    vm.OriginalTick = angular.copy(vm.tickets);
                    vm.initBetList(vm.tickets);
                    vm.hasMoreTickets = resp.length === 100;
                })
            }else{
                $timeout(function () {
                    vm.betList();
                }, 1000)
            }
        }

        function initBetList(resp){
            vm.loading = false;
            vm.sumMoney = 0;
            vm.betListFull = [];
            angular.forEach(resp, function (b) {
                vm.sumMoney += b.CancelledAt === undefined ? b.Amount : 0;
            });
            var groupResp = resp.groupBy(function(o){return JSON.stringify({a: o.BatchId})});
            angular.forEach(groupResp, function (grouped) {
                grouped.group.sort(function (a, b) {
                    return a.GameType - b.GameType || a.BetType - b.BetType
                });
                if (grouped.group[0].Additional === undefined || grouped.group[0].Additional.Row === undefined){
                    vm.betListFull.push(grouped.group);
                }else{
                    let groupByRow = grouped.group.groupBy(function(o){return JSON.stringify({a: o.Additional.Row})});
                    angular.forEach(groupByRow, function (rowVal) {
                        rowVal.group.sort(function (a, b) {
                            return b.GameType - a.GameType
                        });
                        var countCancel = $.grep(rowVal.group, function (c) {
                            return c.Status === 9
                        });
                        var childBet = {};
                        childBet.TicketNumber = rowVal.group[0].TicketNumber;
                        childBet.Term = rowVal.group[0].Term;
                        childBet.CreatedAt = rowVal.group[0].CreatedAt;
                        childBet.betTypeAlias = rowVal.group[0].Additional.Alias;
                        childBet.CancelLimitInSec = rowVal.group[0].CancelLimitInSec;
                        childBet.BatchId = rowVal.group[0].BatchId;
                        childBet.CancelledAt = countCancel.length === rowVal.group.length ? rowVal.group[0].CancelledAt : undefined;
                        childBet.Status = countCancel.length === rowVal.group.length ? rowVal.group[0].Status : undefined;
                        childBet.partCancel = countCancel.length !== rowVal.group.length && countCancel.length !== 0;
                        childBet.Amount = 0;
                        childBet.Point = 0;
                        childBet.betID = rowVal.group[0].BetType;   //To count Timer
                        childBet.waitToCancel = rowVal.group[0].waitToCancel;
                        childBet.GameType = [];
                        childBet.manyId = [];

                        angular.forEach(rowVal.group, function (val) {
                            childBet.Amount += val.Amount;
                            childBet.Point += val.Point;
                            childBet.GameType.push(val.GameType);
                            childBet.manyId.push(val.TicketNumber);
                        });
                        vm.betListFull.push([childBet])
                    })
                }
            });
            $scope.$digest();
        }


        function viewBatch(batch) {
            let TickByBatch = $.grep(vm.OriginalTick, function (item) {
                return item.BatchId === batch.BatchId
            });
            let aTickId = [];
            angular.forEach(TickByBatch, function (tick) {
                aTickId.push(tick.TicketNumber)
            });
            if (batch.manyId){
                $state.go('app.account.bet-list.legendary.batch', {term: TickByBatch[0].Term, game: TickByBatch[0].GameType, id: batch.manyId.join()});
            }else{
                $state.go('app.account.bet-list.legendary.batch', {term: TickByBatch[0].Term, game: TickByBatch[0].GameType, id: aTickId.join()});
            }
        }
    }

    function legendBlBet() {
        var betList = [
            {id: 0, name: 'Đề'},
            {id: 1, name: 'Lô'},
            {id: 2, name: 'Xiên 2'},
            {id: 3, name: 'Xiên 3'},
            {id: 4, name: 'Xiên 4'},
            {id: 5, name: 'Đề trượt'},
            {id: 6, name: 'Lô Trượt'},
            {id: 7, name: '2D Đầu'},
            {id: 8, name: '2D Đuôi'},
            {id: 9, name: '2D 27Lô'},
            {id: 10, name: '3D Đầu'},
            {id: 11, name: '3D Đuôi', mb: 'Đề 3 Càng'},
            {id: 12, name: '3D 23Lô', mb: 'Lô 3 Càng'},
            {id: 13, name: '4D Đuôi', mb: 'Đề 4 Càng'},
            {id: 14, name: '4D 20Lô', mb: 'Lô 4 Càng'},
            {id: 15, name: '2D 18Lô'},
            {id: 16, name: '2D 7Lô'},
            {id: 17, name: '3D 17Lô'},
            {id: 18, name: '3D 7Lô'},
            {id: 19, name: '4D 16Lô'},
            {id: 20, name: 'Lô Live'},
            {id: 21, name: 'Đề Đầu'},
            {id: 22, name: 'Đề Giải 1'},
            {id: 23, name: 'Đề Đầu Giải 1'},
            {id: 24, name: 'Đề Thần Tài'},
            {id: 25, name: 'Đề Đầu Thần Tài'},
            {id: 26, name: 'Live 3D', mb: 'Live 3 Càng'},
            {id: 27, name: 'Lô Live'},
            {id: 28, name: 'Live 3D'},
            {id: 29, name: 'Lô Đầu'},
            {id: 30, name: '2D 18Lô Đầu'},
        ];
        return function (input, GameType) {
            if (input.BetType !== undefined){
                let grepName = $.grep(betList, function (value) {
                    return value.id === parseInt(input.BetType)
                })[0];
                if (GameType === 0){
                    if (grepName.mb !== undefined){
                        return grepName.mb
                    }else{
                        return grepName.name
                    }
                }else{
                    return grepName.name
                }
            }else{
                if (GameType[0] === 0 && input.betTypeAlias === 524288){
                    return 'Đề 4 Càng'
                }else if (GameType[0] === 0 && input.betTypeAlias === 2097152){
                    return 'Lô 4 Càng'
                }else{
                    var betTypeAlias = input.betTypeAlias;
                    var betAliasText = '';
                    var betAlias = [];
                    if ( betTypeAlias >= 128 && betTypeAlias < 8192 ){
                        betAliasText = '2D '
                    }else if (betTypeAlias >= 8192 && betTypeAlias < 524288 ){
                        betAliasText = '3D '
                    }else if (betTypeAlias >= 524288){
                        betAliasText = '4D '
                    }
                    if (betTypeAlias & 128){betAlias.push('Đầu') }
                    if (betTypeAlias & 256){betAlias.push('Đuôi') }
                    if (betTypeAlias & 512){betAlias.push('Đầu-Đuôi') }
                    if (betTypeAlias & 1024){betAlias.push('27 Lô') }
                    if (betTypeAlias & 2048){betAlias.push('18 Lô') }
                    if (betTypeAlias & 4096){betAlias.push('7 Lô') }
                    if (betTypeAlias & 8192){betAlias.push('Đầu') }
                    if (betTypeAlias & 16384){betAlias.push('Đuôi') }
                    if (betTypeAlias & 32768){betAlias.push('Đầu-Đuôi') }
                    if (betTypeAlias & 65536){betAlias.push('23 Lô') }
                    if (betTypeAlias & 131072){betAlias.push('7 Lô') }
                    if (betTypeAlias & 262144){betAlias.push('17 Lô') }
                    if (betTypeAlias & 524288){betAlias.push('Đuôi') }
                    if (betTypeAlias & 1048576){betAlias.push('16 Lô') }
                    if (betTypeAlias & 2097152){betAlias.push('20 Lô') }
                    betAlias = betAliasText + betAlias.join(', ');

                    if (betTypeAlias < 127){
                        return $.grep(betList, function (value) {
                            return value.id === betTypeAlias
                        })[0].name
                    }else if (betTypeAlias === 127){
                        return 'Xiên Quây'
                    }else{
                        return betAlias
                    }
                }
            }
        }
    }
})();

(function (){
    'use strict';
    angular
        .module('app.account')
        .controller('cancelledCtrl', cancelledCtrl);
    function cancelledCtrl($scope, $timeout){
        let vm = this;
        vm.changeGame = changeGame;
        vm.getTicketItems = getTicketItems;

        vm.terms = [];
        for (let i = 0; i < 7; i++) {
            vm.terms.push(moment().subtract(i, 'day').format('YYYY-MM-DD'))
        }
        vm.games = [
            {
                id: 0,
                name: 'Miền Bắc 1',
                bet: [{id: 0, name: 'Đề'}, {id: 1, name: 'Lô'}, {id: 2, name: 'Xiên 2'}, {
                    id: 3,
                    name: 'Xiên 3'
                }, {id: 4, name: 'Xiên 4'}, {id: 5, name: 'Đề Trượt'}, {id: 6, name: 'Lô Trượt'}, {
                    id: 21,
                    name: 'Đề Đầu'
                }, {id: 22, name: 'Đề G1'}, {id: 23, name: 'Đề Đầu G1'}, {id: 24, name: 'Đề Thần Tài'}, {
                    id: 25,
                    name: 'Đề Đầu TT'
                }, {id: 20, name: 'Lô Live'}]
            },
            {
                id: 1,
                name: 'Miền Bắc 2',
                bet: [
                    {id: 7, name: '2D Đầu'},
                    // {id: 8, name: '2D Đuôi'},
                    // {id: 9, name: '2D 27Lô'},
                    {id: 10,name: '3D Đầu'},
                    {id: 11, name: '3D Đuôi'},
                    {id: 12, name: '3D 23Lô'},
                    {id: 13, name: '4D Đuôi'},
                    {id: 14,name: '4D 20Lô'},
                    // {id: 2, name: 'Xiên 2'},
                    // {id: 3, name: 'Xiên 3'},
                    // {id: 4, name: 'Xiên 4'},
                    // {id: 20, name: 'Lô Live'}
                ]
            },
            {
                id: 2,
                name: 'Miền Nam 18A',
                bet: [{id: 7, name: '2D Đầu'}, {id: 8, name: '2D Đuôi'}, {id: 15, name: '2D 18Lô'}, {
                    id: 16,
                    name: '2D 7Lô'
                }, {id: 10, name: '3D Đầu'}, {id: 11, name: '3D Đuôi'}, {id: 17, name: '3D 17Lô'}, {
                    id: 18,
                    name: '3D 7Lô'
                }, {id: 13, name: '4D Đuôi'}, {id: 19, name: '4D 16Lô'}, {id: 2, name: 'Xiên 2'}, {
                    id: 3,
                    name: 'Xiên 3'
                }, {id: 4, name: 'Xiên 4'}]
            },
            {
                id: 3,
                name: 'Miền Nam 18B',
                bet: [{id: 7, name: '2D Đầu'}, {id: 8, name: '2D Đuôi'}, {id: 15, name: '2D 18Lô'}, {
                    id: 16,
                    name: '2D 7Lô'
                }, {id: 10, name: '3D Đầu'}, {id: 11, name: '3D Đuôi'}, {id: 17, name: '3D 17Lô'}, {
                    id: 18,
                    name: '3D 7Lô'
                }, {id: 13, name: '4D Đuôi'}, {id: 19, name: '4D 16Lô'}, {id: 2, name: 'Xiên 2'}, {
                    id: 3,
                    name: 'Xiên 3'
                }, {id: 4, name: 'Xiên 4'}]
            },
            {
                id: 4,
                name: 'Miền Nam 18C',
                bet: [{id: 7, name: '2D Đầu'}, {id: 8, name: '2D Đuôi'}, {id: 15, name: '2D 18Lô'}, {
                    id: 16,
                    name: '2D 7Lô'
                }, {id: 10, name: '3D Đầu'}, {id: 11, name: '3D Đuôi'}, {id: 17, name: '3D 17Lô'}, {
                    id: 18,
                    name: '3D 7Lô'
                }, {id: 13, name: '4D Đuôi'}, {id: 19, name: '4D 16Lô'}, {id: 2, name: 'Xiên 2'}, {
                    id: 3,
                    name: 'Xiên 3'
                }, {id: 4, name: 'Xiên 4'}]
            },
            {
                id: 5,
                name: 'Xiên 18A + 18B',
                bet: [{id: 2, name: 'Xiên 2'}, {id: 3, name: 'Xiên 3'}, {id: 4, name: 'Xiên 4'}]
            }
        ];
        vm.loading = true;
        function changeGame() {
            vm.BetTypes = vm.games.filter(function (item) {
                return item.id === vm.GameType
            })[0].bet;
        }

        $timeout(function (){
            vm.getTicketItems();
        }, 500)

        vm.ticketsCancelled = [];
        function getTicketItems(LastId){
            vm.loading = true;
            let param = {
                Date: vm.date,
                GameType: vm.GameType,
                BetType: vm.BetType,
                Limit: 30
            }
            if (LastId !== undefined){
                param.LastId = LastId;
            }else{
                vm.ticketsCancelled = [];
            }
            // console.log(param)
            Lotus.Lottery.Report.Cancelation.getTicketItems(param).then(function (response){
                console.log(response)
                vm.hasMoreTickets = response.length === param.Limit;
                vm.ticketsCancelled = vm.ticketsCancelled.concat(response);
                vm.loading = false;

                vm.sumMoney = 0;
                vm.ticketsCancelled.map(function (tic){
                    vm.sumMoney += tic.Amount;
                })

                $scope.$digest();
            })
        }

    }
})();
(function (){
    'use strict';
    angular.module('app.account')
        .controller('betListCtrl', betListCtrl)
        .filter('blGame', blGame)
        .filter('blBet', blBet);
    function betListCtrl($rootScope, $scope, $mdDialog, $timeout, network, $state, msUtils, message){
        let vm = this;
        vm.betList = betList;
        vm.initBetList = initBetList;
        vm.countDownCancel = countDownCancel;
        vm.deadlineTime = deadlineTime;
        vm.cancelBetting = cancelBetting;
        vm.viewBatch = viewBatch;
        vm.betList();


        vm.tickets = [];
        function betList(ltId){
            vm.loading = true;
            ltId = ltId === undefined ? '' : ltId;
            let data = {
                Limit: 100,
                LastId: ltId
            };

            if ($rootScope.currentTerm !== undefined){
                network.Ticket.Current(data).then(function (resp) {
                    vm.tickets = vm.tickets.concat(resp);
                    vm.OriginalTick = angular.copy(vm.tickets);
                    vm.initBetList(vm.tickets);
                    vm.hasMoreTickets = resp.length === 100;

                    $timeout(function (){
                        $scope.$digest();
                    }, 500)
                })
            }else{
                $timeout(function () {
                    vm.betList();
                }, 1000)
            }
        }

        function initBetList(resp){
            vm.loading = false;
            vm.sumMoney = 0;
            vm.betListFull = [];
            angular.forEach(resp, function (b) {
                vm.sumMoney += b.CancelledAt === undefined ? b.Amount : 0;
            });
            var groupResp = resp.groupBy(function(o){return JSON.stringify({a: o.BatchId})});
            angular.forEach(groupResp, function (grouped) {
                grouped.group.sort(function (a, b) {
                    return a.GameType - b.GameType || a.BetType - b.BetType
                });
                if (grouped.group[0].Additional === undefined || grouped.group[0].Additional.Row === undefined){
                    vm.betListFull.push(grouped.group);
                }else{
                    let groupByRow = grouped.group.groupBy(function(o){return JSON.stringify({a: o.Additional.Row})});
                    angular.forEach(groupByRow, function (rowVal) {
                        rowVal.group.sort(function (a, b) {
                            return b.GameType - a.GameType
                        });
                        var countCancel = $.grep(rowVal.group, function (c) {
                            return c.Status === 9
                        });
                        var childBet = {};
                        childBet.TicketNumber = rowVal.group[0].TicketNumber;
                        childBet.Term = rowVal.group[0].Term;
                        childBet.CreatedAt = rowVal.group[0].CreatedAt;
                        childBet.betTypeAlias = rowVal.group[0].Additional.Alias;
                        childBet.CancelLimitInSec = rowVal.group[0].CancelLimitInSec;
                        childBet.BatchId = rowVal.group[0].BatchId;
                        childBet.CancelledAt = countCancel.length === rowVal.group.length ? rowVal.group[0].CancelledAt : undefined;
                        childBet.Status = countCancel.length === rowVal.group.length ? rowVal.group[0].Status : undefined;
                        childBet.partCancel = countCancel.length !== rowVal.group.length && countCancel.length !== 0;
                        childBet.Amount = 0;
                        childBet.Point = 0;
                        childBet.betID = rowVal.group[0].BetType;   //To count Timer
                        childBet.waitToCancel = rowVal.group[0].waitToCancel;
                        childBet.GameType = [];
                        childBet.manyId = [];

                        angular.forEach(rowVal.group, function (val) {
                            childBet.Amount += val.Amount;
                            childBet.Point += val.Point;
                            childBet.GameType.push(val.GameType);
                            childBet.manyId.push(val.TicketNumber);
                        });
                        vm.betListFull.push([childBet])
                    })
                }
            });
            vm.countDownCancel();
        }

        let timer;
        function countDownCancel() {
            angular.forEach(vm.OriginalTick, function (otick) {
                otick.CancelLimitInSec --
            });
            angular.forEach(vm.betListFull, function (bets) {
                angular.forEach(bets, function (bet) {
                    if (bet.CancelLimitInSec){
                        bet.CancelLimitInSec --
                    }
                    if (bet.deadTime === undefined || bet.deadTime < 10){
                        vm.deadlineTime(bet)
                    }else{
                        bet.deadTime --
                    }
                })
            });
            // timer = $timeout(function () {
            //     vm.countDownCancel()
            // }, 1000)
        }

        // $scope.$on('$destroy', function() {
        //     $timeout.cancel(timer);
        // });

        function deadlineTime(tick) {
            let gameID = (typeof tick.GameType === 'object') ? tick.GameType[0] : tick.GameType;
            let betID = tick.BetType !== undefined ? tick.BetType : tick.betID;
            let deadData = $.grep($rootScope.currentTerm, function (d) {
                return d.GameType === gameID
            })[0];
            tick.deadTime = $.grep(deadData.Games, function (d) {
                return d.BetType === betID
            })[0].CloseAfter;
        }

        $rootScope.fullCancelWait = [];

        function cancelBetting(tick){
            var textContent = tick.manyId === undefined ? '' : 'những ';
            var confirm = $mdDialog.confirm()
                .title('Vui lòng xác nhận')
                .textContent('Quý khách muốn hủy '+ textContent +'phiếu cược này')
                .ariaLabel('Cancel betting')
                .targetEvent(tick)
                .clickOutsideToClose(true)
                .parent(angular.element(document.body))
                .ok('Hủy cược')
                .cancel('Đóng');

            $mdDialog.show(confirm).then(function() {
                tick.waitToCancel = true;
                let tickToCancel = {
                    Term: $rootScope.termName,
                    Tickets: []
                };
                if (tick.manyId){
                    angular.forEach(tick.manyId, function (tickId) {
                        let findTick = vm.OriginalTick.filter(function (t) {
                            return t.TicketNumber === tickId
                        })[0];
                        let TicketObj = {
                            GameType: findTick.GameType,
                            BetType: findTick.BetType,
                            TicketNumber: findTick.TicketNumber
                        };
                        tickToCancel.Tickets.push(TicketObj)
                    })
                }else{
                    let TicketObj = {
                        GameType: tick.GameType,
                        BetType: tick.BetType,
                        TicketNumber: tick.TicketNumber
                    };
                    tickToCancel.Tickets.push(TicketObj)
                }
                network.Games.cancelTicket(tickToCancel).then(function (resp) {
                    if (resp){
                        console.log(resp);
                        $rootScope.fullCancelWait = $rootScope.fullCancelWait.concat(resp);

                        angular.forEach(resp, function (t) {
                            vm.OriginalTick.find(function (tick) {
                                return tick.TicketNumber === t.TicketNumber
                            }).waitToCancel = true;
                        })
                    }
                })
            }, function() {});
        }

        $scope.$on('ticketCancelApproved', function ($event, aDatas){
            angular.forEach(aDatas, function (data) {
                if ( $.grep($rootScope.fullCancelWait, function (item) {
                    return item.TicketNumber === data.TicketNumber
                }).length ){
                    let findTickAmount = $.grep(vm.OriginalTick, function (item) {
                        return item.TicketNumber === data.TicketNumber
                    });
                    if (findTickAmount.length){
                        $rootScope.User.Balance = $rootScope.User.Balance + findTickAmount[0].Amount
                    }
                    vm.OriginalTick.find(function (tick) {
                        return tick.TicketNumber === data.TicketNumber
                    }).Status = 9;
                    $timeout.cancel(timer);
                    vm.initBetList(angular.copy(vm.OriginalTick))
                }
            });
        });

        function viewBatch(batch) {
            let TickByBatch = $.grep(vm.OriginalTick, function (item) {
                return item.BatchId === batch.BatchId
            });
            let aTickId = [];
            angular.forEach(TickByBatch, function (tick) {
                aTickId.push(tick.TicketNumber)
            });
            if (batch.manyId){
                $state.go('app.account.bet-list.traditional.batch', {term: TickByBatch[0].Term, id: batch.manyId.join()});
            }else{
                $state.go('app.account.bet-list.traditional.batch', {term: TickByBatch[0].Term, id: aTickId.join()});
            }
        }

    }

    function blGame($rootScope) {
        return function (input) {
            if (!Array.isArray(input)){
                var gameList = [
                    {id: 0, name: 'MB1'},
                    {id: 1, name: 'MB2'},
                    {id: 2, name: '18A'},
                    {id: 3, name: '18B'},
                    {id: 4, name: '18C'},
                    {id: 5, name: '18A+18B'}
                ];
                var subName = $.grep(gameList, function (value, i) {
                    return value.id === parseInt(input)
                })[0].name;
                return $.grep($rootScope.currentTerm, function (value, i) {
                    return value.GameType === parseInt(input)
                })[0].CityName + ' (' + subName + ')';
            }else{
                input = input.filter( function( item, index, inputArray ) {	//Lọc trùng
                    return inputArray.indexOf(item) === index;
                });
                var gamename = 'MN ';
                var game = [];
                angular.forEach(input, function (e) {
                    if (e === 0){gamename = 'Hà Nội (MB 1)'}
                    if (e === 1){gamename = 'Hà Nội (MB 2)'}
                    if (e === 2){game.push('18A')}
                    if (e === 3){game.push('18B')}
                    if (e === 4){game.push('18C')}
                    if (e === 5){gamename = 'Xiên A-B'}
                });
                gamename = gamename + game.reverse().join(', ');
                return gamename
            }
        }
    }

    function blBet() {
        var betList = [
            {id: 0, name: 'Đề'},
            {id: 1, name: 'Lô'},
            {id: 2, name: 'Xiên 2'},
            {id: 3, name: 'Xiên 3'},
            {id: 4, name: 'Xiên 4'},
            {id: 5, name: 'Đề trượt'},
            {id: 6, name: 'Lô Trượt'},
            {id: 7, name: '2D Đầu'},
            {id: 8, name: '2D Đuôi'},
            {id: 9, name: '2D 27Lô'},
            {id: 10, name: '3D Đầu'},
            {id: 11, name: '3D Đuôi'},
            {id: 12, name: '3D 23Lô'},
            {id: 13, name: '4D Đuôi'},
            {id: 14, name: '4D 20Lô'},
            {id: 15, name: '2D 18Lô'},
            {id: 16, name: '2D 7Lô'},
            {id: 17, name: '3D 17Lô'},
            {id: 18, name: '3D 7Lô'},
            {id: 19, name: '4D 16Lô'},
            {id: 20, name: 'Lô Live'},
            {id: 21, name: 'Đề Đầu'},
            {id: 22, name: 'Đề Giải 1'},
            {id: 23, name: 'Đề Đầu Giải 1'},
            {id: 24, name: 'Đề Thần Tài'},
            {id: 25, name: 'Đề Đầu Thần Tài'},
            {id: 27, name: 'Lô Live'},
            {id: 29, name: 'Lô Đầu'},
            {id: 30, name: '2D 18Lô Đầu'},
        ];
        return function (input) {
            if (input.BetType !== undefined){
                return $.grep(betList, function (value) {
                    return value.id === parseInt(input.BetType)
                })[0].name
            }else{
                var betTypeAlias = input.betTypeAlias;
                var betAliasText = '';
                var betAlias = [];
                if ( betTypeAlias >= 128 && betTypeAlias < 8192 ){
                    betAliasText = '2D '
                }else if (betTypeAlias >= 8192 && betTypeAlias < 524288 ){
                    betAliasText = '3D '
                }else if (betTypeAlias >= 524288){
                    betAliasText = '4D '
                }
                if (betTypeAlias & 128){betAlias.push('Đầu') }
                if (betTypeAlias & 256){betAlias.push('Đuôi') }
                if (betTypeAlias & 512){betAlias.push('Đầu-Đuôi') }
                if (betTypeAlias & 1024){betAlias.push('27 Lô') }
                if (betTypeAlias & 2048){betAlias.push('18 Lô') }
                if (betTypeAlias & 4096){betAlias.push('7 Lô') }
                if (betTypeAlias & 8192){betAlias.push('Đầu') }
                if (betTypeAlias & 16384){betAlias.push('Đuôi') }
                if (betTypeAlias & 32768){betAlias.push('Đầu-Đuôi') }
                if (betTypeAlias & 65536){betAlias.push('23 Lô') }
                if (betTypeAlias & 131072){betAlias.push('7 Lô') }
                if (betTypeAlias & 262144){betAlias.push('17 Lô') }
                if (betTypeAlias & 524288){betAlias.push('Đuôi') }
                if (betTypeAlias & 1048576){betAlias.push('16 Lô') }
                if (betTypeAlias & 2097152){betAlias.push('20 Lô') }
                betAlias = betAliasText + betAlias.join(', ');

                if (betTypeAlias < 127){
                    return $.grep(betList, function (value) {
                        return value.id === betTypeAlias
                    })[0].name
                }else if (betTypeAlias === 127){
                    return 'Xiên Quây'
                }else{
                    return betAlias
                }
            }
        }
    }
})();

(function (){
    'use strict';

    angular
        .module('app.toolbar', [])
        .config(config);

    /** @ngInject */
    function config(){

    }
})();

(function (){
    'use strict';

    angular.module('app.toolbar').controller('gamePlayToolbarCtrl', gamePlayToolbarCtrl);

    function gamePlayToolbarCtrl($rootScope, $scope, $mdSidenav, $interval, $mdMedia, gameData, Fullscreen){
        var vm = this;
        $scope.$mdMedia = $mdMedia;
        vm.toggleSidenav = toggleSidenav;
        vm.gameData = gameData.data;
        vm.tickTock = tickTock;
        function tickTock() {
            vm.clock = Date.now();
        }
        vm.tickTock();

        if ($mdMedia('gt-sm')){
            $interval(function () {
                vm.tickTock()
            }, 1000);
        }

        vm.showToolbar = showToolbar;
        vm.isFullscreen = isFullscreen;
        function isFullscreen() {
            angular.element('html').addClass('is-fullscreen');
            // if (!$mdMedia('gt-sm') && !Fullscreen.isEnabled()){
            //     angular.element('html').addClass('is-fullscreen');
            //     Fullscreen.all();
            // }
        }

        if (document.addEventListener){
            document.addEventListener('fullscreenchange', exitHandler, false);
            document.addEventListener('mozfullscreenchange', exitHandler, false);
            document.addEventListener('MSFullscreenChange', exitHandler, false);
            document.addEventListener('webkitfullscreenchange', exitHandler, false);
        }

        function exitHandler(){
            if (document.webkitIsFullScreen || document.mozFullScreen || document.msFullscreenElement !== null){
                if (!Fullscreen.isEnabled()){
                    angular.element('html').removeClass('is-fullscreen');
                }
            }
        }
        
        function showToolbar() {
            angular.element('html').removeClass('is-fullscreen');
            if (Fullscreen.isEnabled()){
                Fullscreen.cancel();
            }
        }

        function toggleSidenav(sidenavId){
            $mdSidenav(sidenavId).toggle();
        }
    }
})();
(function (){
    'use strict';
    angular
        .module('app.quick-panel', [])
        .config(config);

    /** @ngInject */
    function config(){

    }
})();

(function ()
{
    'use strict';

    angular
        .module('app.quick-panel')
        .controller('ChatTabController', ChatTabController);

    /** @ngInject */
    function ChatTabController(msApi, $timeout)
    {
        var vm = this;

        // Data
        vm.chat = {};
        vm.chatActive = false;
        vm.replyMessage = '';

        msApi.request('quickPanel.contacts@get', {},
            // Success
            function (response)
            {
                vm.contacts = response.data;
            }
        );

        // Methods
        vm.toggleChat = toggleChat;
        vm.reply = reply;

        //////////

        function toggleChat(contact)
        {
            vm.chatActive = !vm.chatActive;

            if ( vm.chatActive )
            {
                vm.replyMessage = '';
                vm.chat.contact = contact;
                scrollToBottomOfChat(0);
            }
        }

        function reply()
        {
            if ( vm.replyMessage === '' )
            {
                return;
            }

            if ( !vm.chat.contact.dialog )
            {
                vm.chat.contact.dialog = [];
            }

            vm.chat.contact.dialog.push({
                who    : 'user',
                message: vm.replyMessage,
                time   : 'Just now'
            });

            vm.replyMessage = '';

            scrollToBottomOfChat(400);
        }

        function scrollToBottomOfChat(speed)
        {
            var chatDialog = angular.element('#chat-dialog');

            $timeout(function ()
            {
                chatDialog.animate({
                    scrollTop: chatDialog[0].scrollHeight
                }, speed);
            }, 0);

        }
    }

})();
(function (){
    'use strict';

    angular
        .module('app.traditional')
        .controller('southABParlayCtrl', southABParlayCtrl);

    function southABParlayCtrl($rootScope, $scope, $mdMedia, $mdSidenav, $timeout, $interval, $state, $document, msUtils, network, collections){
        let vm = this;

        vm.buildPriceTable = buildPriceTable;
        vm.selectNumber = selectNumber;
        vm.groupNumbers = groupNumbers;
        vm.inputKeyNumber = inputKeyNumber;
        vm.submitKeyNumber = submitKeyNumber;
        vm.resetBetting = resetBetting;
        vm.costMoney = costMoney;
        vm.submitBetting = submitBetting;
        vm.purchaseLimit = purchaseLimit;
        vm.exists = exists;
        vm.ignorePrice = true;
        vm.quickChoices = collections.list;
        $scope.$mdMedia = $mdMedia;
        vm.pair = {count: {2: 0, 3: 0, 4: 0}, money: {2: 0, 3: 0, 4: 0}, limit: {2: 0, 3: 0, 4: 0}, payout: {2: 0, 3: 0, 4: 0}};
        vm.inputPoint = {2: 0, 3: 0, 4: 0};

        vm.base = {2: 0, 3: 0, 4: 0};
        if ($rootScope.myParameters !== undefined){
            angular.forEach($rootScope.myParameters, function(pr){
                if (pr.GameType === 5) {
                    if (pr.BetType === 2) { vm.base[2] = pr.Price }
                    if (pr.BetType === 3) { vm.base[3] = pr.Price }
                    if (pr.BetType === 4) { vm.base[4] = pr.Price }
                }
            })
        }

        vm.numbers = [];
        for (let i = 0; i<100; i++){
            i = i < 10 ? i = '0' + i : i;
            let number = {
                number: i.toString(),
                selected: false,
                base: {2: vm.base[2], 3: vm.base[3], 4: vm.base[4]},
                price: {2: vm.base[2], 3: vm.base[3], 4: vm.base[4]},
                disabled: {2: false, 3: false, 4: false}
            };
            vm.numbers.push(number)
        }

        $timeout(function () {
            if ($rootScope.isAuthenticated){
                vm.purchaseLimit()
            }
        }, 300);

        $scope.$on('$destroy', function() {
            $rootScope.location = undefined;
        });

        $document.bind('keydown keypress', function (e) {
            if(e.which === 27) {
                vm.resetBetting();
                e.preventDefault()
            }
        });

        $rootScope.location = {game: 5, bet: 2};

        function purchaseLimit(gameid, betid) {
            if ($rootScope.isAuthenticated){
                if ($rootScope.myParameters !== undefined){
                    angular.forEach([2,3,4], function (betid) {
                        vm.pair.limit[betid] = $rootScope.myParameters.filter(function (item) {return item.GameType === 5 && item.BetType === betid})[0].MaxPointPerNumber;
                        vm.pair.payout[betid] = $rootScope.myParameters.filter(function (item) {return item.GameType === 5 && item.BetType === betid})[0].Payouts / 1000;
                    })
                }else{
                    $timeout(function () {
                        vm.purchaseLimit(gameid, betid)
                    }, 1000)
                }
            }
        }

        $scope.$on('TradOdds::done', function (){
            vm.buildPriceTable();
        })

        function buildPriceTable(){
            vm.odds = $rootScope.TradOdds.filter(function (odd) {
                return odd.GameType === 5 && msUtils.exists(odd.BetType, [2,3,4]) && odd.Term === ($rootScope.isAuthenticated ? $rootScope.termName : 'Public')
            })
            angular.forEach(vm.numbers, function (num) {
                angular.forEach(vm.odds, function (odd) {
                    num.base[odd.BetType] = odd.Price;
                    num.price[odd.BetType] = num.price[odd.BetType] === 0 ? odd.Price : num.price[odd.BetType];
                    angular.forEach(odd.Numbers, function (value) {
                        if (value.Number === num.number){
                            let extPrice = value.ExtraPrice !== undefined ? odd.Price + value.ExtraPrice : num.price[odd.BetType];
                            num.disabled[odd.BetType] = value.Stop;
                            if ((num.price[odd.BetType] !== 0) && (num.price[odd.BetType] !== extPrice)){
                                num.priceChanged = true
                            }
                            num.price[odd.BetType] = extPrice;
                        }
                    })
                })
            });
            $timeout(function () {
                angular.forEach(vm.numbers, function (n) {
                    n.priceChanged = false;
                })
            }, 3000)
        }

        function selectNumber(n) {
            angular.forEach(vm.numbers, function (number) {
                if (number.number === n.number){
                    number.selected = !number.selected;
                }
            });
        }

        vm.selectedCheckbox = [];

        function exists(parent, id) {
            let ids = parent.toString() + id.toString();
            return vm.selectedCheckbox.indexOf(ids) > -1;
        }

        function groupNumbers(parent, id){
            let ids = parent.toString() + id.toString();
            let idx = vm.selectedCheckbox.indexOf(ids);
            if (idx > -1) {
                vm.selectedCheckbox.splice(idx, 1);
            }else {
                vm.selectedCheckbox.push(ids);
            }
            vm.checked = idx === -1;

            vm.arrayNumber = vm.quickChoices[parent].collect[id].numbers;


            angular.forEach(vm.numbers, function (number) {
                if ($.grep(vm.arrayNumber, function(b){return b === number.number}).length){
                    number.selected = vm.checked;
                }
            });
        }

        function inputKeyNumber(e) {
            if (!vm.keynumber){return}
            if(e.which === 8){
                if (vm.keynumber[vm.keynumber.length - 1] !== ','){
                    vm.keynumber = vm.keynumber.substring(0, vm.keynumber.length - 1)
                }
            }
            let value = vm.keynumber.split(',');
            if (value[value.length-1].length > 1){
                vm.keynumber = vm.keynumber + ','
            }
        }

        function submitKeyNumber(click) {
            if (!vm.keynumber){return}
            vm.keynumber = vm.keynumber.replace(/\s+/g, '');
            if (vm.keynumber.length === 0){return}
            let arr = vm.keynumber.split(',');
            let arrInput = [];
            for (let i = 0; i < arr.length; i++){
                let number = arr[i].slice(-2).replace(/\s+/g, '');
                number = number.length < 2 && number.length !== 0 ? '0' + number : number;
                if (!isNaN(number) && angular.isNumber(+number)){
                    if (number.length !== 0)
                        arrInput.push(number)
                }
            }
            angular.forEach(vm.numbers, function (val) {
                if (arrInput.indexOf(val.number) !== -1){
                    val.selected = true
                }
            });
            vm.keynumber = '';
            if (!click){
                $timeout(function () {
                    document.getElementsByClassName('bet-input')[0].select();
                }, 10)
            }else{
                $timeout(function () {
                    document.getElementsByClassName('input-numbers-array')[0].focus();
                }, 10)
            }
        }

        function resetBetting(){
            angular.forEach(vm.numbers, function (number) {
                number.selected = false;
            });
            vm.selectedCheckbox = [];
            vm.inputPoint = {2: 0, 3: 0, 4: 0};
            vm.keynumber = '';
        }

        function costMoney() {
            vm.sumPoint = 0;
            let numberArr, sumMoney;
            let betTimes = {2: 72, 3: 108, 4: 144};
            angular.forEach([2,3,4], function (betid) {
                vm.pair.count[betid] = 0;
                sumMoney = 0;
                numberArr = [];
                angular.forEach(vm.numbers, function (num) {
                    if (num.selected){
                        if (!num.disabled[betid]){
                            numberArr.push(num.number)
                        }
                    }
                });
                vm.pair.count[betid] += numberArr.combinate(betid).length;

                let totalyArr = numberArr.combinate(betid);
                if (totalyArr.length <= 128){
                    angular.forEach(totalyArr, function (pairArr) {
                        let pricePerPair = 0;
                        angular.forEach(pairArr, function (number){
                            angular.forEach(vm.numbers, function (num) {
                                if (num.number === number){
                                    pricePerPair += num.price[betid]
                                }
                            });
                        });
                        pricePerPair = Math.ceil(pricePerPair/pairArr.length);
                        sumMoney += pricePerPair
                    });
                    vm.pair.money[betid] = sumMoney * vm.inputPoint[betid] * betTimes[betid];
                    vm.sumPoint += vm.pair.count[betid] * vm.inputPoint[betid];
                }else{
                    vm.inputPoint[betid] = 0;
                }
            });
            vm.totalMoney = vm.pair.money[2] + vm.pair.money[3] + vm.pair.money[4];
            return vm.pair.money[2] + vm.pair.money[3] + vm.pair.money[4]
        }

        function submitBetting() {
            let betObj, ticketObj, selectedNumber, pairArrNum, Number;
            betObj = {};
            betObj.Term = $rootScope.termName;
            betObj.IgnorePrice = vm.ignorePrice;
            betObj.Tickets = [];

            Object.keys(vm.inputPoint).forEach(function(betid) {
                if (vm.inputPoint[betid] !== 0){
                    ticketObj = {
                        GameType: 5,
                        BetType: parseInt(betid),
                        Items: []
                    };
                    selectedNumber = [];
                    angular.forEach(vm.numbers, function (number) {
                        if (number.selected && !number.disabled[betid] ){
                            selectedNumber.push(number.number)
                        }
                    });
                    pairArrNum = selectedNumber.combinate(betid);
                    angular.forEach(pairArrNum, function (pair) {
                        Number = {};
                        Number.Numbers = pair;
                        Number.Point = vm.inputPoint[betid];
                        //Tính tiền cho cặp xiên
                        let pricePerPair = 0;
                        angular.forEach(pair, function (n) {
                            angular.forEach(vm.numbers, function (num) {
                                if (num.number === n){
                                    pricePerPair += num.price[betid]
                                }
                            })
                        });
                        pricePerPair = Math.ceil(pricePerPair/pair.length);
                        Number.Price = pricePerPair;
                        ticketObj.Items.push(Number)
                    });
                    betObj.Tickets.push(ticketObj)
                }
            });

            let ns = [];
            vm.numbers.map(function (n){
                if (n.selected){
                    ns.push(n.number)
                }
            })

            let eventData = {
                betObj: betObj,
                sumObj: {
                    numbers: ns,
                    point: vm.sumPoint,
                    money: vm.totalMoney
                }
            }
            $rootScope.$broadcast('EventBetting', eventData);

        }

        $rootScope.$on('ResetBetting', function (){
            vm.resetBetting();
        })

        $rootScope.$broadcast('TradOdds::get', {GameTypes: [5], BetTypes: [2,3,4]})
    }
})();
(function (){
    'use strict';
    angular
        .module('app.traditional')
        .controller('traditionalMenuCtrl', traditionalMenuCtrl);

    /** @ngInject */
    function traditionalMenuCtrl($scope, $rootScope, $document, $mdDialog, $mdMedia, $mdSidenav, $state, msLotteryService) {
        var vm = this;
        $scope.$mdMedia = $mdMedia;
        vm.menus = [
            {
                name: 'Miền Bắc 1',
                icon: 'icon-tile-four',
                navigation: 'fuse.northern',
                sub: [
                    {name: 'Đề', navigation: 'fuse.northern.jackpot', sub: [
                            {name: 'Đề', state: 'app.traditional.northern.jackpot', navigation: 'fuse.northern.jackpot.jackpot'},
                            {name: 'Đề trượt', state: 'app.traditional.northern.except-jackpot', navigation: 'fuse.northern.jackpot.except', forceHide: true},
                            {name: 'Đề đầu', state: 'app.traditional.northern.head-jackpot', navigation: 'fuse.northern.jackpot.head', forceHide: true},
                            {name: 'Đề giải 1', state: 'app.traditional.northern.jackpot-first', navigation: 'fuse.northern.jackpot.jackpot-first'},
                            {name: 'Đề đầu giải 1', state: 'app.traditional.northern.jackpot-head-first', navigation: 'fuse.northern.jackpot.headF'},
                            {name: 'Đề Thần Tài', state: 'app.traditional.northern.jackpot-caishen', navigation: 'fuse.northern.jackpot.jackpot-caishen'},
                            {name: 'Đề đầu Thần Tài', state: 'app.traditional.northern.jackpot-head-caishen', navigation: 'fuse.northern.jackpot.jackpot-head-caishen'},
                        ]},
                    {name: 'Lô', navigation: 'fuse.northern.lotto', sub: [
                            {name: 'Lô', state: 'app.traditional.northern.lotto', navigation: 'fuse.northern.lotto.lotto'},
                            {name: 'Lô Xiên', state: 'app.traditional.northern.parlay', navigation: 'fuse.northern.lotto.parlay', forceHide: true},
                            {name: 'Lô trượt', state: 'app.traditional.northern.except-lotto', navigation: 'fuse.northern.lotto.except-lotto', forceHide: true},
                            {name: 'Lô Đầu', state: 'app.traditional.northern.lotto-head', navigation: 'fuse.northern.lotto.lotto-head', forceHide: true},
                        ]},
                    {name: 'Lô Live', state: 'app.traditional.northern.live', navigation: 'fuse.northern.live', icon: 'icon-heart', class: 'live'},

                    // {name: 'Đề', state: 'app.traditional.northern.jackpot', navigation: 'fuse.northern.jackpot'},
                    // {name: 'Lô', state: 'app.traditional.northern.lotto', navigation: 'fuse.northern.lotto'},
                    // {name: 'Lô Xiên', state: 'app.traditional.northern.parlay', navigation: 'fuse.northern.parlay', forceHide: true},
                    // {name: 'Lô Live', state: 'app.traditional.northern.live', navigation: 'fuse.northern.live', icon: 'icon-heart', class: 'live'},
                    // {name: 'Đề trượt', state: 'app.traditional.northern.except-jackpot', navigation: 'fuse.northern.except-jackpot', forceHide: true},
                    // {name: 'Lô trượt', state: 'app.traditional.northern.except-lotto', navigation: 'fuse.northern.except-lotto', forceHide: true},
                    // {name: 'Đề đầu', state: 'app.traditional.northern.head-jackpot', navigation: 'fuse.northern.head-jackpot', forceHide: true},
                    // {name: 'Lô Đầu', state: 'app.traditional.northern.lotto-head', navigation: 'fuse.northern.lotto-head', forceHide: true},
                    // {name: 'Đề giải 1', state: 'app.traditional.northern.first', navigation: 'fuse.northern.first'},
                    // {name: 'Đề đầu giải 1', state: 'app.traditional.northern.head-first', navigation: 'fuse.northern.head-first'},
                    // {name: 'Đề Thần Tài', state: 'app.traditional.northern.caishen', navigation: 'fuse.northern.caishen'},
                    // {name: 'Đề đầu Thần Tài', state: 'app.traditional.northern.head-caishen', navigation: 'fuse.northern.head-caishen'},
                ]
            },
            {
                name: 'Miền Bắc 2',
                icon: 'icon-tile-four',
                navigation: 'fuse.northern-2nd',
                sub: [
                    {name: 'Cược nhanh', state: 'app.traditional.northern-2nd.quick-bet', navigation: 'fuse.northern-2nd.quick-bet', hiddenXs: true},
                    {name: '2D', navigation: 'fuse.northern-2nd.2d', sub: [
                            {name: '2D Đầu', state: 'app.traditional.northern-2nd.2d.dau', navigation: 'fuse.northern-2nd.2d.dau', forceHide: false},
                            // {name: '2D Đuôi', state: 'app.traditional.northern-2nd.2d.duoi', navigation: 'fuse.northern-2nd.2d.duoi', forceHide: false},
                            // {name: '2D 27Lô', state: 'app.traditional.northern-2nd.2d.27lo', navigation: 'fuse.northern-2nd.2d.27lo', forceHide: false},
                            {name: 'Kéo hàng', state: 'app.traditional.northern-2nd.2d.row-bet', navigation: 'fuse.northern-2nd.2d.row-bet', hiddenXs: true},
                        ]
                    },
                    {name: '3D', navigation: 'fuse.northern-2nd.3d', sub: [
                            {name: '3D Đầu', state: 'app.traditional.northern-2nd.3d.dau', navigation: 'fuse.northern-2nd.3d.dau', forceHide: false},
                            {name: '3D Đuôi', state: 'app.traditional.northern-2nd.3d.duoi', navigation: 'fuse.northern-2nd.3d.duoi', forceHide: false},
                            {name: '3D 23Lô', state: 'app.traditional.northern-2nd.3d.23lo', navigation: 'fuse.northern-2nd.3d.23lo', forceHide: false}
                        ]
                    },
                    {name: '4D', navigation: 'fuse.northern-2nd.4d', sub: [
                            {name: '4D Đuôi', state: 'app.traditional.northern-2nd.4d.duoi', navigation: 'fuse.northern-2nd.4d.duoi', forceHide: false},
                            {name: '4D 20Lô', state: 'app.traditional.northern-2nd.4d.20lo', navigation: 'fuse.northern-2nd.4d.20lo', forceHide: false}
                        ]
                    },
                    // {name: 'Lô Xiên', state: 'app.traditional.northern-2nd.parlay', navigation: 'fuse.northern-2nd.parlay'},
                    // {name: 'Lô Live', state: 'app.traditional.northern-2nd.live', navigation: 'fuse.northern-2nd.live', icon: 'icon-heart', class: 'live'},
                ]
            },
            {
                name: 'Miền Nam',
                icon: 'icon-tile-four',
                navigation: 'fuse.southern',
                sub: [
                    {name: 'Cược nhanh', state: 'app.traditional.southern.quick-bet', navigation: 'fuse.southern.quick-bet', hiddenXs: true},
                    // {name: '2D 18Lô Live', state: 'app.traditional.southern.live', navigation: 'fuse.southern.live', icon: 'icon-heart', class: 'live'},
                    {name: '2D', navigation: 'fuse.southern.2d', sub: [
                            {name: '2D Đầu', state: 'app.traditional.southern.2d.dau', navigation: 'fuse.southern.2d.dau', forceHide: false},
                            {name: '2D Đuôi', state: 'app.traditional.southern.2d.duoi', navigation: 'fuse.southern.2d.duoi', forceHide: false},
                            {name: '2D 18Lô', state: 'app.traditional.southern.2d.18lo', navigation: 'fuse.southern.2d.18lo', forceHide: false},
                            {name: '2D 18Lô Đầu', state: 'app.traditional.southern.2d.18lo-head', navigation: 'fuse.southern.2d.18lo-head', forceHide: false},
                            {name: 'Kéo hàng', state: 'app.traditional.southern.2d.row-bet', navigation: 'fuse.southern.2d.row-bet', hiddenXs: true},
                        ]
                    },
                    {name: '3D', navigation: 'fuse.southern.3d', sub: [
                            {name: '3D Đầu', state: 'app.traditional.southern.3d.dau', navigation: 'fuse.southern.3d.dau', forceHide: false},
                            {name: '3D Đuôi', state: 'app.traditional.southern.3d.duoi', navigation: 'fuse.southern.3d.duoi', forceHide: false},
                            {name: '3D 17Lô', state: 'app.traditional.southern.3d.17lo', navigation: 'fuse.southern.3d.17lo', forceHide: false},
                            {name: '3D 7Lô', state: 'app.traditional.southern.3d.7lo', navigation: 'fuse.southern.3d.7lo', forceHide: false}
                        ]
                    },
                    {name: '4D', navigation: 'fuse.southern.4d', sub: [
                            {name: '4D Đuôi', state: 'app.traditional.southern.4d.duoi', navigation: 'fuse.southern.4d.duoi', forceHide: false},
                            {name: '4D 16Lô', state: 'app.traditional.southern.4d.16lo', navigation: 'fuse.southern.4d.16lo', forceHide: false}
                        ]
                    },
                    {name: 'Lô Xiên', navigation: 'fuse.southern.parlay', sub: [
                            {name: 'Xiên 2', state: 'app.traditional.southern.parlay.pair-2', navigation: 'fuse.southern.parlay.pair-2', forceHide: false},
                            {name: 'Xiên 3', state: 'app.traditional.southern.parlay.pair-3', navigation: 'fuse.southern.parlay.pair-3', forceHide: false},
                            {name: 'Xiên 4', state: 'app.traditional.southern.parlay.pair-4', navigation: 'fuse.southern.parlay.pair-4', forceHide: false}
                        ]
                    },
                    {name: '7 Lô', state: 'app.traditional.southern.7lo', navigation: 'fuse.southern.7lo', hiddenXs: true},
                ]
            },
            {
                name: 'Xiên 18A+B',
                icon: 'icon-tile-four',
                state: 'app.traditional.18ab',
                navigation: 'fuse.18ab'
            },
            {
                name: 'Nhập tay',
                icon: 'icon-tile-four',
                state: 'app.traditional.manual',
                navigation: 'fuse.manual'
            }
        ];
        // Navigation

        // if ($mdMedia('min-width: 1150px')){
        //     vm.menus.map(function (items){
        //         if (items.sub){
        //             items.sub.map(function (item){
        //                 if (item.navigation === 'fuse.northern-2nd.2d'){
        //                     item.name = '2D'
        //                     delete item.state
        //                 }
        //                 if (item.navigation === 'fuse.northern-2nd.3d'){
        //                     item.name = '3D'
        //                     delete item.state
        //                 }
        //                 if (item.navigation === 'fuse.northern-2nd.4d'){
        //                     item.name = '4D'
        //                     delete item.state
        //                 }
        //                 if (item.navigation === 'fuse.southern.2d'){
        //                     item.name = '2D'
        //                     delete item.state
        //                 }
        //                 if (item.navigation === 'fuse.southern.3d'){
        //                     item.name = '3D'
        //                     delete item.state
        //                 }
        //                 if (item.navigation === 'fuse.southern.4d'){
        //                     item.name = '4D'
        //                     delete item.state
        //                 }
        //             })
        //         }
        //     })
        // }


        msLotteryService.deleteItem('fuse')
        msLotteryService.saveItem('fuse', {
            title : 'Xổ số truyền thống',
            group : true,
            class: 'main-menu',
            weight: 1
        });
        angular.forEach(vm.menus, function (node, i) {
            msLotteryService.saveItem(node.navigation, {
                title    : node.name,
                icon     : node.icon,
                state    : node.state,
                class    : node.class,
                weight   : i
            });
            if (node.sub !== undefined){
                angular.forEach(node.sub, function (item, i) {
                    // console.log(item.navigation)
                    msLotteryService.saveItem(item.navigation, {
                        title    : item.name,
                        icon     : item.icon,
                        state    : item.state,
                        class    : item.class,
                        weight   : i,
                        hidden   : function () {
                            return (item.hiddenXs && $mdMedia('xs'))  || (item.forceHide && $mdMedia('max-width: 1150px'))
                        }
                    });
                    if (item.sub !== undefined){
                        angular.forEach(item.sub, function (dol, i) {
                            msLotteryService.saveItem(dol.navigation, {
                                title    : dol.name,
                                icon     : dol.icon,
                                state    : dol.state,
                                class    : dol.class,
                                weight   : i,
                                hidden   : function () {
                                    return (dol.hiddenXs && $mdMedia('xs')) || (dol.forceHide && $mdMedia('max-width: 1150px'))
                                }
                            });
                        })
                    }
                })
            }
        })

        // msLotteryService.saveItem('fuse.southern.live', {
        //     icon    : 'icon-heart pulse',
        // });
    }
})();
(function (){
    'use strict';
    angular
        .module('app.traditional')
        .controller('manualCtrl', manualCtrl);

    function manualCtrl($rootScope, $scope, $timeout, $mdDialog, $location, message, msUtils, network, aBetTypes, Analytics){
        let vm = this;

        vm.init = init;
        vm.getOdds = getOdds;
        vm.pairingPrice = pairingPrice;
        vm.textFocus = textFocus;
        vm.resetParse = resetParse;
        vm.submitParse = submitParse;
        vm.deleteNode = deleteNode;
        vm.cancelAll = cancelAll;
        vm.startBetting = startBetting;
        vm.validateNumbers = validateNumbers;
        vm.manualTicket = manualTicket;

        vm.mathematical = '';
        // if ($location.host() === 'nothing88.net' || $location.host() === 'www.nothing88.net' || $location.host() === 'localhost'){
        //     // vm.mathematical = 'MB1 De 10 05. MB1 De 10 05. MB1 Lo 10 06,60. MB1 X2 10 22,33. MB1 X2 10 11,33. MB1 x3 10 22,33,02. MB1 x3 10 11,33,02. MB1 x4 10 22,33,02,06. MB1 x4 10 11,33,02,06. MB1 Detruot 10 20,21,22,23,24,25,26,27,28,29. MB1 Detruot 10 00,01,02,03,04,05,06,07,08,09. MB1 Lotruot 10 81,82,83,84,85.MB2 2ddau 10 01,02,03,04,05,06,07,08.MB2 2dduoi 10 05,01.MB2 2d27lo 10 06,60.MB2 3ddau 10 102,201.MB2 3dduoi 10 305,504.MB2 3d23lo 10 106,601.MB2 4dduoi 10 5305,5505.MB2 4d20lo 10 3106,3107.MB2 x2 10 22,33 11,33.MB2 x3 10 22,33,06 11,33,06.mb1 xq 10 10,20,30,50,40';
        //     vm.mathematical = 'MB1 De 2 05,50,79,97,68,86,25,52,27,72,49,94,56,65,46,64,28,82,39,93,49,94. MB1 lo 3 05,50,79,97,68,86,25,52,27,72,49,94,56,65,46,64,28,82,39,93,49,94';
        // }
        vm.mathParses = [];
        vm.parsesBeforeGroups = [];
        vm.lastIndex = 0;
        vm.aBetTypes = aBetTypes.data;

        $timeout(function () {
            vm.init();
        }, 1000);

        function init(){
            let Term = $rootScope.isAuthenticated ? $rootScope.termName : 'Public'
            angular.forEach(vm.aBetTypes, function (bet) {
                let findOdd = $rootScope.TradOdds.filter(function (odd) {
                    return odd.Term === Term && odd.GameType === bet.GameType && odd.BetType === bet.BetType
                });
                bet.success = findOdd.length !== 0;
            });
            vm.getOdds();
        }

        $scope.$on('TradOdds::done', function (){
            vm.pairingPrice()
            $timeout(function () {
                vm.init();
            }, 1000)
        })

        function getOdds() {
            vm.oData = vm.aBetTypes.filter(function (bet) {
                return !bet.success
            });
            if (vm.oData.length){
                $rootScope.$broadcast('TradOdds::get', {GameTypes: [vm.oData[0].GameType], BetTypes: [vm.oData[0].BetType]})
            }
        }

        function resetParse() {
            vm.mathematical = '';
        }

        function textFocus() {
            if (vm.mathematical === ''){
                navigator.clipboard.readText().then(function (text) {
                    vm.mathematical = text;
                }).catch(function (err) {
                    console.log(err)
                })
            }
        }

        function submitParse() {
            let parseData = Lotus.Lottery.Helper.LotteryCommand.parse(vm.mathematical);
            vm.errorLines = [];

            angular.forEach(parseData, function (line) {
                if (line.Error !== undefined){
                    vm.errorLines.push(line.LineContent);
                }else{
                    // vm.mathParses.push({Row: (vm.lastIndex + line.LineIndex), Data: line.Data})
                    vm.mathParses = vm.mathParses.concat(line.Data);
                }
            });

            // vm.mathParses = msUtils.groupBy(vm.parsesBeforeGroups, function (m) {
            //     return m.GameType
            // });

            vm.mathParses = addBy(vm.mathParses,['GameType', 'BetType', 'Numbers'])

            $timeout(function () {
                vm.pairingPrice();
            });

            if (vm.errorLines.length){
                vm.mathematical = vm.errorLines;
                message.show("Có lỗi cú pháp. Quý khách vui lòng kiểm tra lại: <br><b>" + vm.errorLines.join('. ') + "</b>" )
            }else{
                vm.mathematical = '';
            }

            //Tìm LastIndex lớn nhất
            // vm.mathParses.sort(function (a, b) {
            //     return b.Row - a.Row
            // });
            // vm.lastIndex = vm.mathParses[0].Row + 1;
            Analytics.trackEvent('MANUAL-PAGE', 'ParseData', $rootScope.User.Username);
        }

        function addBy(arr,keys){
            return arr.reduce(function(ac,a){
                let ind = ac.findIndex(function (x) {
                    return keys.every(function (k) {
                        if ( !Array.isArray(x[k]) ){
                            return x[k] === a[k]
                        }else{
                             return JSON.stringify(x[k].sort()) === JSON.stringify(a[k].sort())
                        }
                    })
                })
                ind === -1 ? ac.push(a) : ac[ind].Amount += a.Amount;
                return ac;
            },[])
        }

        function pairingPrice() {
            if ($rootScope.TradOdds !== undefined && vm.mathParses.length !== 0){
                angular.forEach(vm.mathParses, function (item) {
                    item.Price = 0;
                    // Tìm xem kiểu cược này đã có dữ liệu giá bán chưa.
                    let findPrice = $rootScope.TradOdds.filter(function (odd) {
                        return odd.GameType === item.GameType && odd.BetType === item.BetType && odd.term === $rootScope.termName
                    });
                    if (findPrice.length){
                        angular.forEach(item.Numbers, function (num) {
                            //Tìm xem trong bảng giá có số nào tăng giá không
                            let exNum = findPrice[0].Numbers.filter(function (n) {
                                return n.Number === num
                            });
                            if (exNum.length){
                                item.Price += exNum[0].ExtraPrice !== undefined ? (findPrice[0].Price + exNum[0].ExtraPrice) : findPrice[0].Price;
                            }else{
                                item.Price += findPrice[0].Price;
                            }
                        })
                    }
                    item.Price = Math.ceil (item.Price / item.Numbers.length);
                })
            }else{
                $timeout(function () {
                    vm.pairingPrice();
                }, 1000)
            }
        }

        function deleteNode(parent, index){
            let confirm = $mdDialog.confirm()
                .title('Vui lòng xác nhận')
                .textContent('Quý khách muốn hủy phiếu')
                .ariaLabel('Cancel betting')
                .clickOutsideToClose(true)
                .parent(angular.element(document.body))
                .ok('Hủy Chọn')
                .cancel('Đóng');
            $mdDialog.show(confirm).then(function() {
                delete vm.mathParses[parent].splice(index, 1);
            }, function() {})
        }

        function cancelAll(){
            let confirm = $mdDialog.confirm()
                .title('Vui lòng xác nhận')
                .textContent('Quý khách muốn hủy chọn toàn bộ phiếu đã nhập')
                .ariaLabel('Cancel betting')
                .clickOutsideToClose(true)
                .parent(angular.element(document.body))
                .ok('Hủy Chọn')
                .cancel('Đóng');
            $mdDialog.show(confirm).then(function() {
                vm.mathParses = [];
            }, function() {})
        }

        function startBetting(){
            vm.ns = [];
            vm.sumPoint = 0;
            let checkCount = 0;
            angular.forEach(vm.mathParses, function (item) {
                let validate = vm.validateNumbers(item);
                item.validate = validate;
                checkCount += validate === false ? 1 : 0;
                item.pointCheck = !(item.Amount !== 0 && Number.isInteger(item.Amount));
                checkCount += item.pointCheck ? 1 : 0
            })

            if (checkCount !== 0){
                message.show('Dữ liệu cược không hợp lệ. Quý khách vui lòng kiểm tra lại')
            }else{
                let betObj = {}, TicketObj = {};
                betObj.Term = $rootScope.termName;
                betObj.IgnorePrice = true;
                betObj.Tickets = [];
                //sendBetting

                vm.betParses = msUtils.groupBy(vm.mathParses, function (m) {
                    return m.GameType
                });

                // console.log(vm.betParses);
                angular.forEach(vm.betParses, function (parses) {
                    vm.groupByBetTypes = msUtils.groupBy(parses, function (b) {
                        return b.BetType
                    });
                    angular.forEach(vm.groupByBetTypes, function (bets) {
                        TicketObj = {
                            GameType: bets[0].GameType,
                            BetType: bets[0].BetType,
                            Items: [],
                        };
                        angular.forEach(bets, function (item) {
                            if( msUtils.exists(item.BetType, [5,6]) ){
                                angular.forEach(item.Numbers, function (n) {
                                    let objItems = {};
                                    objItems.Numbers = [n];
                                    objItems.Price = item.Price;
                                    objItems.Point = item.Amount;
                                    TicketObj.Items.push(objItems)
                                })
                            }else{
                                let objItems = {};
                                objItems.Numbers = item.Numbers;
                                objItems.Price = item.Price;
                                objItems.Point = item.Amount;
                                TicketObj.Items.push(objItems);
                            }
                            vm.ns = vm.ns.concat(item.Numbers)
                            vm.sumPoint += item.Amount;
                        });
                        betObj.Tickets.push(TicketObj)
                    })
                });
                // console.log(betObj)
                // vm.lastIndex = 0;
                vm.ns = vm.ns.filter(function (item, index, inputArray) {	//Lọc trùng
                    return inputArray.indexOf(item) === index;
                });
                vm.eventData = {
                    betObj: betObj,
                    sumObj: {
                        numbers: vm.ns,
                        point: vm.sumPoint,
                        money: 0
                    }
                }
                $rootScope.$broadcast('EventBetting', vm.eventData);
                Analytics.trackEvent('MANUAL-PAGE', 'Betting', $rootScope.User.Username);
            }
        }

        function validateNumbers(item){
            let numArr = item.Numbers.filter( function( item, index, inputArray ) {	//Lọc trùng
                return inputArray.indexOf(item) === index;
            });
            if ( item.BetType === 2 ){
                let check = 0;
                check += numArr.length === 2 ? 0 : 1;
                angular.forEach(numArr, function (num) {
                    check += num.length === 2 ? 0 : 1
                });
                return check === 0
            }else if ( item.BetType === 3 ){
                let check = 0;
                check += numArr.length === 3 ? 0 : 1;
                angular.forEach(numArr, function (num) {
                    check += num.length === 2 ? 0 : 1
                });
                return check === 0
            }else if ( item.BetType === 4 ){
                let check = 0;
                check += numArr.length === 4 ? 0 : 1;
                angular.forEach(numArr, function (num) {
                    check += num.length === 2 ? 0 : 1
                });
                return check === 0
            }else if ( item.BetType === 5 ){
                return numArr.length >= 10
            }else if ( item.BetType === 6 ){
                return numArr.length >= 4
            }else if ( msUtils.exists(item.BetType, [10,11,12,17,18]) ){
                return numArr[0].length === 3
            }else if ( msUtils.exists(item.BetType, [13,14,19]) ){
                return numArr[0].length === 4
            }else{
                return numArr[0].length === 2
            }
        }

        function manualTicket(ev) {
            $mdDialog.show({
                controller: manualCtrl,
                templateUrl: 'app/main/from_ticket/dialog_manual.html',
                parent: angular.element(document.body),
                targetEvent: ev,
                clickOutsideToClose: true
            });
            function manualCtrl($scope, $mdDialog) {
                $scope.cancel = function() {
                    $mdDialog.cancel();
                };
            }
        }

        // if ($location.host() === 'nothing88.net' || $location.host() === 'www.nothing88.net' || $location.host() === 'localhost'){
        //     $scope.$on('allCompleted', function ($event, data){
        //         $timeout(function () {
        //             $rootScope.$broadcast('EventBetting', vm.eventData);
        //         }, 1000)
        //     })
        // }

        $rootScope.$on('ResetBetting', function (){
            vm.mathParses = [];
        })

        $timeout(function () {
            Analytics.trackEvent('MANUAL-PAGE', 'ENTER', $rootScope.User.Username);
        }, 500)
    }
})();
(function (){
    'use strict';
    angular
        .module('app.results',[]).config(config);

    /** @ngInject */
    function config($stateProvider, msApiProvider){
        // State
        $stateProvider
            .state('app.results', {
                url     : '/results',
                abstract: true,
                views    : {
                    'main@': {
                        templateUrl: 'app/core/layouts/content-general.html',
                        controller : 'MainController as one'
                    },
                    'toolbar@app.results'   : {
                        templateUrl: 'app/toolbar/layouts/vertical-navigation/toolbar.html',
                        controller : 'ToolbarController as vm'
                    },
                    'navigation@app.results': {
                        templateUrl: 'app/navigation/layouts/vertical-navigation/navigation.html',
                        controller : 'NavigationController as vm'
                    },
                    'accountPanel@app.results': {
                        templateUrl: 'app/account-panel/account-panel.html',
                        controller : 'accountPanelCtrl as vm'
                    }
                },
                bodyClass: 'one-results'
            })
            .state('app.results.traditional', {
                url      : '/traditional',
                views    : {
                    'content@app.results': {
                        templateUrl: 'app/main/results/traditional/traditional.results.html',
                        controller : 'traditionalResultsCtrl as vm'
                    }
                },
                bodyClass: 'one-results'
            })
            .state('app.results.legendary', {
                url      : '/legendary',
                views    : {
                    'content@app.results': {
                        templateUrl: 'app/main/results/legendary/legendary.result.html',
                        controller : 'legendaryResultsCtrl as vm'
                    }
                },
                bodyClass: 'one-results'
            })

    }
})();
(function (){
    'use strict';

    angular
        .module('app.results')
        .controller('legendaryResultsCtrl', legendaryResultsCtrl);

    /** @ngInject */
    function legendaryResultsCtrl($scope, $rootScope, $mdMedia, $timeout, network, msUtils, $mdDialog){
        let vm = this;
        $scope.$mdMedia = $mdMedia;

        vm.onTabSelected = onTabSelected;
        vm.changeDate = changeDate;
        vm.watchVideo = watchVideo;
        vm.date = new Date();

        let time = moment(),
            beforeTime = moment('00:00', "HH: mm"),
            afterTime = moment('11:00', "HH: mm");

        if (time.isBetween(beforeTime, afterTime)){
            vm.date.setDate(vm.date.getDate() - 1);
        }else{
            vm.date.setDate(vm.date.getDate());
        }

        function onTabSelected(index) {
            vm.GameType = index;
            vm.changeDate();
        }

        function changeDate() {
            vm.results = [];
            vm.resultReady = false;
            $timeout(function (){
                $scope.$digest();
            })
            $timeout(function (){
                network.Public.Lottery.LegendResult.getResultsByDate({ Date: moment(vm.date).format('YYYY-MM-DD'), GameTypes: [vm.GameType] }).then(function (response) {
                    vm.results = response.sort(function (a, b) {
                        return moment(b.DrawResultAt).unix() - moment(a.DrawResultAt).unix();
                    });
                    for (let i = 0; i < vm.results.length; i++){
                        if(vm.results[i].Fiveth){
                            vm.results[i].Fifth = vm.results[i].Fiveth;
                            delete vm.results[i].Fiveth
                        }
                        vm.results[i].matrix = msUtils.generatorMatrix(vm.results[i])
                    }
                    $timeout(function () {
                        vm.resultReady = true;
                    }, 200)
                })
            }, 200)
        }

        function watchVideo(item, $event){
            $mdDialog.show({
                controller: watchVideoCtrl,
                templateUrl: 'app/main/results/legendary/watch.video.html',
                parent: angular.element(document.body),
                targetEvent: $event,
                clickOutsideToClose: true,
                fullscreen: true,
                locals: {item: item}
            });
            function watchVideoCtrl($scope, item){
                $scope.cancel = function (){
                    $mdDialog.hide();
                }
                $scope.info = item;
                $timeout(function (){
                    let myVideo = document.getElementsByTagName('video')[0];
                    myVideo.src = 'https://vod.one789cdn.com/lottery789/'+ item.Term +'.'+ item.GameType +'.mp4';
                    myVideo.load();
                    myVideo.play();
                }, 300)
            }
        }
    }
})();
(function (){
    'use strict';

    angular
        .module('app.results')
        .controller('traditionalResultsCtrl', traditionalResultsCtrl);

    /** @ngInject */
    function traditionalResultsCtrl($scope, $rootScope, $mdMedia, $timeout, network, msUtils){
        var vm = this;
        $scope.$mdMedia = $mdMedia;
        vm.date = new Date();


        let time = moment(),
            beforeTime = moment('18:30', "HH: mm"),
            afterTime = moment('23:59', "HH: mm");

        if (time.isBetween(beforeTime, afterTime)){
            vm.date.setDate(vm.date.getDate());
        }else{
            vm.date.setDate(vm.date.getDate() - 1); //-1
        }

        vm.changeDate = changeDate;
        function changeDate() {
            vm.results = [];
            vm.resultReady = false;
            network.Public.Lottery.LotteryResult.getResultsByDate({ Date: moment(vm.date).format('YYYY-MM-DD') }).then(function (response) {
                for (let i = 0; i < response.length; i++) {
                    if(response[i].Fiveth){
                        response[i].Fifth = response[i].Fiveth;
                        delete response[i].Fiveth
                    }
                }
                vm.results = response;
                vm.caishen = $.grep(response, function (item) {
                    return item.Type === 4;
                })[0];
                vm.north = $.grep(response, function (item) {
                    return item.Type === 0;
                })[0];
                if (vm.north !== undefined){
                    vm.matrix = msUtils.generatorMatrix(vm.north);
                }
                vm.southA = $.grep(response, function (item) {
                    return item.Type === 1;
                })[0];
                vm.southB = $.grep(response, function (item) {
                    return item.Type === 2;
                })[0];
                vm.southC = $.grep(response, function (item) {
                    return item.Type === 3;
                })[0];
                vm.south = $.grep(response, function (item) {
                    return msUtils.exists(item.Type, [1,2,3]);
                })
                if (vm.south.length){
                    vm.southMatrix = msUtils.generatorSouthMatrix(vm.south)
                }
                $timeout(function () {
                    vm.resultReady = true;
                }, 500)

            })
        }
        $timeout(function () {
            vm.changeDate();
        }, 500)
    }
})();
(function () {
    'use strict';

    angular
        .module('app.legendary')
        .controller('legendaryMenuCtrl', legendaryMenuCtrl);

    function legendaryMenuCtrl($scope, $rootScope, $document, $mdDialog, $mdMedia, $mdSidenav, $state, $timeout, msLotteryService) {
        let vm = this;
        $scope.$mdMedia = $mdMedia;
        vm.menus = [
            {
                name: 'Miền Bắc',
                icon: 'icon-tile-four',
                navigation: 'fuse.northern',
                sub: [
                    {name: 'Cược Nhanh', state: 'app.legendary.northern.quick', navigation: 'fuse.northern.quick'},
                    {name: 'Đề', state: 'app.legendary.northern.jackpot', navigation: 'fuse.northern.jackpot'},
                    {name: 'Đề đầu', state: 'app.legendary.northern.head-jackpot', navigation: 'fuse.northern.head-jackpot', forceHide: true},
                    {name: 'Lô', icon: '', state: 'app.legendary.northern.lotto', navigation: 'fuse.northern.lotto'},
                    {name: 'Lô Đầu', icon: '', state: 'app.legendary.northern.lotto-head', navigation: 'fuse.northern.lotto-head', forceHide: true},
                    {name: 'Lô Xiên', state: 'app.legendary.northern.parlay', navigation: 'fuse.northern.parlay', forceHide: true},
                    {name: 'Lô Live', state: 'app.legendary.northern.live', navigation: 'fuse.northern.live', icon: 'icon-heart', class: 'live'},
                    {name: 'Đề trượt', state: 'app.legendary.northern.except-jackpot', navigation: 'fuse.northern.except-jackpot'},
                    {name: 'Lô trượt', state: 'app.legendary.northern.except-lotto', navigation: 'fuse.northern.except-lotto'},
                    {name: 'Đề 3 Càng', state: 'app.legendary.northern.3d.jackpot', navigation: 'fuse.northern.3d-jackpot', forceHide: true},
                    {name: 'Lô 3 Càng', state: 'app.legendary.northern.3d.lotto', navigation: 'fuse.northern.3d-lotto', forceHide: true},
                    {name: 'Đề 4 Càng', state: 'app.legendary.northern.4d.jackpot', navigation: 'fuse.northern.4d-jackpot', forceHide: true},
                    {name: 'Lô 4 Càng', state: 'app.legendary.northern.4d.lotto', navigation: 'fuse.northern.4d-lotto', forceHide: true},
                ]
            },
            // {
            //     name: 'Miền Nam',
            //     icon: 'icon-tile-four',
            //     navigation: 'fuse.southern',
            //     sub: [
            //         {name: 'Cược Nhanh', state: 'app.legendary.southern.quick', navigation: 'fuse.southern.quick'},
            //         {name: '2D', navigation: 'fuse.southern.2d', state: 'app.legendary.southern.2d.eighth', sub: [
            //                 {name: '2D Đầu', state: 'app.legendary.southern.2d.eighth', navigation: 'fuse.southern.2d.eighth', forceHide: true},
            //                 {name: '2D Đuôi', state: 'app.legendary.southern.2d.jackpot', navigation: 'fuse.southern.2d.jackpot', forceHide: true},
            //                 {name: '2D 18Lô', state: 'app.legendary.southern.2d.lotto', navigation: 'fuse.southern.2d.lotto', forceHide: true},
            //                 {name: '2D 18Lô Đầu', state: 'app.legendary.southern.2d.lotto-head', navigation: 'fuse.southern.2d.lotto-head', forceHide: true},
            //             ]
            //         },
            //         {name: '3D', navigation: 'fuse.southern.3d', state: 'app.legendary.southern.3d.seventh', sub: [
            //                 {name: '3D Đầu', state: 'app.legendary.southern.3d.seventh', navigation: 'fuse.southern.3d.seventh', forceHide: true},
            //                 {name: '3D Đuôi', state: 'app.legendary.southern.3d.jackpot', navigation: 'fuse.southern.3d.jackpot', forceHide: true},
            //                 {name: '3D 17Lô', state: 'app.legendary.southern.3d.lotto', navigation: 'fuse.southern.3d.lotto', forceHide: true},
            //             ]
            //         },
            //         {name: '4D', navigation: 'fuse.southern.4d', state: 'app.legendary.southern.4d.jackpot', sub: [
            //                 {name: '4D Đuôi', state: 'app.legendary.southern.4d.jackpot', navigation: 'fuse.southern.4d.jackpot', forceHide: true},
            //                 {name: '4D 16Lô', state: 'app.legendary.southern.4d.lotto', navigation: 'fuse.southern.4d.lotto', forceHide: true}
            //             ]
            //         },
            //         {name: 'Lô Xiên', state: 'app.legendary.southern.parlay', navigation: 'fuse.southern.parlay'},
            //         {name: 'Lô Live', state: 'app.legendary.southern.live', navigation: 'fuse.southern.live', icon: 'icon-heart', class: 'live'},
            //     ]
            // }
        ];

        // if ($mdMedia('min-width: 1150px')){
        //     vm.menus.map(function (items){
        //         if (items.sub){
        //             items.sub.map(function (item){
        //                 if (item.navigation === 'fuse.southern.2d'){
        //                     item.name = '2D'
        //                     delete item.state
        //                 }
        //                 if (item.navigation === 'fuse.southern.3d'){
        //                     item.name = '3D'
        //                     delete item.state
        //                 }
        //                 if (item.navigation === 'fuse.southern.4d'){
        //                     item.name = '4D'
        //                     delete item.state
        //                 }
        //             })
        //         }
        //     })
        // }

        // Navigation
        msLotteryService.deleteItem('fuse')
        msLotteryService.saveItem('fuse', {
            title : '',
            group : true,
            weight: 1
        });
        angular.forEach(vm.menus, function (node, i) {
            msLotteryService.saveItem(node.navigation, {
                title    : node.name,
                icon     : node.icon,
                state    : node.state,
                class    : node.class,
                weight   : i
            });
            if (node.sub !== undefined){
                angular.forEach(node.sub, function (item, i) {
                    msLotteryService.saveItem(item.navigation, {
                        title    : item.name,
                        icon     : item.icon,
                        state    : item.state,
                        class    : item.class,
                        weight   : i,
                        hidden   : function () {
                            return (item.hiddenXs && $mdMedia('xs')) || (item.forceHide && $mdMedia('max-width: 1150px'))
                        }
                    });
                    if (item.sub !== undefined){
                        angular.forEach(item.sub, function (dol, i) {
                            msLotteryService.saveItem(dol.navigation, {
                                title    : dol.name,
                                icon     : dol.icon,
                                state    : dol.state,
                                class    : dol.class,
                                weight   : i,
                                hidden   : function () {
                                    return (dol.hiddenXs && $mdMedia('xs'))  || (dol.forceHide && $mdMedia('max-width: 1150px'))
                                }
                            });
                        })
                    }
                })
            }
        })
    }
})();
(function (){
    'use strict';

    angular
        .module('app.auth', [])
        .config(config);

    /** @ngInject */
    function config($stateProvider){
        // State
        $stateProvider
            .state('app.auth', {
                url      : '/auth',
                views    : {
                    'main@': {
                        templateUrl: 'app/core/layouts/content-only.html',
                        controller : 'MainController as one'
                    },
                    'content@app.auth': {
                        templateUrl: 'app/main/auth/auth.html',
                        controller : 'authCtrl as vm'
                    }
                },
                bodyClass: 'auth789'
            })
            .state('app.auth.set-password', {
                url: '/set-password',
                views: {
                    'content@app.auth': {
                        templateUrl: 'app/main/auth/password/password.html',
                        controller: 'setPasswordCtrl as vm'
                    }
                },
                bodyClass: 'auth789'
            })
            .state('app.auth.otp', {
                url: '/otp',
                views: {
                    'content@app.auth': {
                        templateUrl: 'app/main/auth/otp/otp.html',
                        controller: 'providedOtpCtrl as vm'
                    }
                },
                bodyClass: 'auth789'
            })
            .state('app.auth.agreement', {
                url: '/agreement?id',
                views: {
                    'content@app.auth': {
                        templateUrl: 'app/main/auth/agreement/agreement.html',
                        controller: 'agreementCtrl as vm'
                    }
                },
                bodyClass: 'agreement'
            })
            .state('app.auth.enable-otp', {
                url: '/enable-otp',
                views: {
                    'content@app.auth': {
                        templateUrl: 'app/main/auth/enable-otp/enable-otp.html'
                    },
                    'otpView@app.auth.enable-otp': {
                        templateUrl: 'app/main/account/otp/otp.template.html',
                        controller: 'otpController as vm'
                    }
                },
                bodyClass: 'enable-otp'
            })
            .state('app.auth.expired', {
                url: '/expired',
                views: {
                    'content@app.auth': {
                        templateUrl: 'app/main/auth/password-expired/password-expired.html',
                        controller: 'expiredCtrl as vm'
                    }
                },
                bodyClass: 'agreement'
            });
    }

})();
(function (){
    'use strict';

    angular
        .module('app.auth')
        .controller('providedOtpCtrl', providedOtpCtrl);

    /** @ngInject */
    function providedOtpCtrl($scope, $rootScope, network, message){
        let vm = this;
        vm.validateOTP = validateOTP;

        function validateOTP() {
            vm.submitting = true;
            network.User.confirmSignIn({code: vm.otp}).then(function (resp) {
                $rootScope.$broadcast('userAccount::update');
            }).catch(function (err) {
                if (err.code === 'CodeMismatchException'){
                    vm.otp = '';
                    vm.submitting = false;
                    message.show('OTP không hợp lệ');
                    $scope.$digest();
                }else{
                    vm.otp = '';
                    vm.submitting = false;
                    message.show(err.message);
                    $scope.$digest();
                }
            })
        }
    }
})();
(function (){
    'use strict';
    angular
        .module('app.auth')
        .controller('expiredCtrl', expiredCtrl);

    function expiredCtrl($scope, $rootScope, $window){
        let vm = this;
    }
})();
(function (){
    'use strict';
    angular
        .module('app.auth').controller('setPasswordCtrl', setPasswordCtrl);

    /** @ngInject */
    function setPasswordCtrl($rootScope, $state, $location, network, message)    {
        var vm = this;
        vm.form = {};
        vm.setPassword = setPassword;
        vm.mustChange = $location.path() === '/auth/set-password';
        if ($rootScope.User === undefined && !vm.mustChange){
            $state.go('app.dashboard')
        }

        vm.inputFocus = inputFocus;
        vm.inputKeyup = inputKeyup;

        let lowerCasePattern = /^(?=.*[a-z]).+$/;
        let upperCasePattern = /^(?=.*[A-Z]).+$/;
        let numberPattern = /^(?=.*[\d]).+$/;
        let specialCharacterPatter = /([-+=_!@#$%^&*.,;:'\"<>/?`~\[\]\(\)\{\}\\\|\s])/;
        let characterCountPattern = /^.{6,}/;

        function inputFocus() {
            vm.showCheck = true;
            vm.inputKeyup();
        }

        function inputKeyup() {
            if (vm.form.newPassword === undefined){return}
            vm.lowerCase = lowerCasePattern.test(vm.form.newPassword) ? 1 : 0;
            vm.upperCase = upperCasePattern.test(vm.form.newPassword) ? 1 : 0;
            vm.number = numberPattern.test(vm.form.newPassword) ? 1 : 0;
            vm.specialChar = specialCharacterPatter.test(vm.form.newPassword) ? 1 : 0;
            vm.characterCount = characterCountPattern.test(vm.form.newPassword);

            vm.totalScore = vm.lowerCase + vm.upperCase + vm.number + vm.specialChar;
            vm.passwordPerfect = (vm.totalScore) >= 3 && vm.characterCount;
            vm.showCheck = !vm.passwordPerfect;
        }

        function setPassword() {
            vm.submitting = true;
            vm.send = angular.copy(vm.form);
            network.User.completeNewPassword(vm.send).then(function (response){
                vm.submitting = false;
                message.show('Cập nhật mật khẩu thành công');
                $rootScope.$broadcast('userAccount::update');
            }).catch(function (error) {
                console.log(error);
                vm.submitting = false;
                message.show(error.message);
                $state.go('app.auth')
            })
        }
    }
})();

(function (){
    'use strict';

    angular
        .module('app.auth')
        .controller('agreementCtrl', agreementCtrl);

    /** @ngInject */
    function agreementCtrl($scope, $rootScope, $window, $interval){
        let vm = this;
        vm.iAgree = iAgree;

        vm.wait = 5
        vm.inter = $interval(function () {
            vm.wait -= 1;
            if (vm.wait <= 0){
                vm.thisOK = true;
                $interval.cancel(vm.inter);
            }
        }, 1000)


        function iAgree() {
            // sessionStorage.removeItem("TradOdds");
            // sessionStorage.removeItem("LegendOdds");
            $interval.cancel(vm.inter);
            if ($rootScope.returnUrl === undefined){
                $window.location = '/traditional/northern/jackpot/'
            }else{
                $rootScope.returnUrl = $rootScope.returnUrl === '/' ? '/traditional/northern/jackpot/' : $rootScope.returnUrl
                $window.location = $rootScope.returnUrl
            }
        }
    }
})();
(function (){
    'use strict';
    angular.module('app.account').controller('telegramCtrl', telegramCtrl);
    function telegramCtrl($rootScope, $mdDialog, $scope, message, msUtils){
        let vm = this;
        vm.cancelTelegram = cancelTelegram;
        vm.initTelegram = initTelegram;
        vm.hasPsk = false;

        vm.deviceName = msUtils.isMobile() === null ? "máy tính" : "điện thoại";
        let tableList = ["iPad"]
        if (msUtils.exists(msUtils.isMobile(), tableList)){
            vm.deviceName = "máy tính bảng"
        }

        vm.initTelegram();

        function initTelegram(){
            Lotus.Telegram.generateLink().then(function (response){
                vm.hasPsk = true;
                vm.telegramBot = response;
            })
        }


        vm.copied = false;
        vm.onSuccess = function (e) {
            vm.copied = !vm.copied;
            setTimeout(function () {
                vm.copied = !vm.copied;
                $scope.$digest();
            }, 3000)
        };

        function cancelTelegram(ev){
            let confirm = $mdDialog.confirm()
                .title('Hủy liên kết?')
                .textContent('Quý khách vui lòng xác nhận sẽ hủy liên kết tài khoản này với Telegram')
                .ariaLabel('Lucky day')
                .targetEvent(ev)
                .clickOutsideToClose(true)
                .ok('Hủy liên kết')
                .cancel('Không');
            $mdDialog.show(confirm).then(function() {
                Lotus.Telegram.unlink().then(function (response){
                    // console.log(response)
                    if (response.Result){
                        message.show("Hủy liên kết thành công.")
                        vm.telegramBot.Status = 0;
                        vm.initTelegram();
                        $scope.$digest();
                    }
                })
            }, function() {});
        }
    }
})();

(function (){
    'use strict';

    angular.module('app.account').controller('statementCtrl', statementCtrl);
    function statementCtrl($rootScope, $scope, $timeout, network, msUtils){
        var vm = this;
        vm.fetchReport = fetchReport;
        vm.fetchReport();
        vm.loading = true;

        function fetchReport() {
            if ($rootScope.User !== undefined){
                let data = {
                    From: moment().subtract(1, 'week').startOf('isoWeek').format('YYYY-MM-DD'),
                    To: moment().endOf('isoWeek').format('YYYY-MM-DD'),
                    ProductTypes: [0, 1, 2, 100, 101]
                };

                network.Report.getReportByProductionDate(data).then(function (response) {
                    // for (var i = 1; i<7; i++){
                    //     response.push(
                    //         {
                    //             "Date": moment().subtract(i, 'day').format('YYYY-MM-DDTHH:mm:ss+07:00'),
                    //             "ProductType": 100,
                    //             "Quantity": 60,
                    //             "Amount": 60,
                    //             "NetAmount": 60,
                    //             "Commission": 0,
                    //             "WinLose": 12
                    //         }
                    //         )
                    // }
                    vm.loading = false;
                    angular.forEach(response, function (r) {
                        r.week = moment(r.Date).format('w');
                        r.yearDay = moment(r.Date).dayOfYear();
                        r.dateVi = moment(r.Date).format('dddd, DD/MM');
                        r.unixDate = moment(r.Date).unix();
                    });
                    response = response.sort(function (a, b) {
                        return b.yearDay - a.yearDay
                    });
                    vm.groupedData = response.groupBy(function(o){return JSON.stringify({a: o.week})});
                    angular.forEach(vm.groupedData, function (w, i) {
                        w.groupByDate = w.group.groupBy(function(o){return JSON.stringify({a: o.yearDay})});
                        angular.forEach(w.groupByDate, function(d){
                            d.sumDay = {Quantity: 0, Commission: 0, Amount: 0, NetAmount: 0, WinLose: 0, Result: 0};
                            angular.forEach(d.group, function(p){
                                d.sumDay.Quantity += p.Quantity;
                                d.sumDay.Commission += p.Commission;
                                d.sumDay.Amount += p.Amount;
                                d.sumDay.NetAmount += p.NetAmount;
                                d.sumDay.WinLose += p.WinLose;
                            })
                        });
                        w.weekDay = w.group[0].week === moment().format('w') ? 'Tuần này' : 'Tuần trước';
                        w.sumWeek = {Quantity: 0, Commission: 0, Amount: 0, NetAmount: 0, WinLose: 0, Result: 0};
                        angular.forEach(w.group, function (s) {
                            w.sumWeek.Quantity += s.Quantity;
                            w.sumWeek.Commission += s.Commission;
                            w.sumWeek.Amount += s.Amount;
                            w.sumWeek.NetAmount += s.NetAmount;
                            w.sumWeek.WinLose += s.WinLose;
                        })
                    });
                    $scope.$digest();
                    // console.log(vm.groupedData)
                })
            }else{
                $timeout(function () {
                    vm.fetchReport()
                }, 1000)
            }
        }
    }
})();

(function (){
    'use strict';
    angular.module('app.account').controller('myCtrl', myCtrl);
    function myCtrl($rootScope, $scope, $timeout, $mdDialog, $state, network, message){
        let vm = this;
        vm.transferBalance = transferBalance;

        $timeout(function (){
            $rootScope.updateBalance();
        }, 1000)

        $timeout(function (){
            if ($rootScope.User.SabaBalance === 0 || $rootScope.User.SabaBalance === undefined){
                Lotus.Saba.Wallet.getBalance().then(function (response){
                    // console.log(response)
                    $rootScope.User.SabaBalance = response.Balance !== null ? response.Balance : $rootScope.User.SabaBalance;
                    $timeout(function (){
                        $scope.$digest();
                    })
                }).catch(function (error){
                    console.log(error)
                })
            }
        }, 2000)


        function transferBalance(direction, $event){
            $mdDialog.show({
                controller: moneyTransferCtrl,
                templateUrl: 'app/main/saba/transfer-balance.html',
                parent: angular.element(document.body),
                targetEvent: $event,
                clickOutsideToClose: true,
                fullscreen: true,
                locals: {direction: parseInt(direction)}
            });

            function moneyTransferCtrl($scope, $location, message, direction){
                $scope.cancel = function() {
                    $mdDialog.cancel();
                };

                $scope.initDirection = function (direction){
                    $scope.direction = direction;
                    $scope.label = direction === 0 ? 'Rút tiền từ Bong88 về' : 'Chuyển tiền sang Bong88';
                    $scope.shortLabel = direction === 0 ? 'Rút tiền' : 'Chuyển tiền';

                    $scope.transfer = {
                        Remember: false,
                        Direction: direction
                    }
                    $scope.arTemplates = [
                        1000, 2000, 5000, 10000, 20000, 50000, 100000, 200000, 500000, 1000000
                    ];
                    $scope.arTemplates = $scope.arTemplates.filter(function (item) {
                        return direction === 0 ? item < $rootScope.User.SabaBalance/1000 : item < $rootScope.User.Balance/1000
                    });
                }

                $scope.initDirection(direction);

                $scope.setMoney = function (item){
                    $scope.transfer.Amount = item
                }
                $scope.transferAll = function (){
                    $scope.transfer.Amount = $scope.direction === 0 ? Math.floor($rootScope.User.SabaBalance/1000) : Math.floor($rootScope.User.Balance/1000)
                }

                $scope.transferAction = function (){
                    $scope.send = angular.copy($scope.transfer)
                    $scope.send.Amount = $scope.transfer.Amount * 1000;

                    if (isNaN($scope.send.Amount)){
                        message.infoMultiple('Số tiền không hợp lệ');
                        return;
                    }

                    if ($scope.direction === 1 && ($scope.send.Amount > $rootScope.User.Balance) || $scope.direction === 0 && ($scope.send.Amount > $rootScope.User.SabaBalance)){
                        message.infoMultiple('Số dư của quý khách không đủ để thực hiện');
                        return;
                    }

                    $scope.submitting = true;
                    Lotus.Saba.Wallet.transferBalance($scope.send).then(function (response){
                        // console.log(response)
                        if (response.Result){
                            $rootScope.User.Balance = $scope.transfer.Direction === 1 ? $rootScope.User.Balance - $scope.send.Amount : $rootScope.User.Balance + $scope.send.Amount;
                            $rootScope.User.SabaBalance = $scope.transfer.Direction === 1 ? $rootScope.User.SabaBalance + $scope.send.Amount : $rootScope.User.SabaBalance - $scope.send.Amount;
                            message.show('Chuyển tiền thành công. Quý khách vui lòng chờ trong giây lát');
                            $timeout(function (){
                                $scope.$digest();
                            })
                        }
                    }).catch(function (error){
                        console.log(error.code);
                        $scope.submitting = false;
                        message.infoMultiple(error.message)
                    })
                }
            }
        }
    }
})();

(function (){
    'use strict';

    angular
        .module('app.account')
        .controller('limitCtrl', limitCtrl);

    /** @ngInject */
    function limitCtrl($rootScope, $timeout, msUtils, network){
        let vm = this;
        vm.count = 0;
        vm.init = init;
        vm.init();
        function init(){
            if ($rootScope.myParameters !== undefined){
                // console.log($rootScope.myParameters)
                $rootScope.myParameters.sort(function (a, b) {
                    return a.GameType - b.GameType || a.BetType - b.BetType
                });
                vm.parameter = $rootScope.myParameters.groupBy(function(o){return JSON.stringify({a: o.GameType})});
                // console.log(vm.parameter)

                let order = [7, 8, 9, 15, 16, 10, 11, 12, 17, 18, 19, 13, 14, 20, 2, 3, 4];
                angular.forEach(vm.parameter, function (lotShare) {
                    if ( msUtils.exists(lotShare.group[0].GameType, [1,2,3,4])){
                        lotShare.group.sort(function (a, b) {
                            return order.indexOf(a.BetType) - order.indexOf(b.BetType)
                        })
                    }

                    // if (lotShare.group[0].GameType === 1){
                    //     lotShare.group = lotShare.group.filter(function( obj ) {
                    //         return !msUtils.exists(obj.BetType, [7,8,9,2,3,4,20])
                    //     });
                    // }
                    // if (lotShare.group[0].GameType === 2){
                    //     lotShare.group = lotShare.group.filter(function( obj ) {
                    //         return !msUtils.exists(obj.BetType, [27])
                    //     });
                    // }
                })
                // console.log(vm.parameter)

            }else{
                $timeout(function () {
                    vm.init()
                }, 1000)
            }
        }

    }
})();

(function () {
    'use strict';
    angular.module('app.account').controller('otpController', otpController);

    function otpController($rootScope, $mdDialog, $mdToast, $timeout, $state, network, message) {
        var vm = this;
        vm.starting = starting;
        vm.cancelOTP = cancelOTP;
        vm.init = init;

        vm.init();
        function init() {
            if ($rootScope.User !== undefined){
                vm.EnabledOTP = $rootScope.User.MfaType === 1;
            }else{
                $timeout(function () {
                    vm.init();
                }, 1000)
            }
        }

        function cancelOTP(ev) {
            let confirm = $mdDialog.prompt()
                .title('Qúy khách muốn hủy xác minh 2 bước')
                .textContent('Quý khách vui lòng cung cấp mã OTP để thực hiện hủy')
                .placeholder('OTP')
                .ariaLabel('OTP')
                .targetEvent(ev)
                .required(true)
                .ok('OK')
                .cancel('Cancel');

            $mdDialog.show(confirm).then(function (otp) {
                network.User.disableMFA({code: otp}).then(function (resp) {
                    if (resp) {
                        message.show('Hủy xác minh 2 bước thành công.');
                        vm.EnabledOTP = false;
                        $rootScope.User.MfaType = 0;
                        $rootScope.$broadcast('userAccount::update');
                    }
                }).catch(function (err) {
                    if (err.code === 'MFARequiredException') {
                        message.show('Qúy khách bắt buộc phải sử dụng OTP')
                    } else {
                        message.show('OTP không hợp lệ')
                    }
                });

            }, function () {
            });
        }

        function starting(ev) {
            $mdDialog.show({
                controller: setupOtpCtrl,
                templateUrl: 'app/main/account/otp/setup.dialog.html',
                parent: angular.element(document.body),
                targetEvent: ev,
                clickOutsideToClose: false
            }).then(function (value) {

            }, function (reason) {
                if (reason) {
                    vm.EnabledOTP = true;
                }
            });

            function setupOtpCtrl($scope) {
                $scope.cancel = function (ev) {
                    $mdDialog.cancel(ev);
                };

                $scope.data = {};
                $scope.data.device = 'apple';
                $scope.data.step = 0;
                $scope.copied = false;

                $scope.nextStep = function () {
                    if ($scope.data.step === 0) {
                        $scope.preSharedKey();
                        $scope.data.step = $scope.data.device === 'apple' ? 1 : 2;
                        $scope.data.remember = $scope.data.device === 'apple' ? 1 : 2;
                    } else {
                        $scope.data.step = 4;
                    }
                };

                $scope.preSharedKey = function () {
                    $scope.submitting = true;
                    network.User.generateTOTPSecretCode().then(function (resp) {
                        $scope.sharedKey = resp.SecretCode;
                        $scope.imgSrc = resp.Data;
                        $timeout(function () {
                            $scope.hasPsk = true;

                            $scope.submitting = false;
                        }, 1250)
                    })
                };

                $scope.cannotScan = function () {
                    $scope.data.step = 3;
                };

                $scope.onSuccess = function (e) {
                    $scope.copied = !$scope.copied;
                    setTimeout(function () {
                        $scope.copied = !$scope.copied;
                        $scope.$digest();
                    }, 3000)
                };
                $scope.onError = function (e) {
                    console.log(e)
                };

                $scope.otpInput = {
                    size: 6,
                    type: 'tel',
                    onDone: function (value) {
                        $scope.data.otp = value;
                    },
                    onChange: function (value) {
                        $scope.otpOk = value.length === 6;
                        $scope.valFalse = false;
                    }
                };

                $scope.setupOTP = function () {
                    $scope.submitting = true;
                    network.User.enableMFA( {code: $scope.data.otp}).then(function (resp) {
                        if (resp) {
                            $scope.data.step = 5;
                            $scope.submitting = false;
                            $rootScope.$broadcast('userAccount::update');
                            $scope.$digest();
                        }
                    }).catch(function (err) {
                        $scope.submitting = false;
                        $scope.valFalse = true;
                        $scope.$digest();
                    });
                }
            }
        }

    }
})();

(function (){
    'use strict';
    angular.module('app.account').controller('changePasswordCtrl', changePasswordCtrl);
    function changePasswordCtrl($rootScope, $mdDialog, $state, $timeout, network, message){
        let vm = this;
        vm.showPassword = showPassword;
        vm.changePassword = changePassword;
        vm.show = false;
        vm.showText = 'SHOW';

        vm.form = {
            password: '',
            newPassword: '',
            confirmPassword: ''
        }

        vm.inputFocus = inputFocus;
        vm.inputKeyup = inputKeyup;

        let lowerCasePattern = /^(?=.*[a-z]).+$/;
        let upperCasePattern = /^(?=.*[A-Z]).+$/;
        let numberPattern = /^(?=.*[\d]).+$/;
        let specialCharacterPatter = /([-+=_!@#$%^&*.,;:'\"<>/?`~\[\]\(\)\{\}\\\|\s])/;
        let characterCountPattern = /^.{6,}/;

        function inputFocus() {
            vm.showCheck = true;
            vm.inputKeyup();
        }

        function inputKeyup() {
            if (vm.form.newPassword === undefined){return}
            vm.lowerCase = lowerCasePattern.test(vm.form.newPassword) ? 1 : 0;
            vm.upperCase = upperCasePattern.test(vm.form.newPassword) ? 1 : 0;
            vm.number = numberPattern.test(vm.form.newPassword) ? 1 : 0;
            vm.specialChar = specialCharacterPatter.test(vm.form.newPassword) ? 1 : 0;
            vm.characterCount = characterCountPattern.test(vm.form.newPassword);

            vm.totalScore = vm.lowerCase + vm.upperCase + vm.number + vm.specialChar;
            vm.passwordPerfect = (vm.totalScore) >= 3 && vm.characterCount;
            vm.showCheck = !vm.passwordPerfect;
        }

        function showPassword() {
            vm.show = !vm.show;
            vm.showText = vm.show ? 'HIDE' : 'SHOW'
        }
        
        function changePassword() {
            vm.send = angular.copy(vm.form);
            vm.submitting = true;
            network.User.changePassword(vm.send).then(function (response) {
                console.log(response)
                if (response){
                    vm.submitting = false;
                    message.show('Thay đổi mật khẩu thành công. Quý khách vui lòng đăng nhập lại');
                    $timeout(function (){
                        $rootScope.signOut();
                    }, 1000)
                }
            }).catch(function (error) {
                console.log(error)
                vm.submitting = false;
                if (error.code === 'NotAuthorizedException'){
                    message.show('Tên người dùng hoặc mật khẩu không chính xác')
                }else if (error.code === 'ArgumentException'){
                    message.show(error.message)
                }
            })
        }
    }
})();

(function (){
    'use strict';
    angular
        .module('app.casino', [])
        .config(config);

    function config($stateProvider, msApiProvider){
        // State
        $stateProvider
            .state('app.casino', {
                url    : '/casino',
                views  : {
                    'main@':{
                        templateUrl: 'app/core/layouts/content-game-play.html',
                        controller : 'MainController as vm'
                    },
                    'toolbar@app.casino'   : {
                        templateUrl: 'app/toolbar/layouts/vertical-navigation/toolbar.html',
                        controller : 'ToolbarController as vm'
                    },
                    'navigation@app.casino': {
                        templateUrl: 'app/navigation/layouts/vertical-navigation/navigation.html',
                        controller : 'NavigationController as vm'
                    },
                    'content@app.casino': {
                        templateUrl: 'app/main/casino/lobby/lobby.html',
                        controller : 'lobbyController as vm'
                    },
                    'accountPanel@app.casino': {
                        templateUrl: 'app/account-panel/account-panel.html',
                        controller : 'accountPanelCtrl as vm'
                    }
                },
                resolve: {
                    gameData: function (msApi){
                        return msApi.resolve('games@get');
                    },
                    Maintenance: function (msApi) {
                        return msApi.resolve('Maintenance@get');
                    }
                },
                bodyClass: 'gaming'
            })
            .state('app.casino.single', {
                url      : '/:area',
                views    : {
                    'content@app.casino': {
                        templateUrl: 'app/main/casino/casino.html',
                        controller : 'casinoController as vm'
                    }
                },
                bodyClass: 'gaming'
            })

        msApiProvider.register('games', ['app/data/games.json']);
        msApiProvider.register('Maintenance', ['app/data/wm-maintain.json']);
    }
})();
(function (){
    'use strict';
    angular.module('app.casino').controller('lobbyController', lobbyController)
        .directive('vidDir', [function () {
            return {
                restrict: 'A',
                link: function (scope, elem, attr) {
                    elem.onended = function(){
                        console.log('vid ended')
                    }
                }
            };
        }]);

    function lobbyController($rootScope, $scope, $state, $location, $mdMedia, $sce, $timeout, $interval, $mdDialog, casinoConfig, msUtils){
        let vm = this;
        let countdown = {};
        let livePlayer = {};

        vm.a_Areas = [100, 101];
        $scope.$mdMedia = $mdMedia;
        vm.gameStyle = {"background": "url(assets/images/backgrounds/crab.jpg) 50% 50% / cover no-repeat fixed"};

        // $state.go('app.casino.single', {area: 100})
        // return;

        vm.s_oGame = new CGame();
        vm.s_oNotify = new Notify();

        vm.init = init;
        vm.playVideo = playVideo;
        vm.videoToggle = videoToggle;
        vm.areaProperty = areaProperty;
        vm.updateRoller = updateRoller;
        vm.buildRoller = buildRoller;
        vm.resetRoller = resetRoller;
        vm.buildTokenStack = buildTokenStack;
        vm.generateTableInfo = generateTableInfo;
        vm._prepareGame = _prepareGame;
        vm.settingNewGame = settingNewGame;
        vm.gen_oPlayerModel = gen_oPlayerModel;
        vm.setChip = setChip;
        vm.chipSettings = chipSettings;
        vm.resetTable = resetTable;
        vm.tableInfo = tableInfo;
        vm.betList = betList;
        vm.firstPlayVideo = firstPlayVideo;

        vm.videoInteraction = {};
        vm._oPlayerModel = {}
        vm.showNotify = {}
        vm.Areas = {}
        vm.playingVariables = {}

        vm.a_Areas.map(function (area){
            vm.videoInteraction[area] = false;
            vm._oPlayerModel[area] = {}
            vm.showNotify[area] = {}
            vm.Areas[area] = {videoDisplay: false}
            vm.playingVariables[area] = {_committed: false, _firstTime: true}
            countdown[area] = {}
            livePlayer[area] = {}
        })
        vm.globalConfig = {};
        vm.tokenOnStack = [];
        vm.globalConfig.configMoney = casinoConfig.configMoney();
        vm.globalConfig._iCurBetAmount = 0;
        vm.globalConfig._joinedTable = false;

        function setChip(chip){
            vm.tokenOnStack.map(function (item){
                item.active = item.name === chip.name
            })
            vm.globalConfig._iCurBetAmount = vm.globalConfig.configMoney.find(function (item){return item.label === chip.name}).money;
            // console.log('_iCurBetAmount:', vm.globalConfig._iCurBetAmount);
        }

        function chipSettings(){
            $mdDialog.show({
                controller: chipSettingsCtrl,
                templateUrl: 'app/main/casino/lobby/dialog/chip-settings.html',
                parent: angular.element(document.body),
                clickOutsideToClose: true,
                // fullscreen: true
            });

            function chipSettingsCtrl($scope){
                $scope.cancel = function() {
                    $mdDialog.cancel();
                };
                $scope.o_playerProperty = angular.copy(vm.o_playerProperty);
                $scope.a_configToken = casinoConfig.configToken();
                $scope.setRank = function (item, init){
                    $scope.maxTokenReached = null;
                    $scope.o_playerProperty.DefaultBetLimit = item;
                    $scope._aToken = []
                    $scope.a_configToken[item].token.map(function (token, index){
                        $scope._aToken.push({name: token, checked: index < 5});
                    })
                    if (init){
                        $scope._aToken.map(function (item, index){
                            item.checked = vm.tokenOnStack.filter(function (t){return t.name === item.name && !t.hidden}).length;
                        })
                    }
                }
                $scope.f_selectToken = function (token){
                    token.checked = !token.checked;
                    $scope.maxTokenReached = $scope._aToken.filter(function (item){return item.checked}).length > 5 || $scope._aToken.filter(function (item){return item.checked}).length === 0;
                }
                $scope.update = function() {
                    $scope.submitting = true;
                    if ($scope.o_playerProperty.DefaultBetLimit !== vm.o_playerProperty.DefaultBetLimit){
                        Lotus.SenCasino.UserGame.updateDefaultBetLimit({BetLimit: $scope.o_playerProperty.DefaultBetLimit}).then(function () {
                            vm.o_playerProperty.DefaultBetLimit = $scope.o_playerProperty.DefaultBetLimit;
                            $scope.updateTokenOnTable();
                            $timeout(function () {
                                $mdDialog.cancel();
                            }, 500)
                        }).catch(function (error) {});
                    }else{
                        $scope.updateTokenOnTable();
                        $mdDialog.cancel();
                    }
                };
                $scope.updateTokenOnTable = function(){
                    let _tempToken = $scope._aToken.filter(function (item){return item.checked});
                    vm.tokenOnStack.map(function (item, index){
                        item.active = index === 0;
                        if (_tempToken[index] !== undefined) {
                            item.hidden = false;
                            item.name = _tempToken[index].name;
                        }else{
                            item.name = '00'
                            item.hidden = true;
                        }
                    })
                    $timeout(function (){
                        vm.globalConfig._iCurBetAmount = vm.globalConfig.configMoney.find(function (cm){return cm.label === vm.tokenOnStack[0].name}).money;
                    }, 100)
                }
                $scope.o_playerProperty.BetLimits.map(function (item){
                    if (item === $scope.o_playerProperty.DefaultBetLimit) {
                        $scope.setRank(item, true)
                    }
                })
            }
        }

        function CGame(){
            this.Realtime = function (){
                if (!vm.globalConfig._joinedTable){
                    vm.s_oGame.init();
                    vm.globalConfig._joinedTable = true
                    vm.a_Areas.map(function (areaNumber){
                        Lotus.SenCasino.Games.Sedie.Realtime.subcribe({AreaNumber: areaNumber}).then( function(){
                            console.log("Subscribe Game Sedie OK ");
                        });

                        Lotus.SenCasino.Games.Sedie.Realtime.on("area:"+ areaNumber +":event:2001",function(data){
                            console.log("Ván chơi mới: data= " + JSON.stringify(data));
                            vm._prepareGame(areaNumber, data);
                        });

                        Lotus.SenCasino.Games.Sedie.Realtime.on("area:"+ areaNumber +":event:2002",function(data){
                            console.log("Bắt đầu cược: data= " + JSON.stringify(data));
                            vm.s_oGame.playGame(areaNumber, data);
                        });

                        Lotus.SenCasino.Games.Sedie.Realtime.on("area:"+ areaNumber +":event:2003",function(data){
                            console.log("Ván chơi kết thúc: data= " + JSON.stringify(data));
                            vm.s_oGame._endGame(areaNumber, data.GameResult)
                        });

                        Lotus.SenCasino.Games.Sedie.Realtime.on("area:"+ areaNumber +":event:2004",function(data){
                            console.log("Game tạm dừng: data= " + JSON.stringify(data));
                            vm.s_oNotify.warning(data.Message);
                            vm.Areas[areaNumber].AreaProperty.Status = 1;
                            vm.Areas[areaNumber].AreaProperty.Message = data.Message;
                        });

                        Lotus.SenCasino.Games.Sedie.Realtime.on("area:"+ areaNumber +":event:2005",function(data){
                            console.log("Dealer check-in: data= " + JSON.stringify(data));
                            vm.s_oNotify.newDealer(areaNumber, data.DealerFullName);
                        });

                        Lotus.SenCasino.Games.Sedie.Realtime.on("area:"+ areaNumber +":event:2006",function(data){
                            console.log("Thay đổi dụng cụ thiết bị chơi: data= " + JSON.stringify(data));
                            // $rootScope.$broadcast('event:2006');
                        });

                        Lotus.SenCasino.Games.Sedie.Realtime.on("area:"+ areaNumber +":event:2007",function(data){
                            console.log("Game mở lại phục vụ: data= " + JSON.stringify(data));
                            vm.Areas[areaNumber].AreaProperty.Status = 2;
                            vm.s_oNotify.warning(data.Message);
                        });

                        Lotus.SenCasino.Games.Sedie.Realtime.on("area:"+ areaNumber +":event:2008",function(data){
                            console.log("Bàn chơi ngừng phục vụ: data= " + JSON.stringify(data));
                            if (data.Message.length){
                                vm.s_oNotify.warning(data.Message);
                            }
                            vm.Areas[areaNumber].AreaProperty.Status = 0;
                            vm.Areas[areaNumber].AreaProperty.Message = data.Message;
                            if (vm.Areas[areaNumber].videoDisplay){
                                // vm.videoToggle(areaNumber);
                            }
                        });

                        Lotus.SenCasino.Games.Sedie.Realtime.on("area:"+ areaNumber +":event:2009",function(data){
                            console.log("Huỷ ván: data= " + JSON.stringify(data));
                            vm.s_oNotify.roundCanceled(areaNumber)
                        });
                    })
                }
            }
            this.init = function (){
                // vm.s_oGameParameter = [{"BetType":0,"Payouts":1.96,"MinBet":1,"MaxBet":100},{"BetType":1,"Payouts":1.96,"MinBet":1,"MaxBet":100},{"BetType":2,"Payouts":13,"MinBet":1,"MaxBet":10},{"BetType":3,"Payouts":13,"MinBet":1,"MaxBet":10},{"BetType":4,"Payouts":3.6,"MinBet":1,"MaxBet":40},{"BetType":5,"Payouts":3.6,"MinBet":1,"MaxBet":40}]
                // vm.o_playerProperty = {"PlayerName":"BTKF0211102","BetLimits":[1,2,3,4,5,6,7,8,9,10,11,12,13],"DefaultBetLimit":1,"MustChangePlayerName":true}
                // vm.s_oGameProperty = [{"AreaNumber":100,"AreaProperty":{"Number":100,"Name":"Xóc đĩa VIP","Status":1,"GameResults":[4,2,1,2,3,0,1,2,1,3,2,1],"MaxRound":100,"Message":"Bàn chơi game tạm ngừng phục vụ ở ván tiếp theo."},"GameProperty":{"GameNumber":"2024-06-06.2","GameRound":13,"Status":1,"BetSeconds":0},"DealerProperty":{"Avatar":"https://resources.one789.info/dealers/KM-2594.jpeg","FullName":"Đan Lê"},"PlayerProperty":{"BetItems":[]}},{"AreaNumber":101,"AreaProperty":{"Number":101,"Name":"Siêu cấp Vip Pro","Status":2,"GameResults":[1,1,2,2,3,2,2,0,1,3,4,1,2,1,0,1,2,3,1,1,3,2,1,1,2,4,2,2,4,0,2,2,1,2,3,4,3,2,1,2,1,1,2,3,2,1,3,0,1,1,2,3,2,2,1,3,4,2,3,3,0,4,3,2,2,2,2,0,3,4,4,1,3,1,2,3,1,4,2,4,4,1,0,2,2,3,2,1,2,1],"MaxRound":100},"GameProperty":{"GameNumber":"2024-05-02.1","GameRound":94,"Status":0},"DealerProperty":{"Avatar":"https://resources.one789.info/dealers/KM-02682.jpeg","FullName":"Trúc Anh"}}]

                Lotus.SenCasino.UserGame.getPlayerSettings().then(function (playerSetting){
                    // console.log(playerSetting);
                    vm.o_playerProperty = playerSetting;
                    Lotus.SenCasino.Games.Sedie.GamePlay.multiJoin({AreaNumbers: vm.a_Areas}).then(function (GamePlay){
                        vm.s_oGameProperty = GamePlay;
                        vm.s_oGameProperty.map(function (item){
                            if (item.AreaProperty.Status === 0){
                                vm.s_oNotify.warning(item.AreaProperty.Message)
                                item.GameProperty = {"GameNumber":"","GameRound":0,"Status":0,"BetSeconds":0}
                                item.DealerProperty = {"Avatar":"","FullName":""}
                            }
                            vm.Areas[item.AreaNumber].AreaProperty = item.AreaProperty;
                        })
                        // console.log(vm.s_oGameProperty)
                        Lotus.SenCasino.Games.Sedie.Parameter.getParameters().then(function (Parameter) {
                            // console.log(JSON.stringify(Parameter));
                            vm.s_oGameParameter = Parameter;
                            vm.s_oGame._stating();
                        }).catch(function(error){
                            console.log(error)
                            $timeout(function () {
                                vm.s_oGame.init();
                            }, 500)
                        })
                    }).catch(function(error){
                        console.log(error.message)
                        $timeout(function () {
                            vm.s_oGame.init();
                        }, 500)
                    })
                    // console.log(vm.Areas)
                }).catch(function (er){
                    console.log(er.message)
                    $timeout(function () {
                        vm.s_oGame.init();
                    }, 500)
                })
            }
            this._stating = function (){
                vm.areaProperty();
                vm.buildRoller();
                vm.buildTokenStack();
                vm.generateTableInfo();

                $timeout(function () {
                    vm.globalConfig.Ready = true;
                    $scope.$digest();
                }, 100)

                vm.firstPlayVideo();

                // $timeout(function (){
                //     vm.s_oGame.playGame(101, {BetSeconds: 40})
                //     $timeout(function (){
                //         vm.s_oGame._endGame(101, Math.floor(Math.random() * 5))
                //     }, 40000)
                // }, 2000)
            }
            this.b_cancel = function (area){
                vm.resetTable(area);
                $timeout(function (){
                    vm.Areas[area].o_Table.o_disabledTable = false
                })
            }
            this.b_betting = function (area){
                vm.s_oGame.executeBetting(area)
            }
            this.b_re_betting = function (area){
                this._rePromise(area)
            }
            this.playGame = function (area, data){
                vm.Areas[area].o_Table.maxSeconds = data.BetSeconds
                vm.Areas[area].GameProperty.BetSeconds = data.BetSeconds - 1;
                //Setting new game
                vm.Areas[area].o_Table.s_TextStatus = 'Bắt đầu đặt cược';
                vm.Areas[area].o_Table.o_disabledTable = false;
                vm.playingVariables[area]._firstTime = true
                vm.playingVariables[area]._committed = false;
                vm.s_oGameParameter.map(function(item){
                    vm.Areas[area].o_Table.highlight[item.BetType] = false
                })
                vm.s_oNotify.startBetting(area);
                this._checkPreOrder(area)
                if (countdown[area] !== undefined){
                    $interval.cancel(countdown[area]);
                }
                countdown[area] = $interval(function (){
                    // console.log(vm.Areas[area].GameProperty.BetSeconds)
                    vm.Areas[area].GameProperty.BetSeconds --;
                    if (vm.Areas[area].GameProperty.BetSeconds < 1){
                        $interval.cancel(countdown[area]);
                        vm.Areas[area].GameProperty.BetSeconds = 0;
                        vm.Areas[area].o_Table.s_TextStatus = 'Ngừng đặt cược'
                        vm.Areas[area].o_Table.o_disabledTable = true
                        vm.Areas[area].o_Table.o_disabledButton = {cancel: true, betting: true, reBet: true}
                    }
                }, 1000)
            }
            this._checkPreOrder = function (area){
                //Kiểm tra dữ liệu đặt lại
                let _preMoney = 0;
                if (vm.playingVariables[area]._oRecordedBetting !== undefined){
                    vm.playingVariables[area]._oRecordedBetting.map(function(item, index){
                        _preMoney += item.Amount
                    })
                }
                vm.Areas[area].o_Table.o_disabledButton.reBet = _preMoney === 0
            }
            this._onPromise = function (area, betId){
                // console.log('_iCurBetAmount:', vm.globalConfig._iCurBetAmount);
                if (vm.o_playerProperty.MaxWinLoseReachedException){
                    vm.s_oNotify.warning('Tài khoản của quý khách đã vượt quá giới hạn thắng thua');
                    return;
                }
                // console.log(vm.globalConfig._iCurBetAmount, vm.Areas[area].o_Table._iTotalCurrentBet, vm.o_playerProperty.Balance)
                if (vm.globalConfig._iCurBetAmount + vm.Areas[area].o_Table._iTotalCurrentBet > $rootScope.User.Balance){
                    vm.s_oNotify.warning('Số dư tài khoản không đủ để thực hiện tất cả đơn cược')
                }else{
                    vm._oPlayerModel[area].map(function (value){
                        if (value.BetType === betId){
                            if ((value.Amount + vm.globalConfig._iCurBetAmount) > value.maxAmount){
                                vm.s_oNotify.warning('Mức cược không hợp lệ.<br> Quý khách không được đặt cược quá ' + (value.maxAmount/1000).formatMoney() + 'K cho cửa này')
                            }else{
                                vm.playingVariables[area]._committed = false;
                                value.Amount += vm.globalConfig._iCurBetAmount;
                                vm.Areas[area].o_Table._iTotalCurrentBet += vm.globalConfig._iCurBetAmount;
                                vm.Areas[area].o_Table.o_moneyOnTable[betId].money += vm.globalConfig._iCurBetAmount;
                                vm.Areas[area].o_Table.o_moneyOnTable[betId].committed = false;
                                //placing token on table
                                let curAmount = vm.Areas[area].o_Table.o_moneyOnTable[betId].money
                                vm.Areas[area].o_Table.a_Token[betId] = casinoConfig.generateTokenByIndex(curAmount, vm.globalConfig.configMoney);
                            }
                        }
                    })
                }
                if (vm.Areas[area].o_Table._iTotalCurrentBet !== 0){
                    vm.Areas[area].o_Table.o_disabledButton.cancel = false;
                    vm.Areas[area].o_Table.o_disabledButton.betting = false;
                    vm.Areas[area].o_Table.o_disabledButton.reBet = true;
                }
            }
            this.executeBetting = function (area){
                let _errorChecking = false;
                let _tempMoney = vm._oPlayerModel[area];
                for (let i = 0; i < _tempMoney.length; i++){
                    if ( _tempMoney[i].Amount !== 0 && (_tempMoney[i].Amount < _tempMoney[i].minAmount || _tempMoney[i].Amount > _tempMoney[i].maxAmount) ){
                        _errorChecking = true;
                        vm.s_oNotify.warning('Mức cược trên cửa ' + _tempMoney[i].BetType.formatBetType() + ' phải lớn hơn ' + _tempMoney[i].minAmount.formatMoney() + ' và nhỏ hơn ' + _tempMoney[i].maxAmount.formatMoney());
                        break;
                    }
                }
                if (_errorChecking){
                    return;
                }
                let _sendData = [];
                vm._oPlayerModel[area].map(function (data){
                    if (data.Amount !== 0){
                        _sendData.push({BetType: data.BetType, Amount: data.Amount})
                    }
                })
                if (_sendData.length === 0){
                    return;
                }
                vm.Areas[area].o_Table.o_disabledTable = true
                vm.Areas[area].o_Table.o_disabledButton = {cancel: true, betting: true, reBet: true}


                // console.log('_sendData', _sendData)
                //Gửi dữ liệu cược

                Lotus.SenCasino.Games.Sedie.GamePlay.play({AreaNumber: area, BetItems: _sendData}).then(function (response) {
                    //Nếu thành công
                    $rootScope.User.Balance = response.Balance;
                    vm.Areas[area].o_Table.o_disabledTable = false;
                    vm.s_oNotify.bettingSuccess(area)
                    vm.Areas[area].o_Table.s_TextStatus = 'Đặt cược thành công'
                    //Cập nhật trạng thái số tiền đã cược trên bàn
                    for (let key in vm.Areas[area].o_Table.o_moneyOnTable) {
                        if (vm.Areas[area].o_Table.o_moneyOnTable.hasOwnProperty(key)) {
                            vm.Areas[area].o_Table.o_moneyOnTable[key].committed = vm.Areas[area].o_Table.o_moneyOnTable[key].money !== 0
                        }
                    }
                    vm.s_oGame._recordBetting(area);
                }).catch(function (error){
                    //Nếu không thành công
                    vm.s_oNotify.warning(error.message)
                    vm.Areas[area].o_Table.o_disabledTable = false
                    vm.Areas[area].o_Table.o_disabledButton = {cancel: false, betting: false, reBet: true}
                    if (error.code === 'MaxWinLoseReachedException'){
                        vm.o_playerProperty.MaxWinLoseReachedException = true;
                    }
                })

            }
            this._recordBetting = function (area){
                //Record betting data
                if (vm.playingVariables[area]._firstTime){
                    vm.playingVariables[area]._oRecordedBetting = angular.copy(vm._oPlayerModel[area])
                }else{
                    vm._oPlayerModel[area].map(function (pm){
                        if (pm.Amount !== 0){
                            vm.playingVariables[area]._oRecordedBetting.find(function (pv){return pv.BetType === pm.BetType}).Amount += pm.Amount
                        }
                    })
                }
                vm.playingVariables[area]._committed = true;
                vm.playingVariables[area]._firstTime = false;
                //Reset player model
                $timeout(function () {
                    vm.gen_oPlayerModel(area);
                }, 100)
                console.log('_oRecordedBetting', vm.playingVariables[area]._oRecordedBetting)
            }
            this._endGame = function (area, _iGameResult){
                vm.Areas[area].GameProperty.BetSeconds = 0;
                vm.Areas[area].o_Table.o_disabledTable = true
                vm.Areas[area].o_Table.o_disabledButton = {cancel: true, betting: true, reBet: true}
                vm.updateRoller(area, _iGameResult);
                vm.resetTable(area);
                this._winMoney(area, _iGameResult);
                $timeout(function (){
                    vm.s_oGameParameter.map(function (pr){
                        vm.Areas[area].o_Table.highlight[pr.BetType] = vm.s_oGame._checkWinning(pr.BetType, _iGameResult);
                    })
                    $timeout(function (){
                        vm.settingNewGame(area)
                    }, 5000)
                }, 200)
            }
            this._checkWinning = function(betId, _iGameResult){
                if (betId === 0){
                    return _iGameResult % 2 === 0
                }else if (betId === 1){
                    return _iGameResult % 2 !== 0
                }else if (betId === 2){
                    return _iGameResult === 4
                }else if (betId === 3){
                    return _iGameResult === 0
                }else if (betId === 4){
                    return _iGameResult === 1
                }else if (betId === 5){
                    return _iGameResult === 3
                }
            };
            this._winMoney = function (area, _iGameResult){
                let _totalWinMoney = 0;
                for (let key in vm.Areas[area].o_Table.o_moneyOnTable) {
                    if (vm.Areas[area].o_Table.o_moneyOnTable.hasOwnProperty(key)) {
                        if (vm.s_oGame._checkWinning(parseInt(key), _iGameResult)){
                            _totalWinMoney += vm.Areas[area].o_Table.o_moneyOnTable[key].money * ( vm.s_oGameParameter.find(function (p){return p.BetType === parseInt(key)}).Payouts );
                        }
                    }
                }
                if (_totalWinMoney > 0){
                    $rootScope.User.Balance += _totalWinMoney;
                    vm.s_oNotify.winMoney(area, _totalWinMoney)
                }
            }
            this._rePromise = function (area){
                if (vm.playingVariables[area]._oRecordedBetting !== undefined){
                    vm.playingVariables[area]._oRecordedBetting.map(function (rc){
                        vm._oPlayerModel[area].find(function (pm){return pm.BetType === rc.BetType}).Amount = rc.Amount;
                        vm.Areas[area].o_Table.o_moneyOnTable[rc.BetType].money = rc.Amount;
                    })
                }
                vm.Areas[area].o_Table._iTotalCurrentBet = 0
                for (let key in vm.Areas[area].o_Table.o_moneyOnTable) {
                    if (vm.Areas[area].o_Table.o_moneyOnTable.hasOwnProperty(key)) {
                        //Cập nhật lại token trên bàn
                        vm.Areas[area].o_Table.a_Token[key] = casinoConfig.generateTokenByIndex(vm.Areas[area].o_Table.o_moneyOnTable[key].money, vm.globalConfig.configMoney);
                        vm.Areas[area].o_Table._iTotalCurrentBet += vm.Areas[area].o_Table.o_moneyOnTable[key].money;
                    }
                }
                if (vm.Areas[area].o_Table._iTotalCurrentBet !== 0){
                    vm.Areas[area].o_Table.o_disabledButton.cancel = false;
                    vm.Areas[area].o_Table.o_disabledButton.betting = false;
                    vm.Areas[area].o_Table.o_disabledButton.reBet = true;
                }
                if (vm.Areas[area].o_Table._iTotalCurrentBet > $rootScope.User.Balance){
                    vm.s_oNotify.warning('Số dư tài khoản không đủ để thực hiện toàn bộ đơn cược.')
                    $timeout(function (){
                        vm.resetTable(area)
                    }, 100)
                }
            }
        }

        function buildTokenStack(){
            let aAllowTokens = casinoConfig.configToken()
            aAllowTokens[vm.o_playerProperty.DefaultBetLimit].token.map(function (token, index){
                if (index < 5){
                    vm.tokenOnStack.push({name: token});
                }
            })
            vm.tokenOnStack.length = 5;
            vm.tokenOnStack[0].active = true;
            vm.globalConfig._iCurBetAmount = vm.globalConfig.configMoney.find(function (item){return item.label === vm.tokenOnStack[0].name}).money;
        }

        function areaProperty(){
            vm.a_Areas.map(function (area){
                vm.Areas[area].AreaProperty = vm.s_oGameProperty.filter(function (item){return item.AreaNumber === area})[0].AreaProperty;
                vm.Areas[area].GameProperty = vm.s_oGameProperty.filter(function (item){return item.AreaNumber === area})[0].GameProperty;
                vm.Areas[area].GameProperty.BetSeconds = vm.Areas[area].GameProperty.BetSeconds === undefined ? 0 : vm.Areas[area].GameProperty.BetSeconds;
            })
            // console.log('vm.Areas', vm.Areas)
        }

        function updateRoller(area, result){
            vm.s_oGameProperty.filter(function (item){return item.AreaNumber === area})[0].AreaProperty.GameResults.push(result)
            vm.buildRoller();
        }

        function resetRoller(area){
            vm.s_oGameProperty.filter(function (item){return item.AreaNumber === area})[0].AreaProperty.GameResults = []
            vm.buildRoller();
        }

        function buildRoller(){
            vm.a_Areas.map(function (area){
                vm.Areas[area].a_gResult = vm.s_oGameProperty.filter(function (item){return item.AreaNumber === area})[0].AreaProperty.GameResults;
                vm.Areas[area].roadRoller = {odd: 0, even: 0}
                for (let i = 0; i < vm.Areas[area].a_gResult.length; i++){
                    if ( vm.Areas[area].a_gResult[i] % 2 !== 0 ){
                        vm.Areas[area].roadRoller.odd ++
                    }else{
                        vm.Areas[area].roadRoller.even ++
                    }
                }
                vm.Areas[area].roadRoller.template = [{slot: 6, data: []}];
                vm.Areas[area].a_gResult.map(function (result, index) {
                    let last = vm.Areas[area].roadRoller.template[vm.Areas[area].roadRoller.template.length - 1].data[vm.Areas[area].roadRoller.template[vm.Areas[area].roadRoller.template.length - 1].data.length - 1];
                    if (last === undefined){
                        vm.Areas[area].roadRoller.template[vm.Areas[area].roadRoller.template.length - 1].data.push(result);
                    }else{
                        if (last%2 === result%2){
                            vm.Areas[area].roadRoller.template[vm.Areas[area].roadRoller.template.length - 1].data.push(result);
                        }else {
                            vm.Areas[area].roadRoller.template.push({slot: 6, data: [result]})
                        }
                    }
                })
                vm.Areas[area].roadRoller.template.map(function (item, index) {
                    let extraLot = item.data.length - item.slot;
                    for (let x = 1; x <= extraLot; x++){
                        if (vm.Areas[area].roadRoller.template[index + x] !== undefined){
                            vm.Areas[area].roadRoller.template[index + x].slot -= 1;
                        }
                    }
                })
                if(vm.Areas[area].roadRoller.template.length < 20) {
                    let bo = angular.copy(20 - vm.Areas[area].roadRoller.template.length)
                    for (let i = 0; i < bo; i++){
                        vm.Areas[area].roadRoller.template.push({slot: 6, data: [9,9,9,9,9,9]});
                    }
                }
                //Bổ sung cột có thể bị thiếu
                vm.Areas[area].roadRoller.template.map(function (item, index) {
                    let over = item.data.length - item.slot
                    if (over > 0 && over > (vm.Areas[area].roadRoller.template.length - index - 1)){
                        // console.log(over, vm.Areas[area].roadRoller.template.length, index, over - (vm.Areas[area].roadRoller.template.length - index) )
                        let max = angular.copy(over - (vm.Areas[area].roadRoller.template.length - index))
                        for (let i = 0; i < max + 2; i++){
                            vm.Areas[area].roadRoller.template.push({slot: 6, data: [9,9,9,9,9,9]});
                        }
                    }
                })
                vm.Areas[area].roadRoller.template.map(function (item, index) {
                    // console.log(item)
                    let arrLength = angular.copy(item.data.length);
                    for (let i = 0; i < 6 - arrLength; i++){
                        item.data.push(9)
                    }
                })
                vm.Areas[area].roadRoller.template.reverse();
                vm.Areas[area].roadRoller.template.map(function (item, index) {
                    let element = item.slot
                    if (item.data.length > item.slot){
                        let leftovers = {
                            index: index,
                            element: element--,
                            overs: item.data.slice(item.slot - item.data.length)
                        }
                        item.data.splice(item.slot - item.data.length)
                        leftovers.overs = leftovers.overs.filter(function (o){return o !== 9})
                        if (leftovers.overs.length){
                            leftovers.overs.map(function (over, id){
                                // console.log(area.template, leftovers.index - 1 - id)
                                vm.Areas[area].roadRoller.template[leftovers.index - 1 - id].data[leftovers.element - 1] = over
                                // console.log(over, area.template[leftovers.index - 1 - id].data)
                            })
                        }
                    }
                })
                vm.Areas[area].roadRoller.template.reverse();
                if(vm.Areas[area].roadRoller.template.length > 20) {
                    vm.Areas[area].roadRoller.template = vm.Areas[area].roadRoller.template.slice(vm.Areas[area].roadRoller.template.length - (20))
                }
            })
        }

        function generateTableInfo(){
            vm.a_Areas.map(function(area){
                vm.settingNewGame(area)
            })
            vm.gen_oPlayerModel();
        }

        function _prepareGame(area, data){
            if (data.GameRound === 1){
                vm.resetRoller(area);
            }
            vm.Areas[area].GameProperty.GameNumber = data.GameNumber;
            vm.Areas[area].GameProperty.GameRound = data.GameRound;
            console.log(vm.Areas[area].GameProperty);
            vm.settingNewGame(area)
        }

        function settingNewGame(area){
            vm.Areas[area].o_Table = {}
            vm.Areas[area].o_Table.s_TextStatus = 'Chờ bắt đầu ván mới'
            vm.Areas[area].o_Table.o_moneyOnTable = {}
            vm.Areas[area].o_Table.a_Token = {}
            vm.Areas[area].o_Table.o_disabledTable = true
            vm.Areas[area].o_Table.o_disabledButton = {cancel: true, betting: true, reBet: true}
            vm.Areas[area].o_Table.highlight = {}
            vm.Areas[area].o_Table._iTotalCurrentBet = 0
            vm.s_oGameParameter.map(function(item, index){
                vm.Areas[area].o_Table.highlight[item.BetType] = false
                vm.Areas[area].o_Table.o_moneyOnTable[item.BetType] = {money: 0, committed: false}
            })
        }

        function resetTable(area){
            // console.log(vm.Areas[area].o_Table.o_moneyOnTable)
            // console.log(vm._oPlayerModel[area])
            vm.Areas[area].o_Table.a_Token = {}
            vm.Areas[area].o_Table.o_disabledButton = {cancel: true, betting: true, reBet: true}
            vm.Areas[area].o_Table.o_disabledTable = true
            vm.s_oGameParameter.map(function(item){
                vm.Areas[area].o_Table.highlight[item.BetType] = false
            })
            //Cập nhật lại số tiền trên bàn
            //Số tiền trên bàn = Số tiền đã cược + số tiền mới đặt
            //Nếu hủy cược cần gạch đi số tiền mới đặt
            vm.Areas[area].o_Table._iTotalCurrentBet = 0
            for (let key in vm.Areas[area].o_Table.o_moneyOnTable) {
                if (vm.Areas[area].o_Table.o_moneyOnTable.hasOwnProperty(key)) {
                    vm.Areas[area].o_Table.o_moneyOnTable[key].money = vm.Areas[area].o_Table.o_moneyOnTable[key].money - vm._oPlayerModel[area].find(function (oP){return oP.BetType === parseInt(key)}).Amount
                    vm.Areas[area].o_Table.o_moneyOnTable[key].committed = vm.Areas[area].o_Table.o_moneyOnTable[key].money !== 0 // Update số tiền đã cược trước đó.
                    //Cập nhật lại token trên bàn
                    vm.Areas[area].o_Table.a_Token[key] = casinoConfig.generateTokenByIndex(vm.Areas[area].o_Table.o_moneyOnTable[key].money, vm.globalConfig.configMoney);
                    vm.Areas[area].o_Table._iTotalCurrentBet += vm.Areas[area].o_Table.o_moneyOnTable[key].money;
                }
            }
            vm.gen_oPlayerModel(area);

            //Kiểm tra dữ liệu đặt lại
            if (vm.Areas[area].o_Table._iTotalCurrentBet === 0){
                vm.s_oGame._checkPreOrder(area)
            }
        }

        function gen_oPlayerModel(area){
            let _maxBase = casinoConfig.maxBase(vm.o_playerProperty.DefaultBetLimit);
            for (let i = 0; i < vm.s_oGameParameter.length; i++){
                vm.s_oGameParameter[i].Amount = 0;
                vm.s_oGameParameter[i].minAmount = _maxBase * vm.s_oGameParameter[i].MinBet;
                vm.s_oGameParameter[i].maxAmount = _maxBase * vm.s_oGameParameter[i].MaxBet;
            }
            if (area === undefined){
                vm.a_Areas.map(function (_area){
                    vm._oPlayerModel[_area] = JSON.parse(JSON.stringify(vm.s_oGameParameter));
                })
            }else{
                vm._oPlayerModel[area] = JSON.parse(JSON.stringify(vm.s_oGameParameter));
            }
        }

        function playVideo(area){
            let s_gStream = {100: {streamNames: ["vKzPg-qpcsZ","vKzPg-C8By5","vKzPg-reCqs","vKzPg-xDN2P"],startStream: "vKzPg-reCqs"}, 101: {streamNames: ["vKzPg-QRd7P", "vKzPg-UrA9G", "vKzPg-IR0zX"],startStream: "vKzPg-UrA9G"}}
            let s_streamGroup = {100: 'b6a84d09-63a6-42a8-9912-1abddb8ac28b', 101: 'dc3f7586-7424-4021-9ad1-3c7018f5035e'}

            if (H5LivePlayer.isSupported()) {
                if (Object.keys(livePlayer[area]).length !== 0){
                    livePlayer[area].play()
                }else{
                    livePlayer[area] = H5LivePlayer.create({
                        playerDivId: "video-element-" + area,
                        metrics: { username: $rootScope.User.Username, game: "sedie-" + area },
                    });

                    livePlayer[area].startGroupStream({
                        streamGroupId: s_streamGroup[area]
                    })
                }
            } else {
                alert("Trình duyệt của quý khách không hỗ trợ xem video phát trực tuyến")
            }
        }

        function videoToggle(area){
            vm.videoInteraction[area] = true;
            $timeout(function (){
                vm.videoInteraction[area] = false;
            }, 5000)
            vm.Areas[area].videoDisplay = !vm.Areas[area].videoDisplay;
            if (vm.Areas[area].videoDisplay){
                vm.playVideo(area)
            }else{
                $timeout(function (){
                    livePlayer[area].pause()
                }, 1000)
            }
        }

        function firstPlayVideo(){
            $timeout(function (){
                if (Object.keys(livePlayer[100]).length === 0){
                    vm.videoToggle(100)
                }
            }, 1000)

            $timeout(function (){
                if (Object.keys(livePlayer[101]).length === 0){
                    vm.videoToggle(101)
                }
            }, 2000)
        }

        function Notify(){
            this.startBetting = function (area){
                vm.showNotify[area].startBetting = true
                $timeout(function (){
                    vm.showNotify[area].startBetting = false
                }, 2000)
            }
            this.bettingSuccess = function (area){
                vm.showNotify[area].bettingSuccess = true
                $timeout(function (){
                    vm.showNotify[area].bettingSuccess = false
                }, 2000)
            }
            this.winMoney = function (area, money){
                vm.showNotify[area].winMoney = money
                $timeout(function (){
                    vm.showNotify[area].winMoney = undefined
                }, 5000)
            }
            this.newDealer = function (area, dealer){
                vm.showNotify[area].newDealer = dealer
                $timeout(function (){
                    vm.showNotify[area].newDealer = undefined
                }, 5000)
            }
            this.roundCanceled = function (area){
                vm.showNotify[area].roundCanceled = true
                $timeout(function (){
                    vm.showNotify[area].roundCanceled = false
                }, 5000)
            }
            this.warning = function (message){
                $mdDialog.show({
                    controller: warningCtrl,
                    templateUrl: 'app/main/casino/lobby/dialog/warning.html',
                    parent: angular.element(document.body),
                    // clickOutsideToClose: true,
                    fullscreen: true,
                    locals: {message: message}
                });

                function warningCtrl($scope, message){
                    $scope.cancel = function() {
                        $mdDialog.cancel();
                    };
                    $scope.message = message;
                }
            }
        }

        function tableInfo(area){
            $mdDialog.show({
                controller: tableCtrl,
                templateUrl: 'app/main/casino/lobby/dialog/table.html',
                parent: angular.element(document.body),
                clickOutsideToClose: true,
                // fullscreen: true,
                locals: {area: area}
            });

            function tableCtrl($scope, area){
                $scope.cancel = function() {
                    $mdDialog.cancel();
                };
                let _maxBase = casinoConfig.maxBase(vm.o_playerProperty.DefaultBetLimit);
                $scope.table = {}
                $scope.table.name = vm.s_oGameProperty.find(function(obj){return obj.AreaNumber === area}).AreaProperty.Name;
                $scope.table.Dealer = vm.s_oGameProperty.find(function(obj){return obj.AreaNumber === area}).DealerProperty.FullName;
                $scope.table.Round = area + '.' +vm.s_oGameProperty.find(function(obj){return obj.AreaNumber === area}).GameProperty.GameNumber + '.' + vm.s_oGameProperty.find(function(obj){return obj.AreaNumber === area}).GameProperty.GameRound;
                $scope.table._betLimit = {}
                $scope.table._betLimit.evenOdd = vm.s_oGameParameter.find(function(obj){return obj.BetType === 0}).MaxBet * _maxBase;
                $scope.table._betLimit.zeroFour = vm.s_oGameParameter.find(function(obj){return obj.BetType === 2}).MaxBet * _maxBase;
                $scope.table._betLimit.oneThree = vm.s_oGameParameter.find(function(obj){return obj.BetType === 4}).MaxBet * _maxBase;
            }
        }

        function betList(){
            $mdDialog.show({
                controller: tableCtrl,
                templateUrl: 'app/main/casino/lobby/dialog/bet-list.html',
                parent: angular.element(document.body),
                clickOutsideToClose: true,
                fullscreen: true
            });

            function tableCtrl($scope){
                $scope.cancel = function() {
                    $mdDialog.cancel();
                };
                $scope.a_betLists = [];
                $scope.getBetItems = function (ltId){
                    let data = {
                        From: moment().subtract(14, 'day').format('YYYY-MM-DD'),
                        To: moment().format('YYYY-MM-DD'),
                        LastId: ltId,
                        Limit: 5
                    }
                    if (ltId !== undefined){
                        data.LastId = ltId
                    }
                    $scope.submitting = true;
                    Lotus.SenCasino.Games.Sedie.Report.getBetItems(data).then(function (response){
                        // console.log(response)
                        $scope.viewMore = response.length === data.Limit;
                        $scope.a_betLists = $scope.a_betLists.concat(response);
                        $scope.$digest();
                        $timeout(function (){
                            $scope.submitting = false;
                        }, 500)
                    })
                }
                $scope.getBetItems();

                $scope.playVid = function (item){
                    $mdDialog.show({
                        controller: playCtrl,
                        templateUrl: 'app/main/casino/lobby/dialog/play-vid.html',
                        parent: angular.element(document.body),
                        clickOutsideToClose: true,
                        fullscreen: true,
                        multiple: true,
                        locals: {item: item},
                    });

                    function playCtrl($scope, item){
                        $scope.cancel = function() {
                            $mdDialog.cancel();
                        };
                        $scope.play = function (item){
                            $scope.vidSrc = 'https://vod.one789cdn.com/' + item.AreaNumber +'-' + item.GameNumber + '-' + item.GameRound + '.mp4'
                            angular.element("video").attr({
                                "src": $scope.vidSrc,
                                "autoplay": "autoplay",
                            });
                        }
                        $scope.vidEnded = function (){
                            if (item.GameRound < 100){
                                item.GameRound = (item.GameRound + 1)
                                $scope.play(item);
                            }
                        }
                        $scope.play(item);
                    }
                }
            }
        }

        function init(){
            if ($rootScope.isAuthenticated && $rootScope.connectState === 'Connected'){
                vm.s_oGame.Realtime()
            }else{
                $timeout(function (){
                    vm.init()
                }, 500)
            }
        }

        vm.init();

        if ($rootScope.isAuthenticated){
            $scope.$on('$destroy', function (){
                vm.a_Areas.map(function (area){
                    if (countdown[area]){
                        $interval.cancel(countdown[area])
                    }
                    $timeout(function () {
                        if (H5LivePlayer.isSupported()){
                            if (Object.keys(livePlayer[area]).length !== 0){
                                livePlayer[area].destroy()
                            }
                        }
                    })
                })
                sessionStorage.setItem('justDestroy', 'yes');

            });
            if (sessionStorage.getItem('justDestroy') === 'yes'){
                sessionStorage.removeItem('justDestroy');
                $timeout(function (){
                    location.reload();
                })
            }
        }
    }
})();
(function ()
{
    'use strict';

    angular
        .module('app.core',
            [
                'ngAnimate',
                'ngAria',
                'ngCookies',
                'ngMessages',
                'ngResource',
                'ngSanitize',
                'ngMaterial',
                'angularMoment',
                'ngclipboard',
                'nsPopover',
                'ng-currency',
                'otpInputDirective',
                'AngularPrint',
                'datatables',
                'FBAngular',
                'pascalprecht.translate',
                'angular-google-analytics',
                'ui.router',
                'ja.qr'
            ]);
})();
(function (){
    'use strict';

    angular
        .module('app.core')
        .directive('msPasswordExpired', msPasswordExpiredDirective);


    function msPasswordExpiredDirective($document){
        return {
            restrict   : 'E',
            scope      : {},
            transclude : true,
            templateUrl: 'app/core/directives/password-expired-soon/password-expired-soon.html',
            link       : function (scope, iElement){
                var body = $document.find('body'),
                    bodyClass = 'ms-password-expired-active';
                // Add body class
                body.addClass(bodyClass);


                function removeInfoBar(){
                    body.removeClass(bodyClass);
                    iElement.remove();
                    scope.$destroy();
                }
                // Expose functions
                scope.removeInfoBar = removeInfoBar;
            }
        }
    }
})();
(function(window, angular, undefined){
  'use strict';

  var $el = angular.element;
  var $popovers = [];
  var globalId = 0;
  var isDef = angular.isDefined;
  var module = angular.module('nsPopover', []);

  module.provider('nsPopover', function () {
    var defaults = {
      angularEvent: null,
      container: 'body',
      hideOnButtonClick: true,
      hideOnInsideClick: false,
      hideOnOutsideClick: true,
      mouseRelative: '',
      onClose: angular.noop,
      onOpen: angular.noop,
      placement: 'bottom',
      plain: 'false',
      popupDelay: 0,
      restrictBounds: false,
      scopeEvent: null,
      template: '',
      theme: 'ns-popover-tooltip-theme',
      timeout: 300,
      trigger: 'click',
      triggerPrevent: true
    };

    this.setDefaults = function(newDefaults) {
      angular.extend(defaults, newDefaults);
    };

    this.$get = function () {
      return {
        getDefaults: function () {
          return defaults;
        }
      };
    };
  });

  module.directive('nsPopover', [
    'nsPopover',
    '$rootScope',
    '$timeout',
    '$templateCache',
    '$q',
    '$http',
    '$compile',
    '$document',
    '$parse',
    function(
      nsPopover,
      $rootScope,
      $timeout,
      $templateCache,
      $q,
      $http,
      $compile,
      $document,
      $parse
    ) {
      return {
        restrict: 'A',
        scope: true,
        link: function(scope, elm, attrs) {
          var $container;
          var $popover;
          var $triangle;
          var align_;
          var defaults = nsPopover.getDefaults();
          var displayer_;
          var hider_;
          var match;
          var options = {
            angularEvent: attrs.nsPopoverAngularEvent || defaults.angularEvent,
            container: attrs.nsPopoverContainer || defaults.container,
            group: attrs.nsPopoverGroup,
            hideOnButtonClick: toBoolean(attrs.nsPopoverHideOnButtonClick || defaults.hideOnButtonClick),
            hideOnInsideClick: toBoolean(attrs.nsPopoverHideOnInsideClick || defaults.hideOnInsideClick),
            hideOnOutsideClick: toBoolean(attrs.nsPopoverHideOnOutsideClick || defaults.hideOnOutsideClick),
            mouseRelative: attrs.nsPopoverMouseRelative,
            onClose: $parse(attrs.nsPopoverOnClose) || defaults.onClose,
            onOpen: $parse(attrs.nsPopoverOnOpen) || defaults.onOpen,
            placement: attrs.nsPopoverPlacement || defaults.placement,
            plain: toBoolean(attrs.nsPopoverPlain || defaults.plain),
            popupDelay: attrs.nsPopoverPopupDelay || defaults.popupDelay,
            restrictBounds: Boolean(attrs.nsPopoverRestrictBounds) || defaults.restrictBounds,
            scopeEvent: attrs.nsPopoverScopeEvent || defaults.scopeEvent,
            template: attrs.nsPopoverTemplate || defaults.template,
            theme: attrs.nsPopoverTheme || defaults.theme,
            timeout: attrs.nsPopoverTimeout || defaults.timeout,
            trigger: attrs.nsPopoverTrigger || defaults.trigger,
            triggerPrevent: attrs.nsPopoverTriggerPrevent || defaults.triggerPrevent,
          };
          var placement_;
          var unregisterActivePopoverListeners;
          var unregisterDisplayMethod;

          if (options.mouseRelative) {
            options.mouseRelativeX = options.mouseRelative.indexOf('x') !== -1;
            options.mouseRelativeY = options.mouseRelative.indexOf('y') !== -1;
          }

          function addEventListeners() {
            function cancel() {
              hider_.cancel();
            }

            function hide() {
              hider_.hide(options.timeout);
            }

            elm
              .on('mouseout', hide)
              .on('mouseover', cancel)
            ;

            $popover
              .on('mouseout', hide)
              .on('mouseover', cancel)
            ;

            unregisterActivePopoverListeners = function() {
              elm
                .off('mouseout', hide)
                .off('mouseover', cancel)
              ;

              $popover
                .off('mouseout', hide)
                .off('mouseover', cancel)
              ;
            }
          }

          /**
           * Adjust a rect accordingly to the given x and y mouse positions.
           *
           * @param rect {ClientRect} The rect to be adjusted.
           */
          function adjustRect(rect, adjustX, adjustY, ev) {
            // if pageX or pageY is defined we need to lock the popover to the given
            // x and y position.
            // clone the rect, so we can manipulate its properties.
            var localRect = {
              bottom: rect.bottom,
              height: rect.height,
              left: rect.left,
              right: rect.right,
              top: rect.top,
              width: rect.width
            };

            if (adjustX) {
              localRect.left = ev.pageX;
              localRect.right = ev.pageX;
              localRect.width = 0;
            }

            if (adjustY) {
              localRect.top = ev.pageY;
              localRect.bottom = ev.pageY;
              localRect.height = 0;
            }

            return localRect;
          }

          function buttonClickHandler() {
            if ($popover.isOpen) {
              scope.hidePopover();
            }
          }

          function display(e) {
            if (
              angular.isObject(e) &&
              false !== options.triggerPrevent
            ) {
              e.preventDefault();
            }

            hider_.cancel();
            displayer_.display(options.popupDelay, e);
          }

          function getBoundingClientRect(elm) {
            var w = window;
            var doc = document.documentElement || document.body.parentNode || document.body;
            var x = (isDef(w.pageXOffset)) ? w.pageXOffset : doc.scrollLeft;
            var y = (isDef(w.pageYOffset)) ? w.pageYOffset : doc.scrollTop;
            var rect = elm.getBoundingClientRect();

            // ClientRect class is immutable, so we need to return a modified copy
            // of it when the window has been scrolled.
            if (x || y) {
              return {
                bottom:rect.bottom+y,
                left:rect.left + x,
                right:rect.right + x,
                top:rect.top + y,
                height:rect.height,
                width:rect.width
              };
            }
            return rect;
          }

          function insideClickHandler() {
            if ($popover.isOpen) {
              scope.hidePopover();
            }
          }

          /**
           * Load the given template in the cache if it is not already loaded.
           *
           * @param template The URI of the template to be loaded.
           * @returns {String} A promise that the template will be loaded.
           * @remarks If the template is null or undefined a empty string will be returned.
           */
          function loadTemplate(template, plain) {
            if (!template) {
              return '';
            }

            if (angular.isString(template) && plain) {
              return template;
            }

            return $templateCache.get(template) || $http.get(template, { cache : true });
          }

          /**
           * Move the popover to the |placement| position of the object located on the |rect|.
           *
           * @param popover {Object} The popover object to be moved.
           * @param placement {String} The relative position to move the popover - top | bottom | left | right.
           * @param align {String} The way the popover should be aligned - center | left | right.
           * @param rect {ClientRect} The ClientRect of the object to move the popover around.
           * @param triangle {Object} The element that contains the popover's triangle. This can be null.
           */
          function move(popover, placement, align, rect, triangle) {
            var containerRect;
            var popoverRect = getBoundingClientRect(popover[0]);
            var popoverRight;
            var top, left;

            var positionX = function() {
              if (align === 'center') {
                return Math.round(rect.left + rect.width/2 - popoverRect.width/2);
              } else if(align === 'right') {
                return rect.right - popoverRect.width;
              }
              return rect.left;
            };

            var positionY = function() {
              if (align === 'center') {
                return Math.round(rect.top + rect.height/2 - popoverRect.height/2);
              } else if(align === 'bottom') {
                return rect.bottom - popoverRect.height;
              }
              return rect.top;
            };

            if (placement === 'top') {
              top = rect.top - popoverRect.height;
              left = positionX();
            } else if (placement === 'right') {
              top = positionY();
              left = rect.right;
            } else if (placement === 'bottom') {
              top = rect.bottom;
              left = positionX();
            } else if (placement === 'left') {
              top = positionY();
              left = rect.left - popoverRect.width;
            }

            // Rescrict the popover to the bounds of the container
            if (true === options.restrictBounds) {
              containerRect = getBoundingClientRect($container[0]);

              // The left should be below the left of the container.
              left = Math.max(containerRect.left, left);

              // Prevent the left from causing the right to go outside
              // the conatiner.
              popoverRight = left + popoverRect.width;
              if (popoverRight > containerRect.width) {
                left = left - (popoverRight - containerRect.width);
              }
            }

            popover
              .css('top', top.toString() + 'px')
              .css('left', left.toString() + 'px');

            if (triangle && triangle.length) {
              if (placement === 'top' || placement === 'bottom') {
                left = rect.left + rect.width / 2 - left;
                triangle.css('left', left.toString() + 'px');
              } else {
                top = rect.top + rect.height / 2 - top;
                triangle.css('top', top.toString()  + 'px');
              }
            }
          }

          function outsideClickHandler(e) {
            function isInPopover(el) {
              if (el.id === id) {
                return true;
              }

              var parent = angular.element(el).parent()[0];

              if (!parent) {
                return false;
              }

              if (parent.id === id) {
                return true;
              }
              else {
                return isInPopover(parent);
              }
            }

            if ($popover.isOpen && e.target !== elm[0]) {
              var id = $popover[0].id;

              if (!isInPopover(e.target)) {
                scope.hidePopover();
              }
            }
          }

          function removeEventListeners() {
            unregisterActivePopoverListeners();
          }

          function toBoolean(value) {
            if (value && value.length !== 0) {
              var v = ("" + value).toLowerCase();
              value = (v == 'true');
            } else {
              value = false;
            }
            return value;
          }

          /**
           * Responsible for displaying of popover.
           * @type {Object}
           */
          displayer_ = {
            id_: undefined,

            /**
             * Set the display property of the popover to 'block' after |delay| milliseconds.
             *
             * @param delay {Number}  The time (in seconds) to wait before set the display property.
             * @param e {Event}  The event which caused the popover to be shown.
             */
            display: function(delay, e) {
              // Disable popover if ns-popover value is false
              if ($parse(attrs.nsPopover)(scope) === false) {
                return;
              }

              $timeout.cancel(displayer_.id_);

              if (!isDef(delay)) {
                delay = 0;
              }

              // hide any popovers being displayed
              if (options.group) {
                $rootScope.$broadcast('ns:popover:hide', options.group);
              }

              displayer_.id_ = $timeout(function() {
                if (true === $popover.isOpen) {
                  return;
                }

                $popover.isOpen = true;
                $popover.css('display', 'block');

                // position the popover accordingly to the defined placement around the
                // |elm|.
                var elmRect = getBoundingClientRect(elm[0]);

                // If the mouse-relative options is specified we need to adjust the
                // element client rect to the current mouse coordinates.
                if (options.mouseRelative) {
                  elmRect = adjustRect(elmRect, options.mouseRelativeX, options.mouseRelativeY, e);
                }

                move($popover, placement_, align_, elmRect, $triangle);
                addEventListeners();

                // Hide the popover without delay on the popover click events.
                if (true === options.hideOnInsideClick) {
                  $popover.on('click', insideClickHandler);
                }

                // Hide the popover without delay on outside click events.
                if (true === options.hideOnOutsideClick) {
                  $document.on('click', outsideClickHandler);
                }

                // Hide the popover without delay on the button click events.
                if (true === options.hideOnButtonClick) {
                  elm.on('click', buttonClickHandler);
                }

                // Call the open callback
                options.onOpen(scope);
              }, delay*1000);
            },

            cancel: function() {
              $timeout.cancel(displayer_.id_);
            }
          };

          /**
           * Responsible for hiding of popover.
           * @type {Object}
           */
          hider_ = {
            id_: undefined,

            /**
             * Set the display property of the popover to 'none' after |delay| milliseconds.
             *
             * @param delay {Number}  The time (in seconds) to wait before set the display property.
             */
            hide: function(delay) {
              $timeout.cancel(hider_.id_);

              // do not hide if -1 is passed in.
              if(delay !== "-1") {
                // delay the hiding operation for 1.5s by default.
                if (!isDef(delay)) {
                  delay = 1.5;
                }

                hider_.id_ = $timeout(function() {
                  $popover.off('click', insideClickHandler);
                  $document.off('click', outsideClickHandler);
                  elm.off('click', buttonClickHandler);
                  $popover.isOpen = false;
                  displayer_.cancel();
                  $popover.css('display', 'none');
                  removeEventListeners();

                  // Call the close callback
                  options.onClose(scope);
                }, delay*1000);
              }
            },

            cancel: function() {
              $timeout.cancel(hider_.id_);
            }
          };

          // Set the container to the passed selector. If the container element
          // was not found, use the body as the container.
          $container = $document.find(options.container);
          if (!$container.length) {
            $container = $document.find('body');
          }

          // Parse the desired placement and alignment values.
          match = options
            .placement
            .match(/^(top|bottom|left|right)$|((top|bottom)\|(center|left|right)+)|((left|right)\|(center|top|bottom)+)/)
          ;
          if (!match) {
            throw new Error(
              '"' + options.placement + '" is not a valid placement or has ' +
              'an invalid combination of placements.'
            );
          }
          placement_ = match[6] || match[3] || match[1];
          align_ = match[7] || match[4] || match[2] || 'center';

          // Create the popover element and add it to the cached list of all
          // popovers.
          globalId += 1;
          $popover = $el('<div id="nspopover-' + globalId +'"></div>')
            .addClass('ns-popover-' + placement_ + '-placement')
            .addClass('ns-popover-' + align_ + '-align')
            .css('position', 'absolute')
            .css('display', 'none')
          ;
          $popovers.push($popover);

          // Allow closing the popover programatically.
          scope.hidePopover = function() {
            hider_.hide(0);
          };

          // Hide popovers that are associated with the passed group.
          scope.$on('ns:popover:hide', function(ev, group) {
            if (options.group === group) {
                scope.hidePopover();
            }
          });

          // Clean up after yourself.
          scope.$on('$destroy', function() {
            $popover.remove();
            unregisterDisplayMethod();
          });

          // Display the popover when a message is broadcasted on the
          // $rootScope if `angular-event` was given.
          if (angular.isString(options.angularEvent)) {
            unregisterDisplayMethod = $rootScope.$on(
              options.angularEvent,
              display
            );

          // Display the popover when a message is broadcasted on the
          // scope if `scope-event` was given.
          } else if (angular.isString(options.scopeEvent)) {
            unregisterDisplayMethod = scope.$on(
              options.scopeEvent,
              display
            )

          // Otherwise just display the popover whenever the event that was
          // passed to the `trigger` attribute occurs on the element.
          } else {
            elm.on(options.trigger, display);
            unregisterDisplayMethod = function() {
              elm.off(options.trigger, display);
            }
          }

          // Load the template and compile the popover.
          $q
            .when(loadTemplate(options.template, options.plain))
            .then(function(template) {
              if (angular.isObject(template)) {
                template = angular.isString(template.data) ?
                  template.data : ''
                ;
              }

              // Set the popover element HTML.
              $popover.html(template);

              // Add the "theme" class to the element.
              if (options.theme) {
                $popover.addClass(options.theme);
              }

              // Compile the element.
              $compile($popover)(scope);

              // Cache the triangle element (works in ie8+).
              $triangle = $el(
                $popover[0].querySelectorAll('.triangle')
              );

              // Append it to the DOM
              $container.append($popover);
            })
          ;
        }
      };
    }
  ]);
})(window, window.angular);

(function (){
    'use strict';

    angular
        .module('app.core')
        .directive('msSplashScreen', msSplashScreenDirective);

    /** @ngInject */
    function msSplashScreenDirective($animate){
        return {
            restrict: 'E',
            link    : function (scope, iElement){
                let splashScreenRemoveEvent = scope.$on('msSplashScreen::remove', function (){
                    $animate.leave(iElement).then(function (){
                        // De-register scope event
                        splashScreenRemoveEvent();
                        // Null-ify everything else
                        scope = iElement = null;
                    });
                });
            }
        };
    }
})();
(function ()
{
    'use strict';

    angular
        .module('app.core')
        .directive('msSidenavHelper', msSidenavHelperDirective);

    /** @ngInject */
    function msSidenavHelperDirective()
    {
        return {
            restrict: 'A',
            require : '^mdSidenav',
            link    : function (scope, iElement, iAttrs, MdSidenavCtrl)
            {
                // Watch md-sidenav open & locked open statuses
                // and add class to the ".page-layout" if only
                // the sidenav open and NOT locked open
                scope.$watch(function ()
                {
                    return MdSidenavCtrl.isOpen() && !MdSidenavCtrl.isLockedOpen();
                }, function (current)
                {
                    if ( angular.isUndefined(current) )
                    {
                        return;
                    }

                    iElement.parent().toggleClass('full-height', current);
                    angular.element('html').toggleClass('sidenav-open', current);
                });
            }
        };
    }
})();
(function ()
{
    'use strict';
    angular
        .module('app.core')
        .provider('msScrollConfig', msScrollConfigProvider)
        .directive('msScroll', msScrollDirective);

    /** @ngInject */
    function msScrollConfigProvider()
    {
        // Default configuration
        var defaultConfiguration = {
            wheelSpeed            : 1,
            wheelPropagation      : false,
            swipePropagation      : true,
            minScrollbarLength    : null,
            maxScrollbarLength    : null,
            useBothWheelAxes      : false,
            useKeyboard           : true,
            suppressScrollX       : false,
            suppressScrollY       : false,
            scrollXMarginOffset   : 0,
            scrollYMarginOffset   : 0,
            stopPropagationOnClick: true
        };

        // Methods
        this.config = config;

        //////////

        /**
         * Extend default configuration with the given one
         *
         * @param configuration
         */
        function config(configuration)
        {
            defaultConfiguration = angular.extend({}, defaultConfiguration, configuration);
        }

        /**
         * Service
         */
        this.$get = function ()
        {
            var service = {
                getConfig: getConfig
            };

            return service;

            //////////

            /**
             * Return the config
             */
            function getConfig()
            {
                return defaultConfiguration;
            }
        };
    }

    /** @ngInject */
    function msScrollDirective($timeout, msScrollConfig, msUtils, fuseConfig)
    {
        return {
            restrict: 'AE',
            compile : function (tElement)
            {
                // Do not replace scrollbars if
                // 'disableCustomScrollbars' config enabled
                if ( fuseConfig.getConfig('disableCustomScrollbars') )
                {
                    return;
                }

                // Do not replace scrollbars on mobile devices
                // if 'disableCustomScrollbarsOnMobile' config enabled
                if ( fuseConfig.getConfig('disableCustomScrollbarsOnMobile') && msUtils.isMobile() )
                {
                    return;
                }

                // Add class
                tElement.addClass('ms-scroll');

                return function postLink(scope, iElement, iAttrs)
                {
                    var options = {};

                    // If options supplied, evaluate the given
                    // value. This is because we don't want to
                    // have an isolated scope but still be able
                    // to use scope variables.
                    // We don't want an isolated scope because
                    // we should be able to use this everywhere
                    // especially with other directives
                    if ( iAttrs.msScroll )
                    {
                        options = scope.$eval(iAttrs.msScroll);
                    }

                    // Extend the given config with the ones from provider
                    options = angular.extend({}, msScrollConfig.getConfig(), options);

                    // Initialize the scrollbar
                    $timeout(function ()
                    {
                        PerfectScrollbar.initialize(iElement[0], options);
                    }, 0);

                    // Update the scrollbar on element mouseenter
                    iElement.on('mouseenter', updateScrollbar);

                    // Watch scrollHeight and update
                    // the scrollbar if it changes
                    scope.$watch(function (){
                        return iElement.prop('scrollHeight');
                    }, function (current, old){
                        if ( angular.isUndefined(current) || angular.equals(current, old) ){
                            return;
                        }
                        updateScrollbar();
                    });

                    // Watch scrollWidth and update
                    // the scrollbar if it changes
                    scope.$watch(function (){
                        return iElement.prop('scrollWidth');
                    }, function (current, old){
                        if ( angular.isUndefined(current) || angular.equals(current, old) ){
                            return;
                        }
                        updateScrollbar();
                    });

                    /**
                     * Update the scrollbar
                     */
                    function updateScrollbar(){
                        PerfectScrollbar.update(iElement[0]);
                    }

                    // Cleanup on destroy
                    scope.$on('$destroy', function ()
                    {
                        iElement.off('mouseenter');
                        PerfectScrollbar.destroy(iElement[0]);
                    });
                };
            }
        };
    }
})();
(function ()
{
    'use strict';

    angular
        .module('app.core')
        .directive('msResponsiveTable', msResponsiveTableDirective);

    /** @ngInject */
    function msResponsiveTableDirective()
    {
        return {
            restrict: 'A',
            link    : function (scope, iElement)
            {
                // Wrap the table
                var wrapper = angular.element('<div class="ms-responsive-table-wrapper"></div>');
                iElement.after(wrapper);
                wrapper.append(iElement);

                //////////
            }
        };
    }
})();
(function ()
{
    'use strict';

    angular
        .module('app.core')
        .provider('msNavigationService', msNavigationServiceProvider)
        .controller('MsNavigationController', MsNavigationController)
        // Vertical
        .directive('msNavigation', msNavigationDirective)
        .controller('MsNavigationNodeController', MsNavigationNodeController)
        .directive('msNavigationNode', msNavigationNodeDirective)
        .directive('msNavigationItem', msNavigationItemDirective)
        //Horizontal
        .directive('msNavigationHorizontal', msNavigationHorizontalDirective)
        .controller('MsNavigationHorizontalNodeController', MsNavigationHorizontalNodeController)
        .directive('msNavigationHorizontalNode', msNavigationHorizontalNodeDirective)
        .directive('msNavigationHorizontalItem', msNavigationHorizontalItemDirective);

    /** @ngInject */
    function msNavigationServiceProvider(){
        // Inject $log service
        var $log = angular.injector(['ng']).get('$log');

        // Navigation array
        var navigation = [];

        var service = this;

        // Methods
        service.saveItem = saveItem;
        service.deleteItem = deleteItem;
        service.sortByWeight = sortByWeight;

        //////////

        /**
         * Create or update the navigation item
         *
         * @param path
         * @param item
         */
        function saveItem(path, item)
        {
            if ( !angular.isString(path) )
            {
                $log.error('path must be a string (eg. `dashboard.project`)');
                return;
            }

            var parts = path.split('.');

            // Generate the object id from the parts
            var id = parts[parts.length - 1];

            // Get the parent item from the parts
            var parent = _findOrCreateParent(parts);

            // Decide if we are going to update or create
            var updateItem = false;

            for ( var i = 0; i < parent.length; i++ )
            {
                if ( parent[i]._id === id )
                {
                    updateItem = parent[i];

                    break;
                }
            }

            // Update
            if ( updateItem )
            {
                angular.extend(updateItem, item);

                // Add proper ui-sref
                updateItem.uisref = _getUiSref(updateItem);
            }
            // Create
            else
            {
                // Create an empty children array in the item
                item.children = [];

                // Add the default weight if not provided or if it's not a number
                if ( angular.isUndefined(item.weight) || !angular.isNumber(item.weight) )
                {
                    item.weight = 1;
                }

                // Add the item id
                item._id = id;

                // Add the item path
                item._path = path;

                // Add proper ui-sref
                item.uisref = _getUiSref(item);

                // Push the item into the array
                parent.push(item);
            }
        }

        /**
         * Delete navigation item
         *
         * @param path
         */
        function deleteItem(path)
        {
            if ( !angular.isString(path) )
            {
                $log.error('path must be a string (eg. `dashboard.project`)');
                return;
            }

            // Locate the item by using given path
            var item = navigation,
                parts = path.split('.');

            for ( var p = 0; p < parts.length; p++ )
            {
                var id = parts[p];

                for ( var i = 0; i < item.length; i++ )
                {
                    if ( item[i]._id === id )
                    {
                        // If we have a matching path,
                        // we have found our object:
                        // remove it.
                        if ( item[i]._path === path )
                        {
                            item.splice(i, 1);
                            return true;
                        }

                        // Otherwise grab the children of
                        // the current item and continue
                        item = item[i].children;
                        break;
                    }
                }
            }

            return false;
        }

        /**
         * Sort the navigation items by their weights
         *
         * @param parent
         */
        function sortByWeight(parent)
        {
            // If parent not provided, sort the root items
            if ( !parent )
            {
                parent = navigation;
                parent.sort(_byWeight);
            }

            // Sort the children
            for ( var i = 0; i < parent.length; i++ )
            {
                var children = parent[i].children;

                if ( children.length > 1 )
                {
                    children.sort(_byWeight);
                }

                if ( children.length > 0 )
                {
                    sortByWeight(children);
                }
            }
        }

        /* ----------------- */
        /* Private Functions */
        /* ----------------- */

        /**
         * Find or create parent
         *
         * @param parts
         * @returns {Array|Boolean}
         * @private
         */
        function _findOrCreateParent(parts)
        {
            // Store the main navigation
            var parent = navigation;

            // If it's going to be a root item
            // return the navigation itself
            if ( parts.length === 1 )
            {
                return parent;
            }

            // Remove the last element from the parts as
            // we don't need that to figure out the parent
            parts.pop();

            // Find and return the parent
            for ( var i = 0; i < parts.length; i++ )
            {
                var _id = parts[i],
                    createParent = true;

                for ( var p = 0; p < parent.length; p++ )
                {
                    if ( parent[p]._id === _id )
                    {
                        parent = parent[p].children;
                        createParent = false;

                        break;
                    }
                }

                // If there is no parent found, create one, push
                // it into the current parent and assign it as a
                // new parent
                if ( createParent )
                {
                    var item = {
                        _id     : _id,
                        _path   : parts.join('.'),
                        title   : _id,
                        weight  : 1,
                        children: []
                    };

                    parent.push(item);
                    parent = item.children;
                }
            }

            return parent;
        }

        /**
         * Sort by weight
         *
         * @param x
         * @param y
         * @returns {number}
         * @private
         */
        function _byWeight(x, y)
        {
            return parseInt(x.weight) - parseInt(y.weight);
        }

        /**
         * Setup the ui-sref using state & state parameters
         *
         * @param item
         * @returns {string}
         * @private
         */
        function _getUiSref(item)
        {
            var uisref = '';

            if ( angular.isDefined(item.state) )
            {
                uisref = item.state;

                if ( angular.isDefined(item.stateParams) && angular.isObject(item.stateParams) )
                {
                    uisref = uisref + '(' + angular.toJson(item.stateParams) + ')';
                }
            }

            return uisref;
        }

        /* ----------------- */
        /* Service           */
        /* ----------------- */

        this.$get = function ()
        {
            var activeItem = null,
                navigationScope = null,
                folded = null,
                foldedOpen = null;

            var service = {
                saveItem          : saveItem,
                deleteItem        : deleteItem,
                sort              : sortByWeight,
                clearNavigation   : clearNavigation,
                setActiveItem     : setActiveItem,
                getActiveItem     : getActiveItem,
                getNavigation     : getNavigation,
                getFlatNavigation : getFlatNavigation,
                setNavigationScope: setNavigationScope,
                setFolded         : setFolded,
                getFolded         : getFolded,
                setFoldedOpen     : setFoldedOpen,
                getFoldedOpen     : getFoldedOpen,
                toggleFolded      : toggleFolded
            };

            return service;

            //////////

            /**
             * Clear the entire navigation
             */
            function clearNavigation()
            {
                // Clear the navigation array
                navigation = [];

                // Clear the vm.navigation from main controller
                if ( navigationScope )
                {
                    navigationScope.vm.navigation = navigation;
                }
            }

            /**
             * Set active item
             *
             * @param node
             * @param scope
             */
            function setActiveItem(node, scope)
            {
                activeItem = {
                    node : node,
                    scope: scope
                };
            }

            /**
             * Return active item
             */
            function getActiveItem()
            {
                return activeItem;
            }

            /**
             * Return navigation array
             *
             * @param root
             * @returns Array
             */
            function getNavigation(root)
            {
                if ( root )
                {
                    for ( var i = 0; i < navigation.length; i++ )
                    {
                        if ( navigation[i]._id === root )
                        {
                            return [navigation[i]];
                        }
                    }

                    return null;
                }

                return navigation;
            }

            /**
             * Return flat navigation array
             *
             * @param root
             * @returns Array
             */
            function getFlatNavigation(root)
            {
                // Get the correct navigation array
                var navigation = getNavigation(root);

                // Flatten the navigation object
                return _flattenNavigation(navigation);
            }

            /**
             * Store navigation's scope for later use
             *
             * @param scope
             */
            function setNavigationScope(scope)
            {
                navigationScope = scope;
            }

            /**
             * Set folded status
             *
             * @param status
             */
            function setFolded(status)
            {
                folded = status;
            }

            /**
             * Return folded status
             *
             * @returns {*}
             */
            function getFolded()
            {
                return folded;
            }

            /**
             * Set folded open status
             *
             * @param status
             */
            function setFoldedOpen(status)
            {
                foldedOpen = status;
            }

            /**
             * Return folded open status
             *
             * @returns {*}
             */
            function getFoldedOpen()
            {
                return foldedOpen;
            }


            /**
             * Toggle fold on stored navigation's scope
             */
            function toggleFolded()
            {
                navigationScope.toggleFolded();
            }

            /**
             * Flatten the given navigation
             *
             * @param navigation
             * @private
             */
            function _flattenNavigation(navigation)
            {
                var flatNav = [];

                for ( var x = 0; x < navigation.length; x++ )
                {
                    // Copy and clear the children of the
                    // navigation that we want to push
                    var navToPush = angular.copy(navigation[x]);
                    navToPush.children = [];

                    // Push the item
                    flatNav.push(navToPush);

                    // If there are child items in this navigation,
                    // do some nested function magic
                    if ( navigation[x].children.length > 0 )
                    {
                        flatNav = flatNav.concat(_flattenNavigation(navigation[x].children));
                    }
                }

                return flatNav;
            }
        };
    }

    /** @ngInject */
    function MsNavigationController($scope, msNavigationService)
    {
        var vm = this;

        // Data
        if ( $scope.root )
        {
            vm.navigation = msNavigationService.getNavigation($scope.root);
        }
        else
        {
            vm.navigation = msNavigationService.getNavigation();
        }

        // Methods
        vm.toggleHorizontalMobileMenu = toggleHorizontalMobileMenu;

        //////////

        init();

        /**
         * Initialize
         */
        function init()
        {
            // Sort the navigation before doing anything else
            msNavigationService.sort();
        }

        /**
         * Toggle horizontal mobile menu
         */
        function toggleHorizontalMobileMenu()
        {
            angular.element('body').toggleClass('ms-navigation-horizontal-mobile-menu-active');
        }
    }

    /** @ngInject */
    function msNavigationDirective($rootScope, $timeout, $mdSidenav, msNavigationService)
    {
        return {
            restrict   : 'E',
            scope      : {
                folded: '=',
                root  : '@'
            },
            controller : 'MsNavigationController as vm',
            templateUrl: 'app/core/directives/ms-navigation/templates/vertical.html',
            transclude : true,
            compile    : function (tElement)
            {
                tElement.addClass('ms-navigation');

                return function postLink(scope, iElement)
                {
                    var bodyEl = angular.element('body'),
                        foldExpanderEl = angular.element('<div id="ms-navigation-fold-expander"></div>'),
                        foldCollapserEl = angular.element('<div id="ms-navigation-fold-collapser"></div>'),
                        sidenav = $mdSidenav('navigation');

                    // Store the navigation in the service for public access
                    msNavigationService.setNavigationScope(scope);

                    // Initialize
                    init();

                    /**
                     * Initialize
                     */
                    function init()
                    {
                        // Set the folded status for the first time.
                        // First, we have to check if we have a folded
                        // status available in the service already. This
                        // will prevent navigation to act weird if we already
                        // set the fold status, remove the navigation and
                        // then re-initialize it, which happens if we
                        // change to a view without a navigation and then
                        // come back with history.back() function.

                        // If the service didn't initialize before, set
                        // the folded status from scope, otherwise we
                        // won't touch anything because the folded status
                        // already set in the service...
                        if ( msNavigationService.getFolded() === null )
                        {
                            msNavigationService.setFolded(scope.folded);
                        }

                        if ( msNavigationService.getFolded() )
                        {
                            // Collapse everything.
                            // This must be inside a $timeout because by the
                            // time we call this, the 'msNavigation::collapse'
                            // event listener is not registered yet. $timeout
                            // will ensure that it will be called after it is
                            // registered.
                            $timeout(function ()
                            {
                                $rootScope.$broadcast('msNavigation::collapse');
                            });

                            // Add class to the body
                            bodyEl.addClass('ms-navigation-folded');

                            // Set fold expander
                            setFoldExpander();
                        }
                    }

                    // Sidenav locked open status watcher
                    scope.$watch(function ()
                    {
                        return sidenav.isLockedOpen();
                    }, function (current, old)
                    {
                        if ( angular.isUndefined(current) || angular.equals(current, old) )
                        {
                            return;
                        }

                        var folded = msNavigationService.getFolded();

                        if ( folded )
                        {
                            if ( current )
                            {
                                // Collapse everything
                                $rootScope.$broadcast('msNavigation::collapse');
                            }
                            else
                            {
                                // Expand the active one and its parents
                                var activeItem = msNavigationService.getActiveItem();
                                if ( activeItem )
                                {
                                    activeItem.scope.$emit('msNavigation::stateMatched');
                                }
                            }
                        }
                    });

                    // Folded status watcher
                    scope.$watch('folded', function (current, old)
                    {
                        if ( angular.isUndefined(current) || angular.equals(current, old) )
                        {
                            return;
                        }

                        setFolded(current);
                    });

                    /**
                     * Set folded status
                     *
                     * @param folded
                     */
                    function setFolded(folded)
                    {
                        // Store folded status on the service for global access
                        msNavigationService.setFolded(folded);

                        if ( folded )
                        {
                            // Collapse everything
                            $rootScope.$broadcast('msNavigation::collapse');

                            // Add class to the body
                            bodyEl.addClass('ms-navigation-folded');

                            // Set fold expander
                            setFoldExpander();
                        }
                        else
                        {
                            // Expand the active one and its parents
                            var activeItem = msNavigationService.getActiveItem();
                            if ( activeItem )
                            {
                                activeItem.scope.$emit('msNavigation::stateMatched');
                            }

                            // Remove body class
                            bodyEl.removeClass('ms-navigation-folded ms-navigation-folded-open');

                            // Remove fold collapser
                            removeFoldCollapser();
                        }
                    }

                    /**
                     * Set fold expander
                     */
                    function setFoldExpander()
                    {
                        iElement.parent().append(foldExpanderEl);

                        // Let everything settle for a moment
                        // before registering the event listener
                        $timeout(function ()
                        {
                            foldExpanderEl.on('mouseenter touchstart', onFoldExpanderHover);
                        });
                    }

                    /**
                     * Set fold collapser
                     */
                    function setFoldCollapser()
                    {
                        bodyEl.find('#main').append(foldCollapserEl);
                        foldCollapserEl.on('mouseenter touchstart', onFoldCollapserHover);
                    }

                    /**
                     * Remove fold collapser
                     */
                    function removeFoldCollapser()
                    {
                        foldCollapserEl.remove();
                    }

                    /**
                     * onHover event of foldExpander
                     */
                    function onFoldExpanderHover(event)
                    {
                        if ( event )
                        {
                            event.preventDefault();
                        }

                        // Set folded open status
                        msNavigationService.setFoldedOpen(true);

                        // Expand the active one and its parents
                        var activeItem = msNavigationService.getActiveItem();
                        if ( activeItem )
                        {
                            activeItem.scope.$emit('msNavigation::stateMatched');
                        }

                        // Add class to the body
                        bodyEl.addClass('ms-navigation-folded-open');

                        // Remove the fold opener
                        foldExpanderEl.remove();

                        // Set fold collapser
                        setFoldCollapser();
                    }

                    /**
                     * onHover event of foldCollapser
                     */
                    function onFoldCollapserHover(event)
                    {
                        if ( event )
                        {
                            event.preventDefault();
                        }

                        // Set folded open status
                        msNavigationService.setFoldedOpen(false);

                        // Collapse everything
                        $rootScope.$broadcast('msNavigation::collapse');

                        // Remove body class
                        bodyEl.removeClass('ms-navigation-folded-open');

                        // Remove the fold collapser
                        foldCollapserEl.remove();

                        // Set fold expander
                        setFoldExpander();
                    }

                    /**
                     * Public access for toggling folded status externally
                     */
                    scope.toggleFolded = function ()
                    {
                        var folded = msNavigationService.getFolded();

                        setFolded(!folded);
                    };

                    /**
                     * On $stateChangeStart
                     */
                    scope.$on('$stateChangeStart', function ()
                    {
                        // Close the sidenav
                        sidenav.close();
                    });

                    // Cleanup
                    scope.$on('$destroy', function ()
                    {
                        foldCollapserEl.off('mouseenter touchstart');
                        foldExpanderEl.off('mouseenter touchstart');
                    });
                };
            }
        };
    }

    /** @ngInject */
    function MsNavigationNodeController($scope, $element, $rootScope, $animate, $state, msNavigationService)
    {
        var vm = this;

        // Data
        vm.element = $element;
        vm.node = $scope.node;
        vm.hasChildren = undefined;
        vm.collapsed = undefined;
        vm.collapsable = undefined;
        vm.group = undefined;
        vm.animateHeightClass = 'animate-height';

        // Methods
        vm.toggleCollapsed = toggleCollapsed;
        vm.collapse = collapse;
        vm.expand = expand;
        vm.getClass = getClass;
        vm.isHidden = isHidden;

        //////////

        init();

        /**
         * Initialize
         */
        function init()
        {
            // Setup the initial values

            // Has children?
            vm.hasChildren = vm.node.children.length > 0;

            // Is group?
            vm.group = !!(angular.isDefined(vm.node.group) && vm.node.group === true);

            // Is collapsable?
            if ( !vm.hasChildren || vm.group )
            {
                vm.collapsable = false;
            }
            else
            {
                vm.collapsable = !!(angular.isUndefined(vm.node.collapsable) || typeof vm.node.collapsable !== 'boolean' || vm.node.collapsable === true);
            }

            // Is collapsed?
            if ( !vm.collapsable )
            {
                vm.collapsed = false;
            }
            else
            {
                vm.collapsed = !!(angular.isUndefined(vm.node.collapsed) || typeof vm.node.collapsed !== 'boolean' || vm.node.collapsed === true);
            }

            // Expand all parents if we have a matching state or
            // the current state is a child of the node's state
            if ( vm.node.state === $state.current.name || $state.includes(vm.node.state) )
            {
                // If state params are defined, make sure they are
                // equal, otherwise do not set the active item
                if ( angular.isDefined(vm.node.stateParams) && angular.isDefined($state.params) && !angular.equals(vm.node.stateParams, $state.params) )
                {
                    return;
                }

                $scope.$emit('msNavigation::stateMatched');

                // Also store the current active menu item
                msNavigationService.setActiveItem(vm.node, $scope);
            }

            $scope.$on('msNavigation::stateMatched', function ()
            {
                // Expand if the current scope is collapsable and is collapsed
                if ( vm.collapsable && vm.collapsed )
                {
                    $scope.$evalAsync(function ()
                    {
                        vm.collapsed = false;
                    });
                }
            });

            // Listen for collapse event
            $scope.$on('msNavigation::collapse', function (event, path)
            {
                if ( vm.collapsed || !vm.collapsable )
                {
                    return;
                }

                // If there is no path defined, collapse
                if ( angular.isUndefined(path) )
                {
                    vm.collapse();
                }
                // If there is a path defined, do not collapse
                // the items that are inside that path. This will
                // prevent parent items from collapsing
                else
                {
                    var givenPathParts = path.split('.'),
                        activePathParts = [];

                    var activeItem = msNavigationService.getActiveItem();
                    if ( activeItem )
                    {
                        activePathParts = activeItem.node._path.split('.');
                    }

                    // Test for given path
                    if ( givenPathParts.indexOf(vm.node._id) > -1 )
                    {
                        return;
                    }

                    // Test for active path
                    if ( activePathParts.indexOf(vm.node._id) > -1 )
                    {
                        return;
                    }

                    vm.collapse();
                }
            });

            // Listen for $stateChangeSuccess event
            $scope.$on('$stateChangeSuccess', function ()
            {
                if ( vm.node.state === $state.current.name )
                {
                    // If state params are defined, make sure they are
                    // equal, otherwise do not set the active item
                    if ( angular.isDefined(vm.node.stateParams) && angular.isDefined($state.params) && !angular.equals(vm.node.stateParams, $state.params) )
                    {
                        return;
                    }

                    // Update active item on state change
                    msNavigationService.setActiveItem(vm.node, $scope);

                    // Collapse everything except the one we're using
                    $rootScope.$broadcast('msNavigation::collapse', vm.node._path);
                }

                // Expand the parents if we the current
                // state is a child of the node's state
                if ( $state.includes(vm.node.state) )
                {
                    // If state params are defined, make sure they are
                    // equal, otherwise do not set the active item
                    if ( angular.isDefined(vm.node.stateParams) && angular.isDefined($state.params) && !angular.equals(vm.node.stateParams, $state.params) )
                    {
                        return;
                    }

                    // Emit the stateMatched
                    $scope.$emit('msNavigation::stateMatched');
                }
            });
        }

        /**
         * Toggle collapsed
         */
        function toggleCollapsed()
        {
            if ( vm.collapsed )
            {
                vm.expand();
            }
            else
            {
                vm.collapse();
            }
        }

        /**
         * Collapse
         */
        function collapse()
        {
            // Grab the element that we are going to collapse
            var collapseEl = vm.element.children('ul');

            // Grab the height
            var height = collapseEl[0].offsetHeight;

            $scope.$evalAsync(function ()
            {
                // Set collapsed status
                vm.collapsed = true;

                // Add collapsing class to the node
                vm.element.addClass('collapsing');

                // Animate the height
                $animate.animate(collapseEl,
                    {
                        'display': 'block',
                        'height' : height + 'px'
                    },
                    {
                        'height': '0px'
                    },
                    vm.animateHeightClass
                ).then(
                    function ()
                    {
                        // Clear the inline styles after animation done
                        collapseEl.css({
                            'display': '',
                            'height' : ''
                        });

                        // Clear collapsing class from the node
                        vm.element.removeClass('collapsing');
                    }
                );

                // Broadcast the collapse event so child items can also be collapsed
                $scope.$broadcast('msNavigation::collapse');
            });
        }

        /**
         * Expand
         */
        function expand()
        {
            // Grab the element that we are going to expand
            var expandEl = vm.element.children('ul');

            // Move the element out of the dom flow and
            // make it block so we can get its height
            expandEl.css({
                'position'  : 'absolute',
                'visibility': 'hidden',
                'display'   : 'block',
                'height'    : 'auto'
            });

            // Grab the height
            var height = expandEl[0].offsetHeight;

            // Reset the style modifications
            expandEl.css({
                'position'  : '',
                'visibility': '',
                'display'   : '',
                'height'    : ''
            });

            $scope.$evalAsync(function ()
            {
                // Set collapsed status
                vm.collapsed = false;

                // Add expanding class to the node
                vm.element.addClass('expanding');

                // Animate the height
                $animate.animate(expandEl,
                    {
                        'display': 'block',
                        'height' : '0px'
                    },
                    {
                        'height': height + 'px'
                    },
                    vm.animateHeightClass
                ).then(
                    function ()
                    {
                        // Clear the inline styles after animation done
                        expandEl.css({
                            'height': ''
                        });

                        // Clear expanding class from the node
                        vm.element.removeClass('expanding');
                    }
                );

                // If item expanded, broadcast the collapse event from rootScope so that the other expanded items
                // can be collapsed. This is necessary for keeping only one parent expanded at any time
                $rootScope.$broadcast('msNavigation::collapse', vm.node._path);
            });
        }

        /**
         * Return the class
         *
         * @returns {*}
         */
        function getClass()
        {
            return vm.node.class;
        }

        /**
         * Check if node should be hidden
         *
         * @returns {boolean}
         */
        function isHidden()
        {
            if ( angular.isDefined(vm.node.hidden) && angular.isFunction(vm.node.hidden) )
            {
                return vm.node.hidden();
            }

            return false;
        }
    }

    /** @ngInject */
    function msNavigationNodeDirective()
    {
        return {
            restrict        : 'A',
            bindToController: {
                node: '=msNavigationNode'
            },
            controller      : 'MsNavigationNodeController as vm',
            compile         : function (tElement)
            {
                tElement.addClass('ms-navigation-node');

                return function postLink(scope, iElement, iAttrs, MsNavigationNodeCtrl)
                {
                    // Add custom classes
                    iElement.addClass(MsNavigationNodeCtrl.getClass());

                    // Add group class if it's a group
                    if ( MsNavigationNodeCtrl.group )
                    {
                        iElement.addClass('group');
                    }
                };
            }
        };
    }

    /** @ngInject */
    function msNavigationItemDirective()
    {
        return {
            restrict: 'A',
            require : '^msNavigationNode',
            compile : function (tElement)
            {
                tElement.addClass('ms-navigation-item');

                return function postLink(scope, iElement, iAttrs, MsNavigationNodeCtrl)
                {
                    // If the item is collapsable...
                    if ( MsNavigationNodeCtrl.collapsable )
                    {
                        iElement.on('click', MsNavigationNodeCtrl.toggleCollapsed);
                    }

                    // Cleanup
                    scope.$on('$destroy', function ()
                    {
                        iElement.off('click');
                    });
                };
            }
        };
    }

    /** @ngInject */
    function msNavigationHorizontalDirective(msNavigationService)
    {
        return {
            restrict   : 'E',
            scope      : {
                root: '@'
            },
            controller : 'MsNavigationController as vm',
            templateUrl: 'app/core/directives/ms-navigation/templates/horizontal.html',
            transclude : true,
            compile    : function (tElement)
            {
                tElement.addClass('ms-navigation-horizontal');

                return function postLink(scope)
                {
                    // Store the navigation in the service for public access
                    msNavigationService.setNavigationScope(scope);
                };
            }
        };
    }

    /** @ngInject */
    function MsNavigationHorizontalNodeController($scope, $element, $rootScope, $state, msNavigationService)
    {
        var vm = this;

        // Data
        vm.element = $element;
        vm.node = $scope.node;
        vm.hasChildren = undefined;
        vm.group = undefined;

        // Methods
        vm.getClass = getClass;

        //////////

        init();

        /**
         * Initialize
         */
        function init()
        {
            // Setup the initial values

            // Is active
            vm.isActive = false;

            // Has children?
            vm.hasChildren = vm.node.children.length > 0;

            // Is group?
            vm.group = !!(angular.isDefined(vm.node.group) && vm.node.group === true);

            // Mark all parents as active if we have a matching state
            // or the current state is a child of the node's state
            if ( vm.node.state === $state.current.name || $state.includes(vm.node.state) )
            {
                // If state params are defined, make sure they are
                // equal, otherwise do not set the active item
                if ( angular.isDefined(vm.node.stateParams) && angular.isDefined($state.params) && !angular.equals(vm.node.stateParams, $state.params) )
                {
                    return;
                }

                $scope.$emit('msNavigation::stateMatched');

                // Also store the current active menu item
                msNavigationService.setActiveItem(vm.node, $scope);
            }

            $scope.$on('msNavigation::stateMatched', function ()
            {
                // Mark as active if has children
                if ( vm.hasChildren )
                {
                    $scope.$evalAsync(function ()
                    {
                        vm.isActive = true;
                    });
                }
            });

            // Listen for clearActive event
            $scope.$on('msNavigation::clearActive', function ()
            {
                if ( !vm.hasChildren )
                {
                    return;
                }

                var activePathParts = [];

                var activeItem = msNavigationService.getActiveItem();
                if ( activeItem )
                {
                    activePathParts = activeItem.node._path.split('.');
                }

                // Test for active path
                if ( activePathParts.indexOf(vm.node._id) > -1 )
                {
                    $scope.$evalAsync(function ()
                    {
                        vm.isActive = true;
                    });
                }
                else
                {
                    $scope.$evalAsync(function ()
                    {
                        vm.isActive = false;
                    });
                }

            });

            // Listen for $stateChangeSuccess event
            $scope.$on('$stateChangeSuccess', function ()
            {
                if ( vm.node.state === $state.current.name || $state.includes(vm.node.state) )
                {
                    // If state params are defined, make sure they are
                    // equal, otherwise do not set the active item
                    if ( angular.isDefined(vm.node.stateParams) && angular.isDefined($state.params) && !angular.equals(vm.node.stateParams, $state.params) )
                    {
                        return;
                    }

                    // Update active item on state change
                    msNavigationService.setActiveItem(vm.node, $scope);

                    // Clear all active states except the one we're using
                    $rootScope.$broadcast('msNavigation::clearActive');
                }
            });
        }

        /**
         * Return the class
         *
         * @returns {*}
         */
        function getClass()
        {
            return vm.node.class;
        }
    }

    /** @ngInject */
    function msNavigationHorizontalNodeDirective()
    {
        return {
            restrict        : 'A',
            bindToController: {
                node: '=msNavigationHorizontalNode'
            },
            controller      : 'MsNavigationHorizontalNodeController as vm',
            compile         : function (tElement)
            {
                tElement.addClass('ms-navigation-horizontal-node');

                return function postLink(scope, iElement, iAttrs, MsNavigationHorizontalNodeCtrl)
                {
                    // Add custom classes
                    iElement.addClass(MsNavigationHorizontalNodeCtrl.getClass());

                    // Add group class if it's a group
                    if ( MsNavigationHorizontalNodeCtrl.group )
                    {
                        iElement.addClass('group');
                    }
                };
            }
        };
    }

    /** @ngInject */
    function msNavigationHorizontalItemDirective($mdMedia)
    {
        return {
            restrict: 'A',
            require : '^msNavigationHorizontalNode',
            compile : function (tElement)
            {
                tElement.addClass('ms-navigation-horizontal-item');

                return function postLink(scope, iElement, iAttrs, MsNavigationHorizontalNodeCtrl)
                {
                    iElement.on('click', onClick);

                    function onClick()
                    {
                        if ( !MsNavigationHorizontalNodeCtrl.hasChildren || $mdMedia('gt-md') )
                        {
                            return;
                        }

                        iElement.toggleClass('expanded');
                    }

                    // Cleanup
                    scope.$on('$destroy', function ()
                    {
                        iElement.off('click');
                    });
                };
            }
        };
    }

})();
(function (){
    'use strict';

    angular
        .module('app.core')
        .provider('msLotteryService', msLotteryServiceProvider)
        .controller('MsLotteryController', MsLotteryController)
        // Vertical
        .directive('msLottery', msLotteryDirective)
        .controller('MsLotteryNodeController', MsLotteryNodeController)
        .directive('msLotteryNode', msLotteryNodeDirective)
        .directive('msLotteryItem', msLotteryItemDirective);

    /** @ngInject */
    function msLotteryServiceProvider(){
        // Inject $log service
        var $log = angular.injector(['ng']).get('$log');

        // Lottery array
        var navigation = [];

        var service = this;

        // Methods
        service.saveItem = saveItem;
        service.deleteItem = deleteItem;
        service.sortByWeight = sortByWeight;

        //////////

        /**
         * Create or update the navigation item
         *
         * @param path
         * @param item
         */
        function saveItem(path, item)
        {
            if ( !angular.isString(path) )
            {
                $log.error('path must be a string (eg. `dashboard.project`)');
                return;
            }

            var parts = path.split('.');

            // Generate the object id from the parts
            var id = parts[parts.length - 1];

            // Get the parent item from the parts
            var parent = _findOrCreateParent(parts);

            // Decide if we are going to update or create
            var updateItem = false;

            for ( var i = 0; i < parent.length; i++ )
            {
                if ( parent[i]._id === id )
                {
                    updateItem = parent[i];

                    break;
                }
            }

            // Update
            if ( updateItem )
            {
                angular.extend(updateItem, item);

                // Add proper ui-sref
                updateItem.uisref = _getUiSref(updateItem);
            }
            // Create
            else
            {
                // Create an empty children array in the item
                item.children = [];

                // Add the default weight if not provided or if it's not a number
                if ( angular.isUndefined(item.weight) || !angular.isNumber(item.weight) )
                {
                    item.weight = 1;
                }

                // Add the item id
                item._id = id;

                // Add the item path
                item._path = path;

                // Add proper ui-sref
                item.uisref = _getUiSref(item);

                // Push the item into the array
                parent.push(item);
            }
        }

        /**
         * Delete navigation item
         *
         * @param path
         */
        function deleteItem(path)
        {
            if ( !angular.isString(path) )
            {
                $log.error('path must be a string (eg. `dashboard.project`)');
                return;
            }

            // Locate the item by using given path
            var item = navigation,
                parts = path.split('.');

            for ( var p = 0; p < parts.length; p++ )
            {
                var id = parts[p];

                for ( var i = 0; i < item.length; i++ )
                {
                    if ( item[i]._id === id )
                    {
                        // If we have a matching path,
                        // we have found our object:
                        // remove it.
                        if ( item[i]._path === path )
                        {
                            item.splice(i, 1);
                            return true;
                        }

                        // Otherwise grab the children of
                        // the current item and continue
                        item = item[i].children;
                        break;
                    }
                }
            }

            return false;
        }

        /**
         * Sort the navigation items by their weights
         *
         * @param parent
         */
        function sortByWeight(parent)
        {
            // If parent not provided, sort the root items
            if ( !parent )
            {
                parent = navigation;
                parent.sort(_byWeight);
            }

            // Sort the children
            for ( var i = 0; i < parent.length; i++ )
            {
                var children = parent[i].children;

                if ( children.length > 1 )
                {
                    children.sort(_byWeight);
                }

                if ( children.length > 0 )
                {
                    sortByWeight(children);
                }
            }
        }

        /* ----------------- */
        /* Private Functions */
        /* ----------------- */

        /**
         * Find or create parent
         *
         * @param parts
         * @returns {Array|Boolean}
         * @private
         */
        function _findOrCreateParent(parts)
        {
            // Store the main navigation
            var parent = navigation;

            // If it's going to be a root item
            // return the navigation itself
            if ( parts.length === 1 )
            {
                return parent;
            }

            // Remove the last element from the parts as
            // we don't need that to figure out the parent
            parts.pop();

            // Find and return the parent
            for ( var i = 0; i < parts.length; i++ )
            {
                var _id = parts[i],
                    createParent = true;

                for ( var p = 0; p < parent.length; p++ )
                {
                    if ( parent[p]._id === _id )
                    {
                        parent = parent[p].children;
                        createParent = false;

                        break;
                    }
                }

                // If there is no parent found, create one, push
                // it into the current parent and assign it as a
                // new parent
                if ( createParent )
                {
                    var item = {
                        _id     : _id,
                        _path   : parts.join('.'),
                        title   : _id,
                        weight  : 1,
                        children: []
                    };

                    parent.push(item);
                    parent = item.children;
                }
            }

            return parent;
        }

        /**
         * Sort by weight
         *
         * @param x
         * @param y
         * @returns {number}
         * @private
         */
        function _byWeight(x, y)
        {
            return parseInt(x.weight) - parseInt(y.weight);
        }

        /**
         * Setup the ui-sref using state & state parameters
         *
         * @param item
         * @returns {string}
         * @private
         */
        function _getUiSref(item)
        {
            var uisref = '';

            if ( angular.isDefined(item.state) )
            {
                uisref = item.state;

                if ( angular.isDefined(item.stateParams) && angular.isObject(item.stateParams) )
                {
                    uisref = uisref + '(' + angular.toJson(item.stateParams) + ')';
                }
            }

            return uisref;
        }

        /* ----------------- */
        /* Service           */
        /* ----------------- */

        this.$get = function ()
        {
            var activeItem = null,
                navigationScope = null,
                folded = null,
                foldedOpen = null;

            var service = {
                saveItem          : saveItem,
                deleteItem        : deleteItem,
                sort              : sortByWeight,
                clearLottery   : clearLottery,
                setActiveItem     : setActiveItem,
                getActiveItem     : getActiveItem,
                getLottery     : getLottery,
                getFlatLottery : getFlatLottery,
                setLotteryScope: setLotteryScope,
                setFolded         : setFolded,
                getFolded         : getFolded,
                setFoldedOpen     : setFoldedOpen,
                getFoldedOpen     : getFoldedOpen,
                toggleFolded      : toggleFolded
            };

            return service;

            //////////

            /**
             * Clear the entire navigation
             */
            function clearLottery()
            {
                // Clear the navigation array
                navigation = [];

                // Clear the vm.navigation from main controller
                if ( navigationScope )
                {
                    navigationScope.vm.navigation = navigation;
                }
            }

            /**
             * Set active item
             *
             * @param node
             * @param scope
             */
            function setActiveItem(node, scope)
            {
                activeItem = {
                    node : node,
                    scope: scope
                };
            }

            /**
             * Return active item
             */
            function getActiveItem()
            {
                return activeItem;
            }

            /**
             * Return navigation array
             *
             * @param root
             * @returns Array
             */
            function getLottery(root)
            {
                if ( root )
                {
                    for ( var i = 0; i < navigation.length; i++ )
                    {
                        if ( navigation[i]._id === root )
                        {
                            return [navigation[i]];
                        }
                    }

                    return null;
                }

                return navigation;
            }

            /**
             * Return flat navigation array
             *
             * @param root
             * @returns Array
             */
            function getFlatLottery(root)
            {
                // Get the correct navigation array
                var navigation = getLottery(root);

                // Flatten the navigation object
                return _flattenLottery(navigation);
            }

            /**
             * Store navigation's scope for later use
             *
             * @param scope
             */
            function setLotteryScope(scope)
            {
                navigationScope = scope;
            }

            /**
             * Set folded status
             *
             * @param status
             */
            function setFolded(status)
            {
                folded = status;
            }

            /**
             * Return folded status
             *
             * @returns {*}
             */
            function getFolded()
            {
                return folded;
            }

            /**
             * Set folded open status
             *
             * @param status
             */
            function setFoldedOpen(status)
            {
                foldedOpen = status;
            }

            /**
             * Return folded open status
             *
             * @returns {*}
             */
            function getFoldedOpen()
            {
                return foldedOpen;
            }


            /**
             * Toggle fold on stored navigation's scope
             */
            function toggleFolded()
            {
                navigationScope.toggleFolded();
            }

            /**
             * Flatten the given navigation
             *
             * @param navigation
             * @private
             */
            function _flattenLottery(navigation)
            {
                var flatNav = [];

                for ( var x = 0; x < navigation.length; x++ )
                {
                    // Copy and clear the children of the
                    // navigation that we want to push
                    var navToPush = angular.copy(navigation[x]);
                    navToPush.children = [];

                    // Push the item
                    flatNav.push(navToPush);

                    // If there are child items in this navigation,
                    // do some nested function magic
                    if ( navigation[x].children.length > 0 )
                    {
                        flatNav = flatNav.concat(_flattenLottery(navigation[x].children));
                    }
                }

                return flatNav;
            }
        };
    }

    /** @ngInject */
    function MsLotteryController($scope, msLotteryService)
    {
        var vm = this;

        // Data
        if ( $scope.root )
        {
            vm.navigation = msLotteryService.getLottery($scope.root);
        }
        else
        {
            vm.navigation = msLotteryService.getLottery();
        }

        // Methods
        vm.toggleHorizontalMobileMenu = toggleHorizontalMobileMenu;

        //////////

        init();

        /**
         * Initialize
         */
        function init()
        {
            // Sort the navigation before doing anything else
            msLotteryService.sort();
        }

        /**
         * Toggle horizontal mobile menu
         */
        function toggleHorizontalMobileMenu()
        {
            angular.element('body').toggleClass('ms-navigation-horizontal-mobile-menu-active');
        }
    }

    /** @ngInject */
    function msLotteryDirective($rootScope, $timeout, $mdSidenav, msLotteryService)
    {
        return {
            restrict   : 'E',
            scope      : {
                folded: '=',
                root  : '@'
            },
            controller : 'MsLotteryController as vm',
            templateUrl: 'app/core/directives/ms-navigation/templates/vertical.html',
            transclude : true,
            compile    : function (tElement)
            {
                tElement.addClass('ms-navigation');

                return function postLink(scope, iElement)
                {
                    var bodyEl = angular.element('body'),
                        foldExpanderEl = angular.element('<div id="ms-navigation-fold-expander"></div>'),
                        foldCollapserEl = angular.element('<div id="ms-navigation-fold-collapser"></div>'),
                        sidenav = $mdSidenav('navigation');

                    // Store the navigation in the service for public access
                    msLotteryService.setLotteryScope(scope);

                    // Initialize
                    init();

                    /**
                     * Initialize
                     */
                    function init()
                    {
                        // Set the folded status for the first time.
                        // First, we have to check if we have a folded
                        // status available in the service already. This
                        // will prevent navigation to act weird if we already
                        // set the fold status, remove the navigation and
                        // then re-initialize it, which happens if we
                        // change to a view without a navigation and then
                        // come back with history.back() function.

                        // If the service didn't initialize before, set
                        // the folded status from scope, otherwise we
                        // won't touch anything because the folded status
                        // already set in the service...
                        if ( msLotteryService.getFolded() === null )
                        {
                            msLotteryService.setFolded(scope.folded);
                        }

                        if ( msLotteryService.getFolded() )
                        {
                            // Collapse everything.
                            // This must be inside a $timeout because by the
                            // time we call this, the 'msLottery::collapse'
                            // event listener is not registered yet. $timeout
                            // will ensure that it will be called after it is
                            // registered.
                            $timeout(function ()
                            {
                                $rootScope.$broadcast('msLottery::collapse');
                            });

                            // Add class to the body
                            bodyEl.addClass('ms-navigation-folded');

                            // Set fold expander
                            setFoldExpander();
                        }
                    }

                    // Sidenav locked open status watcher
                    scope.$watch(function ()
                    {
                        return sidenav.isLockedOpen();
                    }, function (current, old)
                    {
                        if ( angular.isUndefined(current) || angular.equals(current, old) )
                        {
                            return;
                        }

                        var folded = msLotteryService.getFolded();

                        if ( folded )
                        {
                            if ( current )
                            {
                                // Collapse everything
                                $rootScope.$broadcast('msLottery::collapse');
                            }
                            else
                            {
                                // Expand the active one and its parents
                                var activeItem = msLotteryService.getActiveItem();
                                if ( activeItem )
                                {
                                    activeItem.scope.$emit('msLottery::stateMatched');
                                }
                            }
                        }
                    });

                    // Folded status watcher
                    scope.$watch('folded', function (current, old)
                    {
                        if ( angular.isUndefined(current) || angular.equals(current, old) )
                        {
                            return;
                        }

                        setFolded(current);
                    });

                    /**
                     * Set folded status
                     *
                     * @param folded
                     */
                    function setFolded(folded)
                    {
                        // Store folded status on the service for global access
                        msLotteryService.setFolded(folded);

                        if ( folded )
                        {
                            // Collapse everything
                            $rootScope.$broadcast('msLottery::collapse');

                            // Add class to the body
                            bodyEl.addClass('ms-navigation-folded');

                            // Set fold expander
                            setFoldExpander();
                        }
                        else
                        {
                            // Expand the active one and its parents
                            var activeItem = msLotteryService.getActiveItem();
                            if ( activeItem )
                            {
                                activeItem.scope.$emit('msLottery::stateMatched');
                            }

                            // Remove body class
                            bodyEl.removeClass('ms-navigation-folded ms-navigation-folded-open');

                            // Remove fold collapser
                            removeFoldCollapser();
                        }
                    }

                    /**
                     * Set fold expander
                     */
                    function setFoldExpander()
                    {
                        iElement.parent().append(foldExpanderEl);

                        // Let everything settle for a moment
                        // before registering the event listener
                        $timeout(function ()
                        {
                            foldExpanderEl.on('mouseenter touchstart', onFoldExpanderHover);
                        });
                    }

                    /**
                     * Set fold collapser
                     */
                    function setFoldCollapser()
                    {
                        bodyEl.find('#main').append(foldCollapserEl);
                        foldCollapserEl.on('mouseenter touchstart', onFoldCollapserHover);
                    }

                    /**
                     * Remove fold collapser
                     */
                    function removeFoldCollapser()
                    {
                        foldCollapserEl.remove();
                    }

                    /**
                     * onHover event of foldExpander
                     */
                    function onFoldExpanderHover(event)
                    {
                        if ( event )
                        {
                            event.preventDefault();
                        }

                        // Set folded open status
                        msLotteryService.setFoldedOpen(true);

                        // Expand the active one and its parents
                        var activeItem = msLotteryService.getActiveItem();
                        if ( activeItem )
                        {
                            activeItem.scope.$emit('msLottery::stateMatched');
                        }

                        // Add class to the body
                        bodyEl.addClass('ms-navigation-folded-open');

                        // Remove the fold opener
                        foldExpanderEl.remove();

                        // Set fold collapser
                        setFoldCollapser();
                    }

                    /**
                     * onHover event of foldCollapser
                     */
                    function onFoldCollapserHover(event)
                    {
                        if ( event )
                        {
                            event.preventDefault();
                        }

                        // Set folded open status
                        msLotteryService.setFoldedOpen(false);

                        // Collapse everything
                        $rootScope.$broadcast('msLottery::collapse');

                        // Remove body class
                        bodyEl.removeClass('ms-navigation-folded-open');

                        // Remove the fold collapser
                        foldCollapserEl.remove();

                        // Set fold expander
                        setFoldExpander();
                    }

                    /**
                     * Public access for toggling folded status externally
                     */
                    scope.toggleFolded = function ()
                    {
                        var folded = msLotteryService.getFolded();

                        setFolded(!folded);
                    };

                    /**
                     * On $stateChangeStart
                     */
                    scope.$on('$stateChangeStart', function ()
                    {
                        // Close the sidenav
                        sidenav.close();
                    });

                    // Cleanup
                    scope.$on('$destroy', function ()
                    {
                        foldCollapserEl.off('mouseenter touchstart');
                        foldExpanderEl.off('mouseenter touchstart');
                    });
                };
            }
        };
    }

    /** @ngInject */
    function MsLotteryNodeController($scope, $element, $rootScope, $animate, $state, msLotteryService)
    {
        var vm = this;

        // Data
        vm.element = $element;
        vm.node = $scope.node;
        vm.hasChildren = undefined;
        vm.collapsed = undefined;
        vm.collapsable = undefined;
        vm.group = undefined;
        vm.animateHeightClass = 'animate-height';

        // Methods
        vm.toggleCollapsed = toggleCollapsed;
        vm.collapse = collapse;
        vm.expand = expand;
        vm.getClass = getClass;
        vm.isHidden = isHidden;

        //////////

        init();

        /**
         * Initialize
         */
        function init()
        {
            // Setup the initial values

            // Has children?
            vm.hasChildren = vm.node.children.length > 0;

            // Is group?
            vm.group = !!(angular.isDefined(vm.node.group) && vm.node.group === true);

            // Is collapsable?
            if ( !vm.hasChildren || vm.group )
            {
                vm.collapsable = false;
            }
            else
            {
                vm.collapsable = !!(angular.isUndefined(vm.node.collapsable) || typeof vm.node.collapsable !== 'boolean' || vm.node.collapsable === true);
            }

            // Is collapsed?
            if ( !vm.collapsable )
            {
                vm.collapsed = false;
            }
            else
            {
                vm.collapsed = !!(angular.isUndefined(vm.node.collapsed) || typeof vm.node.collapsed !== 'boolean' || vm.node.collapsed === true);
            }

            // Expand all parents if we have a matching state or
            // the current state is a child of the node's state
            if ( vm.node.state === $state.current.name || $state.includes(vm.node.state) )
            {
                // If state params are defined, make sure they are
                // equal, otherwise do not set the active item
                if ( angular.isDefined(vm.node.stateParams) && angular.isDefined($state.params) && !angular.equals(vm.node.stateParams, $state.params) )
                {
                    return;
                }

                $scope.$emit('msLottery::stateMatched');

                // Also store the current active menu item
                msLotteryService.setActiveItem(vm.node, $scope);
            }

            $scope.$on('msLottery::stateMatched', function ()
            {
                // Expand if the current scope is collapsable and is collapsed
                if ( vm.collapsable && vm.collapsed )
                {
                    $scope.$evalAsync(function ()
                    {
                        vm.collapsed = false;
                    });
                }
            });

            // Listen for collapse event
            $scope.$on('msLottery::collapse', function (event, path)
            {
                if ( vm.collapsed || !vm.collapsable )
                {
                    return;
                }

                // If there is no path defined, collapse
                if ( angular.isUndefined(path) )
                {
                    vm.collapse();
                }
                    // If there is a path defined, do not collapse
                    // the items that are inside that path. This will
                // prevent parent items from collapsing
                else
                {
                    var givenPathParts = path.split('.'),
                        activePathParts = [];

                    var activeItem = msLotteryService.getActiveItem();
                    if ( activeItem )
                    {
                        activePathParts = activeItem.node._path.split('.');
                    }

                    // Test for given path
                    if ( givenPathParts.indexOf(vm.node._id) > -1 )
                    {
                        return;
                    }

                    // Test for active path
                    if ( activePathParts.indexOf(vm.node._id) > -1 )
                    {
                        return;
                    }

                    vm.collapse();
                }
            });

            // Listen for $stateChangeSuccess event
            $scope.$on('$stateChangeSuccess', function ()
            {
                if ( vm.node.state === $state.current.name )
                {
                    // If state params are defined, make sure they are
                    // equal, otherwise do not set the active item
                    if ( angular.isDefined(vm.node.stateParams) && angular.isDefined($state.params) && !angular.equals(vm.node.stateParams, $state.params) )
                    {
                        return;
                    }

                    // Update active item on state change
                    msLotteryService.setActiveItem(vm.node, $scope);

                    // Collapse everything except the one we're using
                    $rootScope.$broadcast('msLottery::collapse', vm.node._path);
                }

                // Expand the parents if we the current
                // state is a child of the node's state
                if ( $state.includes(vm.node.state) )
                {
                    // If state params are defined, make sure they are
                    // equal, otherwise do not set the active item
                    if ( angular.isDefined(vm.node.stateParams) && angular.isDefined($state.params) && !angular.equals(vm.node.stateParams, $state.params) )
                    {
                        return;
                    }

                    // Emit the stateMatched
                    $scope.$emit('msLottery::stateMatched');
                }
            });
        }

        /**
         * Toggle collapsed
         */
        function toggleCollapsed()
        {
            if ( vm.collapsed )
            {
                vm.expand();
            }
            else
            {
                vm.collapse();
            }
        }

        /**
         * Collapse
         */
        function collapse()
        {
            // Grab the element that we are going to collapse
            var collapseEl = vm.element.children('ul');

            // Grab the height
            var height = collapseEl[0].offsetHeight;

            $scope.$evalAsync(function ()
            {
                // Set collapsed status
                vm.collapsed = true;

                // Add collapsing class to the node
                vm.element.addClass('collapsing');

                // Animate the height
                $animate.animate(collapseEl,
                    {
                        'display': 'block',
                        'height' : height + 'px'
                    },
                    {
                        'height': '0px'
                    },
                    vm.animateHeightClass
                ).then(
                    function ()
                    {
                        // Clear the inline styles after animation done
                        collapseEl.css({
                            'display': '',
                            'height' : ''
                        });

                        // Clear collapsing class from the node
                        vm.element.removeClass('collapsing');
                    }
                );

                // Broadcast the collapse event so child items can also be collapsed
                $scope.$broadcast('msLottery::collapse');
            });
        }

        /**
         * Expand
         */
        function expand()
        {
            // Grab the element that we are going to expand
            var expandEl = vm.element.children('ul');

            // Move the element out of the dom flow and
            // make it block so we can get its height
            expandEl.css({
                'position'  : 'absolute',
                'visibility': 'hidden',
                'display'   : 'block',
                'height'    : 'auto'
            });

            // Grab the height
            var height = expandEl[0].offsetHeight;

            // Reset the style modifications
            expandEl.css({
                'position'  : '',
                'visibility': '',
                'display'   : '',
                'height'    : ''
            });

            $scope.$evalAsync(function ()
            {
                // Set collapsed status
                vm.collapsed = false;

                // Add expanding class to the node
                vm.element.addClass('expanding');

                // Animate the height
                $animate.animate(expandEl,
                    {
                        'display': 'block',
                        'height' : '0px'
                    },
                    {
                        'height': height + 'px'
                    },
                    vm.animateHeightClass
                ).then(
                    function ()
                    {
                        // Clear the inline styles after animation done
                        expandEl.css({
                            'height': ''
                        });

                        // Clear expanding class from the node
                        vm.element.removeClass('expanding');
                    }
                );

                // If item expanded, broadcast the collapse event from rootScope so that the other expanded items
                // can be collapsed. This is necessary for keeping only one parent expanded at any time
                $rootScope.$broadcast('msLottery::collapse', vm.node._path);
            });
        }

        /**
         * Return the class
         *
         * @returns {*}
         */
        function getClass()
        {
            return vm.node.class;
        }

        /**
         * Check if node should be hidden
         *
         * @returns {boolean}
         */
        function isHidden()
        {
            if ( angular.isDefined(vm.node.hidden) && angular.isFunction(vm.node.hidden) )
            {
                return vm.node.hidden();
            }

            return false;
        }
    }

    /** @ngInject */
    function msLotteryNodeDirective()
    {
        return {
            restrict        : 'A',
            bindToController: {
                node: '=msLotteryNode'
            },
            controller      : 'MsLotteryNodeController as vm',
            compile         : function (tElement)
            {
                tElement.addClass('ms-navigation-node');

                return function postLink(scope, iElement, iAttrs, MsLotteryNodeCtrl)
                {
                    // Add custom classes
                    iElement.addClass(MsLotteryNodeCtrl.getClass());

                    // Add group class if it's a group
                    if ( MsLotteryNodeCtrl.group )
                    {
                        iElement.addClass('group');
                    }
                };
            }
        };
    }

    /** @ngInject */
    function msLotteryItemDirective(){
        return {
            restrict: 'A',
            require : '^msLotteryNode',
            compile : function (tElement){
                tElement.addClass('ms-navigation-item');
                return function postLink(scope, iElement, iAttrs, MsLotteryNodeCtrl){
                    // If the item is collapsable...
                    if ( MsLotteryNodeCtrl.collapsable ){
                        iElement.on('click', MsLotteryNodeCtrl.toggleCollapsed);
                    }
                    // Cleanup
                    scope.$on('$destroy', function (){
                        iElement.off('click');
                    });
                };
            }
        };
    }


})();
(function ()
{
    'use strict';

    angular
        .module('app.core')
        .factory('msNavFoldService', msNavFoldService)
        .directive('msNavIsFolded', msNavIsFoldedDirective)
        .controller('MsNavController', MsNavController)
        .directive('msNav', msNavDirective)
        .directive('msNavTitle', msNavTitleDirective)
        .directive('msNavButton', msNavButtonDirective)
        .directive('msNavToggle', msNavToggleDirective);

    /** @ngInject */
    function msNavFoldService()
    {
        var foldable = {};

        var service = {
            setFoldable    : setFoldable,
            isNavFoldedOpen: isNavFoldedOpen,
            toggleFold     : toggleFold,
            openFolded     : openFolded,
            closeFolded    : closeFolded
        };

        return service;

        //////////

        /**
         * Set the foldable
         *
         * @param scope
         * @param element
         */
        function setFoldable(scope, element)
        {
            foldable = {
                'scope'  : scope,
                'element': element
            };
        }

        /**
         * Is folded open
         */
        function isNavFoldedOpen()
        {
            return foldable.scope.isNavFoldedOpen();
        }

        /**
         * Toggle fold
         */
        function toggleFold()
        {
            foldable.scope.toggleFold();
        }

        /**
         * Open folded navigation
         */
        function openFolded()
        {
            foldable.scope.openFolded();
        }

        /**
         * Close folded navigation
         */
        function closeFolded()
        {
            foldable.scope.closeFolded();
        }
    }

    /** @ngInject */
    function msNavIsFoldedDirective($document, $rootScope, msNavFoldService)
    {
        return {
            restrict: 'A',
            link    : function (scope, iElement, iAttrs)
            {
                var isFolded = (iAttrs.msNavIsFolded === 'true'),
                    isFoldedOpen = false,
                    body = angular.element($document[0].body),
                    openOverlay = angular.element('<div id="ms-nav-fold-open-overlay"></div>'),
                    closeOverlay = angular.element('<div id="ms-nav-fold-close-overlay"></div>'),
                    sidenavEl = iElement.parent();

                // Initialize the service
                msNavFoldService.setFoldable(scope, iElement, isFolded);

                // Set the fold status for the first time
                if ( isFolded )
                {
                    fold();
                }
                else
                {
                    unfold();
                }

                /**
                 * Is nav folded open
                 */
                function isNavFoldedOpen()
                {
                    return isFoldedOpen;
                }

                /**
                 * Toggle fold
                 */
                function toggleFold()
                {
                    isFolded = !isFolded;

                    if ( isFolded )
                    {
                        fold();
                    }
                    else
                    {
                        unfold();
                    }
                }

                /**
                 * Fold the navigation
                 */
                function fold()
                {
                    // Add classes
                    body.addClass('ms-nav-folded');

                    // Collapse everything and scroll to the top
                    $rootScope.$broadcast('msNav::forceCollapse');
                    iElement.scrollTop(0);

                    // Append the openOverlay to the element
                    sidenavEl.append(openOverlay);

                    // Event listeners
                    openOverlay.on('mouseenter touchstart', function (event)
                    {
                        openFolded(event);
                        isFoldedOpen = true;
                    });
                }

                /**
                 * Open folded navigation
                 */
                function openFolded(event)
                {
                    if ( angular.isDefined(event) )
                    {
                        event.preventDefault();
                    }

                    body.addClass('ms-nav-folded-open');

                    // Update the location
                    $rootScope.$broadcast('msNav::expandMatchingToggles');

                    // Remove open overlay
                    sidenavEl.find(openOverlay).remove();

                    // Append close overlay and bind its events
                    sidenavEl.parent().append(closeOverlay);
                    closeOverlay.on('mouseenter touchstart', function (event)
                    {
                        closeFolded(event);
                        isFoldedOpen = false;
                    });
                }

                /**
                 * Close folded navigation
                 */
                function closeFolded(event)
                {
                    if ( angular.isDefined(event) )
                    {
                        event.preventDefault();
                    }

                    // Collapse everything and scroll to the top
                    $rootScope.$broadcast('msNav::forceCollapse');
                    iElement.scrollTop(0);

                    body.removeClass('ms-nav-folded-open');

                    // Remove close overlay
                    sidenavEl.parent().find(closeOverlay).remove();

                    // Append open overlay and bind its events
                    sidenavEl.append(openOverlay);
                    openOverlay.on('mouseenter touchstart', function (event)
                    {
                        openFolded(event);
                        isFoldedOpen = true;
                    });
                }

                /**
                 * Unfold the navigation
                 */
                function unfold()
                {
                    body.removeClass('ms-nav-folded ms-nav-folded-open');

                    // Update the location
                    $rootScope.$broadcast('msNav::expandMatchingToggles');

                    iElement.off('mouseenter mouseleave');
                }

                // Expose functions to the scope
                scope.toggleFold = toggleFold;
                scope.openFolded = openFolded;
                scope.closeFolded = closeFolded;
                scope.isNavFoldedOpen = isNavFoldedOpen;

                // Cleanup
                scope.$on('$destroy', function ()
                {
                    openOverlay.off('mouseenter touchstart');
                    closeOverlay.off('mouseenter touchstart');
                    iElement.off('mouseenter mouseleave');
                });
            }
        };
    }


    /** @ngInject */
    function MsNavController()
    {
        var vm = this,
            disabled = false,
            toggleItems = [],
            lockedItems = [];

        // Data

        // Methods
        vm.isDisabled = isDisabled;
        vm.enable = enable;
        vm.disable = disable;
        vm.setToggleItem = setToggleItem;
        vm.getLockedItems = getLockedItems;
        vm.setLockedItem = setLockedItem;
        vm.clearLockedItems = clearLockedItems;

        //////////

        /**
         * Is navigation disabled
         *
         * @returns {boolean}
         */
        function isDisabled()
        {
            return disabled;
        }

        /**
         * Disable the navigation
         */
        function disable()
        {
            disabled = true;
        }

        /**
         * Enable the navigation
         */
        function enable()
        {
            disabled = false;
        }

        /**
         * Set toggle item
         *
         * @param element
         * @param scope
         */
        function setToggleItem(element, scope)
        {
            toggleItems.push({
                'element': element,
                'scope'  : scope
            });
        }

        /**
         * Get locked items
         *
         * @returns {Array}
         */
        function getLockedItems()
        {
            return lockedItems;
        }

        /**
         * Set locked item
         *
         * @param element
         * @param scope
         */
        function setLockedItem(element, scope)
        {
            lockedItems.push({
                'element': element,
                'scope'  : scope
            });
        }

        /**
         * Clear locked items list
         */
        function clearLockedItems()
        {
            lockedItems = [];
        }
    }

    /** @ngInject */
    function msNavDirective($rootScope, $mdComponentRegistry, msNavFoldService)
    {
        return {
            restrict  : 'E',
            scope     : {},
            controller: 'MsNavController',
            compile   : function (tElement)
            {
                tElement.addClass('ms-nav');

                return function postLink(scope)
                {
                    // Update toggle status according to the ui-router current state
                    $rootScope.$broadcast('msNav::expandMatchingToggles');

                    // Update toggles on state changes
                    var stateChangeSuccessEvent = $rootScope.$on('$stateChangeSuccess', function ()
                    {
                        $rootScope.$broadcast('msNav::expandMatchingToggles');

                        // Close navigation sidenav on stateChangeSuccess
                        $mdComponentRegistry.when('navigation').then(function (navigation)
                        {
                            navigation.close();

                            if ( msNavFoldService.isNavFoldedOpen() )
                            {
                                msNavFoldService.closeFolded();
                            }
                        });
                    });

                    // Cleanup
                    scope.$on('$destroy', function ()
                    {
                        stateChangeSuccessEvent();
                    });
                };
            }
        };
    }

    /** @ngInject */
    function msNavTitleDirective()
    {
        return {
            restrict: 'A',
            compile : function (tElement)
            {
                tElement.addClass('ms-nav-title');

                return function postLink()
                {

                };
            }
        };
    }

    /** @ngInject */
    function msNavButtonDirective()
    {
        return {
            restrict: 'AE',
            compile : function (tElement)
            {
                tElement.addClass('ms-nav-button');

                return function postLink()
                {

                };
            }
        };
    }

    /** @ngInject */
    function msNavToggleDirective($rootScope, $q, $animate, $state)
    {
        return {
            restrict: 'A',
            require : '^msNav',
            scope   : true,
            compile : function (tElement, tAttrs)
            {
                tElement.addClass('ms-nav-toggle');

                // Add collapsed attr
                if ( angular.isUndefined(tAttrs.collapsed) )
                {
                    tAttrs.collapsed = true;
                }

                tElement.attr('collapsed', tAttrs.collapsed);

                return function postLink(scope, iElement, iAttrs, MsNavCtrl)
                {
                    var classes = {
                        expanded         : 'expanded',
                        expandAnimation  : 'expand-animation',
                        collapseAnimation: 'collapse-animation'
                    };

                    // Store all related states
                    var links = iElement.find('a');
                    var states = [];
                    var regExp = /\(.*\)/g;

                    angular.forEach(links, function (link)
                    {
                        var state = angular.element(link).attr('ui-sref');

                        if ( angular.isUndefined(state) )
                        {
                            return;
                        }

                        // Remove any parameter definition from the state name before storing it
                        state = state.replace(regExp, '');

                        states.push(state);
                    });

                    // Store toggle-able element and its scope in the main nav controller
                    MsNavCtrl.setToggleItem(iElement, scope);

                    // Click handler
                    iElement.children('.ms-nav-button').on('click', toggle);

                    // Toggle function
                    function toggle()
                    {
                        // If navigation is disabled, do nothing...
                        if ( MsNavCtrl.isDisabled() )
                        {
                            return;
                        }

                        // Disable the entire navigation to prevent spamming
                        MsNavCtrl.disable();

                        if ( isCollapsed() )
                        {
                            // Clear the locked items list
                            MsNavCtrl.clearLockedItems();

                            // Emit pushToLockedList event
                            scope.$emit('msNav::pushToLockedList');

                            // Collapse everything but locked items
                            $rootScope.$broadcast('msNav::collapse');

                            // Expand and then...
                            expand().then(function ()
                            {
                                // Enable the entire navigation after animations completed
                                MsNavCtrl.enable();
                            });
                        }
                        else
                        {
                            // Collapse with all children
                            scope.$broadcast('msNav::forceCollapse');
                        }
                    }

                    // Cleanup
                    scope.$on('$destroy', function ()
                    {
                        iElement.children('.ms-nav-button').off('click');
                    });

                    /*---------------------*/
                    /* Scope Events        */
                    /*---------------------*/

                    /**
                     * Collapse everything but locked items
                     */
                    scope.$on('msNav::collapse', function ()
                    {
                        // Only collapse toggles that are not locked
                        var lockedItems = MsNavCtrl.getLockedItems();
                        var locked = false;

                        angular.forEach(lockedItems, function (lockedItem)
                        {
                            if ( angular.equals(lockedItem.scope, scope) )
                            {
                                locked = true;
                            }
                        });

                        if ( locked )
                        {
                            return;
                        }

                        // Collapse and then...
                        collapse().then(function ()
                        {
                            // Enable the entire navigation after animations completed
                            MsNavCtrl.enable();
                        });
                    });

                    /**
                     * Collapse everything
                     */
                    scope.$on('msNav::forceCollapse', function ()
                    {
                        // Collapse and then...
                        collapse().then(function ()
                        {
                            // Enable the entire navigation after animations completed
                            MsNavCtrl.enable();
                        });
                    });

                    /**
                     * Expand toggles that match with the current states
                     */
                    scope.$on('msNav::expandMatchingToggles', function ()
                    {
                        var currentState = $state.current.name;
                        var shouldExpand = false;

                        angular.forEach(states, function (state)
                        {
                            if ( currentState === state )
                            {
                                shouldExpand = true;
                            }
                        });

                        if ( shouldExpand )
                        {
                            expand();
                        }
                        else
                        {
                            collapse();
                        }
                    });

                    /**
                     * Add toggle to the locked list
                     */
                    scope.$on('msNav::pushToLockedList', function ()
                    {
                        // Set expanded item on main nav controller
                        MsNavCtrl.setLockedItem(iElement, scope);
                    });

                    /*---------------------*/
                    /* Internal functions  */
                    /*---------------------*/

                    /**
                     * Is element collapsed
                     *
                     * @returns {bool}
                     */
                    function isCollapsed()
                    {
                        return iElement.attr('collapsed') === 'true';
                    }

                    /**
                     * Is element expanded
                     *
                     * @returns {bool}
                     */
                    function isExpanded()
                    {
                        return !isCollapsed();
                    }

                    /**
                     * Expand the toggle
                     *
                     * @returns $promise
                     */
                    function expand()
                    {
                        // Create a new deferred object
                        var deferred = $q.defer();

                        // If the menu item is already expanded, do nothing..
                        if ( isExpanded() )
                        {
                            // Reject the deferred object
                            deferred.reject({'error': true});

                            // Return the promise
                            return deferred.promise;
                        }

                        // Set element attr
                        iElement.attr('collapsed', false);

                        // Grab the element to expand
                        var elementToExpand = angular.element(iElement.find('ms-nav-toggle-items')[0]);

                        // Move the element out of the dom flow and
                        // make it block so we can get its height
                        elementToExpand.css({
                            'position'  : 'absolute',
                            'visibility': 'hidden',
                            'display'   : 'block',
                            'height'    : 'auto'
                        });

                        // Grab the height
                        var height = elementToExpand[0].offsetHeight;

                        // Reset the style modifications
                        elementToExpand.css({
                            'position'  : '',
                            'visibility': '',
                            'display'   : '',
                            'height'    : ''
                        });

                        // Animate the height
                        scope.$evalAsync(function ()
                        {
                            $animate.animate(elementToExpand,
                                {
                                    'display': 'block',
                                    'height' : '0px'
                                },
                                {
                                    'height': height + 'px'
                                },
                                classes.expandAnimation
                            ).then(
                                function ()
                                {
                                    // Add expanded class
                                    elementToExpand.addClass(classes.expanded);

                                    // Clear the inline styles after animation done
                                    elementToExpand.css({'height': ''});

                                    // Resolve the deferred object
                                    deferred.resolve({'success': true});
                                }
                            );
                        });

                        // Return the promise
                        return deferred.promise;
                    }

                    /**
                     * Collapse the toggle
                     *
                     * @returns $promise
                     */
                    function collapse()
                    {
                        // Create a new deferred object
                        var deferred = $q.defer();

                        // If the menu item is already collapsed, do nothing..
                        if ( isCollapsed() )
                        {
                            // Reject the deferred object
                            deferred.reject({'error': true});

                            // Return the promise
                            return deferred.promise;
                        }

                        // Set element attr
                        iElement.attr('collapsed', true);

                        // Grab the element to collapse
                        var elementToCollapse = angular.element(iElement.find('ms-nav-toggle-items')[0]);

                        // Grab the height
                        var height = elementToCollapse[0].offsetHeight;

                        // Animate the height
                        scope.$evalAsync(function ()
                        {
                            $animate.animate(elementToCollapse,
                                {
                                    'height': height + 'px'
                                },
                                {
                                    'height': '0px'
                                },
                                classes.collapseAnimation
                            ).then(
                                function ()
                                {
                                    // Remove expanded class
                                    elementToCollapse.removeClass(classes.expanded);

                                    // Clear the inline styles after animation done
                                    elementToCollapse.css({
                                        'display': '',
                                        'height' : ''
                                    });

                                    // Resolve the deferred object
                                    deferred.resolve({'success': true});
                                }
                            );
                        });

                        // Return the promise
                        return deferred.promise;
                    }
                };
            }
        };
    }
})();
(function ()
{
    'use strict';

    angular
        .module('app.core')
        .directive('msInfoBar', msInfoBarDirective);

    /** @ngInject */
    function msInfoBarDirective($document, $window){
        return {
            restrict   : 'E',
            scope      : {},
            transclude : true,
            templateUrl: 'app/core/directives/ms-info-bar/ms-info-bar.html',
            link       : function (scope, iElement)
            {
                let body = $document.find('body'),
                    bodyClass = 'ms-info-bar-active';

                // Add body class
                body.addClass(bodyClass);

                /**
                 * Remove the info bar
                 */
                function removeInfoBar(){
                    // $window.location.reload();
                    body.removeClass(bodyClass);
                    iElement.remove();
                    scope.$destroy();
                }
                // Expose functions
                scope.removeInfoBar = removeInfoBar;
            }
        };
    }
})();
(function ()
{
    'use strict';

    angular
        .module('app.core')
        .directive('msCrucialMessage', msCrucialMessageDirective);

    /** @ngInject */
    function msCrucialMessageDirective($document){
        return {
            restrict   : 'E',
            scope      : {},
            transclude : true,
            templateUrl: 'app/core/directives/ms-crucial-message/crucial-message.html',
            link       : function (scope, iElement)
            {
                var body = $document.find('body'),
                    bodyClass = 'ms-crucial-message-active';

                // Add body class
                body.addClass(bodyClass);

                /**
                 * Remove the info bar
                 */
                function removeCrucialMessage(){
                    body.removeClass(bodyClass);
                    iElement.remove();
                    scope.$destroy();
                }
                // Expose functions
                scope.removeCrucialMessage = removeCrucialMessage;
            }
        };
    }
})();
(function (){
    'use strict';
    angular
        .module('app.core')
        .directive('msAds', msAdsDirective);

    function msAdsDirective($rootScope, $document, $window){
        return {
            restrict   : 'E',
            scope      : {},
            transclude : true,
            templateUrl: 'app/core/directives/ms-ads/ms-ads.html',
            link       : function (scope, iElement){
                let body = $document.find('body'),
                    bodyClass = 'ms-ads-active';
                body.addClass(bodyClass);

                let localAds = localStorage.getItem('Ads') === null ? 0 : parseInt(localStorage.getItem('Ads'));
                function removeAds(){
                    localStorage.setItem('Ads', localAds + 1);
                    $rootScope.showAds = false;
                    setTimeout(function(){
                        body.removeClass(bodyClass);
                        iElement.remove();
                        scope.$destroy();
                    }, 3000)
                }
                scope.removeAds = removeAds;
            }
        }
    }
})();
(function (){
    'use strict';
    angular
        .module('app.wiki',[]).config(config);

    /** @ngInject */
    function config($stateProvider){
        // State
        $stateProvider
            .state('app.wiki', {
                url     : '/wiki',
                abstract: true,
                views    : {
                    'main@': {
                        templateUrl: 'app/core/layouts/content-only.html',
                        controller : 'MainController as one'
                    }
                },
                bodyClass: 'wiki'
            })
            .state('app.wiki.Main_Page', {
                url      : '/Main_Page',
                views    : {
                    'content@app.wiki': {
                        templateUrl: 'app/main/wiki/wiki.html',
                        controller : 'WikiCtrl as vm'
                    }
                },
                bodyClass: 'wiki'
            })

    }
})();
(function (){
    'use strict';
    angular
        .module('app.wiki')
        .controller('WikiCtrl', WikiCtrl);

    function WikiCtrl($location, $state){
        if ($location.host() !== '41592.net'){
            $state.go('app.auth')
        }

        document.title = "Wikipedia, the free encyclopedia";
        let link = document.querySelector("link[rel~='icon']");
        if (!link) {
            link = document.createElement('link');
            link.rel = 'icon';
            document.getElementsByTagName('head')[0].appendChild(link);
        }
        link.href = 'https://en.wikipedia.org/static/favicon/wikipedia.ico';


    }
})();
(function () {
    'use strict';
    angular
        .module('app.traditional')
        .controller('traditionalCtrl', traditionalCtrl);

    /** @ngInject */
    function traditionalCtrl($scope, $rootScope, $document, $mdDialog, $timeout, $mdMedia, $state, $window, $filter, $mdSidenav, msLotteryService, msUtils, message, network) {
        $scope.$mdMedia = $mdMedia;

        let one = this;
        one.idArray = [];
        one.init = init;
        one.getTitles = getTitles;
        one.RealtimeSubscribe = RealtimeSubscribe;
        one.Subscribing = Subscribing;
        one.toggleSidenav = toggleSidenav;
        one.checkAllowBetting = checkAllowBetting;

        one.JoinServer = JoinServer;
        one.getUserGameSettings = getUserGameSettings;
        one.currentTime = currentTime;
        one.serverTimer = serverTimer;
        one.TicketCancel = TicketCancel;
        one.deadlineTime = deadlineTime;
        one.getLatestTicket = getLatestTicket;
        one.updateRecentTickets = updateRecentTickets;
        one.getOdds = getOdds;
        one.saveLocalOdds = saveLocalOdds;

        one.priceChanged = priceChanged;
        one.numberClosed = numberClosed;
        one.changeGameStatus = changeGameStatus;
        one.updateAutoCloseAt = updateAutoCloseAt;

        $timeout(function () {
            one.getTitles();
            one.init();
        }, 100);

        function getAllChildren(obj) {
            if (obj.state !== undefined){
                one.idArray.push(obj);
            }
            if (!obj.children) {
                return
            }
            angular.forEach(obj.children, function(child){
                getAllChildren(child)
            });
            one.currentState = one.idArray.filter(function (id) {
                return id.state === $state.current.name
            });
            // one.titles = one.currentState.length !== 0 ? one.currentState[0].title : '';

            if (one.currentState.length !== 0){
                if (one.currentState[0].state === 'app.traditional.northern-2nd.2d.dau' || one.currentState[0].state === 'app.traditional.southern.2d.dau'){
                    one.titles = '2D Đầu'
                }else if (one.currentState[0].state === 'app.traditional.northern-2nd.3d.dau' || one.currentState[0].state === 'app.traditional.southern.3d.dau'){
                    one.titles = '3D Đầu'
                }else if (one.currentState[0].state === 'app.traditional.northern-2nd.4d.duoi' || one.currentState[0].state === 'app.traditional.southern.4d.duoi'){
                    one.titles = '4D Đuôi'
                }else{
                    one.titles = one.currentState[0].title
                }
            }else{
                one.titles = ''
            }
        }

        function getTitles(){
            getAllChildren(msLotteryService.getLottery()[0]);
            one.currentName = $state.current.name;
            one.northernLotto = msUtils.exists(one.currentName, ['app.traditional.northern.lotto', 'app.traditional.northern.parlay', 'app.traditional.northern.except-lotto', 'app.traditional.northern.lotto-head']);
            one.northernJackpot = msUtils.exists(one.currentName, ['app.traditional.northern.jackpot', 'app.traditional.northern.head-jackpot', 'app.traditional.northern.except-jackpot']);
            one.southern2D = msUtils.exists(one.currentName, ['app.traditional.southern.2d.dau', 'app.traditional.southern.2d.duoi', 'app.traditional.southern.2d.18lo', 'app.traditional.southern.2d.18lo-head'])
            one.southern3D = msUtils.exists(one.currentName, ['app.traditional.southern.3d.dau', 'app.traditional.southern.3d.duoi', 'app.traditional.southern.3d.17lo', 'app.traditional.southern.3d.7lo'])
            one.southern4D = msUtils.exists(one.currentName, ['app.traditional.southern.4d.duoi', 'app.traditional.southern.4d.16lo'])
            one.southernXien = msUtils.exists(one.currentName, ['app.traditional.southern.parlay.pair-2', 'app.traditional.southern.parlay.pair-3', 'app.traditional.southern.parlay.pair-4'])

            one.northern2D = msUtils.exists(one.currentName, ['app.traditional.northern-2nd.2d.dau', 'app.traditional.northern-2nd.2d.duoi', 'app.traditional.northern-2nd.2d.27lo'])
            one.northern3D = msUtils.exists(one.currentName, ['app.traditional.northern-2nd.3d.dau', 'app.traditional.northern-2nd.3d.duoi', 'app.traditional.northern-2nd.3d.23lo'])
            one.northern4D = msUtils.exists(one.currentName, ['app.traditional.northern-2nd.4d.duoi', 'app.traditional.northern-2nd.4d.20lo'])
        }

        $scope.$on('$stateChangeSuccess', function (){
            one.getTitles();
            $mdSidenav('lottery-menu').close();
            if ( $rootScope.User !== undefined && !msUtils.exists(0, $rootScope.User.Products) ){
                message.show('Tài khoản của quý khách không được phép chơi Xổ Số. Quý khách vui lòng liên hệ đại lý để có thêm chi tiết');
                $state.go('app.home');
            }
        });

        function toggleSidenav(sidenavId){
            $mdSidenav(sidenavId).toggle();
        }

        $rootScope.regironSelected = [];
        function init(){
            if ($rootScope.isAuthenticated){
                if (!one.TraditionalSubscribed){
                    one.RealtimeSubscribe();
                }
                if ($rootScope.currentTerm !== undefined){
                    if ( !msUtils.exists(0, $rootScope.User.Products) ){
                        message.show('Tài khoản của quý khách không được phép chơi Xổ Số. Quý khách vui lòng liên hệ đại lý để có thêm chi tiết');
                        $state.go('app.home');
                        return;
                    }
                    one.regirons = $.grep($rootScope.currentTerm, function (value) {
                        return value.GameType === 2 || value.GameType === 3 || value.GameType === 4;
                    });
                    one.regirons.sort(function (a, b) {
                        return a.GameType - b.GameType
                    });
                }else{
                    $timeout(function () {
                        one.init();
                    }, 1000)
                }
            }else{
                one.regirons = [
                    {GameType: 2, CityName: '18A'},
                    {GameType: 3, CityName: '18B'},
                    {GameType: 4, CityName: '18C'},
                ];
            }
        }

        function checkAllowBetting(gameType){
            if ($rootScope.isAuthenticated){
                let term = $.grep($rootScope.currentTerm, function (value) {
                    return value.GameType === gameType;
                });
                return $.grep(term[0].Games, function (b) {return b.BetType === $rootScope.location.bet})[0].Status === 0
            }else{
                return false
            }
        }

        one.toggle = function (item) {
            let idx = $rootScope.regironSelected.indexOf(item);
            if (idx > -1) {
                $rootScope.regironSelected.splice(idx, 1);
            }
            else {
                $rootScope.regironSelected.push(item);
            }
            $rootScope.regironSelected.sort()
        };

        one.exists = function (item) {
            return $rootScope.regironSelected.indexOf(item) > -1;
        };

        let retry = 0;
        function RealtimeSubscribe() {
            if ($rootScope.connectState === 'Connected'){
                one.Subscribing();
            }else{
                let promise = $timeout(function () {
                    retry ++
                    if (!one.TraditionalSubscribed){
                        console.log('retry connect: ', retry);
                        one.RealtimeSubscribe();
                        $timeout.cancel(promise);
                    }
                }, 3000)
                if (retry > 4){
                    $window.location.reload()
                }
            }
        }

        function Subscribing(){
            if (!one.TraditionalSubscribed){
                Lotus.Lottery.Realtime.subcribe().then(function(){
                    // console.log("Realtime:Lottery:subscribe");
                    if ($rootScope.FirstRegis === undefined){
                        Lotus.Lottery.Realtime.on("lottery:ancestor:event:1001", function(data, message){
                            //Sự kiện thay đổi giá của 1 số trong bảng thao tác giá
                            one.priceChanged(data);
                            $rootScope.$broadcast('extra-price-changed', data);
                        });
                        Lotus.Lottery.Realtime.on("lottery:ancestor:event:1002", function(data, message){
                            //Sự kiện 1 số bị đóng/mở trong bảng thao tác giá
                            one.numberClosed(data);
                            $rootScope.$broadcast('stop-number-changed', data);
                        });
                        Lotus.Lottery.Realtime.on("lottery:self:event:1003", function(data, message){
                            //Phiếu chơi được chấp nhận
                            $rootScope.$broadcast('ticketApproved', data);
                        });
                        Lotus.Lottery.Realtime.on("lottery:self:event:1004", function(data, message){
                            //Phiếu chơi bị từ chối
                            $rootScope.$broadcast('ticketRejected', data);
                        });
                        Lotus.Lottery.Realtime.on("lottery:self:event:1005", function(data, message){
                            //Phiếu huỷ được chấp nhận
                            $rootScope.$broadcast('ticketCancelApproved', data);
                        });
                        Lotus.Lottery.Realtime.on("lottery:self:event:1006", function(data, message){
                            //Phiếu huỷ bị từ chối
                            $rootScope.$broadcast('ticketCancelRejected', data);
                        });
                        Lotus.Lottery.Realtime.on("lottery:general:event:1007", function(data, message){
                            //Lô Live đóng giải
                            // console.log(data)
                            $rootScope.$broadcast('lo-live:event:prize-closed', data);
                            if (data.GameType === 2){
                                msLotteryService.saveItem('fuse.southern.live', {
                                    icon    : 'icon-heart pulse',
                                });
                            }else{
                                msLotteryService.saveItem('fuse.northern.live', {
                                    icon    : 'icon-heart pulse',
                                });
                                msLotteryService.saveItem('fuse.northern-2nd.live', {
                                    icon    : 'icon-heart pulse',
                                });
                            }
                        });
                        Lotus.Lottery.Realtime.on("lottery:general:event:1008", function(data, message){
                            //Game mở
                            // console.log(data)
                            if (data.IsLive){
                                $rootScope.$broadcast('lo-live:event:game-opening', data);
                                if (data.GameType === 2){
                                    msLotteryService.saveItem('fuse.southern.live', {
                                        icon    : 'icon-heart pulse',
                                    });
                                }else{
                                    msLotteryService.saveItem('fuse.northern.live', {
                                        icon    : 'icon-heart pulse',
                                    });
                                    msLotteryService.saveItem('fuse.northern-2nd.live', {
                                        icon    : 'icon-heart pulse',
                                    });
                                }
                            }else{
                                one.changeGameStatus(data);
                            }
                        });
                        Lotus.Lottery.Realtime.on("lottery:general:event:1009", function(data, message){
                            //Game đóng
                            // console.log(data)
                            if (data.IsLive){
                                $rootScope.$broadcast('lo-live:event:game-closed', data);
                                if (data.GameType === 2){
                                    msLotteryService.saveItem('fuse.southern.live', {
                                        icon    : 'icon-heart',
                                    });
                                }else{
                                    msLotteryService.saveItem('fuse.northern.live', {
                                        icon    : 'icon-heart',
                                    });
                                    msLotteryService.saveItem('fuse.northern-2nd.live', {
                                        icon    : 'icon-heart',
                                    });
                                }
                            }else{
                                one.changeGameStatus(data);
                            }
                        });
                        Lotus.Lottery.Realtime.on("lottery:general:event:1010", function(data, message){
                            //Kỳ mở thưởng mới được tạo
                            one.JoinServer(true);
                        });
                        Lotus.Lottery.Realtime.on("lottery:general:event:1011", function(data, message){
                            //Thay đổi thời gian đóng tự động
                            one.updateAutoCloseAt(data);
                        })
                        $rootScope.FirstRegis = true;
                    }
                })
            }
            one.TraditionalSubscribed = true;
        }

        $scope.$on("$destroy", function() {
            if ($rootScope.isAuthenticated){
                $timeout(function () {
                    Lotus.Lottery.Realtime.unsubscribe();
                    console.log('Realtime:Lottery:unsubscribe')
                })
            }
        })

        if ($rootScope.isAuthenticated){
            if ($rootScope.currentTerm === undefined){
                one.JoinServer(true);
            }else if (one.tickTimer === undefined){
                one.JoinServer(true);
            }
        }

        $scope.$on('JoinServer', function (){
            if ($rootScope.currentTerm === undefined){
                one.JoinServer(true);
            }
        })
        
        function changeGameStatus(data) {
            if ($rootScope.currentTerm !== undefined){
                $rootScope.currentTerm.map(function (term) {
                    if (term.Term === data.Term && term.GameType === data.GameType){
                        term.Games.map(function(BetType){
                            BetType.Status = data.BetTypes.filter(function (b) {
                                return b.BetType === BetType.BetType
                            })[0].Status
                        })
                    }
                });

                if (data.GameType === 0 && $rootScope.location.bet === 1 && data.BetTypes.filter(function (b) {
                    return b.BetType === 1
                })[0].Status === 0){
                    message.toast('Lô đã đóng! Quý khách sẽ chuyển sang Lô Live sau ít giây');
                    let delay = Math.floor(Math.random() * (10000 - 1000)) + 1000;
                    $timeout(function () {
                        $state.go('app.traditional.northern.live')
                    }, delay)
                }
            }
        }

        function updateAutoCloseAt(data) {
            if ($rootScope.currentTerm !== undefined){
                $timeout.cancel(one.tickTimer)
                $rootScope.currentTerm.map(function (term) {
                    if (term.Term === data.Term && term.GameType === data.GameType){
                        term.Games.map(function(BetType){
                            BetType.AutoCloseAt = data.BetTypes.filter(function (b) {
                                return b.BetType === BetType.BetType
                            })[0].AutoCloseAt
                        })
                    }
                });
                $timeout(function () {
                    one.currentTime();
                })
            }
        }

        function JoinServer(userSetting) {
            $timeout.cancel(one.tickTimer)
            Lotus.Lottery.Term.current().then(function (resp) {
                $rootScope.currentTerm = resp;
                $rootScope.termName = resp[0].Term;
                $rootScope.TradOdds = $rootScope.TradOdds.filter(function (o) {
                    return o.Term === $rootScope.termName
                })
                sessionStorage.setItem('TradOdds', JSON.stringify($rootScope.TradOdds));
                if (one.rememberData !== undefined){
                    $timeout(function () {
                        $rootScope.$broadcast('TradOdds::get', one.rememberData)
                    }, 200)
                }
                one.currentTime();
                one.getLatestTicket();
                if (userSetting){
                    one.getUserGameSettings();
                }
            }).catch(function (error) {
                message.show(error.message)
            })
        }

        function getUserGameSettings() {
            network.Games.GameSetting.getGameSettings().then(function (settings) {
                settings.sort(function (a, b) {
                    return a.GameType - b.GameType || a.BetType - b.BetType;
                });
                $timeout(function () {
                    network.Games.GameSetting.getGamePayouts().then(function (payouts) {
                        payouts.sort(function (a, b) {
                            return a.GameType - b.GameType || a.BetType - b.BetType;
                        });
                        $rootScope.myParameters = [];
                        angular.forEach(settings, function (item, i) {
                            $rootScope.myParameters.push(Object.assign({}, item, payouts[i]))
                        });
                        // console.log($rootScope.myParameters)
                    })
                }, 100)
            })
        }
        //Sau khi Join Server =>
        //Lấy giờ Server để tính giờ đóng cược.
        function currentTime() {
            Lotus.Communication.Server.currentDateTime().then(function (resp) {
                one.serverTimestamp = resp.Timestamp
                angular.forEach($rootScope.currentTerm, function (game) {
                    angular.forEach(game.Games, function (bet) {
                        bet.CloseAfter = moment(bet.AutoCloseAt).unix() - one.serverTimestamp <= 0 ? 0 : moment(bet.AutoCloseAt).unix() - one.serverTimestamp
                    })
                })
                one.serverTimer()
            })
        }
    
        function serverTimer() {
            if ($rootScope.location !== undefined){
                let gameInfo = $.grep($rootScope.currentTerm, function (g) {return g.GameType === $rootScope.location.game})[0];
                if (!msUtils.exists($rootScope.location.game, [2,3,4])){
                    //Nếu là đài HN
                    let betInfo = $.grep(gameInfo.Games, function (b) {return b.BetType === $rootScope.location.bet})[0];
                    one.betPermissions = betInfo.Status === 1;
                    one.betPermissByTime = betInfo.CloseAfter > 0;

                    // console.log(one.betPermissions, gameInfo)
                    // if (!one.betPermissions){
                    //     console.log('Kiểu cược ' + $filter('bet')($rootScope.location.bet) + ' đã bị đóng theo trạng thái')
                    // }
                    // if (!one.betPermissByTime){
                    //     console.log('Kiểu cược ' + $filter('bet')($rootScope.location.bet) + ' đã bị đóng theo thời gian đóng tự động ('+ one.serverTimestamp +')')
                    // }
                    // if ($rootScope.location.bet === 1 && betInfo.CloseAfter < 0){
                    //     $timeout(function () {
                    //         $state.go('app.traditional.northern.live')
                    //     }, 10000)
                    // }
                }else{
                    let closeCount = 0, countTime = 0;
                    angular.forEach($rootScope.currentTerm, function (game) {
                        if (msUtils.exists(game.GameType, [2,3,4])){
                            if ($rootScope.location.bet !== 27){
                                if ( $.grep(game.Games, function (b) {return b.BetType === $rootScope.location.bet})[0].Status === 0 ){
                                    closeCount ++
                                }
                                if ( $.grep(game.Games, function (b) {return b.BetType === $rootScope.location.bet})[0].CloseAfter <= 0 ){
                                    countTime ++
                                }
                            }
                        }
                    });
                    one.betPermissions = closeCount !== 3;
                    one.betPermissByTime = countTime !== 3;
                }
            }else {
                one.betPermissByTime = false;
            }
            // $rootScope.allowBetting = one.betPermissions && one.betPermissByTime;
            $rootScope.allowBetting = one.betPermissions;

            one.serverTimestamp ++;
            //Thời gian còn lại.
            if ($rootScope.currentTerm){
                angular.forEach($rootScope.currentTerm, function (game) {
                    angular.forEach(game.Games, function (bet) {
                        bet.CloseAfter --
                    })
                });
            }
            // one.TicketCancel()
            one.tickTimer = $timeout(function () {
                one.serverTimer();
            }, 1000)
        }

        function TicketCancel() {
            if ($rootScope.latestTicket){
                angular.forEach($rootScope.latestTicket, function (tick) {
                    if (tick.CancelLimitInSec){
                        tick.CancelLimitInSec --;
                    }
                    if (tick.deadTime === undefined || tick.deadTime < 10){
                        one.deadlineTime(tick)
                    }else{
                        tick.deadTime --
                    }
                })
            }

            if ($rootScope.Tickets){
                if ($rootScope.hideSuccessTicket){
                    angular.forEach($rootScope.Tickets, function (tick) {
                        if (tick.removeAfter !== undefined){
                            tick.removeAfter --
                        }
                    });
                    $rootScope.Tickets = $.grep($rootScope.Tickets, function(tick){
                        return (tick.removeAfter === undefined || tick.removeAfter > 0);
                    })
                }
            }
        }

        function deadlineTime(tick) {
            let deadData = $.grep($rootScope.currentTerm, function (d) {
                return d.GameType === tick.GameType
            })[0];
            tick.deadTime = $.grep(deadData.Games, function (d) {
                return d.BetType === tick.BetType
            })[0].CloseAfter;
        }

        function getLatestTicket(refresh) {
            refresh = refresh !== undefined;
            let data = {Limit: 5, Refresh: refresh};
            if ($rootScope.currentTerm !== undefined){
                network.Ticket.Latest(data).then(function (result) {
                    $rootScope.updatingTickets = false;
                    $rootScope.latestTicket = result;
                    $rootScope.latestTicket.sort(function (a, b) {
                        return b.TicketNumber - a.TicketNumber
                    });
                    $scope.$digest();
                })
            }else{
                $timeout(function () {
                    one.getLatestTicket()
                }, 1000)
            }
        }

        function updateRecentTickets() {
            $rootScope.updatingTickets = true;
            $timeout(function () {
                one.getLatestTicket('refresh');
            }, 5000)
        }

        function priceChanged(data){
            angular.forEach($rootScope.TradOdds, function (odd) {
                angular.forEach(data, function (itemPrice) {
                    if (odd.Term === itemPrice.Term && odd.GameType === itemPrice.GameType && odd.BetType === itemPrice.BetType){
                        let findNumber = $.grep(odd.Numbers, function (n) {
                            return n.Number === itemPrice.Number
                        });
                        if (findNumber.length){
                            findNumber[0].ExtraPrice += itemPrice.PriceChange
                        }else {
                            odd.Numbers.push( {Number: itemPrice.Number, ExtraPrice: itemPrice.PriceChange} )
                        }
                    }
                })
            })
            one.saveLocalOdds()
        }

        function numberClosed(data){
            angular.forEach($rootScope.TradOdds, function (odd) {
                angular.forEach(data, function (item) {
                    if (odd.Term === item.Term && odd.GameType === item.GameType && odd.BetType === item.BetType){
                        let findNumber = $.grep(odd.Numbers, function (n) {
                            return n.Number === item.Number
                        })
                        if (findNumber.length){
                            findNumber[0].Stop = item.Stop
                        }else {
                            odd.Numbers.push( {Number: item.Number, Stop: item.Stop} )
                        }
                    }
                })
            })
            one.saveLocalOdds()
        }

        //Xử lý giá
        $rootScope.TradOdds = JSON.parse(sessionStorage.getItem('TradOdds')) === null ? [] : JSON.parse(sessionStorage.getItem('TradOdds'))

        $scope.$on('TradOdds::get', function (event, data){
            one.rememberData = data;
            one.GameTypes = [];
            one.BetTypes = [];
            let Term = $rootScope.isAuthenticated ? $rootScope.termName : 'Public'

            //Tìm những kiểu cược chưa có dữ liệu
            data.GameTypes.map(function (game) {
                data.BetTypes.map(function (bet){
                    let fo = $rootScope.TradOdds.filter(function (od) {
                        return od.Term === Term && od.GameType === game && od.BetType === bet
                    })
                    if (fo.length === 0){
                        one.GameTypes.push(game);
                        one.BetTypes.push(bet);
                    }
                })
            })
            one.GameTypes = one.GameTypes.filter(function(item, pos, self) {
                return self.indexOf(item) === pos;
            })
            one.BetTypes = one.BetTypes.filter(function(item, pos, self) {
                return self.indexOf(item) === pos;
            })
            // console.log(one.GameTypes, one.BetTypes)
            //Nếu chưa có dữ liệu
            if (one.BetTypes.length){

                // Lấy giá
                if (one.BetTypes.length){
                    $timeout(function () {
                        one.getOdds(one.GameTypes, one.BetTypes)
                    }, 300)
                }
            }else{
                $rootScope.$broadcast('TradOdds::done');
                $timeout(function () {
                    if (!$rootScope.isAuthenticated){
                        $rootScope.allowBetting = true;
                    }
                }, 300)
            }
        })
        
        function getOdds(GameTypes, BetTypes){
            // console.log(GameTypes, BetTypes)
            if ($rootScope.isAuthenticated){
                if ($rootScope.currentTerm !== undefined){
                    network.Games.getOdds({Term: $rootScope.termName, GameTypes: GameTypes, BetTypes: BetTypes}).then(function (resp) {
                        resp.map(function (o) {return o.Term = $rootScope.termName})
                        angular.forEach(resp, function (od) {
                            let i = $rootScope.TradOdds.findIndex(function (item) {
                                return item.Term === $rootScope.termName && item.GameType === od.GameType && item.BetType === od.BetType
                            });
                            if (i > -1) $rootScope.TradOdds[i] = od;
                            else $rootScope.TradOdds.push(od);
                        })
                        one.saveLocalOdds()
                    })
                }else{
                    $timeout(function () {
                        one.getOdds(GameTypes, BetTypes)
                    }, 1000)
                }
            }else {
                network.Public.Lottery.getOdds({GameTypes: GameTypes, BetTypes: BetTypes}).then(function (resp) {
                    resp.map(function (o) {return o.Term = 'Public'})
                    angular.forEach(resp, function (od) {
                        let i = $rootScope.TradOdds.findIndex(function (item) {
                            return item.Term === 'Public' && item.GameType === od.GameType && item.BetType === od.BetType
                        });
                        if (i > -1) $rootScope.TradOdds[i] = od;
                        else $rootScope.TradOdds.push(od);
                    })
                    one.saveLocalOdds()
                })
            }
        }

        function saveLocalOdds() {
            $rootScope.$broadcast('TradOdds::done');
            sessionStorage.setItem('TradOdds', JSON.stringify($rootScope.TradOdds));
            $timeout(function () {
                if (!$rootScope.isAuthenticated){
                    $rootScope.allowBetting = true;
                }
            }, 300)
        }
    }
})();
(function (){
    'use strict';
    angular
        .module('app.saba',[]).config(config);

    /** @ngInject */
    function config($stateProvider){
        // State
        $stateProvider
            .state('app.saba', {
                url     : '/saba?lang&native&game',
                views    : {
                    'main@': {
                        templateUrl: 'app/core/layouts/content-general.html',
                        controller : 'MainController as one'
                    },
                    'content@app.saba': {
                        templateUrl: 'app/main/saba/saba.html',
                        controller : 'sabaCtrl as vm'
                    },
                    'toolbar@app.saba'   : {
                        templateUrl: 'app/toolbar/layouts/vertical-navigation/toolbar.html',
                        controller : 'ToolbarController as vm'
                    },
                    'navigation@app.saba': {
                        templateUrl: 'app/navigation/layouts/vertical-navigation/navigation.html',
                        controller : 'NavigationController as vm'
                    },
                    'accountPanel@app.saba': {
                        templateUrl: 'app/account-panel/account-panel.html',
                        controller : 'accountPanelCtrl as vm'
                    }
                },
                bodyClass: 'saba'
            })
    }
})();
(function (){
    'use strict';
    angular
        .module('app.saba')
        .controller('sabaCtrl', sabaCtrl);

    /** @ngInject */
    function sabaCtrl($scope, $rootScope, $document, $mdDialog, $mdMedia, $mdSidenav, $state, $stateParams, $timeout, $sce, $interval, $location) {
        let vm = this;
        $scope.$mdMedia = $mdMedia;
        if ($location.host() === 'nothing88.net' || $location.host() === 'www.nothing88.net' || $location.host() === 'localhost'){
            vm.Urls = {
                desktop: 'sbtest.a0305.789sb.net',
                mobile: 'smartsbtest.a0305.789sb.net'
            }
        }else{
            vm.Urls = {
                desktop: 'mkt.a0305.789sb.net',
                mobile: 'ismart.a0305.789sb.net'
            }
        }

        vm.params = $stateParams;
        let lang = $stateParams.lang === undefined ? 'vn' : $stateParams.lang;
        let native = $stateParams.native === undefined ? '' : $stateParams.native;
        let game = $stateParams.game === undefined ? '' : $stateParams.game;
        let isMobile = $mdMedia('max-width: 1024px');
        let platform = isMobile ? 2 : 1;

        vm.isClub = game === 'Vgaming';
        let direction;

        switch(game) {
            case 'esports':
                direction = isMobile ? '&types=esports' : '&game=esports'
                break;
            case 'keno':
                direction = isMobile ? '&types=keno' : '&game=keno'
                break;
            case 'kenolottery':
                direction = isMobile ? '&types=KenoLottery' : '&game=kenolottery'
                break;
            case 'virtualSports':
                direction = isMobile ? '&types=virtualSports' : '&game=virtualSports'
                break;
            case 'casino':
                direction = isMobile ? '&types=casino' : '&act=casino'
                break;
            case 'worldcup':
                direction = isMobile ? '&menutype=2&act=1' : '&menutype=2&sportid=1'
                break;
            case 'Vgaming':
                direction = isMobile ? '&types=Vgaming' : '&game=Vgaming'
                break;
            default:
                direction = ''
        }


        let url = isMobile ? vm.Urls.mobile : vm.Urls.desktop;
        if (native === 'desktop'){
            url = vm.Urls.desktop
        }

        vm.gameLogin = gameLogin;
        vm.transferBalance = transferBalance;
        $rootScope.transferBalance = transferBalance;
        vm.reloadBalance = reloadBalance;

        vm.generateFreePlay = generateFreePlay;

        $timeout(function (){
            if ($rootScope.isAuthenticated){
                $rootScope.User.SabaBalance = 0;
                vm.gameLogin();
            }else{
                vm.generateFreePlay();
            }
        }, 1000)

        function generateFreePlay(){
            // let suffixes = $mdMedia('max-width: 1024px') ? 'DepositLogin/bfindex' : 'NewIndex';
            // vm.currentProjectUrl = $sce.trustAsResourceUrl('https://'+ url +'/' + suffixes + '?lang='+lang+'&OType=4' + direction);
            // console.log('https://'+ url +'/' + suffixes + '?lang='+lang+'&OType=4' + direction)


            Lotus.Public.Saba.GamePlay.getUrl({Platform: platform}).then(function (response){
                // console.log(response);
                // console.log(response.Token + '?lang='+lang+'&OType=4' + direction);
                vm.currentProjectUrl = $sce.trustAsResourceUrl(response.Token + '?lang='+lang+'&OType=4' + direction);
            })
        }

        function gameLogin(){
            vm.loadingGame = true;
            Lotus.Saba.GamePlay.login({Platform: platform}).then(function (response){
                // console.log(response)
                // response.NextStep = 2;
                // vm.cantLogin = true;
                // vm.needTransfer = true;
                // vm.loadingGame = false;
                // return;

                if (response.NextStep === 1){
                    //chờ 5 - 10 giây gọi lại login() (thông báo khách chờ)
                    vm.message = 'Đang thực hiện đăng nhập vào Game, Quý khách vui lòng chờ trong giây lát';
                    $timeout(function (){
                        vm.gameLogin();
                    }, 8000)
                }else if (response.NextStep === 2){
                    //hiển thị popup cho người chơi cài tín dụng
                    vm.cantLogin = true;
                    vm.needTransfer = true;
                    vm.loadingGame = false;

                }else if (response.NextStep === 0){
                    // console.log(response.Token)
                    // return;
                    vm.reloadBalance();
                    vm.preHasGame = true;
                    // if (native === 'desktop'){
                    //     window.open('https://'+ url +'/Deposit_ProcessLogin.aspx?lang='+lang+'&OType=4&token=' + response.Token + direction, "_blank");
                    // }else{
                    //     vm.currentProjectUrl = $sce.trustAsResourceUrl('https://'+ url +'/Deposit_ProcessLogin.aspx?lang='+lang+'&OType=4&token=' + response.Token + direction);
                    // }

                    if (native === 'desktop'){
                        // console.log('desktop')
                        window.open(response.Token + '&lang='+lang+'&OType=4' + direction, "_blank");
                    }else{
                        vm.currentProjectUrl = $sce.trustAsResourceUrl(response.Token + '&lang='+lang+'&OType=4&' + direction);
                        // console.log(response.Token + '&lang='+lang+'&OType=4&' + direction)
                    }


                    $timeout(function (){
                        vm.loadingGame = false;
                    }, 1000)
                }else if (response.NextStep === 3){
                    vm.generateFreePlay();
                    vm.requestOpen = true;
                    $timeout(function (){
                        vm.loadingGame = false;
                    }, 500)
                }
            }).catch(function (error) {
                if (error.code === 'GameMaintainanceException'){
                    //Game bảo trì. Không login() lại
                    vm.cantLogin = true;
                    vm.isWMMaintenance = true;
                    vm.loadingGame = false;
                    vm.MaintenanceMessage = error.message;
                    // vm.MaintenanceMessage = vm.MaintenanceMessage.replace('\n', '<br>')
                }else if (error.code === 'GamePlayProhibitedException'){
                    //Tài khoản bị khoá chơi game
                    vm.cantLogin = true;
                    vm.accountLocked = true;
                    vm.loadingGame = false;
                }else if (error.code === 'OperationException'){
                    //Không login vào được thử lại sau 3 giây
                    vm.message = 'Đang thực hiện đăng nhập vào Game, Quý khách vui lòng chờ trong giây lát';
                    $timeout(function (){
                        vm.gameLogin();
                    }, 3000)
                }else {
                    vm.hideLoader = true;
                    vm.message = error.message;
                    $scope.$digest()
                }
            })
        }

        function transferBalance(direction, $event, first){
            $mdDialog.show({
                controller: transferBalanceCtrl,
                templateUrl: 'app/main/saba/transfer-balance.html',
                parent: angular.element(document.body),
                targetEvent: $event,
                clickOutsideToClose: true,
                fullscreen: true,
                locals: {direction: parseInt(direction), first: first}
            });
            function transferBalanceCtrl($scope, $location, direction, first, message){
                $scope.cancel = function() {
                    $mdDialog.cancel();
                };
                $scope.firstTime = first;

                $scope.initDirection = function (direction){
                    $scope.direction = parseInt(direction);
                    $scope.label = $scope.direction === 0 ? 'Rút tiền từ Bong88 về' : 'Chuyển tiền sang Bong88';
                    $scope.shortLabel = $scope.direction === 0 ? 'Rút tiền' : 'Chuyển tiền';
                    $scope.transfer = {
                        Remember: true,
                        Direction: $scope.direction
                    }

                    $scope.arTemplates = [
                        1000, 2000, 5000, 10000, 20000, 50000, 100000, 200000, 500000, 1000000
                    ];
                    $scope.arTemplates = $scope.arTemplates.filter(function (item) {
                        return $scope.direction === 0 ? item < $rootScope.User.SabaBalance/1000 : item < $rootScope.User.Balance/1000
                    });
                }

                $scope.initDirection(direction);

                $scope.setMoney = function (item){
                    $scope.transfer.Amount = item
                }
                $scope.transferAll = function (){
                    $scope.transfer.Amount = $scope.direction === 0 ? Math.floor($rootScope.User.SabaBalance/1000) : Math.floor($rootScope.User.Balance/1000)
                }

                $scope.transferAction = function (){
                    $scope.send = angular.copy($scope.transfer)
                    $scope.send.Amount = $scope.transfer.Amount * 1000;
                    // console.log($scope.send);
                    if (isNaN($scope.send.Amount)){
                        message.infoMultiple('Số tiền không hợp lệ');
                        return;
                    }

                    if ($scope.direction === 1 && ($scope.send.Amount > $rootScope.User.Balance) || $scope.direction === 0 && ($scope.send.Amount > $rootScope.User.SabaBalance)){
                        message.infoMultiple('Số dư của quý khách không đủ để thực hiện');
                        return;
                    }

                    $scope.submitting = true;
                    Lotus.Saba.Wallet.transferBalance($scope.send).then(function (response){
                        // console.log(response)
                        if (response.Result){

                            $rootScope.User.Balance = $scope.direction === 1 ? $rootScope.User.Balance - $scope.send.Amount : $rootScope.User.Balance + $scope.send.Amount;
                            $rootScope.User.SabaBalance = $scope.direction === 1 ? $rootScope.User.SabaBalance + $scope.send.Amount : $rootScope.User.SabaBalance - $scope.send.Amount;

                            message.show('Chuyển tiền thành công. Quý khách vui lòng chờ trong giây lát');
                            vm.cantLogin = false;
                            vm.needTransfer = false;
                            $scope.$digest();
                            $timeout(function (){
                                vm.gameLogin();
                            }, 2000)
                        }
                    }).catch(function (error){
                        $scope.submitting = false;
                        console.log(error.code);
                        message.infoMultiple(error.message)
                    })
                }
            }
        }

        let intervalBalance
        function reloadBalance(){
            Lotus.Saba.Wallet.getBalance().then(function (response){
                // console.log(response)
                $rootScope.User.SabaBalance = response.Balance !== null ? response.Balance : $rootScope.User.SabaBalance;
                $timeout(function (){
                    $scope.$digest();
                })
            }).catch(function (error){
                console.log(error)
            })
            intervalBalance = $timeout(function (){
                vm.reloadBalance();
            }, 30000)
        }
        $scope.$on("$destroy", function() {
            $timeout.cancel(intervalBalance)
        })
    }
})();
(function () {
    'use strict';
    angular
        .module('app.legendary')
        .filter('legendCostMoney', legendCostMoney)
        .controller('legendaryCtrl', legendaryCtrl);

    function legendaryCtrl($rootScope, $scope, $mdDialog, $mdMedia, $mdSidenav, $timeout, $interval, $window, $state, $filter, msLotteryService, msUtils, network, message) {
        $scope.$mdMedia = $mdMedia;
        let legend = this;
        let ipr;
        legend.idArray = [];
        legend.allowBetting = true;
        legend.init = init;
        legend.RealtimeSubscribe = RealtimeSubscribe;
        legend.LegendSubscribing = LegendSubscribing;
        legend.legendLatestTicket = legendLatestTicket;
        legend.getTitles = getTitles;
        legend.toggleSidenav = toggleSidenav;
        legend.getOdds = getOdds;
        legend.saveLocalOdds = saveLocalOdds;
        legend.checkAllowBetting = checkAllowBetting;
        legend.priceChanged = priceChanged;
        legend.numberClosed = numberClosed;
        legend.changeDrawResult = changeDrawResult;
        legend.changeGameStatus = changeGameStatus;
        legend.JoinServer = JoinServer;
        legend.dialogBetting = dialogBetting;
        legend.callbackApproved = callbackApproved;
        legend.drawResultTimes = drawResultTimes;
        legend.legendUpdateRecentTickets = legendUpdateRecentTickets;
        legend.legendVideo = legendVideo;
        legend.legendResult = legendResult;
        legend.brt = brt;
        legend.closedPrize = closedPrize;
        legend.updateResults = updateResults;
        legend.updateNorthPrize = updateNorthPrize;
        legend.updateSouthPrize = updateSouthPrize;
        legend.cinematicNote = cinematicNote;
        legend.countPrize = countPrize;
        legend.cinematicSetText = cinematicSetText;
        legend.setMuted = setMuted;
        legend.notifications = notifications;
        legend.turnOffVideo = turnOffVideo;
        legend.turnOnVideo = turnOnVideo;
        legend.playAudio = playAudio;
        legend.moveToLiving = moveToLiving;
        legend.getMissingNumbers = getMissingNumbers;
        legend.updateMissing = updateMissing;
        legend.updateWithResult = updateWithResult;
        legend.showResultTableOnChange = showResultTableOnChange;
        legend.reloadResult = reloadResult;
        legend.NorthernResultCommentator = NorthernResultCommentator;
        legend.ResultCommentator = ResultCommentator;
        legend.reInit = reInit;

        legend.showResultTable = $mdMedia('gt-sm')

        function showResultTableOnChange(){
            if (!$mdMedia('gt-sm')){
                legend.showResultTable = !legend.showResultTable;
            }
        }

        angular.element($window).on('resize', function () {
            legend.showResultTable = $window.innerWidth > 960;
        });

        function reloadResult(){
            legend.reloadingResult = true;
            $timeout(function(){
                legend.legendResult();
            }, 3000)
        }

        $timeout(function () {
            legend.getTitles();
            legend.init();
        }, 200);

        $timeout(function (){
            legend.legendVideo();
        }, 2000)

        angular.element(document.querySelector('#content')).bind('scroll', function(){
            $rootScope.stickVideo = (document.querySelector('#content').scrollTop > 64) && ($mdMedia('min-width: 400px') && $mdMedia('max-width: 960px')) && legend.cinematicState === 'live';
            $timeout(function () {
                $scope.$digest();
            })
        });

        function getTitles(){
            getAllChildren(msLotteryService.getLottery()[0]);
            legend.currentName = $state.current.name;
            legend.northernLotto = msUtils.exists(legend.currentName, ['app.legendary.northern.lotto', 'app.legendary.northern.parlay', 'app.legendary.northern.3d.lotto', 'app.legendary.northern.4d.lotto', 'app.legendary.northern.lotto-head']);
            legend.northernJackpot = msUtils.exists(legend.currentName, ['app.legendary.northern.jackpot', 'app.legendary.northern.head-jackpot', 'app.legendary.northern.3d.jackpot', 'app.legendary.northern.4d.jackpot']);
            legend.northernLive = msUtils.exists(legend.currentName, ['app.legendary.northern.live']);

            legend.southern2D = msUtils.exists(legend.currentName, ['app.legendary.southern.2d.eighth', 'app.legendary.southern.2d.jackpot', 'app.legendary.southern.2d.lotto', 'app.legendary.southern.2d.lotto-head'])
            legend.southern3D = msUtils.exists(legend.currentName, ['app.legendary.southern.3d.seventh', 'app.legendary.southern.3d.jackpot', 'app.legendary.southern.3d.lotto'])
            legend.southern4D = msUtils.exists(legend.currentName, ['app.legendary.southern.4d.jackpot', 'app.legendary.southern.4d.lotto'])
        }

        function getAllChildren(obj) {
            if (obj.state !== undefined){
                legend.idArray.push(obj);
            }
            if (!obj.children) {
                return
            }
            angular.forEach(obj.children, function(child){
                getAllChildren(child)
            });
            legend.currentState = legend.idArray.filter(function (id) {
                return id.state === $state.current.name
            });
            // legend.titles = legend.currentState.length !== 0 ? legend.currentState[0].title : '';

            if (legend.currentState.length !== 0){
                if (legend.currentState[0].state === 'app.legendary.southern.2d.eighth'){
                    legend.titles = '2D Đầu'
                }else if (legend.currentState[0].state === 'app.legendary.southern.3d.seventh'){
                    legend.titles = '3D Đầu'
                }else if (legend.currentState[0].state === 'app.legendary.southern.4d.jackpot'){
                    legend.titles = '4D Đuôi'
                }else{
                    legend.titles = legend.currentState[0].title
                }
            }else{
                legend.titles = ''
            }
        }

        $scope.$on('$stateChangeSuccess', function (){
            legend.GameType = $state.current.name.split('.')[2] === 'northern' ? 0 : 1;
            legend.drawResultTimes();
            legend.getTitles();
            $mdSidenav('legendary-menu').close();
            if ( $rootScope.User !== undefined && !msUtils.exists(1, $rootScope.User.Products) ){
                message.show('Tài khoản của quý khách không được phép chơi Xổ Số. Quý khách vui lòng liên hệ đại lý để có thêm chi tiết');
                $state.go('app.home');
            }
            $timeout(function (){
                if (legend.resultTables === undefined || legend.resultTables.GameType !== legend.GameType){
                    legend.legendResult();
                }
                $scope.$digest();
            }, 200)
        })

        function toggleSidenav(sidenavId){
            $mdSidenav(sidenavId).toggle();
        }

        function init(){
            if ($rootScope.isAuthenticated){
                if ($rootScope.LegendCurrentTerm !== undefined){
                    if ( !msUtils.exists(1, $rootScope.User.Products) ){
                        message.show('Tài khoản của quý khách không được phép chơi Xổ Số. Quý khách vui lòng liên hệ đại lý để có thêm chi tiết');
                        $state.go('app.home');
                    }
                }else{
                    $timeout(function () {
                        legend.init();
                    }, 1000)
                }
            }
        }

        if ($rootScope.LegendCurrentTerm === undefined){
            $rootScope.LegendTermName = {0: 0,1: 0}
        }else{
            $rootScope.LegendCurrentTerm.map(function (t) {
                if (t.GameType === 0) $rootScope.LegendTermName[0] = t.Term
                if (t.GameType === 1) $rootScope.LegendTermName[1] = t.Term
            })
        }

        $rootScope.betStepper = [
            {active: false, value: 10},
            {active: false, value: 20},
            {active: false, value: 50},
            {active: false, value: 100},
            {active: false, value: 200},
            {active: false, value: 500},
            {active: false, value: 1000},
            {active: false, value: 2000},
            {active: false, value: 5000},
        ]

        if ($rootScope.isAuthenticated){
            legend.JoinServer()
        }

        $scope.$on('JoinServer', function () {
            if ($rootScope.LegendCurrentTerm === undefined){
                legend.JoinServer()
            }
        })

        $timeout(function () {
            if (!legend.LegendSubscribed && $rootScope.isAuthenticated){
                legend.RealtimeSubscribe();
            }
        }, 2000)

        let LegendOdds = JSON.parse(sessionStorage.getItem('LegendOdds'))

        $rootScope.LegendOdds = LegendOdds === null ? [] : LegendOdds

        $scope.$on('GetOdds', function (event, data){
            $timeout(function () {
                if ($rootScope.isAuthenticated){
                    legend.remConfig = data;
                    legend.checkAllowBetting(data);
                }
            }, 200)
            legend.rememberData = data;
            legend.BetTypes = [];
            //Tìm những kiểu cược chưa có dữ liệu
            let term = $rootScope.isAuthenticated ? $rootScope.LegendTermName[data.GameType] : 'Public'
            angular.forEach(data.BetTypes, function (BetType) {
                let fo = $rootScope.LegendOdds.filter(function (od) {
                    return od.Term === term && od.GameType === data.GameType && od.BetType === BetType
                })
                if (fo.length === 0){
                    legend.BetTypes.push(BetType);
                }
            })
            //Nếu chưa có dữ liệu
            if (legend.BetTypes.length){
                // Lấy giá
                $timeout(function () {
                    legend.getOdds(data.GameType, legend.BetTypes)
                    //Làm trễ để chờ LegendCurrentTerm
                }, 300)
            }else{
                $rootScope.$broadcast('oddsPrice::done');
            }
        })

        let retry = 0;
        function RealtimeSubscribe() {
            if ($rootScope.connectState === 'Connected'){
                legend.LegendSubscribing();
            }else{
                $timeout(function () {
                    retry ++
                    if (!legend.LegendSubscribed){
                        legend.RealtimeSubscribe();
                    }
                }, 2000)
                if (retry > 4){
                    $window.location.reload()
                }
            }
        }

        function legendLatestTicket(refresh){
            refresh = refresh !== undefined;
            let data = {Limit: 5, Refresh: refresh};
            if ($rootScope.LegendCurrentTerm !== undefined){
                network.Legend.Ticket.Latest(data).then(function (result) {
                    legend.legendUpdatingTickets = false;
                    legend.legendLatestTicketsArr = result;
                    legend.legendLatestTicketsArr.map(function (lt) {
                        lt.CreatedAt = moment(lt.CreatedAt).unix();
                    })
                    legend.legendLatestTicketsArr.sort(function (a, b) {
                        return b.CreatedAt - a.CreatedAt
                    });
                    $scope.$digest();
                })
            }else{
                $timeout(function () {
                    legend.legendLatestTicket()
                }, 1000)
            }
        }

        function legendUpdateRecentTickets() {
            legend.legendUpdatingTickets = true;
            $timeout(function () {
                legend.legendLatestTicket('refresh');
            }, 5000)
        }

        function JoinServer(reJoin) {
            legend.legendLatestTicket()
            Lotus.Lottery789.Term.latest().then(function (resp) {
                // console.log(resp)
                $rootScope.LegendCurrentTerm = resp;
                legend.drawResultTimes()
                let odds = [];
                angular.forEach(resp, function (t) {
                    if (t.GameType === 0) $rootScope.LegendTermName[0] = t.Term;
                    if (t.GameType === 1) $rootScope.LegendTermName[1] = t.Term;

                    let matchOdd = $rootScope.LegendOdds.filter(function (o) {
                        return o.Term === $rootScope.LegendTermName[t.GameType] && o.GameType === t.GameType
                    })
                    if (matchOdd.length !== 0){
                        odds = odds.concat(matchOdd);
                    }
                })
                $rootScope.LegendOdds = odds;
                $timeout(function () {
                    $rootScope.$broadcast('TradOdds::get', legend.rememberData);
                    if(reJoin){
                        legend.getMissingNumbers();
                    }
                }, 400)
                legend.saveLocalOdds();
                network.Legend.GameSetting.getGameSettings().then(function (settings) {
                    $timeout(function () {
                        network.Legend.GameSetting.getGamePayouts().then(function (payouts) {
                            $rootScope.LegendParameters = [];
                            angular.forEach(settings, function (item, i) {
                                $rootScope.LegendParameters.push(Object.assign({}, item, payouts[i]))
                            })
                            // console.log($rootScope.LegendParameters)
                        })
                    }, 100)
                })
            })
        }

        function saveLocalOdds() {
            sessionStorage.setItem('LegendOdds', JSON.stringify($rootScope.LegendOdds));
            $rootScope.$broadcast('oddsPrice::done');
        }

        function getOdds(GameType, BetTypes) {
            if ($rootScope.isAuthenticated){
                if ($rootScope.LegendCurrentTerm !== undefined){
                    network.Legend.getOdds({Term: $rootScope.LegendTermName[GameType], GameType: GameType, BetTypes: BetTypes}).then(function (resp) {
                        resp.map(function (o) {return o.Term = $rootScope.LegendTermName[GameType]})
                        angular.forEach(resp, function (od) {
                            let i = $rootScope.LegendOdds.findIndex(function (item) {
                                return item.Term === $rootScope.LegendTermName[item.GameType] && item.GameType === od.GameType && item.BetType === od.BetType
                            });
                            if (i > -1) $rootScope.LegendOdds[i] = od;
                            else $rootScope.LegendOdds.push(od);
                        })
                        legend.saveLocalOdds()
                    })
                }else{
                    $timeout(function () {
                        legend.getOdds(GameType, BetTypes)
                    }, 1000)
                }
            }else {
                network.Public.Legend.getOdds({GameType: GameType, BetTypes: BetTypes}).then(function (resp) {
                    resp.map(function (o) {return o.Term = 'Public'})
                    angular.forEach(resp, function (od) {
                        let i = $rootScope.LegendOdds.findIndex(function (item) {
                            return item.Term === 'Public' && item.GameType === od.GameType && item.BetType === od.BetType
                        });
                        if (i > -1) $rootScope.LegendOdds[i] = od;
                        else $rootScope.LegendOdds.push(od);
                    })
                    legend.saveLocalOdds()
                })
            }
        }
        
        function checkAllowBetting(data) {
            // console.log(data)
            if (data === undefined){return}
            if ($rootScope.LegendCurrentTerm !== undefined){
                let termByGameType = $rootScope.LegendCurrentTerm.filter(function(g){
                    return g.GameType === data.GameType;
                })
                if (termByGameType.length === 0){
                    legend.allowBetting = false;
                }else{

                    let cond = ($state.current.name === 'app.legendary.southern.2d.jackpot') ? 8 : data.BetTypes[0]
                    let gameStatus = termByGameType[0].Games.filter(function(b){
                        return b.BetType === cond;
                    })
                    if (gameStatus.length === 0){
                        legend.allowBetting = false;
                    }else{
                        legend.allowBetting = gameStatus[0].Status === 1;
                    }
                }
                $scope.$digest();
            }else{
                $timeout(function () {
                    legend.checkAllowBetting(data)
                }, 1000)
            }
        }

        function priceChanged(data){
            angular.forEach($rootScope.LegendOdds, function (odd) {
                angular.forEach(data, function (itemPrice) {
                    if (odd.Term === itemPrice.Term && odd.GameType === itemPrice.GameType && odd.BetType === itemPrice.BetType){
                        let findNumber = $.grep(odd.Numbers, function (n) {
                            return n.Number === itemPrice.Number
                        });
                        if (findNumber.length){
                            findNumber[0].ExtraPrice += itemPrice.PriceChange
                        }else {
                            odd.Numbers.push( {Number: itemPrice.Number, ExtraPrice: itemPrice.PriceChange} )
                        }
                    }
                })
            })
            legend.saveLocalOdds()
        }

        function numberClosed(data){
            angular.forEach($rootScope.LegendOdds, function (odd) {
                angular.forEach(data, function (item) {
                    if (odd.Term === item.Term && odd.GameType === item.GameType && odd.BetType === item.BetType){
                        let findNumber = $.grep(odd.Numbers, function (n) {
                            return n.Number === item.Number
                        });
                        if (findNumber.length){
                            findNumber[0].Stop = item.Stop
                        }else {
                            odd.Numbers.push( {Number: item.Number, Stop: item.Stop} )
                        }
                    }
                })
            })
            legend.saveLocalOdds()
        }

        function LegendSubscribing(){
            if (!legend.LegendSubscribed){
                Lotus.Lottery789.Realtime.subcribe().then(function(){
                    console.log("Realtime:789:subcribe")
                    if ($rootScope.legendFirstRegis === undefined){
                        Lotus.Lottery789.Realtime.on("lottery789:general:event:1059", function(data, message){
                            // Thời gian quay thưởng thay đổi
                            legend.changeDrawResult(data)
                        })
                        Lotus.Lottery789.Realtime.on("lottery789:ancestor:event:1051", function(data, message){
                            legend.priceChanged(data)
                        })
                        Lotus.Lottery789.Realtime.on("lottery789:ancestor:event:1052", function(data, message) {
                            legend.numberClosed(data);
                            $rootScope.$broadcast('legend::stop-number-changed', data);
                        })
                        Lotus.Lottery789.Realtime.on("lottery789:self:event:1053", function(data, message) {
                            //console.log("Legend.Ticket::Approved")
                            $rootScope.$broadcast('Legend.Ticket::Approved', data);
                        })
                        Lotus.Lottery789.Realtime.on("lottery789:self:event:1054", function(data, message) {
                            $rootScope.$broadcast('Legend.Ticket::Rejected', data);
                        })
                        Lotus.Lottery789.Realtime.on("lottery789:general:event:1055", function(data, message){
                            //console.log("phiên mới được tạo", data);
                            $rootScope.needUpdateResult = true;
                            legend.JoinServer(true);
                        })
                        Lotus.Lottery789.Realtime.on("lottery789:general:event:1056", function(data, message){
                            //Game open
                            $timeout(function (){
                                legend.reInit();
                            }, 500)
                            if (data.PrizeNr === undefined){
                                legend.changeGameStatus(data)
                            }else{
                                $rootScope.$broadcast('live-legend:event:game-opening', data);
                                legend.closedPrize(data);
                                msLotteryService.saveItem('fuse.northern.live', {
                                    icon    : 'icon-heart pulse',
                                });
                            }
                        })
                        Lotus.Lottery789.Realtime.on("lottery789:general:event:1057", function(data, message){
                            //Game closed
                            //console.log(data)
                            if (data.PrizeNr === undefined){
                                legend.changeGameStatus(data)
                            }else{
                                $rootScope.$broadcast('live-legend:event:game-closed', data);
                                legend.closedPrize({Term: data.Term, GameType: data.GameType, PrizeNr: 0});
                                msLotteryService.saveItem('fuse.northern.live', {
                                    icon    : 'icon-heart',
                                });
                            }
                        })
                        Lotus.Lottery789.Realtime.on("lottery789:general:event:1058", function(data, message){
                            // Thời gian đóng giải tự động thay đổi
                        })
                        Lotus.Lottery789.Realtime.on("lottery789:general:event:1060", function(data, message){
                            // Lolive đóng giải
                            //console.log(data);
                            $rootScope.$broadcast('live-legend:event:prize-closed', data);
                            legend.closedPrize(data);
                            msLotteryService.saveItem('fuse.northern.live', {
                                icon    : 'icon-heart pulse',
                            });
                        })
                        Lotus.Lottery789.Realtime.on("lottery789:general:event:1061", function(data, message){
                            // console.log('kết quả thay đổi')
                            // console.log(data);
                            legend.updateResults(data);
                            legend.updateMissing(data, true);
                            legend.commentText = '';
                            $timeout(function (){
                                $scope.$digest();
                                if (legend.lastPrize !== undefined && data.Prize > legend.lastPrize){
                                    $timeout(function (){
                                        legend.ResultCommentator(data);
                                    }, 400)
                                }else{
                                    // khi sửa kết quả
                                    legend.NorthernResultCommentator();
                                }
                                legend.lastPrize = (data.Prize > legend.lastPrize || legend.lastPrize === undefined) ? data.Prize : legend.lastPrize;
                                // console.log(legend.lastPrize)
                            }, 1000)
                        })
                        Lotus.Lottery789.Realtime.on("lottery789:general:event:1062", function(data, message){
                            // Thông báo quay lại giải
                            console.log(data);
                            legend.notifications(data);
                        })
                        $rootScope.legendFirstRegis = true;
                    }
                })
            }
            legend.LegendSubscribed = true;
        }

        function changeGameStatus(data) {
            if ($rootScope.LegendCurrentTerm !== undefined){
                $rootScope.LegendCurrentTerm.map(function (term) {
                    if (term.Term === data.Term && term.GameType === data.GameType){
                        term.Games.map(function(BetType){
                            BetType.Status = data.BetTypes.filter(function (b) {
                                return b.BetType === BetType.BetType
                            })[0].Status
                        })
                    }
                })
            }
            legend.checkAllowBetting(legend.remConfig);
            legend.drawResultTimes(true);
            $timeout(function (){
                legend.cinematicNote();
            }, 500)

            let delay = Math.floor(Math.random() * (10000 - 1000)) + 1000;
            if (data.GameType === 0 && data.BetTypes.filter(function (b) {
                return b.BetType === 1
            })[0].Status === 0){
                if (msUtils.exists($state.current.name, ['app.legendary.northern.quick','app.legendary.northern.lotto','app.legendary.northern.except-lotto','app.legendary.northern.parlay','app.legendary.northern.3d.lotto','app.legendary.northern.4d.lotto'])){
                    message.toast('Lô đã đóng! Quý khách sẽ chuyển sang Lô Live sau ít giây');
                    $timeout(function () {
                        $state.go('app.legendary.northern.live')
                    }, delay)
                }
            }
            if (data.GameType === 1 && data.BetTypes.filter(function (b) {
                return b.BetType === 15
            })[0].Status === 0){
                if (msUtils.exists($state.current.name, ['app.legendary.southern.quick','app.legendary.southern.2d.lotto','app.legendary.southern.2d.eighth','app.legendary.southern.parlay','app.legendary.southern.3d.seventh','app.legendary.southern.3d.lotto', 'app.legendary.southern.4d.lotto'])){
                    message.toast('Lô đã đóng! Quý khách sẽ chuyển sang Lô Live sau ít giây');
                    $timeout(function () {
                        $state.go('app.legendary.southern.live')
                    }, delay)
                }
            }

        }

        $scope.$on('LegendBetting', function () {
            if (!$rootScope.isAuthenticated){
                $rootScope.popupLogin();
                return;
            }
            if ($rootScope.User.Suspended){
                message.show('Tài khoản của quý khách đang không được phép đặt cược.');
                return;
            }
            let costMoney = 0;
            angular.forEach($rootScope.aBettingObject.Tickets, function (ticket) {
                ticket.Money = $filter('legendCostMoney')(ticket)
                costMoney += ticket.Money
            });
            if (costMoney > $rootScope.User.Balance){
                message.show('Số dư tài khoản quý khách không đủ để thực hiện toàn bộ đơn cược.');
                return
            }
            // angular.forEach($rootScope.aBettingObject.Tickets, function (tick) {
            //     console.log( $filter('blBet')({betTypeAlias: tick.Additional.Alias}) )
            // });
            legend.dialogBetting()
        });

        function dialogBetting() {
            $mdDialog.show({
                locals:{item: $rootScope.aBettingObject, callback: legend.callbackApproved},
                clickOutsideToClose: false,
                escapeToClose: false,
                controllerAs: 'ctrl',
                templateUrl: 'app/main/legendary/betting/betting.html',
                controller: bettingDialogCtrl
            });

            function bettingDialogCtrl($rootScope, $scope, $mdDialog, $mdMedia, item) {
                $scope.$mdMedia = $mdMedia;
                $scope.showAction = false;
                $scope.tick = {success: 0, total: 0, answered: 0};
                $scope.betTx = [];

                $scope.cancel = function () {
                    $mdDialog.hide();
                    $timeout.cancel($scope.autoCallback);
                    $timeout.cancel($scope.autoMobilize);
                };
                $scope.tickets = angular.copy(item);

                network.Legend.Play(item).then(function(resp){
                    $scope.processing(resp)
                }).catch(function (error) {
                    message.show(error.message);
                });

                $scope.processing = function(resp){
                    $scope.betTx = resp;
                    $scope.tick.total = resp.length;
                    angular.forEach($scope.tickets.Tickets, function (tick, index) {
                        tick.Tx = resp[index].Tx;
                        tick.status = 'processing'
                    });
                    let timeAutoCheck = $scope.tickets.Tickets.length < 30 ? 30 : $scope.tickets.Tickets.length;
                    $scope.autoCallback = $timeout(function () {
                        $scope.checkTicket();
                    }, timeAutoCheck * 1000);

                    $scope.autoMobilize = $timeout(function () {
                        $scope.Mobilize = 'Quá trình đặt cược diễn ra hơi lâu hơn bình thường. Quý khách vui lòng kiên nhẫn chờ thêm vài giây nữa.'
                    }, timeAutoCheck * 1000 * 2/3);
                }

                $scope.$on('Legend.Ticket::Approved', function ($event, Tickets){
                    angular.forEach(Tickets, function (data) {
                        angular.forEach($scope.tickets.Tickets, function (tick){
                            if (tick.Tx === data.Tx && tick.status === 'processing'){
                                tick.status = 'approved';
                                $rootScope.User.Balance -= data.Amount; // $rootScope.User.Balance -= $filter('sumMoneyCost')(tick);
                                tick.TicketNumber = data.TicketNumber;
                                tick.Amount = data.Amount;
                                tick.PrizeNr = data.PrizeNr
                                $scope.tick.success ++;
                                $scope.countAnswer();
                                legend.callbackApproved(tick)
                            }
                        })
                    })
                    if ($scope.tick.success >= $scope.tick.total){
                        $timeout(function () {
                            $scope.allDone = true;
                            if ($rootScope.data.closePanel){
                                $timeout(function () {
                                    $scope.cancel()
                                }, 1000)
                            }else{
                                $scope.showAction = true;
                            }
                        }, 200)
                    }
                })

                $scope.$on('Legend.Ticket::Rejected', function ($event, Tickets){
                    angular.forEach(Tickets, function (data) {
                        angular.forEach($scope.tickets.Tickets, function (tick){
                            if (tick.Tx === data.Tx && tick.status === 'processing'){
                                tick.status = 'rejected';
                                tick.errorMessage = data.Errors[0].Message;
                                $scope.countAnswer();
                            }
                        })
                    })
                })

                $scope.countAnswer = function () {
                    $scope.tick.answered ++;
                    if ($scope.tick.totalErrors){
                        $scope.tick.totalErrors --;
                        $scope.fireMessageTx();
                    }
                    if ($scope.tick.answered === $scope.tick.total && $scope.tick.total !== $scope.tick.success){
                        $scope.errorMessageTx = 'Xử lý đơn cược thành công.<br/> Nhưng có <b>' + ($scope.tick.total - $scope.tick.success) + '</b> phiếu bị lỗi. Quý khách vui lòng kiểm tra lại.';
                        $scope.alertTick = true;
                        $scope.showAction = true;
                    }
                    if ($scope.tick.answered === $scope.tick.total){
                        $rootScope.$broadcast('bettingCompleted', item);
                        $timeout.cancel($scope.autoCallback);
                        $timeout.cancel($scope.autoMobilize);
                        $scope.Mobilize = undefined;
                    }
                    $scope.$digest();
                };

                $scope.checkTicket = function (fire) {
                    $scope.Mobilize = undefined;

                    let TxLists = [];
                    if ($scope.tick.answered < $scope.tick.total){
                        angular.forEach($scope.tickets.Tickets, function(tick){
                            if (tick.status === 'processing'){
                                TxLists.push(tick.Tx)
                            }
                        });
                        network.Legend.checkTx({TxList: TxLists}).then(function (response) {
                            let successTicks = response.filter(function (tick) {
                                return tick.Errors === undefined || tick.Errors.length === 0;
                            });
                            $rootScope.$broadcast('ticketApproved', successTicks);
                            let rejectedTicks = response.filter(function (tick) {
                                return tick.Errors;
                            });
                            $rootScope.$broadcast('ticketRejected', rejectedTicks);

                            if (response.length < TxLists.length) {
                                if (!fire){
                                    $scope.autoCallback = $timeout(function () {
                                        $scope.checkTicket(true);
                                    }, 20000);
                                }else{
                                    $scope.alertTick = true;
                                    $scope.showAction = true;
                                    $scope.tick.totalErrors = (TxLists.length - response.length);
                                    $scope.fireMessageTx();

                                    angular.forEach($scope.tickets.Tickets, function(tick){
                                        tick.notAnswer = tick.status === 'processing';
                                    });
                                }
                            }
                        })
                    }
                };

                $scope.fireMessageTx = function () {
                    $scope.errorMessageTx = $scope.tick.totalErrors !== 0 ? 'Có <b>' + $scope.tick.totalErrors + '</b> phiếu bị lỗi không xác định trong quá trình đặt cược.<br>Quý khách vui lòng kiểm tra và đặt cược lại.<br>Rất xin lỗi quý khách vì sự bất tiện này' : undefined;
                }
            }
        }

        function callbackApproved(tick){
            let newTicket = {
                TicketNumber: tick.TicketNumber,
                GameType: tick.GameType,
                BetType: tick.BetType,
                Point: 0,
                Numbers: [],
                Amount: tick.Amount,
                Status: 1,
                PrizeNr: tick.PrizeNr,
                CreatedAt: moment().unix()
            };

            angular.forEach(tick.Items, function (item) {
                newTicket.Point += item.Point;
                newTicket.Numbers = newTicket.Numbers.concat(item.Numbers)
            });
            newTicket.Numbers = newTicket.Numbers.filter(function (item, b, self) {
                return self.indexOf(item) === b
            });
            legend.legendLatestTicketsArr.push(newTicket);
            legend.legendLatestTicketsArr.sort(function (a, b) {
                return b.CreatedAt - a.CreatedAt
            })
            // console.log(legend.legendLatestTicketsArr)
        }

        function changeDrawResult(data) {
            if ($rootScope.LegendCurrentTerm !== undefined){
                $rootScope.LegendCurrentTerm.map(function (term) {
                    if (term.Term === data.Term && term.GameType === data.GameType){
                        term.DrawResultAt = data.DrawResultAt
                    }
                })
                legend.drawResultTimes(true);
                //message.show('Thời gian mở thưởng đài '+ $filter('legendGame')(data.GameType) + ' đã thay đổi. Thời gian mở thưởng mới vào lúc '+ moment(data.DrawResultAt).format('DD/MM HH:mm'))
            }
        }

        function drawResultTimes(update){
            if ($rootScope.LegendCurrentTerm !== undefined){
                let GameType = $state.current.name.split('.')[2] === 'northern' ? 0 : 1;
                let Term = $rootScope.LegendCurrentTerm.filter(function (t) {
                    return t.GameType === GameType
                });
                $rootScope.termInfo = Term[0];

                legend.DrawResultAt = {
                    Time: Term[0].DrawResultAt,
                    Name: $filter('legendGame')(GameType)
                }
                if (update){
                    $scope.$digest();
                }
            }
        }

        function legendVideo() {
            if (!$rootScope.isAuthenticated){return}
            let username = $rootScope.isAuthenticated ? $rootScope.User.Username : 'public';

            if (H5LivePlayer.isSupported()) {
                H5LivePlayer.startAdaptiveStream({
                    playerDivId: "player-element",
                    // vKzPg-gtdm8 : 720p - 1500kb/s
                    // vKzPg-1Ppmy: 720p - 1000kb/s
                    // vKzPg-ZzASt: 480p - 640kb/s
                    // vKzPg-2MCUu: 360p - 400 kb/s
                    streamNames: ["vKzPg-gtdm8", "vKzPg-1Ppmy", "vKzPg-ZzASt", "vKzPg-2MCUu"],
                    startStream: "vKzPg-ZzASt",
                    metrics: {
                        username: username,
                        game: "lottery789"
                    }
                });
            } else {
                alert("Trình duyệt của quý khách không hỗ trợ xem video phát trực tuyến")
            }
        }

        $scope.$on("$destroy", function() {
            $timeout(function () {
                if (H5LivePlayer.isSupported()){
                    H5LivePlayer.destroy();
                }
                if (ipr !== undefined){
                    $interval.cancel(ipr)
                }
                if ($rootScope.isAuthenticated){
                    Lotus.Lottery789.Realtime.unsubscribe();
                    console.log('Realtime:789:unsubscribe')
                }
            })
        })

        legend.matrix = {};
        for (let i = 0; i < 10; i++) {
            legend.matrix[i] = [];
        }

        function legendResult(){
            let GameType = $state.current.name.split('.')[2] === 'northern' ? 0 : 1;
            if (legend.resultTables === undefined){
                legend.resultTables = {GameType: GameType}
            }
            if ($rootScope.isAuthenticated){
                if ($rootScope.LegendCurrentTerm !== undefined){
                    network.Public.Legend.LotteryResult.getLatestResultByGameType({GameType: GameType}).then(function (response){
                        // console.log('getLatestResultByGameType', response)
                        if (response.Fiveth !== undefined){
                            response.Fifth = response.Fiveth;
                            delete response.Fiveth;
                        }
                        legend.resultTables = response;
                        legend.brt();
                        legend.cinematicNote();
                        $timeout(function (){
                            legend.reloadingResult = false;
                            $scope.$digest();
                        })
                    })
                }else {
                    $timeout(function (){
                        legend.legendResult();
                    }, 1000)
                }
            }else{
                if (ipr !== undefined){
                    $interval.cancel(ipr)
                }
                //Not login yet
                //console.log('Not login yet')
                network.Public.Legend.LotteryResult.getLatestResultByGameType({GameType: GameType}).then(function (response){
                    if (response.Fiveth !== undefined){
                        response.Fifth = response.Fiveth;
                        delete response.Fiveth;
                    }
                    legend.resultTables = response;
                    legend.brt();
                    $timeout(function (){
                        legend.reloadingResult = false;
                        $scope.$digest();
                    })
                })
                ipr = $interval(function (){
                    legend.legendResult();
                }, 30000)
            }
        }

        function brt(){
            legend.matrix = msUtils.generatorMatrix(legend.resultTables);
        }

        function closedPrize(data){
            // console.log(data);
            // console.log(legend.GameType, data.GameType);
            //{Term: "2020-08-16.1", GameType: 0, PrizeNr: 26, Pricing: Array(2)}
            if (legend.GameType === data.GameType){
                legend.cinematicNote();
                legend.currentSpin = data.PrizeNr;
                if (data.GameType === 0){
                    if (data.PrizeNr === 27){
                        legend.latestResult = undefined;
                        legend.resultTables = {
                            "Jackpot": "",
                            "First": "",
                            "Second": ["",""],
                            "Third": ["","","","","",""],
                            "Fourth": ["","","",""],
                            "Fifth": ["","","","","",""],
                            "Sixth": ["","",""],
                            "Seventh": ["","","",""],
                            "Term": data.Term,
                            "GameType": 0
                        };
                    }
                }else{
                    if (data.PrizeNr === 18){
                        legend.latestResult = undefined;
                        legend.resultTables = {
                            "Jackpot": "",
                            "First": "",
                            "Second": "",
                            "Third": ["",""],
                            "Fourth": ["","","","","","",""],
                            "Fifth": "",
                            "Sixth": ["","",""],
                            "Seventh": "",
                            "Eighth": "",
                            "Term": data.Term,
                            "GameType": 1
                        };
                    }
                }
                legend.brt();
                // legend.turnOnVideo();
                // console.log('currentSpin: ', legend.currentSpin)

                if (data.PrizeNr === 0){
                    if ( $state.current.name === 'app.legendary.northern.live' ){
                        $state.go('app.legendary.northern.lotto')
                    }else if ( $state.current.name === 'app.legendary.southern.live'){
                        $state.go('app.legendary.southern.2d.lotto')
                    }
                }

                $timeout(function (){
                    $scope.$digest();
                }, 100)
            }else{
                //Che video
                // legend.moveToLiving(data);
                //legend.turnOffVideo(data)
            }
        }

        function updateResults(data){
            console.log('Kỳ hiện tại: ', data.Term === legend.resultTables.Term ? 'Yes' : 'No')
            // console.log(JSON.stringify(legend.resultTables))
            legend.latestResult = data.Result;
            if (legend.GameType === data.GameType){
                legend.playAudio();
                if (data.Term === legend.resultTables.Term){
                    if (data.GameType === 0){
                        legend.updateNorthPrize(data)
                    }else{
                        legend.updateSouthPrize(data)
                    }
                }else{
                    if (data.GameType === 0){
                        legend.resultTables = {
                            "Jackpot": "",
                            "First": "",
                            "Second": ["",""],
                            "Third": ["","","","","",""],
                            "Fourth": ["","","",""],
                            "Fifth": ["","","","","",""],
                            "Sixth": ["","",""],
                            "Seventh": ["","","",""],
                            "Term": data.Term,
                            "GameType": 0
                        };
                        legend.updateNorthPrize(data)
                    }else{
                        legend.resultTables = {
                            "Jackpot": "",
                            "First": "",
                            "Second": "",
                            "Third": ["",""],
                            "Fourth": ["","","","","","",""],
                            "Fifth": "",
                            "Sixth": ["","",""],
                            "Seventh": "",
                            "Eighth": "",
                            "Term": data.Term,
                            "GameType": 1
                        };
                        legend.updateSouthPrize(data)
                    }
                }
                legend.cinematicNote();
                $timeout(function (){
                    $scope.$digest();
                }, 500)
            }else{
                //Che video
                //legend.turnOffVideo(data)
                // legend.moveToLiving(data);
            }
        }

        function turnOnVideo(){
            legend.showMaskVideo = false;
            // console.log('Request turn on')
            $timeout(function (){
                if (!H5LivePlayer.isPlaying()){
                    // console.log("turnOnVideo")
                    H5LivePlayer.play();
                }
                $scope.$digest();
            }, 4000)
        }

        function turnOffVideo(data){
            legend.showMaskVideo = true;
            legend.showing = data.GameType;
            $timeout(function (){
                // legend.moveToLiving(data);
                if (H5LivePlayer.isPlaying()){
                    console.log("Tạm dừng Video do đang xem đài không mở thưởng")
                    H5LivePlayer.pause();
                }
                $scope.$digest();
            }, 2000)
        }

        function updateNorthPrize(data){
            switch(data.Prize) {
                case 0:
                    legend.resultTables.Jackpot = data.Result;break;
                case 1:
                    legend.resultTables.First = data.Result;break;
                case 2:
                    legend.resultTables.Second[0] = data.Result;break;
                case 3:
                    legend.resultTables.Second[1] = data.Result;break;
                case 4:
                    legend.resultTables.Third[0] = data.Result;break;
                case 5:
                    legend.resultTables.Third[1] = data.Result;break;
                case 6:
                    legend.resultTables.Third[2] = data.Result;break;
                case 7:
                    legend.resultTables.Third[3] = data.Result;break;
                case 8:
                    legend.resultTables.Third[4] = data.Result;break;
                case 9:
                    legend.resultTables.Third[5] = data.Result;break;
                case 10:
                    legend.resultTables.Fourth[0] = data.Result;break;
                case 11:
                    legend.resultTables.Fourth[1] = data.Result;break;
                case 12:
                    legend.resultTables.Fourth[2] = data.Result;break;
                case 13:
                    legend.resultTables.Fourth[3] = data.Result;break;
                case 14:
                    legend.resultTables.Fifth[0] = data.Result;break;
                case 15:
                    legend.resultTables.Fifth[1] = data.Result;break;
                case 16:
                    legend.resultTables.Fifth[2] = data.Result;break;
                case 17:
                    legend.resultTables.Fifth[3] = data.Result;break;
                case 18:
                    legend.resultTables.Fifth[4] = data.Result;break;
                case 19:
                    legend.resultTables.Fifth[5] = data.Result;break;
                case 20:
                    legend.resultTables.Sixth[0] = data.Result;break;
                case 21:
                    legend.resultTables.Sixth[1] = data.Result;break;
                case 22:
                    legend.resultTables.Sixth[2] = data.Result;break;
                case 23:
                    legend.resultTables.Seventh[0] = data.Result;break;
                case 24:
                    legend.resultTables.Seventh[1] = data.Result;break;
                case 25:
                    legend.resultTables.Seventh[2] = data.Result;break;
                case 26:
                    legend.resultTables.Seventh[3] = data.Result;break;
            }
            legend.brt()
            $timeout(function (){
                $scope.$digest();
            }, 300)
        }

        function updateSouthPrize(data){
            switch(data.Prize) {
                case 0:
                    legend.resultTables.Jackpot = data.Result;break;
                case 1:
                    legend.resultTables.First = data.Result;break;
                case 2:
                    legend.resultTables.Second = data.Result;break;
                case 3:
                    legend.resultTables.Third[1] = data.Result;break;
                case 4:
                    legend.resultTables.Third[0] = data.Result;break;
                case 5:
                    legend.resultTables.Fourth[6] = data.Result;break;
                case 6:
                    legend.resultTables.Fourth[5] = data.Result;break;
                case 7:
                    legend.resultTables.Fourth[4] = data.Result;break;
                case 8:
                    legend.resultTables.Fourth[3] = data.Result;break;
                case 9:
                    legend.resultTables.Fourth[2] = data.Result;break;
                case 10:
                    legend.resultTables.Fourth[1] = data.Result;break;
                case 11:
                    legend.resultTables.Fourth[0] = data.Result;break;
                case 12:
                    legend.resultTables.Fifth = data.Result;break;
                case 13:
                    legend.resultTables.Sixth[2] = data.Result;break;
                case 14:
                    legend.resultTables.Sixth[1] = data.Result;break;
                case 15:
                    legend.resultTables.Sixth[0] = data.Result;break;
                case 16:
                    legend.resultTables.Seventh = data.Result;break;
                case 17:
                    legend.resultTables.Eighth = data.Result;break;
            }
            legend.brt()
            $timeout(function (){
                $scope.$digest();
            }, 300)
        }

        function cinematicNote(){
            // console.log(legend.resultTables)
            let countPrize = legend.countPrize();
            // legend.currentPrize = countPrize;
            if (legend.resultTables.GameType === 0){
                legend.currentSpin = 26-countPrize
                if (countPrize === 27){
                    //Quay xong
                    if (moment().isBefore(legend.DrawResultAt.Time)){
                        //đã mở kỳ mới và chờ mở thưởng
                        legend.cinematicState = 'idle';
                        // console.log('Đã mở kỳ mới và chờ mở thưởng')
                    }else{
                        //Vừa quay xong và chưa mở kỳ mới
                        legend.cinematicState = 'ended';
                        // console.log('Vừa quay xong và chưa mở kỳ mới')
                    }
                }else{
                    //Đang quay
                    // console.log('Đang quay')
                    legend.cinematicState = 'live';
                }
            }else{
                legend.currentSpin = 17-countPrize
                if (countPrize === 18){
                    //Quay xong
                    if (moment().isBefore(legend.DrawResultAt.Time)){
                        //đã mở kỳ mới và chờ mở thưởng
                        legend.cinematicState = 'idle';
                        // console.log('Đã mở kỳ mới và chờ mở thưởng')
                    }else{
                        //Vừa quay xong và chưa mở kỳ mới
                        legend.cinematicState = 'ended';
                        // console.log('Vừa quay xong và chưa mở kỳ mới')
                    }
                }else{
                    //Đang quay
                    // console.log('Đang quay')
                    legend.cinematicState = 'live';
                }
            }
        }

        function countPrize(){
            let obj = legend.resultTables;
            let count = 0;
            // console.log(obj)
            Object.keys(obj).forEach(function (key){
                if (msUtils.exists(key, ['Jackpot', 'First', 'Second', 'Third', 'Fourth', 'Fifth', 'Sixth', 'Seventh', 'Eighth'])){
                    if (!Array.isArray(obj[key])){
                        if (obj[key].length){
                            count ++
                        }
                    }else{
                        for (let i = 0; i < obj[key].length; i++){
                            if (obj[key][i].length){
                                count ++
                            }
                        }
                    }
                }
            })
            return count;
        }

        function cinematicSetText(countPrize){
            if (legend.resultTables.GameType === 0){
                switch (countPrize){
                    case 1: return 'Đang quay giải nhì, bộ số thứ nhất';
                    case 2: return 'Đang quay giải nhì, bộ số thứ hai';
                    case 3: return 'Đang quay giải ba, bộ số thứ nhất';
                    case 4: return 'Đang quay giải ba, bộ số thứ hai';
                    case 5: return 'Đang quay giải ba, bộ số thứ ba';
                    case 6: return 'Đang quay giải ba, bộ số thứ tư';
                    case 7: return 'Đang quay giải ba, bộ số thứ năm';
                    case 8: return 'Đang quay giải ba, bộ số thứ sáu';
                    case 9: return 'Đang quay giải tư, bộ số thứ nhất';
                    case 10: return 'Đang quay giải tư, bộ số thứ hai';
                    case 11: return 'Đang quay giải tư, bộ số thứ ba';
                    case 12: return 'Đang quay giải tư, bộ số thứ tư';
                    case 13: return 'Đang quay giải năm, bộ số thứ nhất';
                    case 14: return 'Đang quay giải năm, bộ số thứ hai';
                    case 15: return 'Đang quay giải năm, bộ số thứ ba';
                    case 16: return 'Đang quay giải năm, bộ số thứ tư';
                    case 17: return 'Đang quay giải năm, bộ số thứ năm';
                    case 18: return 'Đang quay giải năm, bộ số thứ sáu';
                    case 19: return 'Đang quay giải sáu, bộ số thứ nhất';
                    case 20: return 'Đang quay giải sáu, bộ số thứ hai';
                    case 21: return 'Đang quay giải sáu, bộ số thứ ba';
                    case 22: return 'Đang quay giải bảy, bộ số thứ nhất';
                    case 23: return 'Đang quay giải bảy, bộ số thứ hai';
                    case 24: return 'Đang quay giải bảy, bộ số thứ ba';
                    case 25: return 'Đang quay giải bảy, bộ số thứ tư';
                    case 26: return 'Đang quay giải đặc biệt';
                }
            }else{
                switch (countPrize){
                    case 1: return 'Đang quay giải bảy';
                    case 2: return 'Đang quay giải sáu, bộ số thứ nhất';
                    case 3: return 'Đang quay giải sáu, bộ số thứ hai';
                    case 4: return 'Đang quay giải sáu, bộ số thứ ba';
                    case 5: return 'Đang quay giải năm';
                    case 6: return 'Đang quay giải tư, bộ số thứ nhất';
                    case 7: return 'Đang quay giải tư, bộ số thứ hai';
                    case 8: return 'Đang quay giải tư, bộ số thứ ba';
                    case 9: return 'Đang quay giải tư, bộ số thứ tư';
                    case 10: return 'Đang quay giải tư, bộ số thứ năm';
                    case 11: return 'Đang quay giải tư, bộ số thứ sáu';
                    case 12: return 'Đang quay giải tư, bộ số thứ bảy';
                    case 13: return 'Đang quay giải ba, bộ số thứ nhất';
                    case 14: return 'Đang quay giải ba, bộ số thứ hai';
                    case 15: return 'Đang quay giải nhì';
                    case 16: return 'Đang quay giải nhất';
                    case 17: return 'Đang quay giải đặc biệt';
                }
            }
        }

        function playAudio(){
            let audio = new Audio('assets/alert.mp3');
            audio.volume = 0.1;
            audio.play();
        }

        legend.muted = true;
        function setMuted(){
            legend.muted = !legend.muted;
            if (legend.muted){
                H5LivePlayer.mute()
            }else{
                H5LivePlayer.unmute()
            }
        }

        function notifications(data){
            if (legend.GameType === data.GameType){
                legend.showNotify = true;
                legend.textNotify = data.Message;
                $timeout(function (){
                    $scope.$digest();
                })
                $timeout(function (){
                    legend.showNotify = false;
                }, 8000)
            }
        }

        function moveToLiving(data){
            if ( (data.Term + '.' + data.GameType) === legend.remember ){return}
            $mdDialog.show({
                locals:{data: data, callback: legend.callbackApproved},
                clickOutsideToClose: true,
                escapeToClose: true,
                templateUrl: 'app/main/legendary/dialog.move.living.html',
                controller: moveToLivingCtrl
            });
            function moveToLivingCtrl($scope, data){
                $scope.$mdMedia = $mdMedia;
                $scope.cancel = function () {
                    legend.remember = data.Term + '.' + data.GameType;
                    $mdDialog.hide();
                };
                $scope.data = data;
                $scope.move = function (){
                    if (data.GameType === 0){
                        $state.go('app.legendary.northern.live');
                    }else{
                        $state.go('app.legendary.southern.live');
                    }
                    $timeout(function (){
                        $mdDialog.hide();
                    }, 500)
                }
            }
        }

        $scope.$on('getMissing', function (event, data){
            $timeout(function (){
                legend.reMissData = data;
                if ($rootScope.isAuthenticated){
                    legend.getMissingNumbers(data);
                }
            }, 1000)
        })

        $rootScope.missNumbers = [
            {
                GameType: 0,
                Term: '',
                missNumbers: []
            },
            {
                GameType: 1,
                Term: '',
                missNumbers: []
            }
        ]

        function getMissingNumbers(data){
            // console.log(data)
            if (legend.reMissData === undefined){return }
            data = data === undefined ? legend.reMissData : data;
            if ($rootScope.LegendCurrentTerm !== undefined){
                $rootScope.missNumbers.map(function (item){
                    if (item.GameType === data.GameType){
                        if (item.Term !== $rootScope.LegendTermName[data.GameType]){
                            item.Term = $rootScope.LegendTermName[data.GameType];
                            item.missNumbers = [];
                        }
                    }
                })
                let matchGame = $rootScope.missNumbers.filter(function (item){
                    return item.GameType === data.GameType;
                })
                if (matchGame.length){
                    let findStats = matchGame[0].missNumbers.filter(function (item){
                        return item.StatsType === data.StatsType
                    })
                    if (findStats.length === 0){
                        Lotus.Lottery789.ResultStats.TimesDrawn.getMissing({GameType: data.GameType, StatsType: data.StatsType}).then(function (response){
                            response.sort(function (a, b){
                                return b.TimesMissing - a.TimesMissing
                            })
                            response.map(function(item, index){
                                item.high = (item.TimesMissing >= item.AvgTimesMissing)
                            })
                            // console.log(response)
                            $rootScope.missNumbers.map(function (item){
                                if (item.GameType === data.GameType){
                                    item.missNumbers.push({
                                        StatsType: data.StatsType,
                                        Data: response
                                    })
                                }
                            })
                            //Has new data
                            $rootScope.$broadcast('getMissing::done');
                            legend.updateWithResult()
                        });
                    }else{
                        $rootScope.$broadcast('getMissing::done');
                        legend.updateWithResult()
                    }
                }
            }else{
                $timeout(function (){
                    legend.getMissingNumbers(data);
                }, 1000)
            }
        }

        function updateMissing(data, newResult){
            // console.log(data)
            //{Term: "2020-11-30.3", GameType: 0, Prize: 1, Result: "58604"}
            let number = data.Result.slice(-2)
            let missingNumbers = $rootScope.missNumbers.filter(function(item){
                return item.GameType === data.GameType && item.Term === data.Term
            })
            if (missingNumbers.length){
                let findByStat =  missingNumbers[0].missNumbers.filter(function (item){
                    return item.StatsType === 2
                })
                if (findByStat.length){
                    findByStat[0].Data.map(function (item){
                        if (item.Number === number){
                            item.TimesMissing = 0;
                            item.TimesDrawn ++;
                            item.high = false
                        }
                    })
                    $rootScope.$broadcast('getMissing::done');
                    if (newResult){
                        $rootScope.$broadcast('highlight::number', number);
                    }

                }
            }
            // console.log($rootScope.missNumbers)
        }

        function updateWithResult(){
            legend.NorthernResultCommentator();
            // console.log(legend.resultTables);
            if (legend.resultTables.Term !== undefined){
                let currentResult = [];
                if (legend.resultTables.GameType === 0){
                    currentResult = currentResult
                        .concat([legend.resultTables.First])
                        .concat(legend.resultTables.Second)
                        .concat(legend.resultTables.Third)
                        .concat(legend.resultTables.Fourth)
                        .concat(legend.resultTables.Fifth)
                        .concat(legend.resultTables.Sixth)
                        .concat(legend.resultTables.Seventh)
                        .concat([legend.resultTables.Jackpot])

                    currentResult = currentResult.filter(function (item){
                        return item.length !== 0
                    })
                    if (currentResult.length < 27){
                        currentResult.map(function (item){
                            legend.updateMissing({Result: item, Term: legend.resultTables.Term, GameType: legend.resultTables.GameType});
                        })
                    }
                }
            }else{
                $timeout(function (){
                    legend.updateWithResult();
                }, 1000)
            }
        }

        function reInit(){
            Lotus.Lottery789.LotteryResult.getLatestResults({GameType: 0}).then(function (response){
                // console.log(response)
                $rootScope.theResults = response;
                legend.NorthernResultCommentator();
            })
        }

        function NorthernResultCommentator(){
            // console.log('missNumbers: ', $rootScope.missNumbers)
            // console.log('theResults: ', $rootScope.theResults)
            // console.log('resultTables: ', legend.resultTables)
            legend.commentText = '';
            legend.Commentator = {};
            if ($rootScope.missNumbers !== undefined && $rootScope.theResults !== undefined && legend.resultTables !== undefined ){
                legend.Commentator.LastLotteryResults = $rootScope.theResults;
                legend.Commentator.CurrentLotteryResult = legend.resultTables;
                let missNumber = $rootScope.missNumbers.filter(function (item){
                    return item.GameType === 0
                })[0].missNumbers;
                let missNumbersByStats = missNumber.filter(function (item){
                    return item.StatsType === 2
                })

                //Nếu chưa có dữ liệu cho Lô
                if (missNumbersByStats.length !== 0){
                    legend.Commentator.NumberTimesMissing = angular.copy(missNumbersByStats[0].Data);
                    legend.Commentator.NumberTimesMissing.map(function (item){
                        delete item.MaxTimesMissing
                        delete item.AvgTimesMissing
                        delete item.LastTimesMissing
                        delete item.TimesDrawn
                        delete item.high
                    })
                    Lotus.Lottery789.ResultStats.NothernResultCommentator.init(legend.Commentator);
                    // console.log('missNumbersByStats', legend.Commentator)
                }else{
                    legend.getMissingNumbers({GameType: 0, StatsType: 2})
                }
                // console.log('missNumbersByStats: ', legend.Commentator)
            }else{
                $timeout(function (){
                    legend.NorthernResultCommentator();
                }, 2000)
            }
        }

        function ResultCommentator(data){
            // console.log(legend.resultTables)
            let lastResult = data.Result.slice(-2);
            let result = Lotus.Lottery789.ResultStats.NothernResultCommentator.comment({Result: lastResult})
            // console.log(result)
            legend.commentText = result !== null ? result.Number + ': ' + result.Comments.join(" - ") : '';
        }

    }

    function legendCostMoney($rootScope) {
        return function (input) {
            let betTimesArr = [
                {GameType: 0, BetType: 5, times: 10},
                {GameType: 0, BetType: 6, times: 4},
            ];
            let betTimesObj = betTimesArr.filter(function (item) {
                return item.GameType === input.GameType && item.BetType === input.BetType
            });
            let betTimes = betTimesObj.length ? betTimesObj[0].times : 1;
            var output = 0;
            let payout = $rootScope.LegendParameters.filter(function (my) {
                return my.GameType === input.GameType && my.BetType === input.BetType
            })[0].Payouts;
            angular.forEach(input.Items, function (item) {
                if (input.GameType === 0 && input.BetType === 5) {
                    output += item.Point * (item.Price - payout) / 10
                } else if (input.GameType === 0 && input.BetType === 6) {
                    output += item.Point * (item.Price - payout)
                } else {
                    output += item.Price * item.Point
                }
            });
            if (input.GameType === 0 && input.BetType === 5) {
                return output
            } else {
                return output * betTimes
            }
        }
    }
})();
(function (){
    'use strict';
    angular
        .module('app.presidential', [])
        .config(config);

    function config($stateProvider, msApiProvider){
        // State
        $stateProvider
            .state('app.presidential', {
                url    : '/presidential',
                views  : {
                    'main@': {
                        templateUrl: 'app/core/layouts/content-general.html',
                        controller : 'MainController as one'
                    },
                    'toolbar@app.presidential'   : {
                        templateUrl: 'app/toolbar/layouts/vertical-navigation/toolbar.html',
                        controller : 'ToolbarController as vm'
                    },
                    'navigation@app.presidential': {
                        templateUrl: 'app/navigation/layouts/vertical-navigation/navigation.html',
                        controller : 'NavigationController as vm'
                    },
                    'accountPanel@app.presidential': {
                        templateUrl: 'app/account-panel/account-panel.html',
                        controller : 'accountPanelCtrl as vm'
                    },
                    'content@app.presidential': {
                        templateUrl: 'app/main/presidential/presidential.html',
                        controller : 'presidentialCtrl as vm'
                    }
                },
                bodyClass: 'presidential'
            });
    }
})();
(function (){
    'use strict';
    angular.module('app.presidential').controller('presidentialCtrl', presidentialCtrl).filter('candidate', candidate);
    function candidate() {
        return function (input) {
            if (input === 0) {
                return 'Đảng dân chủ'
            } else if (input === 1) {
                return 'Đảng cộng hoà'
            } else if (input === 10) {
                return 'Joe Biden'
            } else if (input === 11) {
                return 'Kamala Harris'
            }else if (input === 20) {
                return 'Donald Trump'
            }else if (input === 21) {
                return 'Mike Pence'
            }else if (input === 30) {
                return 'Ứng viên khác'
            } else {
                return input
            }
        }
    }
    function presidentialCtrl($rootScope, $scope, $state, $timeout, $interval, $mdDialog, $mdMedia, $filter, message){
        let vm = this;
        vm.candidatePairing = candidatePairing;
        vm.chooseCandidate = chooseCandidate;
        vm.eventHistory = eventHistory;
        let order = [1,0,20,10,21,11,30];
        $scope.$mdMedia = $mdMedia;
        let interval;

        $scope.$on("$destroy", function() {
            $interval.cancel(interval);
        })

        vm.Candidates = [
            {
                BetType: 1,
                name: "ĐẢNG CỘNG HOÀ",
                pictures: '/assets/images/events/election/Republican.png?v=2',
                Odds: '-'
            },
            {
                BetType: 0,
                name: "ĐẢNG DÂN CHỦ",
                pictures: '/assets/images/events/election/Democratic.png?v=2',
                Odds: '-'
            },
            {
                BetType: 20,
                name: "Donald Trump",
                pictures: '/assets/images/events/election/Donald_Trump.png?v=2',
                Odds: '-'
            },
            {
                BetType: 10,
                name: "Joe Biden",
                pictures: '/assets/images/events/election/Joe_Biden.png?v=2',
                Odds: '-'
            },
            {
                BetType: 21,
                name: "Mike Pence",
                pictures: '/assets/images/events/election/Mike_Pence.png?v=2',
                Odds: '-'
            },
            {
                BetType: 11,
                name: "Kamala Harris",
                pictures: '/assets/images/events/election/Kamala_Harris.png?v=2',
                Odds: '-'
            },
            {
                BetType: 30,
                name: "Ứng viên khác",
                pictures: '/assets/images/events/election/Unknown_Candidate.png?v=2',
                Odds: '-'
            }
        ];

        $timeout(function () {
            if (!$rootScope.isAuthenticated){
                console.log($rootScope.isAuthenticated)
                return;
            }

            Lotus.SenCasino.Games.Politics.Event.getEvent().then(function (response){
                vm.event = response;
                response.Odds.sort(function (a, b) {
                    return order.indexOf(a.BetType) - order.indexOf(b.BetType)
                })
                vm.candidatePairing(response.Odds);
                vm.eventHistory();
            })

            Lotus.SenCasino.Games.Politics.UserGame.getUserGame().then(function (response){
                vm.userGameCandidate = response;
            })

            interval = $interval(function (){
                Lotus.SenCasino.Games.Politics.Odds.getOdds().then(function (response){
                    response.sort(function (a, b) {
                        return order.indexOf(a.BetType) - order.indexOf(b.BetType)
                    })
                    vm.candidatePairing(response)
                })
            }, 20000)
        }, 200)


        vm.histories = [];
        function eventHistory(ltId){
            ltId = ltId === undefined ? '' : ltId;
            let length = 50;
            vm.submitting = true;
            Lotus.SenCasino.Games.Politics.Report.getBetItemsByEvent({
                Event: vm.event.Event,
                LastId: ltId,
                Limit: length}).then(function (response){
                console.log(response)
                vm.histories = vm.histories.concat(response);
                vm.hasRecords = response.length === length;
                vm.lastId = response.length ? response[response.length - 1].Id : '';
                vm.submitting = false;
                $scope.$digest();
            })
        }

        function candidatePairing(odds){
            vm.Candidates.map(function (item){
                let f = odds.filter(function (o){
                    return o.BetType === item.BetType;
                })[0];
                item.Enabled = f.Enabled;
                item.Odds = f.Odds;
                item.Payouts = f.Payouts;
            })
            $scope.$digest();
        }

        function mergeArrayObjects(arr1,arr2){
            return arr1.map(function (item,i){
                if(item.BetType === arr2[i].BetType){
                    return Object.assign({},item,arr2[i])
                }
            })
        }

        function chooseCandidate(item){
            $mdDialog.show({
                locals:{item: item},
                clickOutsideToClose: true,
                controllerAs: 'ctrl',
                templateUrl: 'app/main/presidential/dialog/betting.html',
                controller: chooseCandidateCtrl
            });
            function chooseCandidateCtrl($scope, item){
                $scope.$mdMedia = $mdMedia;
                $scope.cancel = function () {
                    $mdDialog.hide();
                };
                $scope.candidate = item;
                $scope.userGameCandidate = vm.userGameCandidate;
                $scope.betPoint = vm.userGameCandidate.MinBet;
                $scope.confirm = function (){
                    if ($scope.betPoint === null || $scope.betPoint === undefined){
                        message.infoMultiple('Số tiền cược không hợp lệ')
                        return;
                    }
                    if ($scope.betPoint > vm.userGameCandidate.MaxBet || $scope.betPoint  < vm.userGameCandidate.MinBet){
                        message.infoMultiple('Quý khách chỉ được đặt cược với số tiền từ ' + $filter('currency')(vm.userGameCandidate.MinBet, '', 0) + ' đến ' + $filter('currency')(vm.userGameCandidate.MaxBet, '', 0))
                        return;
                    }
                    $scope.submitting = true;
                    Lotus.SenCasino.Games.Politics.GamePlay.play({ BetType: item.BetType, Amount: $scope.betPoint }).then(function (response){
                        $rootScope.User.Balance = response.Balance;
                        vm.histories = [];
                        vm.eventHistory();
                        $timeout(function (){
                            message.show('Đặt cược thành công');
                        }, 100)
                        $scope.submitting = false;
                    }).catch(function (e){
                        $scope.submitting = false;
                        message.infoMultiple(e.message)
                    })
                }
            }
        }
    }
})();

(function (){
    'use strict';

    angular
        .module('app.home', [])
        .config(config);

    /** @ngInject */
    function config($stateProvider, msNavigationServiceProvider, msApiProvider){
        // State
        $stateProvider.state('app.home', {
            url      : '/',
            views    : {
                'main@': {
                    templateUrl: 'app/core/layouts/vertical-navigation.html',
                    controller : 'MainController as one'
                },
                'content@app.home': {
                    templateUrl: 'app/main/home/home.html',
                    controller : 'HomeCtrl as vm'
                },
                'toolbar@app.home'   : {
                    templateUrl: 'app/toolbar/layouts/vertical-navigation/toolbar.html',
                    controller : 'ToolbarController as vm'
                },
                'navigation@app.home': {
                    templateUrl: 'app/navigation/layouts/vertical-navigation/navigation.html',
                    controller : 'NavigationController as vm'
                },
                'accountPanel@app.home': {
                    templateUrl: 'app/account-panel/account-panel.html',
                    controller : 'accountPanelCtrl as vm'
                }
            },
            resolve: {
                aGames: function (msApi){
                    return msApi.resolve('wm-game@get');
                }
            },
            bodyClass: 'one789 home'
        });
        msApiProvider.register('wm-game', ['app/data/games.json']);
        // Navigation

        msNavigationServiceProvider.saveItem('one', {
            title : '',
            group : true,
            weight: 1
        });
        msNavigationServiceProvider.saveItem('one.lottery', {
            title    : 'XỔ SỐ TRUYỀN THỐNG',
            icon     : 'icon-traditional-lottery',
            // group : true,
            weight   : 1
        });
        msNavigationServiceProvider.saveItem('one.lottery.northern', {
            title    : 'Miền Bắc 1',
            weight   : 1
        });
        msNavigationServiceProvider.saveItem('one.lottery.northern.jackpot', {
            title    : 'Đề',
            weight   : 1
        });
        msNavigationServiceProvider.saveItem('one.lottery.northern.jackpot.jackpot', {
            title    : 'Đề',
            state    : 'app.traditional.northern.jackpot',
            stateParams: {
                id: 'home'
            },
            weight   : 1
        });
        msNavigationServiceProvider.saveItem('one.lottery.northern.lotto', {
            title    : 'Lô',
            state    : 'app.traditional.northern.lotto',
            weight   : 2
        });
        // msNavigationServiceProvider.saveItem('one.lottery.northern.parlay', {
        //     title    : 'Lô Xiên',
        //     state    : 'app.traditional.northern.parlay',
        //     weight   : 3
        // });
        msNavigationServiceProvider.saveItem('one.lottery.northern.live', {
            title    : 'Lô Live',
            state    : 'app.traditional.northern.live',
            weight   : 4
        });
        // msNavigationServiceProvider.saveItem('one.lottery.northern.except-jackpot', {
        //     title    : 'Đề trượt',
        //     state    : 'app.traditional.northern.except-jackpot',
        //     weight   : 5
        // });
        // msNavigationServiceProvider.saveItem('one.lottery.northern.except-lotto', {
        //     title    : 'Lô trượt',
        //     state    : 'app.traditional.northern.except-lotto',
        //     weight   : 6
        // });
        // msNavigationServiceProvider.saveItem('one.lottery.northern.head-jackpot', {
        //     title    : 'Đề đầu',
        //     state    : 'app.traditional.northern.head-jackpot',
        //     weight   : 7
        // });
        // msNavigationServiceProvider.saveItem('one.lottery.northern.lotto-head', {
        //     title    : 'Lô Đầu',
        //     state    : 'app.traditional.northern.lotto-head',
        //     weight   : 8
        // });
        msNavigationServiceProvider.saveItem('one.lottery.northern.jackpot.jackpot-first', {
            title    : 'Đề giải 1',
            state    : 'app.traditional.northern.jackpot-first',
            weight   : 9
        });
        msNavigationServiceProvider.saveItem('one.lottery.northern.jackpot.jackpot-head-first', {
            title    : 'Đề đầu giải 1',
            state    : 'app.traditional.northern.jackpot-head-first',
            weight   : 10
        });
        msNavigationServiceProvider.saveItem('one.lottery.northern.jackpot.jackpot-caishen', {
            title    : 'Đề Thần Tài',
            state    : 'app.traditional.northern.jackpot-caishen',
            weight   : 11
        });
        msNavigationServiceProvider.saveItem('one.lottery.northern.jackpot.jackpot-head-caishen', {
            title    : 'Đề Đầu Thần Tài',
            state    : 'app.traditional.northern.jackpot-head-caishen',
            weight   : 12
        });
        msNavigationServiceProvider.saveItem('one.lottery.northern-2nd', {
            title    : 'Miền Bắc 2',
            weight   : 2
        });
        msNavigationServiceProvider.saveItem('one.lottery.northern-2nd.quick-bet', {
            title    : 'Cược nhanh',
            state    : 'app.traditional.northern-2nd.quick-bet',
            hidden   : function () {
                return (screen.width < 600)
            },
            weight   : 1
        });
        msNavigationServiceProvider.saveItem('one.lottery.northern-2nd.2d', {
            title    : '2D',
            state    : 'app.traditional.northern-2nd.2d.dau',
            weight   : 1
        });
        // msNavigationServiceProvider.saveItem('one.lottery.northern-2nd.2d.dau', {
        //     title    : '2D Đầu',
        //     state    : 'app.traditional.northern-2nd.2d.dau',
        //     weight   : 1
        // });
        // msNavigationServiceProvider.saveItem('one.lottery.northern-2nd.2d.duoi', {
        //     title    : '2D Đuôi',
        //     state    : 'app.traditional.northern-2nd.2d.duoi',
        //     weight   : 2
        // });
        // msNavigationServiceProvider.saveItem('one.lottery.northern-2nd.2d.27lo', {
        //     title    : '2D 27 Lô',
        //     state    : 'app.traditional.northern-2nd.2d.27lo',
        //     weight   : 3
        // });
        msNavigationServiceProvider.saveItem('one.lottery.northern-2nd.2d.row-bet', {
            title    : 'Kéo hàng',
            state    : 'app.traditional.northern-2nd.2d.row-bet',
            hidden   : function () {
                return (screen.width < 600)
            },
            weight   : 4
        });
        msNavigationServiceProvider.saveItem('one.lottery.northern-2nd.3d', {
            title    : '3D',
            state    : 'app.traditional.northern-2nd.3d.dau',
            weight   : 2
        });
        // msNavigationServiceProvider.saveItem('one.lottery.northern-2nd.3d.dau', {
        //     title    : '3D Đầu',
        //     state    : 'app.traditional.northern-2nd.3d.dau',
        //     weight   : 1
        // });
        // msNavigationServiceProvider.saveItem('one.lottery.northern-2nd.3d.duoi', {
        //     title    : '3D Đuôi',
        //     state    : 'app.traditional.northern-2nd.3d.duoi',
        //     weight   : 2
        // });
        // msNavigationServiceProvider.saveItem('one.lottery.northern-2nd.3d.23lo', {
        //     title    : '3D 23 Lô',
        //     state    : 'app.traditional.northern-2nd.3d.23lo',
        //     weight   : 3
        // });
        msNavigationServiceProvider.saveItem('one.lottery.northern-2nd.4d', {
            title    : '4D',
            state    : 'app.traditional.northern-2nd.4d.duoi',
            weight   : 3
        });
        // msNavigationServiceProvider.saveItem('one.lottery.northern-2nd.4d.duoi', {
        //     title    : '4D Đuôi',
        //     state    : 'app.traditional.northern-2nd.4d.duoi',
        //     weight   : 1
        // });
        // msNavigationServiceProvider.saveItem('one.lottery.northern-2nd.4d.20lo', {
        //     title    : '4D 20 Lô',
        //     state    : 'app.traditional.northern-2nd.4d.20lo',
        //     weight   : 2
        // });
        // msNavigationServiceProvider.saveItem('one.lottery.northern-2nd.parlay', {
        //     title    : 'Lô Xiên',
        //     state    : 'app.traditional.northern-2nd.parlay',
        //     weight   : 3
        // });
        // msNavigationServiceProvider.saveItem('one.lottery.northern-2nd.live', {
        //     title    : 'Lô Live',
        //     state    : 'app.traditional.northern-2nd.live',
        //     weight   : 4
        // });
        msNavigationServiceProvider.saveItem('one.lottery.southern', {
            title    : 'Miền Nam',
            weight   : 3
        });
        msNavigationServiceProvider.saveItem('one.lottery.southern.quick-bet', {
            title    : 'Cược nhanh',
            state    : 'app.traditional.southern.quick-bet',
            hidden   : function () {
                return (screen.width < 600)
            },
            weight   : 1
        });
        msNavigationServiceProvider.saveItem('one.lottery.southern.2d', {
            title    : '2D',
            state    : 'app.traditional.southern.2d.dau',
            weight   : 2
        });
        // msNavigationServiceProvider.saveItem('one.lottery.southern.2d.dau', {
        //     title    : '2D Đầu',
        //     state    : 'app.traditional.southern.2d.dau',
        //     weight   : 1
        // });
        // msNavigationServiceProvider.saveItem('one.lottery.southern.2d.duoi', {
        //     title    : '2D Đuôi',
        //     state    : 'app.traditional.southern.2d.duoi',
        //     weight   : 2
        // });
        // msNavigationServiceProvider.saveItem('one.lottery.southern.2d.18lo', {
        //     title    : '2D 18 Lô',
        //     state    : 'app.traditional.southern.2d.18lo',
        //     weight   : 3
        // });
        // msNavigationServiceProvider.saveItem('one.lottery.southern.2d.18lo-head', {
        //     title    : '2D 18Lô Đầu',
        //     state    : 'app.traditional.southern.2d.18lo-head',
        //     weight   : 3
        // });
        msNavigationServiceProvider.saveItem('one.lottery.southern.2d.row-bet', {
            title    : 'Kéo hàng',
            state    : 'app.traditional.southern.2d.row-bet',
            hidden   : function () {
                return (screen.width < 600)
            },
            weight   : 4
        });
        msNavigationServiceProvider.saveItem('one.lottery.southern.3d', {
            title    : '3D',
            state    : 'app.traditional.southern.3d.dau',
            weight   : 3
        });
        // msNavigationServiceProvider.saveItem('one.lottery.southern.3d.dau', {
        //     title    : '3D Đầu',
        //     state    : 'app.traditional.southern.3d.dau',
        //     weight   : 1
        // });
        // msNavigationServiceProvider.saveItem('one.lottery.southern.3d.duoi', {
        //     title    : '3D Đuôi',
        //     state    : 'app.traditional.southern.3d.duoi',
        //     weight   : 2
        // });
        // msNavigationServiceProvider.saveItem('one.lottery.southern.3d.17lo', {
        //     title    : '3D 17 Lô',
        //     state    : 'app.traditional.southern.3d.17lo',
        //     weight   : 3
        // });
        // msNavigationServiceProvider.saveItem('one.lottery.southern.3d.7lo', {
        //     title    : '3D 7 Lô',
        //     state    : 'app.traditional.southern.3d.7lo',
        //     weight   : 4
        // });
        msNavigationServiceProvider.saveItem('one.lottery.southern.4d', {
            title    : '4D',
            state    : 'app.traditional.southern.4d.duoi',
            weight   : 4
        });
        // msNavigationServiceProvider.saveItem('one.lottery.southern.4d.duoi', {
        //     title    : '4D Đuôi',
        //     state    : 'app.traditional.southern.4d.duoi',
        //     weight   : 1
        // });
        // msNavigationServiceProvider.saveItem('one.lottery.southern.4d.16lo', {
        //     title    : '4D 16 Lô',
        //     state    : 'app.traditional.southern.4d.16lo',
        //     weight   : 2
        // });
        msNavigationServiceProvider.saveItem('one.lottery.southern.parlay', {
            title    : 'Lô Xiên',
            state    : 'app.traditional.southern.parlay.pair-2',
            weight   : 5
        });
        // msNavigationServiceProvider.saveItem('one.lottery.southern.live', {
        //     title    : '2D 18Lô Live',
        //     state    : 'app.traditional.southern.live',
        //     weight   : 6
        // });
        // msNavigationServiceProvider.saveItem('one.lottery.southern.parlay.pair-2', {
        //     title    : 'Xiên 2',
        //     state    : 'app.traditional.southern.parlay.pair-2',
        //     weight   : 1
        // });
        // msNavigationServiceProvider.saveItem('one.lottery.southern.parlay.pair-3', {
        //     title    : 'Xiên 3',
        //     state    : 'app.traditional.southern.parlay.pair-3',
        //     weight   : 2
        // });
        // msNavigationServiceProvider.saveItem('one.lottery.southern.parlay.pair-4', {
        //     title    : 'Xiên 4',
        //     state    : 'app.traditional.southern.parlay.pair-4',
        //     weight   : 3
        // });
        msNavigationServiceProvider.saveItem('one.lottery.southern.7lo', {
            title    : '7 Lô',
            state    : 'app.traditional.southern.7lo',
            hidden   : function () {
                return (screen.width < 600)
            },
            weight   : 6
        });
        msNavigationServiceProvider.saveItem('one.lottery.18ab', {
            title    : 'Xiên 18A+B',
            state    : 'app.traditional.18ab',
            weight   : 4
        });
        msNavigationServiceProvider.saveItem('one.lottery.manual', {
            title    : 'Nhập tay',
            state    : 'app.traditional.manual',
            weight   : 5
        });

        msNavigationServiceProvider.saveItem('one.casino', {
            title    : 'Xóc đĩa 789',
            icon     : 'icon-sedie-789',
            state    : 'app.casino',
            // stateParams: {
            //     area: 100
            // },
            weight   : 3,
        });
        //Nếu state ở Navigation menu trùng với menu ở xổ số. Khi chọn đề ở xổ số thì menu sẽ tự cuộn lại. Phải thêm 1 params để giải quyết vấn đề này/

        msNavigationServiceProvider.saveItem('one.saba', {
            title    : 'BONG88',
            icon     : 'icon-saba',
            // badge      : {
            //     content: 'New',
            //     color  : 'red'
            // },
            weight   : 5
        });
        msNavigationServiceProvider.saveItem('one.saba.sport', {
            title: 'Bóng đá',
            state : 'app.saba',
            stateParams: {
                game: 'sport'
            }
        });
        msNavigationServiceProvider.saveItem('one.saba.sabaclub', {
            title: 'Saba.Club',
            state : 'app.saba',
            stateParams: {
                game: 'sabaclub'
            }
        });
        msNavigationServiceProvider.saveItem('one.saba.esports', {
            title: 'Saba E-Sports',
            state : 'app.saba',
            stateParams: {
                game: 'esports'
            }
        });
        msNavigationServiceProvider.saveItem('one.saba.keno', {
            title: 'Keno',
            state : 'app.saba',
            stateParams: {
                game: 'keno'
            }
        });
        msNavigationServiceProvider.saveItem('one.saba.kenolottery', {
            title: 'Lottery',
            state : 'app.saba',
            stateParams: {
                game: 'kenolottery'
            }
        });
        msNavigationServiceProvider.saveItem('one.saba.casino', {
            title: 'RNG',
            state : 'app.saba',
            stateParams: {
                game: 'casino'
            }
        });

        msNavigationServiceProvider.saveItem('one.announcements', {
            title    : 'THÔNG BÁO',
            icon     : 'icon-tile-four',
            state    : 'app.announcements.threads',
            weight   : 5,
            stateParams: {
                filter: 'normal'
            },
        });
        msNavigationServiceProvider.saveItem('one.lotto-result', {
            title    : 'KẾT QUẢ XỔ SỐ',
            icon     : 'icon-tile-four',
            weight   : 6
        });
        msNavigationServiceProvider.saveItem('one.lotto-result.traditional', {
            title: 'Xổ số truyền thống',
            state : 'app.results.traditional'
        });
        // msNavigationServiceProvider.saveItem('one.lotto-result.legendary', {
        //     title: 'Xổ số 789',
        //     state : 'app.results.legendary'
        // });

    }

})();
(function (){
    'use strict';

    angular
        .module('app.home')
        .controller('HomeCtrl', HomeCtrl);

    function HomeCtrl($scope, $rootScope, $mdSidenav, $mdMedia, $state, $location, $window, $anchorScroll, $timeout, aGames, message){
        let vm = this;
        vm.aGames = aGames.data;
        vm.$mdMedia = $mdMedia;

        if ($location.host() === '41592.net' || $location.host() === 'www.41592.net'){
            $state.go('app.wiki.Main_Page')
        }

        vm.gotoTraditional = gotoTraditional;
        vm.gotoLegendary = gotoLegendary;
        vm.gotoSaba = gotoSaba;
        vm.gotoCasino = gotoCasino;
        vm.toggleSidenav = toggleSidenav;
        vm.thisYear = moment().format('YYYY');

        angular.element(document.querySelector('#home')).bind('scroll', function(){
            vm.offsetToTop = document.querySelector('#home').scrollTop > 30;
            $scope.$digest();
        });

        function toggleSidenav(sidenavId){
            $mdSidenav(sidenavId).toggle();
        }

        function gotoTraditional() {
            $state.go('app.traditional.northern.jackpot')
        }
        function gotoCasino() {
            $state.go('app.casino')
        }
        function gotoLegendary() {
            // $state.go('app.legendary.northern.jackpot')
        }
        function gotoSaba() {
            $state.go('app.saba')
        }


    }
})();
(function (){
    'use strict';

    angular
        .module('app.auth')
        .controller('authCtrl', authCtrl);
    /** @ngInject */
    function authCtrl($scope, $state, $mdSidenav, $mdMedia, $location, network, message){
        let vm = this;
        vm.showPassword = showPassword;
        vm.show = false;
        vm.showText = 'SHOW';
        vm.login = login;
        function showPassword() {
            vm.show = !vm.show;
            vm.showText = vm.show ? 'HIDE' : 'SHOW'
        }

        function login() {
            sessionStorage.removeItem('lastClick')
            vm.submitting = true;
            network.User.authenticate(vm.form).then(function (response) {
                vm.submitting = false;
                if (Object.keys(response).length === 0){
                    $state.go('app.auth.agreement');
                }else if(response.RequireAction === 'NEW_PASSWORD_REQUIRED'){
                    $state.go('app.auth.set-password');
                } else if (response.RequireAction === 'SOFTWARE_TOKEN_MFA') {
                    $state.go('app.auth.otp');
                }
                $scope.$digest();
            }).catch(function (error) {
                vm.submitting = false;
                if (error.code === 'UserLambdaValidationException' || error.code === 'UserBlockedException'){
                    message.show('Tài khoản của quý khách đang tạm ngừng phục vụ')
                }else if (error.code === 'NotAuthorizedException' || error.code === 'UserNotFoundException'){
                    message.show('Tên người dùng hoặc mật khẩu không chính xác')
                }else{
                    message.show(error.message);
                }
            })
        }

    }
})();
(function (){
    'use strict';
    angular
        .module('app.game', [])
        .config(config);

    function config($stateProvider, msApiProvider){
        // State
        $stateProvider
            .state('app.game', {
                url    : '/live-casino/:id/:play',
                views  : {
                    'main@':{
                        templateUrl: 'app/core/layouts/content-game-play.html',
                        controller : 'MainController as vm'
                    },
                    'toolbar@app.game'   : {
                        templateUrl: 'app/toolbar/layouts/vertical-navigation/toolbar.html',
                        controller : 'ToolbarController as vm'
                    },
                    'navigation@app.game': {
                        templateUrl: 'app/navigation/layouts/vertical-navigation/navigation.html',
                        controller : 'NavigationController as vm'
                    },
                    'content@app.game': {
                        templateUrl: 'app/main/game/game.html',
                        controller : 'gamePlayController as vm'
                    },
                    'accountPanel@app.game': {
                        templateUrl: 'app/account-panel/account-panel.html',
                        controller : 'accountPanelCtrl as vm'
                    }
                },
                resolve: {
                    gameData: function (msApi){
                        return msApi.resolve('games@get');
                    },
                    Maintenance: function (msApi) {
                        return msApi.resolve('Maintenance@get');
                    }
                },
                bodyClass: 'gaming'
            });
        msApiProvider.register('games', ['app/data/games.json']);
        msApiProvider.register('Maintenance', ['app/data/wm-maintain.json']);
    }
})();
(function (){
    'use strict';
    angular.module('app.game').controller('gamePlayController', gamePlayController);
    function gamePlayController($rootScope, $scope, $state, $mdMedia, $interval, $timeout, $document, $stateParams, $sce, gameData, msUtils, message, Fullscreen, Analytics, Maintenance, $location){
        let vm = this;
        $scope.$mdMedia = $mdMedia;

        // vm.Maintenance = Maintenance.data;
        // let time = moment(),
        //     beforeTime = moment(vm.Maintenance.start, "HH: mm"),
        //     afterTime = moment(vm.Maintenance.end, "HH: mm");
        // vm.isWMMaintenance = time.isBetween(beforeTime, afterTime) && moment().isoWeekday() === vm.Maintenance.day;

        vm.loadGameUrl = loadGameUrl;
        vm.loadFreeGameUrl = loadFreeGameUrl;
        vm.init = init;
        vm.gameName = $stateParams.id;

        let game = $.grep(gameData.data, function (g) {
            return g.interName === vm.gameName
        });

        if (game.length){
            $rootScope.gameName = game[0].name;
            vm.gameInfo = game[0];
            vm.gameStyle = {"background": "url("+ vm.gameInfo.cover +") 50% 50% / cover no-repeat fixed"};
        }else{
            $rootScope.gameName = 'WM Casino';
            vm.gameStyle = {"background": "url(assets/images/backgrounds/crab.jpg) 50% 50% / cover no-repeat fixed"};
        }

        $timeout(function () {
            vm.init();
        }, 300)
        function init(){
            if ($rootScope.isAuthenticated){
                if ($stateParams.play === 'free'){
                    $state.go('app.game', {'id': $stateParams.id, 'play': ''})
                }else{
                    vm.loadGameUrl();
                    vm.introduction = false;
                }
            }else{
                if ($stateParams.play === 'free'){
                    //Free Play
                    vm.introduction = false;
                    vm.loadFreeGameUrl();
                }else{
                    vm.introduction = true;
                }
            }
        }
        function loadFreeGameUrl() {
            // let data = {ReturnUrl: "http://one789.net"};
            let data = {ReturnUrl: "https://" + $location.host()};
            if (vm.gameInfo !== undefined){
                data.AccessGame = vm.gameInfo.id;
            }
            vm.loadingGame = true;
            vm.preHasGame = false;
            Lotus.Public.WMCasino.GamePlay.loginGame(data).then(function(response){
                vm.preHasGame = true;
                $timeout(function () {vm.loadingGame = false}, 5000);
                vm.currentProjectUrl = $sce.trustAsResourceUrl(response.Url);
            }).catch(function (error) {
                vm.isWMMaintenance = true;
                vm.MaintenanceMessage = error.message;
                message.show(error.message);
            })

            Analytics.trackEvent('WM-CASINO', 'Free-Play');
        }
        function loadGameUrl() {
            if ($rootScope.User !== undefined){
                if ( !msUtils.exists(100, $rootScope.User.Products) ){
                    message.show('Tài khoản của quý khách không được phép chơi Casino. Quý khách vui lòng liên hệ đại lý để có thêm chi tiết');
                    return;
                }
                // let data = {ReturnUrl: "http://one789.net"};
                let data = {ReturnUrl: "https://" + $location.host()};
                if (vm.gameInfo !== undefined){
                    data.AccessGame = vm.gameInfo.id;
                }
                vm.loadingGame = true;
                vm.preHasGame = false;
                Lotus.WMCasino.GamePlay.loginGame(data).then(function (response) {
                    vm.preHasGame = true;
                    $timeout(function () {vm.loadingGame = false}, 5000);
                    vm.currentProjectUrl = $sce.trustAsResourceUrl(response.Url);
                    Analytics.trackEvent('WM-CASINO', 'ENTER-GAME', $rootScope.User.Username);
                }).catch(function (error) {
                    Analytics.trackEvent('WM-CASINO', 'LoadUrlError', $rootScope.User.Username);
                    if (error.code === 'RetryException'){
                        vm.message = 'Quý khách vui lòng chờ trong giây lát';
                        $timeout(function () {
                            if ($state.current.name === 'app.game'){
                                vm.loadGameUrl()
                            }
                        }, 1500)
                    }else{
                        vm.isWMMaintenance = true;
                        vm.MaintenanceMessage = error.message;
                        message.show(error.message);
                    }
                });
            }else{
                $timeout(function () {
                    vm.loadGameUrl()
                }, 1000)
            }
        }
    }
})();

(function (){
    'use strict';

    angular
        .module('app.account')
        .controller('myAccountCtrl', myAccountCtrl);

    /** @ngInject */
    function myAccountCtrl($scope, $rootScope, $timeout, $state, network, message){
        $scope.$on('$viewContentAnimationEnded', function (event){
            if ( event.targetScope.$id === $scope.$id ){
                $rootScope.$broadcast('msSplashScreen::remove');
            }
        });
        $scope.$on('$stateChangeSuccess', function (){
            $timeout(function () {
                if ($rootScope.User === undefined){
                    $state.go('app.home')
                }
            }, 1000)
        })

        if ($rootScope.currentTerm === undefined){
            Lotus.Lottery.Term.current().then(function (resp) {
                $rootScope.currentTerm = resp;
                $rootScope.termName = resp[0].Term;
                network.Games.GameSetting.getGameSettings().then(function (settings) {

                    settings.sort(function (a, b) {
                        return a.GameType - b.GameType || a.BetType - b.BetType;
                    });
                    // console.log(settings)
                    $timeout(function () {
                        network.Games.GameSetting.getGamePayouts().then(function (payouts) {
                            payouts.sort(function (a, b) {
                                return a.GameType - b.GameType || a.BetType - b.BetType;
                            });
                            // console.log(payouts)
                            $rootScope.myParameters = [];
                            angular.forEach(settings, function (item, i) {
                                // console.log(item, i)
                                $rootScope.myParameters.push(Object.assign({}, item, payouts[i]))
                            });
                            // console.log($rootScope.myParameters)
                        })
                    }, 100)
                })
            }).catch(function (error) {
                message.show(error.message)
            })
        }
    }
})();
(function () {
    'use strict';
    angular.module('app.core')
        .service('casinoConfig', function ($mdDialog, $mdToast) {
            this.maxBase = function (id){
                let settings = {
                    1: 10000,
                    2: 20000,
                    3: 50000,
                    4: 100000,
                    5: 200000,
                    6: 500000,
                    7: 1000000,
                    8: 2000000,
                    9: 5000000,
                    10: 10000000,
                    11: 20000000,
                    12: 50000000,
                    13: 100000000
                }
                return settings[id];
            }
            this.configToken = function (){
                return {
                    1: {label: '10K - 1M', selected: false, token: ['10k', '20k', '50k', '100k', '200k', '500k', '1m']},
                    2: {label: '20K - 2M', selected: false, token: ['20k', '50k', '100k', '200k', '500k', '1m', '2m']},
                    3: {label: '50K - 5M', selected: false, token: ['50k', '100k', '200k', '500k', '1m', '2m', '5m']},
                    4: {label: '100K - 10M', selected: false, token: ['100k', '200k', '500k', '1m', '2m', '5m', '10m']},
                    5: {label: '200K - 20M', selected: false, token: ['200k', '500k', '1m', '2m', '5m', '10m', '20m']},
                    6: {label: '500K - 50M', selected: false, token: ['500k', '1m', '2m', '5m', '10m', '20m', '50m']},
                    7: {label: '1M - 100M', selected: false, token: ['1m', '2m', '5m', '10m', '20m', '50m', '100m']},
                    8: {label: '2M - 200M', selected: false, token: ['2m', '5m', '10m', '20m', '50m', '100m', '200m']},
                    9: {label: '5M - 500M', selected: false, token: ['5m', '10m', '20m', '50m', '100m', '200m', '500m']},
                    10: {label: '10M - 1B', selected: false, token: ['10m', '20m', '50m', '100m', '200m', '500m', '1b']},
                    11: {label: '20M - 2B', selected: false, token: ['20m', '50m', '100m', '200m', '500m', '1b', '2b']},
                    12: {label: '50M - 5B', selected: false, token: ['50m', '100m', '200m', '500m', '1b', '2b', '5b']},
                    13: {label: '100M - 10B', selected: true, token: ['100m', '200m', '500m', '1b', '2b', '5b', '10b']}
                }
            }
            this.configMoney = function () {
                return [
                    {label: '10k', money: 10000},
                    {label: '20k', money: 20000},
                    {label: '50k', money: 50000},
                    {label: '100k', money: 100000},
                    {label: '200k', money: 200000},
                    {label: '500k', money: 500000},
                    {label: '1m', money: 1000000},
                    {label: '2m', money: 2000000},
                    {label: '5m', money: 5000000},
                    {label: '10m', money: 10000000},
                    {label: '20m', money: 20000000},
                    {label: '50m', money: 50000000},
                    {label: '100m', money: 100000000},
                    {label: '200m', money: 200000000},
                    {label: '500m', money: 500000000},
                    {label: '1b', money: 1000000000},
                    {label: '2b', money: 2000000000},
                    {label: '5b', money: 5000000000},
                    {label: '10b', money: 10000000000},
                ];
            }
            this.generateTokenByIndex = function (betValue, _tokenArr) {
                let aTokenPile = [];
                let iValueRest;
                let iCont = _tokenArr.length-1;
                let iCurMaxTokenStake = _tokenArr[iCont].money;     // Token lớn nhất
                do{
                    iValueRest = betValue % iCurMaxTokenStake; // Lấy phần dư
                    iValueRest = this.roundDecimal(iValueRest,1);
                    let iDivisionWithPrecision = betValue/iCurMaxTokenStake;
                    let iDivision = Math.floor(iDivisionWithPrecision);           //Lấy phần nguyên
                    for(let i=0;i<iDivision;i++){
                        aTokenPile.push(this.getTokenIndexByValue(iCurMaxTokenStake, _tokenArr));
                    }
                    iCont--;
                    iCurMaxTokenStake = iCont > -1 ? _tokenArr[iCont].money : undefined;
                    betValue = iValueRest;
                }while( iValueRest > 0 && iCont > -1);
                aTokenPile.sort(function (a, b){return a - b})
                return aTokenPile;
            }
            this.getTokenIndexByValue = function (iValue, _tokenArr){
                let iIndex=0;
                for(let i=0; i < _tokenArr.length;i++){
                    if(iValue === _tokenArr[i].money){
                        iIndex=i;
                        break;
                    }
                }
                return iIndex;
            }
            this.roundDecimal = function (num, precision){
                let decimal = Math.pow(10, precision);
                return Math.round(decimal* num) / decimal;
            }
        })
})();

Number.prototype.formatMoney = function(c, d, t){
    let n = this;
    c = isNaN(c = Math.abs(c)) ? 0 : c,
        d = d === undefined ? "." : d,
        t = t === undefined ? "," : t,
        s = n < 0 ? "-" : "",
        i = String(parseInt(n = Math.abs(Number(n) || 0).toFixed(c))),
        j = (j = i.length) > 3 ? j % 3 : 0;
    return s + (j ? i.substr(0, j) + t : "") + i.substr(j).replace(/(\d{3})(?=\d)/g, "$1" + t) + (c ? d + Math.abs(n - i).toFixed(c).slice(2) : "");
};
Number.prototype.formatBetType = function () {
    let n = this;
    let output;
    if (Number(n) === 0){
        output = 'Chẵn'
    }else if (Number(n) === 1){
        output = 'Lẻ'
    }else if (Number(n) === 2){
        output = '4 Đỏ'
    }else if (Number(n) === 3){
        output = '4 Trắng'
    }else if (Number(n) === 4){
        output = '1 Đỏ'
    }else if (Number(n) === 5){
        output = '3 Đỏ'
    }
    return output
};
(function (){
    'use strict';
    angular.module('app.casino').controller('casinoController', casinoController);
    function casinoController($rootScope, $scope, $state, $location, $mdMedia, $interval, $timeout, $document, $stateParams, $sce, gameData, msUtils, message, Fullscreen){
        let vm = this;
        $scope.$mdMedia = $mdMedia;
        let area = $stateParams.area === undefined ? 100 : $stateParams.area;
        // console.log($stateParams);

        // vm.Maintenance = Maintenance.casino789;
        // let time = moment(),
        //     beforeTime = moment(vm.Maintenance.start, "HH: mm"),
        //     afterTime = moment(vm.Maintenance.end, "HH: mm");
        // vm.isWMMaintenance = time.isBetween(beforeTime, afterTime) && moment().isoWeekday() === vm.Maintenance.day;

        // vm.isWMMaintenance = true;
        vm.gameStyle = {"background": "url(assets/images/backgrounds/crab.jpg) 50% 50% / cover no-repeat fixed"};
        $rootScope.gameName = '789 Casino';
        if ($location.host() === 'localhost'){
            vm.url = 'http://localhost:3006/?area=' +area
        }else{
            vm.url = 'https://' + $location.host() + '/xocdia/index.html?area=' + area
        }
        vm.currentProjectUrl = $sce.trustAsResourceUrl(vm.url);
    }
})();
(function (){
    'use strict';
    angular
        .module('app.announcements',[]).config(config);

    /** @ngInject */
    function config($stateProvider){
        // State
        $stateProvider
            .state('app.announcements', {
                abstract: true,
                url     : '/announcements'
            })
            .state('app.announcements.threads', {
                url      : '/:filter',
                views    : {
                    'content@app': {
                        templateUrl: 'app/main/announcements/announcements.html',
                        controller : 'announcementsCtrl as vm'
                    },
                    'menu-account@app': {
                        templateUrl: 'app/main/announcements/announcements.menu.html'
                    },
                },
                params   : {
                    type: {
                        value : null,
                        squash: true
                    }
                },
                bodyClass: 'announcements'
            })
            .state('app.announcements.threads.thread', {
                url      : '/:threadId',
                bodyClass: 'announcements'
            });
    }
})();
(function (){
    'use strict';
    angular
        .module('app.announcements')
        .controller('announcementsCtrl', announcementsCtrl);

    /** @ngInject */
    function announcementsCtrl($scope, $rootScope, $document, $mdDialog, $mdMedia, $mdSidenav, $state, $timeout, msApi, network) {
        var vm = this;
        $scope.$mdMedia = $mdMedia;
        vm.loadAnnouncements = loadAnnouncements;

        vm.openThread = openThread;
        vm.closeThread = closeThread;

        vm.readDefaultThread = readDefaultThread;


        vm.currentFilter = {
            type  : $state.params.type,
            filter: $state.params.filter
        };

        if ($state.params.filter === 'normal'){
            vm.category = 1
        }else if ($state.params.filter === 'special'){
            vm.category = 2
        }else if ($state.params.filter === 'system'){
            vm.category = 0
        }else if ($state.params.filter === 'personal'){
            vm.category = 3
        }

        vm.From = moment().subtract(1, 'year');
        vm.To = moment().add(1, 'day');

        vm.threads = [];
        vm.loadAnnouncements();
        function loadAnnouncements(){
            vm.loadingThreads = true;

            if ($rootScope.isAuthenticated){
                let data = {
                    From: moment(vm.From).format('YYYY-MM-DD'),
                    To: moment(vm.To).format('YYYY-MM-DD'),
                    Limit: 100,
                    Category: vm.category,
                    LastId: ''
                };
                network.Communication.Notification.getNotificationsByCategory(data).then(function (response) {
                    vm.threads = response;
                    $timeout(function () {
                        vm.loadingThreads = false
                    }, 1000);
                    $scope.$digest();
                    vm.readDefaultThread();
                })
            }else{
                network.Public.Communication.Notification.latest().then(function (response) {
                    vm.threads = response.filter(function (category) {
                        return category.Category === vm.category
                    });
                    $timeout(function () {
                        vm.loadingThreads = false
                    }, 1000);
                    $scope.$digest();
                    vm.readDefaultThread();
                })
            }
        }

        function readDefaultThread() {
            // Open the thread if needed
            if ( $state.params.threadId ){
                for ( var i = 0; i < vm.threads.length; i++ ){
                    if ( vm.threads[i].Id === $state.params.threadId ){
                        vm.openThread(vm.threads[i]);
                        break;
                    }
                }
            }
        }

        function openThread(thread) {
            network.Communication.Notification.read({Id: thread.Id}).then(function (response) {
                thread.Read = true;
                $scope.$digest();
            });
            // Assign thread as the current thread
            vm.currentThread = thread;
            // Update the state without reloading the controller
            $state.go('app.announcements.threads.thread', {threadId: thread.Id}, {notify: false});
        }
        /**
         * Close thread
         */
        function closeThread(){
            vm.currentThread = null;
            // Update the state without reloading the controller
            $state.go('app.announcements.threads', {
                type  : vm.currentFilter.type,
                filter: vm.currentFilter.filter
            }, {notify: false});
        }
    }
})();
(function ()
{
    'use strict';

    angular
        .module('app.core')
        .controller('MsThemeOptionsController', MsThemeOptionsController)
        .directive('msThemeOptions', msThemeOptions);

    /** @ngInject */
    function MsThemeOptionsController($cookies, fuseTheming)
    {
        var vm = this;

        // Data
        vm.themes = fuseTheming.themes;

        vm.layoutModes = [
            {
                label: 'Boxed',
                value: 'boxed'
            },
            {
                label: 'Wide',
                value: 'wide'
            }
        ];
        vm.layoutStyles = [
            {
                label : 'Vertical Navigation',
                value : 'verticalNavigation',
                figure: '/assets/images/theme-options/vertical-nav.jpg'
            },
            {
                label : 'Vertical Navigation with Fullwidth Toolbar',
                value : 'verticalNavigationFullwidthToolbar',
                figure: '/assets/images/theme-options/vertical-nav-with-full-toolbar.jpg'
            },
            {
                label : 'Vertical Navigation with Fullwidth Toolbar 2',
                value : 'verticalNavigationFullwidthToolbar2',
                figure: '/assets/images/theme-options/vertical-nav-with-full-toolbar-2.jpg'
            },
            {
                label : 'Horizontal Navigation',
                value : 'horizontalNavigation',
                figure: '/assets/images/theme-options/horizontal-nav.jpg'
            },
            {
                label : 'Content with Toolbar',
                value : 'contentWithToolbar',
                figure: '/assets/images/theme-options/content-with-toolbar.jpg'
            },
            {
                label : 'Content Only',
                value : 'contentOnly',
                figure: '/assets/images/theme-options/content-only.jpg'
            },
        ];

        vm.layoutMode = 'wide';
        vm.layoutStyle = $cookies.get('layoutStyle') || 'verticalNavigation';

        // Methods
        vm.setActiveTheme = setActiveTheme;
        vm.getActiveTheme = getActiveTheme;
        vm.updateLayoutMode = updateLayoutMode;
        vm.updateLayoutStyle = updateLayoutStyle;

        //////////

        /**
         * Set active theme
         *
         * @param themeName
         */
        function setActiveTheme(themeName)
        {
            fuseTheming.setActiveTheme(themeName);
        }

        /**
         * Get active theme
         *
         * @returns {service.themes.active|{name, theme}}
         */
        function getActiveTheme()
        {
            return fuseTheming.themes.active;
        }

        /**
         * Update layout mode
         */
        function updateLayoutMode()
        {
            var bodyEl = angular.element('body');

            // Update class on body element
            bodyEl.toggleClass('boxed', (vm.layoutMode === 'boxed'));
        }

        /**
         * Update layout style
         */
        function updateLayoutStyle()
        {
            // Update the cookie
            $cookies.put('layoutStyle', vm.layoutStyle);

            // Reload the page to apply the changes
            location.reload();
        }
    }

    /** @ngInject */
    function msThemeOptions($mdSidenav)
    {
        return {
            restrict   : 'E',
            scope      : {},
            controller : 'MsThemeOptionsController as vm',
            templateUrl: 'app/core/theme-options/theme-options.html',
            compile    : function (tElement)
            {
                tElement.addClass('ms-theme-options');

                return function postLink(scope)
                {
                    /**
                     * Toggle options sidenav
                     */
                    function toggleOptionsSidenav()
                    {
                        // Toggle the fuse theme options panel
                        $mdSidenav('fuse-theme-options').toggle();
                    }

                    // Expose the toggle function
                    scope.toggleOptionsSidenav = toggleOptionsSidenav;
                };
            }
        };
    }
})();
(function ()
{
    'use strict';

    angular
        .module('app.core')
        .service('fuseTheming', fuseThemingService);

    /** @ngInject */
    function fuseThemingService($cookies, $log, $mdTheming)
    {
        var service = {
            getRegisteredPalettes: getRegisteredPalettes,
            getRegisteredThemes  : getRegisteredThemes,
            setActiveTheme       : setActiveTheme,
            setThemesList        : setThemesList,
            themes               : {
                list  : {},
                active: {
                    'name' : '',
                    'theme': {}
                }
            }
        };

        return service;

        //////////

        /**
         * Get registered palettes
         *
         * @returns {*}
         */
        function getRegisteredPalettes()
        {
            return $mdTheming.PALETTES;
        }

        /**
         * Get registered themes
         *
         * @returns {*}
         */
        function getRegisteredThemes()
        {
            return $mdTheming.THEMES;
        }

        /**
         * Set active theme
         *
         * @param themeName
         */
        function setActiveTheme(themeName)
        {
            // If theme does not exist, fallback to the default theme
            if ( angular.isUndefined(service.themes.list[themeName]) )
            {
                // If there is no theme called "default"...
                if ( angular.isUndefined(service.themes.list.default) )
                {
                    $log.error('You must have at least one theme named "default"');
                    return;
                }

                $log.warn('The theme "' + themeName + '" does not exist! Falling back to the "default" theme.');

                // Otherwise set theme to default theme
                service.themes.active.name = 'default';
                service.themes.active.theme = service.themes.list.default;
                $cookies.put('selectedTheme', service.themes.active.name);

                return;
            }

            service.themes.active.name = themeName;
            service.themes.active.theme = service.themes.list[themeName];
            $cookies.put('selectedTheme', themeName);
        }

        /**
         * Set available themes list
         *
         * @param themeList
         */
        function setThemesList(themeList)
        {
            service.themes.list = themeList;
        }
    }
})();

(function ()
{
    'use strict';

    angular
        .module('app.core')
        .config(config);

    /** @ngInject */
    function config($mdThemingProvider, fusePalettes, fuseThemes)
    {
        // Inject Cookies Service
        var $cookies;
        angular.injector(['ngCookies']).invoke([
            '$cookies', function (_$cookies)
            {
                $cookies = _$cookies;
            }
        ]);

        // Check if custom theme exist in cookies
        var customTheme = $cookies.getObject('customTheme');
        if ( customTheme )
        {
            fuseThemes['custom'] = customTheme;
        }

        $mdThemingProvider.alwaysWatchTheme(true);

        // Define custom palettes
        angular.forEach(fusePalettes, function (palette)
        {
            $mdThemingProvider.definePalette(palette.name, palette.options);
        });

        // Register custom themes
        angular.forEach(fuseThemes, function (theme, themeName)
        {
            $mdThemingProvider.theme(themeName)
                .primaryPalette(theme.primary.name, theme.primary.hues)
                .accentPalette(theme.accent.name, theme.accent.hues)
                .warnPalette(theme.warn.name, theme.warn.hues)
                .backgroundPalette(theme.background.name, theme.background.hues);
        });
    }

})();
(function ()
{
    'use strict';

    let fuseThemes = {
        default  : {
            primary   : {
                name: 'fuse-paleblue',
                hues: {
                    'default': '700',
                    'hue-1'  : '500',
                    'hue-2'  : '600',
                    'hue-3'  : '400'
                }
            },
            accent    : {
                name: 'light-blue',
                hues: {
                    'default': '600',
                    'hue-1'  : '400',
                    'hue-2'  : '700',
                    'hue-3'  : 'A100'
                }
            },
            warn      : {
                name: 'red'
            },
            background: {
                name: 'grey',
                hues: {
                    'default': 'A100',
                    'hue-1'  : 'A100',
                    'hue-2'  : '100',
                    'hue-3'  : '300'
                }
            }
        },
        'pinkTheme': {
            primary   : {
                name: 'blue-grey',
                hues: {
                    'default': '800',
                    'hue-1'  : '600',
                    'hue-2'  : '400',
                    'hue-3'  : 'A100'
                }
            },
            accent    : {
                name: 'pink',
                hues: {
                    'default': '400',
                    'hue-1'  : '300',
                    'hue-2'  : '600',
                    'hue-3'  : 'A100'
                }
            },
            warn      : {
                name: 'blue'
            },
            background: {
                name: 'grey',
                hues: {
                    'default': 'A100',
                    'hue-1'  : 'A100',
                    'hue-2'  : '100',
                    'hue-3'  : '300'
                }
            }
        },
        'tealTheme': {
            primary   : {
                name: 'fuse-blue',
                hues: {
                    'default': '50',
                    'hue-1'  : '600',
                    'hue-2'  : '500',
                    'hue-3'  : 'A100'
                }
            },
            accent    : {
                name: 'teal',
                hues: {
                    'default': '500',
                    'hue-1'  : '600',
                    'hue-2'  : '700',
                    'hue-3'  : 'A100'
                }
            },
            warn      : {
                name: 'deep-orange'
            },
            background: {
                name: 'grey',
                hues: {
                    'default': 'A100',
                    'hue-1'  : 'A100',
                    'hue-2'  : '100',
                    'hue-3'  : '300'
                }
            }
        }
    };

    angular
        .module('app.core')
        .constant('fuseThemes', fuseThemes);
})();

(function () {
    'use strict';

    var fusePalettes = [
        {
            name: 'fuse-blue',
            options: {
                '50': '#f2f5f9',
                '100': '#c2d4ef',
                '200': '#9ab8e5',
                '300': '#78a0dc',
                '400': '#5688d3',
                '500': '#3470ca',
                '600': '#2e62b1',
                '700': '#275498',
                '800': '#21467e',
                '900': '#1a3865',
                'A100': '#c2d4ef',
                'A200': '#9ab8e5',
                'A400': '#5688d3',
                'A700': '#275498',
                'contrastDefaultColor': 'light',
                'contrastDarkColors': '50 100 200 A100',
                'contrastStrongLightColors': '300 400'
            }
        },
        {
            name: 'fuse-paleblue',
            options: {
                '50': '#ececee',
                '100': '#c5c6cb',
                '200': '#9ea1a9',
                '300': '#7d818c',
                '400': '#5c616f',
                '500': '#3c4252',
                '600': '#353a48',
                '700': '#1e293b',
                '800': '#262933',
                '900': '#1e2129',
                'A100': '#c5c6cb',
                'A200': '#9ea1a9',
                'A400': '#5c616f',
                'A700': '#1e293b',
                'contrastDefaultColor': 'light',
                'contrastDarkColors': '50 100 200 A100',
                'contrastStrongLightColors': '300 400'
            }
        }
    ];

    angular
        .module('app.core')
        .constant('fusePalettes', fusePalettes);
})();
(function ()
{
    'use strict';

    angular
        .module('app.core')
        .factory('fuseGenerator', fuseGeneratorService);

    /** @ngInject */
    function fuseGeneratorService($cookies, $log, fuseTheming)
    {
        // Storage for simplified themes object
        var themes = {};

        var service = {
            generate: generate,
            rgba    : rgba
        };

        return service;

        //////////

        /**
         * Generate less variables for each theme from theme's
         * palette by using material color naming conventions
         */
        function generate()
        {
            // Get registered themes and palettes and copy
            // them so we don't modify the original objects
            var registeredThemes = angular.copy(fuseTheming.getRegisteredThemes());
            var registeredPalettes = angular.copy(fuseTheming.getRegisteredPalettes());

            // First, create a simplified object that stores
            // all registered themes and their colors

            // Iterate through registered themes
            angular.forEach(registeredThemes, function (registeredTheme)
            {
                themes[registeredTheme.name] = {};

                // Iterate through color types (primary, accent, warn & background)
                angular.forEach(registeredTheme.colors, function (colorType, colorTypeName)
                {
                    themes[registeredTheme.name][colorTypeName] = {
                        'name'  : colorType.name,
                        'levels': {
                            'default': {
                                'color'    : rgba(registeredPalettes[colorType.name][colorType.hues.default].value),
                                'contrast1': rgba(registeredPalettes[colorType.name][colorType.hues.default].contrast, 1),
                                'contrast2': rgba(registeredPalettes[colorType.name][colorType.hues.default].contrast, 2),
                                'contrast3': rgba(registeredPalettes[colorType.name][colorType.hues.default].contrast, 3),
                                'contrast4': rgba(registeredPalettes[colorType.name][colorType.hues.default].contrast, 4)
                            },
                            'hue1'   : {
                                'color'    : rgba(registeredPalettes[colorType.name][colorType.hues['hue-1']].value),
                                'contrast1': rgba(registeredPalettes[colorType.name][colorType.hues['hue-1']].contrast, 1),
                                'contrast2': rgba(registeredPalettes[colorType.name][colorType.hues['hue-1']].contrast, 2),
                                'contrast3': rgba(registeredPalettes[colorType.name][colorType.hues['hue-1']].contrast, 3),
                                'contrast4': rgba(registeredPalettes[colorType.name][colorType.hues['hue-1']].contrast, 4)
                            },
                            'hue2'   : {
                                'color'    : rgba(registeredPalettes[colorType.name][colorType.hues['hue-2']].value),
                                'contrast1': rgba(registeredPalettes[colorType.name][colorType.hues['hue-2']].contrast, 1),
                                'contrast2': rgba(registeredPalettes[colorType.name][colorType.hues['hue-2']].contrast, 2),
                                'contrast3': rgba(registeredPalettes[colorType.name][colorType.hues['hue-2']].contrast, 3),
                                'contrast4': rgba(registeredPalettes[colorType.name][colorType.hues['hue-2']].contrast, 4)
                            },
                            'hue3'   : {
                                'color'    : rgba(registeredPalettes[colorType.name][colorType.hues['hue-3']].value),
                                'contrast1': rgba(registeredPalettes[colorType.name][colorType.hues['hue-3']].contrast, 1),
                                'contrast2': rgba(registeredPalettes[colorType.name][colorType.hues['hue-3']].contrast, 2),
                                'contrast3': rgba(registeredPalettes[colorType.name][colorType.hues['hue-3']].contrast, 3),
                                'contrast4': rgba(registeredPalettes[colorType.name][colorType.hues['hue-3']].contrast, 4)
                            }
                        }
                    };
                });
            });

            // Process themes one more time and then store them in the service for external use
            processAndStoreThemes(themes);

            // Iterate through simplified themes
            // object and create style variables
            var styleVars = {};

            // Iterate through registered themes
            angular.forEach(themes, function (theme, themeName)
            {
                styleVars = {};
                styleVars['@themeName'] = themeName;

                // Iterate through color types (primary, accent, warn & background)
                angular.forEach(theme, function (colorTypes, colorTypeName)
                {
                    // Iterate through color levels (default, hue1, hue2 & hue3)
                    angular.forEach(colorTypes.levels, function (colors, colorLevelName)
                    {
                        // Iterate through color name (color, contrast1, contrast2, contrast3 & contrast4)
                        angular.forEach(colors, function (color, colorName)
                        {
                            styleVars['@' + colorTypeName + ucfirst(colorLevelName) + ucfirst(colorName)] = color;
                        });
                    });
                });

                // Render styles
                render(styleVars);
            });
        }

        // ---------------------------
        //  INTERNAL HELPER FUNCTIONS
        // ---------------------------

        /**
         * Process and store themes for global use
         *
         * @param _themes
         */
        function processAndStoreThemes(_themes)
        {
            // Here we will go through every registered theme one more time
            // and try to simplify their objects as much as possible for
            // easier access to their properties.
            var themes = angular.copy(_themes);

            // Iterate through themes
            angular.forEach(themes, function (theme)
            {
                // Iterate through color types (primary, accent, warn & background)
                angular.forEach(theme, function (colorType, colorTypeName)
                {
                    theme[colorTypeName] = colorType.levels;
                    theme[colorTypeName].color = colorType.levels.default.color;
                    theme[colorTypeName].contrast1 = colorType.levels.default.contrast1;
                    theme[colorTypeName].contrast2 = colorType.levels.default.contrast2;
                    theme[colorTypeName].contrast3 = colorType.levels.default.contrast3;
                    theme[colorTypeName].contrast4 = colorType.levels.default.contrast4;
                    delete theme[colorTypeName].default;
                });
            });

            // Store themes and set selected theme for the first time
            fuseTheming.setThemesList(themes);

            // Remember selected theme.
            var selectedTheme = $cookies.get('selectedTheme');

            if ( selectedTheme )
            {
                fuseTheming.setActiveTheme(selectedTheme);
            }
            else
            {
                fuseTheming.setActiveTheme('default');
            }
        }


        /**
         * Render css files
         *
         * @param styleVars
         */
        function render(styleVars)
        {
            let cssTemplate = '/* Content hack because they wont fix */\n/* https://github.com/angular/material/pull/8067 */\n' +
                '[md-theme="@themeName"] md-content,\nmd-content.md-@themeName-theme {\n    color: @backgroundHue1Contrast1;\n    background-color: transparent !important;\n}\n\n' +
                '[md-theme="@themeName"] md-content.md-hue-1,\nmd-content.md-@themeName-theme.md-hue-1 {\n    color: @backgroundHue1Contrast1;\n    background-color: @backgroundHue1Color;\n}\n\n' +
                '[md-theme="@themeName"] md-content.md-hue-2,\nmd-content.md-@themeName-theme.md-hue-2 {\n    color: @backgroundHue2Contrast1;\n    background-color: @backgroundHue2Color;\n}\n\n' +
                '[md-theme="@themeName"] md-content.md-hue-3,\n md-content.md-@themeName-theme.md-hue-3 {\n    color: @backgroundHue3Contrast1;\n    background-color: @backgroundHue3Color;\n}\n\n' +
                '/* Text Colors */\n' +
                '[md-theme="@themeName"] a {\n    color: @primaryDefaultContrast1;\n}\n\n' +
                '[md-theme="@themeName"] .primary {\n    color: @primaryDefaultContrast2;\n}\n\n' +
                '[md-theme="@themeName"] .secondary-text,\n' +
                '[md-theme="@themeName"] .icon {\n    color: @backgroundDefaultContrast2;\n}\n\n' +
                '[md-theme="@themeName"] .hint-text,\n' +
                '[md-theme="@themeName"] .disabled-text {\n    color: @backgroundDefaultContrast3;\n}\n\n' +
                '[md-theme="@themeName"] .fade-text,\n' +
                '[md-theme="@themeName"] .divider {\n    color: @backgroundDefaultContrast4;\n}\n\n' +
                '/* Primary */\n' +
                '[md-theme="@themeName"] .md-primary-bg {\n    background-color: @primaryDefaultColor;\n    color: @primaryDefaultContrast2;\n}\n\n' +
                '[md-theme="@themeName"] .md-primary-bg .secondary-text,\n' +
                '[md-theme="@themeName"] .md-primary-bg .icon {\n    color: @primaryDefaultContrast2;\n}\n\n' +
                '[md-theme="@themeName"] .md-primary-bg .hint-text,\n' +
                '[md-theme="@themeName"] .md-primary-bg .disabled-text {\n    color: @primaryDefaultContrast3;\n}\n\n' +
                '[md-theme="@themeName"] .md-primary-bg .fade-text,\n' +
                '[md-theme="@themeName"] .md-primary-bg .divider {\n    color: @primaryDefaultContrast4;\n}\n\n' +
                '/* Primary, Hue-1 */\n' +
                '[md-theme="@themeName"] .md-primary-bg.md-hue-1 {\n    background-color: @primaryHue1Color;\n    color: @primaryHue1Contrast1;\n}\n\n' +
                '[md-theme="@themeName"] .md-primary-bg.md-hue-1 .secondary-text,\n' +
                '[md-theme="@themeName"] .md-primary-bg.md-hue-1 .icon {\n    color: @primaryHue1Contrast2;\n}\n\n' +
                '[md-theme="@themeName"] .md-primary-bg.md-hue-1 .hint-text,\n' +
                '[md-theme="@themeName"] .md-primary-bg.md-hue-1 .disabled-text {\n    color: @primaryHue1Contrast3;\n}\n\n' +
                '[md-theme="@themeName"] .md-primary-bg.md-hue-1 .fade-text,\n' +
                '[md-theme="@themeName"] .md-primary-bg.md-hue-1 .divider {\n    color: @primaryHue1Contrast4;\n}\n\n' +
                '/* Primary, Hue-2 */\n' +
                '[md-theme="@themeName"] .md-primary-bg.md-hue-2 {\n    background-color: @primaryHue2Color;\n    color: @primaryHue2Contrast1;\n}\n\n' +
                '[md-theme="@themeName"] .md-primary-bg.md-hue-2 .secondary-text,\n' +
                '[md-theme="@themeName"] .md-primary-bg.md-hue-2 .icon {\n    color: @primaryHue2Contrast2;\n}\n\n' +
                '[md-theme="@themeName"] .md-primary-bg.md-hue-2 .hint-text,\n' +
                '[md-theme="@themeName"] .md-primary-bg.md-hue-2 .disabled-text {\n    color: @primaryHue2Contrast3;\n}\n\n' +
                '[md-theme="@themeName"] .md-primary-bg.md-hue-2 .fade-text,\n' +
                '[md-theme="@themeName"] .md-primary-bg.md-hue-2 .divider {\n    color: @primaryHue2Contrast4;\n}\n\n' +
                '/* Primary, Hue-3 */\n' +
                '[md-theme="@themeName"] .md-primary-bg.md-hue-3 {\n    background-color: @primaryHue3Color;\n    color: @primaryHue3Contrast1;\n}\n\n' +
                '[md-theme="@themeName"] .md-primary-bg.md-hue-3 .secondary-text,\n' +
                '[md-theme="@themeName"] .md-primary-bg.md-hue-3 .icon {\n    color: @primaryHue3Contrast1;\n}\n\n' +
                '[md-theme="@themeName"] .md-primary-bg.md-hue-3 .hint-text,\n' +
                '[md-theme="@themeName"] .md-primary-bg.md-hue-3 .disabled-text {\n    color: @primaryHue3Contrast3;\n}\n\n' +
                '[md-theme="@themeName"] .md-primary-bg.md-hue-3 .fade-text,\n' +
                '[md-theme="@themeName"] .md-primary-bg.md-hue-3 .divider {\n    color: @primaryHue3Contrast4;\n}\n\n' +
                '/* Primary foreground */\n' +
                '[md-theme="@themeName"] .md-primary-fg {\n    color: @primaryDefaultColor !important;\n}\n\n' +
                '/* Primary foreground, Hue-1 */\n' +
                '[md-theme="@themeName"] .md-primary-fg.md-hue-1 {\n    color: @primaryHue1Color !important;\n}\n\n' +
                '/* Primary foreground, Hue-2 */\n' +
                '[md-theme="@themeName"] .md-primary-fg.md-hue-2 {\n    color: @primaryHue2Color !important;\n}\n\n' +
                '/* Primary foreground, Hue-3 */\n' +
                '[md-theme="@themeName"] .md-primary-fg.md-hue-3 {\n    color: @primaryHue3Color !important;\n}\n\n' +
                '/* Accent */\n' +
                '[md-theme="@themeName"] .md-accent-bg {\n    background-color: @accentDefaultColor;\n    color: @accentDefaultContrast1;\n}\n\n' +
                '[md-theme="@themeName"] .md-accent-bg .secondary-text,\n' +
                '[md-theme="@themeName"] .md-accent-bg .icon {\n    color: @accentDefaultContrast2;\n}\n\n' +
                '[md-theme="@themeName"] .md-accent-bg .hint-text,\n' +
                '[md-theme="@themeName"] .md-accent-bg .disabled-text {\n    color: @accentDefaultContrast3;\n}\n\n' +
                '[md-theme="@themeName"] .md-accent-bg .fade-text,\n' +
                '[md-theme="@themeName"] .md-accent-bg .divider {\n    color: @accentDefaultContrast4;\n}\n\n' +
                '/* Accent, Hue-1 */\n' +
                '[md-theme="@themeName"] .md-accent-bg.md-hue-1 {\n    background-color: @accentHue1Color;\n    color: @accentHue1Contrast1;\n}\n\n' +
                '[md-theme="@themeName"] .md-accent-bg.md-hue-1 .secondary-text,\n' +
                '[md-theme="@themeName"] .md-accent-bg.md-hue-1 .icon {\n    color: @accentHue1Contrast2;\n}\n\n' +
                '[md-theme="@themeName"] .md-accent-bg.md-hue-1 .hint-text,\n' +
                '[md-theme="@themeName"] .md-accent-bg.md-hue-1 .disabled-text {\n    color: @accentHue1Contrast3;\n}\n\n' +
                '[md-theme="@themeName"] .md-accent-bg.md-hue-1 .fade-text,\n' +
                '[md-theme="@themeName"] .md-accent-bg.md-hue-1 .divider {\n    color: @accentHue1Contrast4;\n}\n\n' +
                '/* Accent, Hue-2 */\n' +
                '[md-theme="@themeName"] .md-accent-bg.md-hue-2 {\n    background-color: @accentHue2Color;\n    color: @accentHue2Contrast1;\n}\n\n' +
                '[md-theme="@themeName"] .md-accent-bg.md-hue-2 .secondary-text,\n' +
                '[md-theme="@themeName"] .md-accent-bg.md-hue-2 .icon {\n    color: @accentHue2Contrast2;\n}\n\n' +
                '[md-theme="@themeName"] .md-accent-bg.md-hue-2 .hint-text,\n' +
                '[md-theme="@themeName"] .md-accent-bg.md-hue-2 .disabled-text {\n    color: @accentHue2Contrast3;\n}\n\n' +
                '[md-theme="@themeName"] .md-accent-bg.md-hue-2 .fade-text,\n' +
                '[md-theme="@themeName"] .md-accent-bg.md-hue-2 .divider {\n    color: @accentHue2Contrast4;\n}\n\n' +
                '/* Accent, Hue-3 */\n' +
                '[md-theme="@themeName"] .md-accent-bg.md-hue-3 {\n    background-color: @accentHue3Color;\n    color: @accentHue3Contrast1;\n}\n\n' +
                '[md-theme="@themeName"] .md-accent-bg.md-hue-3 .secondary-text,\n' +
                '[md-theme="@themeName"] .md-accent-bg.md-hue-3 .icon {\n    color: @accentHue3Contrast1;\n}\n\n' +
                '[md-theme="@themeName"] .md-accent-bg.md-hue-3 .hint-text,\n' +
                '[md-theme="@themeName"] .md-accent-bg.md-hue-3 .disabled-text {\n    color: @accentHue3Contrast3;\n}\n\n' +
                '[md-theme="@themeName"] .md-accent-bg.md-hue-3 .fade-text,\n' +
                '[md-theme="@themeName"] .md-accent-bg.md-hue-3 .divider {\n    color: @accentHue3Contrast4;\n}\n\n' +
                '/* Accent foreground */\n' +
                '[md-theme="@themeName"] .md-accent-fg {\n    color: @accentDefaultColor !important;\n}\n\n' +
                '/* Accent foreground, Hue-1 */\n' +
                '[md-theme="@themeName"] .md-accent-fg.md-hue-1 {\n    color: @accentHue1Color !important;\n}\n\n' +
                '/* Accent foreground, Hue-2 */\n' +
                '[md-theme="@themeName"] .md-accent-fg.md-hue-2 {\n    color: @accentHue2Color !important;\n}\n\n' +
                '/* Accent foreground, Hue-3 */\n' +
                '[md-theme="@themeName"] .md-accent-fg.md-hue-3 {\n    color: @accentHue3Color !important;\n}\n\n' +
                '/* Warn */\n' +
                '[md-theme="@themeName"] .md-warn-bg {\n    background-color: @warnDefaultColor;\n    color: @warnDefaultContrast1;\n}\n\n' +
                '[md-theme="@themeName"] .md-warn-bg .secondary-text,\n' +
                '[md-theme="@themeName"] .md-warn-bg .icon {\n    color: @warnDefaultContrast2;\n}\n\n' +
                '[md-theme="@themeName"] .md-warn-bg .hint-text,\n' +
                '[md-theme="@themeName"] .md-warn-bg .disabled-text {\n    color: @warnDefaultContrast3;\n}\n\n' +
                '[md-theme="@themeName"] .md-warn-bg .fade-text,\n' +
                '[md-theme="@themeName"] .md-warn-bg .divider {\n    color: @warnDefaultContrast4;\n}\n\n' +
                '/* Warn, Hue-1 */\n' +
                '[md-theme="@themeName"] .md-warn-bg.md-hue-1 {\n    background-color: @warnHue1Color;\n    color: @warnHue1Contrast1;\n}\n\n' +
                '[md-theme="@themeName"] .md-warn-bg.md-hue-1 .secondary-text,\n' +
                '[md-theme="@themeName"] .md-warn-bg.md-hue-1 .icon {\n    color: @warnHue1Contrast2;\n}\n\n' +
                '[md-theme="@themeName"] .md-warn-bg.md-hue-1 .hint-text,\n' +
                '[md-theme="@themeName"] .md-warn-bg.md-hue-1 .disabled-text {\n    color: @warnHue1Contrast3;\n}\n\n' +
                '[md-theme="@themeName"] .md-warn-bg.md-hue-1 .fade-text,\n' +
                '[md-theme="@themeName"] .md-warn-bg.md-hue-1 .divider {\n    color: @warnHue1Contrast4;\n}\n\n' +
                '/* Warn, Hue-2 */\n' +
                '[md-theme="@themeName"] .md-warn-bg.md-hue-2 {\n    background-color: @warnHue2Color;\n    color: @warnHue2Contrast1;\n}\n\n' +
                '[md-theme="@themeName"] .md-warn-bg.md-hue-2 .secondary-text,\n' +
                '[md-theme="@themeName"] .md-warn-bg.md-hue-2 .icon {\n    color: @warnHue2Contrast2;\n}\n\n' +
                '[md-theme="@themeName"] .md-warn-bg.md-hue-2 .hint-text,\n' +
                '[md-theme="@themeName"] .md-warn-bg.md-hue-2 .disabled-text {\n    color: @warnHue2Contrast3;\n}\n\n' +
                '[md-theme="@themeName"] .md-warn-bg.md-hue-2 .fade-text,\n' +
                '[md-theme="@themeName"] .md-warn-bg.md-hue-2 .divider {\n    color: @warnHue2Contrast4;\n}\n\n' +
                '/* Warn, Hue-3 */\n' +
                '[md-theme="@themeName"] .md-warn-bg.md-hue-3 {\n    background-color: @warnHue3Color;\n    color: @warnHue3Contrast1;\n}\n\n' +
                '[md-theme="@themeName"] .md-warn-bg.md-hue-3 .secondary-text,\n' +
                '[md-theme="@themeName"] .md-warn-bg.md-hue-3 .icon {\n    color: @warnHue3Contrast1;\n}\n\n' +
                '[md-theme="@themeName"] .md-warn-bg.md-hue-3 .hint-text,\n' +
                '[md-theme="@themeName"] .md-warn-bg.md-hue-3 .disabled-text {\n    color: @warnHue3Contrast3;\n}\n\n' +
                '[md-theme="@themeName"] .md-warn-bg.md-hue-3 .fade-text,\n' +
                '[md-theme="@themeName"] .md-warn-bg.md-hue-3 .divider {\n    color: @warnHue3Contrast4;\n}\n\n' +
                '/* Warn foreground */\n' +
                '[md-theme="@themeName"] .md-warn-fg {\n    color: @warnDefaultColor !important;\n}\n\n' +
                '/* Warn foreground, Hue-1 */\n' +
                '[md-theme="@themeName"] .md-warn-fg.md-hue-1 {\n    color: @warnHue1Color !important;\n}\n\n' +
                '/* Warn foreground, Hue-2 */\n' +
                '[md-theme="@themeName"] .md-warn-fg.md-hue-2 {\n    color: @warnHue2Color !important;\n}\n\n' +
                '/* Warn foreground, Hue-3 */\n' +
                '[md-theme="@themeName"] .md-warn-fg.md-hue-3 {\n    color: @warnHue3Color !important;\n}\n\n' +
                '/* Background */\n' +
                '[md-theme="@themeName"] .md-background-bg {\n    background-color: @backgroundDefaultColor;\n    color: @backgroundDefaultContrast1;\n}\n\n' +
                '[md-theme="@themeName"] .md-background-bg .secondary-text,\n' +
                '[md-theme="@themeName"] .md-background-bg .icon {\n    color: @backgroundDefaultContrast2;\n}\n\n' +
                '[md-theme="@themeName"] .md-background-bg .hint-text,\n' +
                '[md-theme="@themeName"] .md-background-bg .disabled-text {\n    color: @backgroundDefaultContrast3;\n}\n\n' +
                '[md-theme="@themeName"] .md-background-bg .fade-text,\n' +
                '[md-theme="@themeName"] .md-background-bg .divider {\n    color: @backgroundDefaultContrast4;\n}\n\n' +
                '/* Background, Hue-1 */\n' +
                '[md-theme="@themeName"] .md-background-bg.md-hue-1 {\n    background-color: @backgroundHue1Color;\n    color: @backgroundHue1Contrast1;\n}\n\n' +
                '[md-theme="@themeName"] .md-background-bg.md-hue-1 .secondary-text,\n' +
                '[md-theme="@themeName"] .md-background-bg.md-hue-1 .icon {\n    color: @backgroundHue1Contrast2;\n}\n\n' +
                '[md-theme="@themeName"] .md-background-bg.md-hue-1 .hint-text,\n' +
                '[md-theme="@themeName"] .md-background-bg.md-hue-1 .disabled-text {\n    color: @backgroundHue1Contrast3;\n}\n\n' +
                '[md-theme="@themeName"] .md-background-bg.md-hue-1 .fade-text,\n' +
                '[md-theme="@themeName"] .md-background-bg.md-hue-1 .divider {\n    color: @backgroundHue1Contrast4;\n}\n\n' +
                '/* Background, Hue-2 */\n' +
                '[md-theme="@themeName"] .md-background-bg.md-hue-2 {\n    background-color: @backgroundHue2Color;\n    color: @backgroundHue2Contrast1;\n}\n\n' +
                '[md-theme="@themeName"] .md-background-bg.md-hue-2 .secondary-text,\n' +
                '[md-theme="@themeName"] .md-background-bg.md-hue-2 .icon {\n    color: @backgroundHue2Contrast2;\n}\n\n' +
                '[md-theme="@themeName"] .md-background-bg.md-hue-2 .hint-text,\n' +
                '[md-theme="@themeName"] .md-background-bg.md-hue-2 .disabled-text {\n    color: @backgroundHue2Contrast3;\n}\n\n' +
                '[md-theme="@themeName"] .md-background-bg.md-hue-2 .fade-text,\n' +
                '[md-theme="@themeName"] .md-background-bg.md-hue-2 .divider {\n    color: @backgroundHue2Contrast4;\n}\n\n' +
                '/* Background, Hue-3 */\n' +
                '[md-theme="@themeName"] .md-background-bg.md-hue-3 {\n    background-color: @backgroundHue3Color;\n    color: @backgroundHue3Contrast1;\n}\n\n' +
                '[md-theme="@themeName"] .md-background-bg.md-hue-3 .secondary-text,\n' +
                '[md-theme="@themeName"] .md-background-bg.md-hue-3 .icon {\n    color: @backgroundHue3Contrast1;\n}\n\n' +
                '[md-theme="@themeName"] .md-background-bg.md-hue-3 .hint-text,\n' +
                '[md-theme="@themeName"] .md-background-bg.md-hue-3 .disabled-text {\n    color: @backgroundHue3Contrast3;\n}\n\n' +
                '[md-theme="@themeName"] .md-background-bg.md-hue-3 .fade-text,\n' +
                '[md-theme="@themeName"] .md-background-bg.md-hue-3 .divider {\n    color: @backgroundHue3Contrast4;\n}\n\n' +
                '/* Background foreground */\n' +
                '[md-theme="@themeName"] .md-background-fg {\n    color: @backgroundDefaultColor !important;\n}\n\n' +
                '/* Background foreground, Hue-1 */\n' +
                '[md-theme="@themeName"] .md-background-fg.md-hue-1 {\n    color: @backgroundHue1Color !important;\n}\n\n' +
                '/* Background foreground, Hue-2 */\n' +
                '[md-theme="@themeName"] .md-background-fg.md-hue-2 {\n    color: @backgroundHue2Color !important;\n}\n\n' +
                '/* Background foreground, Hue-3 */\n' +
                '[md-theme="@themeName"] .md-background-fg.md-hue-3 {\n    color: @backgroundHue3Color !important;\n}';

            var regex = new RegExp(Object.keys(styleVars).join('|'), 'gi');
            var css = cssTemplate.replace(regex, function (matched)
            {
                return styleVars[matched];
            });

            var headEl = angular.element('head');
            var styleEl = angular.element('<style type="text/css"></style>');
            styleEl.html(css);
            headEl.append(styleEl);
        }

        /**
         * Convert color array to rgb/rgba
         * Also apply contrasts if needed
         *
         * @param color
         * @param _contrastLevel
         * @returns {string}
         */
        function rgba(color, _contrastLevel)
        {
            var contrastLevel = _contrastLevel || false;

            // Convert 255,255,255,0.XX to 255,255,255
            // According to Google's Material design specs, white primary
            // text must have opacity of 1 and we will fix that here
            // because Angular Material doesn't care about that spec
            if ( color.length === 4 && color[0] === 255 && color[1] === 255 && color[2] === 255 )
            {
                color.splice(3, 4);
            }

            // If contrast level provided, apply it to the current color
            if ( contrastLevel )
            {
                color = applyContrast(color, contrastLevel);
            }

            // Convert color array to color string (rgb/rgba)
            if ( color.length === 3 )
            {
                return 'rgb(' + color.join(',') + ')';
            }
            else if ( color.length === 4 )
            {
                return 'rgba(' + color.join(',') + ')';
            }
            else
            {
                $log.error('Invalid number of arguments supplied in the color array: ' + color.length + '\n' + 'The array must have 3 or 4 colors.');
            }
        }

        /**
         * Apply given contrast level to the given color
         *
         * @param color
         * @param contrastLevel
         */
        function applyContrast(color, contrastLevel)
        {
            var contrastLevels = {
                'white': {
                    '1': '1',
                    '2': '0.8',
                    '3': '0.3',
                    '4': '0.12'
                },
                'black': {
                    '1': '0.9',
                    '2': '0.7',
                    '3': '0.26',
                    '4': '0.12'
                }
            };

            // If white
            if ( color[0] === 255 && color[1] === 255 && color[2] === 255 )
            {
                color[3] = contrastLevels.white[contrastLevel];
            }
            // If black
            else if ( color[0] === 0 && color[1] === 0 && color[2] === 0 )
            {
                color[3] = contrastLevels.black[contrastLevel];
            }

            return color;
        }

        /**
         * Uppercase first
         */
        function ucfirst(string)
        {
            return string.charAt(0).toUpperCase() + string.slice(1);
        }
    }

})();
(function () {
    'use strict';
    angular.module('app.core')
        .service('network', function ($rootScope) {
            this.User = {
                authenticate: function (data) {
                    return Lotus.User.authenticate(data).then(function (resp) {
                        return resp;
                    })
                },
                me: function (data) {
                    return Lotus.User.Current.profile(data).then(function (resp) {
                        return resp
                    })
                },
                changePassword: function (data) {
                    return Lotus.User.Current.changePassword(data).then(function (resp) {
                        return resp
                    })
                },
                completeNewPassword: function (data) {
                    return Lotus.User.completeNewPassword(data).then(function (resp) {
                        return resp
                    })
                },
                generateTOTPSecretCode: function () {
                    return Lotus.User.Current.generateTOTPSecretCode().then(function (resp) {
                        return resp
                    })
                },
                enableMFA: function (data) {
                    return Lotus.User.Current.enableMFA(data).then(function (resp) {
                        return resp
                    })
                },
                disableMFA: function (data) {
                    return Lotus.User.Current.disableMFA(data).then(function (resp) {
                        return resp
                    })
                },
                confirmSignIn: function (data) {
                    return Lotus.User.confirmSignIn(data).then(function (resp) {
                        return resp
                    })
                },
                Wallet: {
                    getWallet: function () {
                        return Lotus.User.Wallet.getWallet().then(function (response) {
                            return response
                        })
                    }
                }
            };
            this.Public = {
                Lottery: {
                    getOdds: function (data) {
                        return Lotus.Public.Lottery.Odds.getOdds(data).then(function (response) {
                            return response;
                        })
                    },
                    getLoLiveOdds: function (data) {
                        return Lotus.Public.Lottery.Odds.getLiveOdds(data).then(function (response) {
                            return response;
                        })
                    },
                    LotteryResult: {
                        getResultsByDate: function (data) {
                            return Lotus.Public.Lottery.LotteryResult.getResultsByDate(data).then(function (response) {
                                return response
                            })
                        }
                    },
                    LegendResult: {
                        getResultsByDate: function (data) {
                            return Lotus.Public.Lottery789.LotteryResult.getResultsByDate(data).then(function (response) {
                                return response
                            })
                        }
                    }
                },
                Legend: {
                    getOdds: function (data) {
                        return Lotus.Public.Lottery789.Odds.getOdds(data).then(function (response) {
                            return response;
                        })
                    },
                    getLiveOdds: function (data) {
                        return Lotus.Public.Lottery789.Odds.getLiveOdds(data).then(function (response) {
                            return response;
                        })
                    },
                    LotteryResult: {
                        getResultsByDate: function (data) {
                            return Lotus.Public.Lottery789.LotteryResult.getResultsByDate(data).then(function (response) {
                                return response
                            })
                        },
                        getLatestResultByGameType: function (data){
                            return Lotus.Public.Lottery789.LotteryResult.getLatestResultByGameType(data).then(function (response) {
                                return response
                            })
                        }
                    }
                },
                Communication: {
                    Notification: {
                        latest: function () {
                            return Lotus.Public.Communication.Notification.latest().then(function (response) {
                                return response
                            })
                        }
                    }
                }
            };
            this.Communication = {
                Notification: {
                    getNotificationsByCategory: function (data) {
                        return Lotus.Communication.Notification.getNotificationsByCategory(data).then(function (response) {
                            return response;
                        })
                    },
                    getNotificationsOnSection: function (data) {
                        return Lotus.Communication.Notification.getNotificationsOnSection(data).then(function (response) {
                            return response;
                        })
                    },
                    read: function (data) {
                        return Lotus.Communication.Notification.read(data).then(function (response) {
                            return response;
                        })
                    }
                }
            };
            this.Games = {
                GameSetting: {
                    getGamePayouts: function () {
                        return Lotus.Lottery.GameSetting.getGamePayouts().then(function (resp) {
                            return resp;
                        })
                    },
                    getGameSettings: function () {
                        return Lotus.Lottery.GameSetting.getGameSettings().then(function (resp) {
                            return resp;
                        })
                    }
                },
                getOdds: function (data) {
                    if (data.Term === undefined){
                        data.Term = $rootScope.termName
                    }
                    return Lotus.Lottery.Odds.getOdds(data).then(function (resp) {
                        return resp;
                    })
                },
                getLoLiveOdds: function (data) {
                    return Lotus.Lottery.Odds.getLiveOdds(data).then(function (resp) {
                        return resp;
                    })
                },
                Play: function (data) {
                    return Lotus.Lottery.GamePlay.play(data).then(function (resp) {
                        return resp;
                    })
                },
                cancelTicket: function (data) {
                    $rootScope.infoMessages = [];
                    return Lotus.Lottery.GamePlay.cancelTicket(data).then(function (resp) {
                        return resp
                    })
                },
                checkTx: function (data) {
                    return Lotus.Lottery.GamePlay.Ticket.checkTx(data).then(function (response) {
                        return response
                    })
                }
            };
            this.Ticket = {
                Latest: function (data) {
                    return Lotus.Lottery.GamePlay.Ticket.latest(data).then(function (result) {
                        return result
                    })
                },
                Current: function (data) {
                    return Lotus.Lottery.GamePlay.Ticket.current(data).then(function (result) {
                        return result
                    })
                },
                TicketItem: function (data) {
                    return Lotus.Lottery.GamePlay.TicketItem.getItemsByTicketNumbers(data).then(function (resp) {
                        return resp
                    })
                },
                getItemsByTerm: function (data) {
                    return Lotus.Lottery.GamePlay.TicketItem.getItemsByTerm(data).then(function (resp) {
                        return resp
                    })
                }
            };
            this.Report = {
                getReportByProductionDate: function(data){
                    return Lotus.Reporting.Statement.getReportByProductionDate(data).then(function (response) {
                        return response
                    })
                },
                getLatestReports: function () {
                    return Lotus.Lottery.Report.getLatestReports().then(function (response) {
                        return response
                    })
                },
                getBetTypeReports: function (data) {
                    return Lotus.Lottery.Report.Statement.getReportGroupByBetType(data).then(function (response) {
                        return response
                    })
                },
                getGameTypeReports: function (data) {
                    return Lotus.Lottery.Report.Statement.getReportGroupByGameType(data).then(function (response) {
                        return response
                    })
                },
                getTicketItemsReports: function (data) {
                    return Lotus.Lottery.Report.Statement.getTicketItems(data).then(function (response) {
                        return response
                    })
                },
                Legend: {
                    getReportGroupByGameType: function (data) {
                        return Lotus.Lottery789.Report.Statement.getReportGroupByGameType(data).then(function (response) {
                            return response
                        })
                    },
                    getReportGroupByTerm: function (data) {
                        return Lotus.Lottery789.Report.Statement.getReportGroupByTerm(data).then(function (response) {
                            return response
                        })
                    },
                    getReportGroupByBetType: function (data) {
                        return Lotus.Lottery789.Report.Statement.getReportGroupByBetType(data).then(function (response) {
                            return response
                        })
                    },
                    getTicketItems: function (data) {
                        return Lotus.Lottery789.Report.Statement.getTicketItems(data).then(function (response) {
                            return response
                        })
                    }
                },
                WMCasino: {
                    getReportGroupByDate: function (data) {
                        return Lotus.WMCasino.Report.getReportGroupByDate(data).then(function (response) {
                            return response
                        })
                    },
                    getReportGroupByGameType: function (data) {
                        return Lotus.WMCasino.Report.Statement.getReportGroupByGameType(data).then(function (response) {
                            return response
                        })
                    },
                    getPlayerBetItems: function (data) {
                        return Lotus.WMCasino.Report.Statement.getBetItems(data).then(function (response) {
                            return response
                        })
                    }
                },
                LegendCasino: {
                    getReportGroupByGameType: function (data) {
                        return Lotus.SenCasino.Report.Statement.getReportGroupByGameType(data).then(function (response) {
                            return response
                        })
                    },
                    Sedie: {
                        getPlayerBetItems: function (data) {
                            return Lotus.SenCasino.Games.Sedie.Report.getBetItems(data).then(function (response) {
                                return response
                            })
                        }
                    }

                }
            }
            this.Legend = {
                GameSetting: {
                    getGamePayouts: function () {
                        return Lotus.Lottery789.GameSetting.getGamePayouts().then(function (resp) {
                            return resp;
                        })
                    },
                    getGameSettings: function () {
                        return Lotus.Lottery789.GameSetting.getGameSettings().then(function (resp) {
                            return resp;
                        })
                    }
                },
                getOdds: function (data) {
                    if (data.Term === undefined){
                        data.Term = $rootScope.termName
                    }
                    return Lotus.Lottery789.Odds.getOdds(data).then(function (resp) {
                        return resp;
                    })
                },
                getLiveOdds: function (data) {
                    return Lotus.Lottery789.Odds.getLiveOdds(data).then(function (resp) {
                        return resp;
                    })
                },
                Play: function (data) {
                    return Lotus.Lottery789.GamePlay.play(data).then(function (resp) {
                        return resp;
                    })
                },
                checkTx: function (data) {
                    return Lotus.Lottery789.GamePlay.Ticket.checkTx(data).then(function (response) {
                        return response
                    })
                },
                Ticket: {
                    Latest: function (data) {
                        return Lotus.Lottery789.GamePlay.Ticket.latest(data).then(function (result) {
                            return result
                        })
                    },
                    Current: function (data) {
                        return Lotus.Lottery789.GamePlay.Ticket.current(data).then(function (result) {
                            return result
                        })
                    },
                    TicketItem: function (data) {
                        return Lotus.Lottery789.GamePlay.TicketItem.getItemsByTicketNumbers(data).then(function (resp) {
                            return resp
                        })
                    },
                    getItemsByTerm: function (data) {
                        return Lotus.Lottery789.GamePlay.TicketItem.getItemsByTerm(data).then(function (resp) {
                            return resp
                        })
                    }
                }
            }
        })
})();
Array.prototype.groupBy = function(hash){
    var _hash = hash ? hash : function(o){return o;};
    var _map = {};
    var put = function(map, key, value){
        if (!map[_hash(key)]) {
            map[_hash(key)] = {};
            map[_hash(key)].group = [];
            map[_hash(key)].key = key;
        }
        map[_hash(key)].group.push(value);
    };
    this.map(function(obj){
        put(_map, obj, obj);
    });
    return Object.keys(_map).map(function(key){
        return {group: _map[key].group};
    });
};
(function ()
{
    'use strict';

    angular
        .module('app.core')
        .factory('msUtils', msUtils);

    /** @ngInject */
    function msUtils($window){
        // Private variables
        let mobileDetect = new MobileDetect($window.navigator.userAgent),
            browserInfo = null;

        let service = {
            exists       : exists,
            detectBrowser: detectBrowser,
            guidGenerator: guidGenerator,
            isMobile     : isMobile,
            toggleInArray: toggleInArray,
            generateRandomId: generateRandomId,
            permNumber: permNumber,
            groupBy      : groupBy,
            removeDuplicates : removeDuplicates,
            removeDup : removeDup,
            containsAll : containsAll,
            pad: pad,
            generatorNumber: generatorNumber,
            generatorMatrix: generatorMatrix,
            generatorSouthMatrix: generatorSouthMatrix,
        };
        return service;

        function containsAll(needles, haystack){
            for(let i = 0; i < needles.length; i++){
                if(haystack.indexOf(needles[i]) === -1) return false;
            }
            return true;
        }

        function pad(n, width, z) {
            z = z || '0';
            n = n + '';
            return n.length >= width ? n : new Array(width - n.length + 1).join(z) + n;
        }

        function removeDuplicates(originalArray, param){
            return originalArray.filter(function(item, pos, array){
                return array.map(function(mapItem){ return mapItem[param]; }).indexOf(item[param]) === pos;
            })
        }

        function removeDup(names) {
            let unique = {};
            names.forEach(function(i) {
                if(!unique[i]) {
                    unique[i] = true;
                }
            });
            return Object.keys(unique);
        }

        //////////
        function permNumber(input) {
            function permutations(data) {
                data = data.slice();  // make a copy
                let reputation = [],
                    shock = [];
                function Perm() {
                    if (data.length === 0) {
                        reputation.push(shock.slice());
                    }
                    for (let i = 0; i < data.length; i++) {
                        let x = data.splice(i, 1);
                        shock.push(x);
                        Perm();
                        shock.pop();
                        data.splice(i, 0, x);
                    }
                }
                Perm();
                return reputation;
            }
            input = input.split('');
            let result = permutations(input);
            for (let i = 0; i < result.length; i++) {
                result[i] = result[i].join('');
            }
            return result.filter(function (item, index, inputArray) {	//Lọc trùng
                return inputArray.indexOf(item) === index;
            })
        }

        function generateRandomId() {
            let charSet = '0123456789';
            let id = '';
            for (let i = 1; i <= 18; i++) {
                let randPos = Math.floor(Math.random() * 10);
                id += charSet[randPos];
            }
            return id;
        }

        function groupBy(array, f) {
            let groups = {};
            array.forEach(function (o) {
                let group = JSON.stringify(f(o));
                groups[group] = groups[group] || [];
                groups[group].push(o);
            });
            return Object.keys(groups).map(function (group) {
                return groups[group];
            })
        }
        /**
         * Check if item exists in a list
         *
         * @param item
         * @param list
         * @returns {boolean}
         */
        function exists(item, list)        {
            return list.indexOf(item) > -1;
        }

        function generatorNumber(length) {
            let result           = '';
            let characters       = '0123456789';
            let charactersLength = characters.length;
            for ( let i = 0; i < length; i++ ) {
                result += characters.charAt(Math.floor(Math.random() * charactersLength));
            }
            return result;
        }

        function generatorMatrix(arr){
            let matrix = {};
            for (let i = 0; i < 10; i++) {
                matrix[i] = [];
            }
            Object.keys(arr).forEach(function (key){
                if (exists(key, ['Jackpot', 'First', 'Second', 'Third', 'Fourth', 'Fifth', 'Sixth', 'Seventh', 'Eighth'])){
                    if (arr[key] !== undefined){
                        appendObject(arr[key], key === 'Jackpot')
                    }
                }
            })
            function appendObject(numbers, cond){
                if (!Array.isArray(numbers)){
                    appendNumber(numbers, cond)
                }else{
                    for (let i = 0; i < numbers.length; i++){
                        appendNumber(numbers[i])
                    }
                }
            }
            function appendNumber(number, cond){
                let last2 = number.slice(-2);
                if (last2.length === 2){
                    if (cond){
                        matrix[last2.split('')[0]].push({value: last2.split('')[1], jack: true});
                    }else{
                        matrix[last2.split('')[0]].push({value: last2.split('')[1]});
                    }
                }
            }

            Object.keys(matrix).forEach(function (key){
                matrix[key] = matrix[key].sort(function (a, b){
                    return a.value - b.value
                })
            })
            return matrix;
        }

        function generatorSouthMatrix(arr){
            let matrix = {};
            for (let i = 0; i < 10; i++) {
                matrix[i] = {1: [], 2: [], 3: []};
            }
            for (let j = 0; j < arr.length; j++){
                Object.keys(arr[j]).forEach(function (key){
                    if (exists(key, ['Jackpot', 'First', 'Second', 'Third', 'Fourth', 'Fifth', 'Sixth', 'Seventh', 'Eighth'])){
                        if (arr[j][key] !== undefined){
                            appendObject(arr[j][key], key === 'Jackpot', arr[j].Type)
                        }
                    }
                })
            }
            function appendObject(numbers, cond, Type){
                if (!Array.isArray(numbers)){
                    appendNumber(numbers, Type, cond)
                }else{
                    for (let i = 0; i < numbers.length; i++){
                        appendNumber(numbers[i], Type)
                    }
                }
            }
            function appendNumber(number, Type, cond){
                let last2 = number.slice(-2);
                if (cond){
                    matrix[last2.split('')[0]][Type].push({value: last2.split('')[1], jack: true});
                }else{
                    matrix[last2.split('')[0]][Type].push({value: last2.split('')[1]});
                }
            }
            return matrix;
        }
        /**
         * Returns browser information
         * from user agent data
         *
         * Found at http://www.quirksmode.org/js/detect.html
         * but modified and updated to fit for our needs
         */
        function detectBrowser()
        {
            // If we already tested, do not test again
            if ( browserInfo )
            {
                return browserInfo;
            }

            let browserData = [
                {
                    string       : $window.navigator.userAgent,
                    subString    : 'Edge',
                    versionSearch: 'Edge',
                    identity     : 'Edge'
                },
                {
                    string   : $window.navigator.userAgent,
                    subString: 'Chrome',
                    identity : 'Chrome'
                },
                {
                    string       : $window.navigator.userAgent,
                    subString    : 'OmniWeb',
                    versionSearch: 'OmniWeb/',
                    identity     : 'OmniWeb'
                },
                {
                    string       : $window.navigator.vendor,
                    subString    : 'Apple',
                    versionSearch: 'Version',
                    identity     : 'Safari'
                },
                {
                    prop    : $window.opera,
                    identity: 'Opera'
                },
                {
                    string   : $window.navigator.vendor,
                    subString: 'iCab',
                    identity : 'iCab'
                },
                {
                    string   : $window.navigator.vendor,
                    subString: 'KDE',
                    identity : 'Konqueror'
                },
                {
                    string   : $window.navigator.userAgent,
                    subString: 'Firefox',
                    identity : 'Firefox'
                },
                {
                    string   : $window.navigator.vendor,
                    subString: 'Camino',
                    identity : 'Camino'
                },
                {
                    string   : $window.navigator.userAgent,
                    subString: 'Netscape',
                    identity : 'Netscape'
                },
                {
                    string       : $window.navigator.userAgent,
                    subString    : 'MSIE',
                    identity     : 'Explorer',
                    versionSearch: 'MSIE'
                },
                {
                    string       : $window.navigator.userAgent,
                    subString    : 'Trident/7',
                    identity     : 'Explorer',
                    versionSearch: 'rv'
                },
                {
                    string       : $window.navigator.userAgent,
                    subString    : 'Gecko',
                    identity     : 'Mozilla',
                    versionSearch: 'rv'
                },
                {
                    string       : $window.navigator.userAgent,
                    subString    : 'Mozilla',
                    identity     : 'Netscape',
                    versionSearch: 'Mozilla'
                }
            ];

            let osData = [
                {
                    string   : $window.navigator.platform,
                    subString: 'Win',
                    identity : 'Windows'
                },
                {
                    string   : $window.navigator.platform,
                    subString: 'Mac',
                    identity : 'Mac'
                },
                {
                    string   : $window.navigator.platform,
                    subString: 'Linux',
                    identity : 'Linux'
                },
                {
                    string   : $window.navigator.platform,
                    subString: 'iPhone',
                    identity : 'iPhone'
                },
                {
                    string   : $window.navigator.platform,
                    subString: 'iPod',
                    identity : 'iPod'
                },
                {
                    string   : $window.navigator.platform,
                    subString: 'iPad',
                    identity : 'iPad'
                },
                {
                    string   : $window.navigator.platform,
                    subString: 'Android',
                    identity : 'Android'
                }
            ];

            let versionSearchString = '';

            function searchString(data)
            {
                for ( let i = 0; i < data.length; i++ )
                {
                    let dataString = data[i].string;
                    let dataProp = data[i].prop;

                    versionSearchString = data[i].versionSearch || data[i].identity;

                    if ( dataString )
                    {
                        if ( dataString.indexOf(data[i].subString) !== -1 )
                        {
                            return data[i].identity;

                        }
                    }
                    else if ( dataProp )
                    {
                        return data[i].identity;
                    }
                }
            }

            function searchVersion(dataString)
            {
                let index = dataString.indexOf(versionSearchString);

                if ( index === -1 )
                {
                    return;
                }

                return parseInt(dataString.substring(index + versionSearchString.length + 1));
            }

            let browser = searchString(browserData) || 'unknown-browser';
            let version = searchVersion($window.navigator.userAgent) || searchVersion($window.navigator.appVersion) || 'unknown-version';
            let os = searchString(osData) || 'unknown-os';

            // Prepare and store the object
            browser = browser.toLowerCase();
            version = browser + '-' + version;
            os = os.toLowerCase();

            browserInfo = {
                browser: browser,
                version: version,
                os     : os
            };

            return browserInfo;
        }

        /**
         * Generates a globally unique id
         *
         * @returns {*}
         */
        function guidGenerator()
        {
            let S4 = function ()
            {
                return (((1 + Math.random()) * 0x10000) || 0).toString(16).substring(1);
            };
            return (S4() + S4() + S4() + S4() + S4() + S4());
        }

        /**
         * Return if current device is a
         * mobile device or not
         */
        function isMobile()
        {
            return mobileDetect.mobile();
        }

        /**
         * Toggle in array (push or splice)
         *
         * @param item
         * @param array
         */
        function toggleInArray(item, array)
        {
            if ( array.indexOf(item) === -1 )
            {
                array.push(item);
            }
            else
            {
                array.splice(array.indexOf(item), 1);
            }
        }
    }
}());
(function ()
{
    'use strict';

    angular
        .module('app.core')
        .provider('msApi', msApiProvider);

    /** @ngInject **/
    function msApiProvider()
    {
        /* ----------------- */
        /* Provider          */
        /* ----------------- */
        var provider = this;

        // Inject the $log service
        var $log = angular.injector(['ng']).get('$log');

        // Data
        var baseUrl = '';
        var api = [];

        // Methods
        provider.setBaseUrl = setBaseUrl;
        provider.getBaseUrl = getBaseUrl;
        provider.getApiObject = getApiObject;
        provider.register = register;

        //////////

        /**
         * Set base url for API endpoints
         *
         * @param url {string}
         */
        function setBaseUrl(url)
        {
            baseUrl = url;
        }

        /**
         * Return the base url
         *
         * @returns {string}
         */
        function getBaseUrl()
        {
            return baseUrl;
        }

        /**
         * Return the api object
         *
         * @returns {object}
         */
        function getApiObject()
        {
            return api;
        }

        /**
         * Register API endpoint
         *
         * @param key
         * @param resource
         */
        function register(key, resource)
        {
            if ( !angular.isString(key) )
            {
                $log.error('"path" must be a string (eg. `dashboard.project`)');
                return;
            }

            if ( !angular.isArray(resource) )
            {
                $log.error('"resource" must be an array and it must follow $resource definition');
                return;
            }

            // Store the API object
            api[key] = {
                url          : baseUrl + (resource[0] || ''),
                paramDefaults: resource[1] || [],
                actions      : resource[2] || [],
                options      : resource[3] || {}
            };
        }

        /* ----------------- */
        /* Service           */
        /* ----------------- */
        this.$get = function ($log, $q, $resource, $rootScope)
        {
            // Data

            // Methods
            var service = {
                setBaseUrl: setBaseUrl,
                getBaseUrl: getBaseUrl,
                register  : register,
                resolve   : resolve,
                request   : request
            };

            return service;

            //////////

            /**
             * Resolve an API endpoint
             *
             * @param action {string}
             * @param parameters {object}
             * @returns {promise|boolean}
             */
            function resolve(action, parameters)
            {
                // Emit an event
                $rootScope.$broadcast('msApi::resolveStart');
                
                var actionParts = action.split('@'),
                    resource = actionParts[0],
                    method = actionParts[1],
                    params = parameters || {};

                if ( !resource || !method )
                {
                    $log.error('msApi.resolve requires correct action parameter (resourceName@methodName)');
                    return false;
                }

                // Create a new deferred object
                var deferred = $q.defer();

                // Get the correct resource definition from api object
                var apiObject = api[resource];

                if ( !apiObject )
                {
                    $log.error('Resource "' + resource + '" is not defined in the api service!');
                    deferred.reject('Resource "' + resource + '" is not defined in the api service!');
                }
                else
                {
                    // Generate the $resource object based on the stored API object
                    var resourceObject = $resource(apiObject.url, apiObject.paramDefaults, apiObject.actions, apiObject.options);

                    // Make the call...
                    resourceObject[method](params,

                        // Success
                        function (response)
                        {
                            deferred.resolve(response);

                            // Emit an event
                            $rootScope.$broadcast('msApi::resolveSuccess');
                        },

                        // Error
                        function (response)
                        {
                            deferred.reject(response);

                            // Emit an event
                            $rootScope.$broadcast('msApi::resolveError');
                        }
                    );
                }

                // Return the promise
                return deferred.promise;
            }

            /**
             * Make a request to an API endpoint
             *
             * @param action {string}
             * @param [parameters] {object}
             * @param [success] {function}
             * @param [error] {function}
             *
             * @returns {promise|boolean}
             */
            function request(action, parameters, success, error)
            {
                // Emit an event
                $rootScope.$broadcast('msApi::requestStart');
                
                var actionParts = action.split('@'),
                    resource = actionParts[0],
                    method = actionParts[1],
                    params = parameters || {};

                if ( !resource || !method )
                {
                    $log.error('msApi.resolve requires correct action parameter (resourceName@methodName)');
                    return false;
                }

                // Create a new deferred object
                var deferred = $q.defer();

                // Get the correct resource definition from api object
                var apiObject = api[resource];

                if ( !apiObject )
                {
                    $log.error('Resource "' + resource + '" is not defined in the api service!');
                    deferred.reject('Resource "' + resource + '" is not defined in the api service!');
                }
                else
                {
                    // Generate the $resource object based on the stored API object
                    var resourceObject = $resource(apiObject.url, apiObject.paramDefaults, apiObject.actions, apiObject.options);

                    // Make the call...
                    resourceObject[method](params,

                        // SUCCESS
                        function (response)
                        {
                            // Emit an event
                            $rootScope.$broadcast('msApi::requestSuccess');
                            
                            // Resolve the promise
                            deferred.resolve(response);

                            // Call the success function if there is one
                            if ( angular.isDefined(success) && angular.isFunction(success) )
                            {
                                success(response);
                            }
                        },

                        // ERROR
                        function (response)
                        {
                            // Emit an event
                            $rootScope.$broadcast('msApi::requestError');
                            
                            // Reject the promise
                            deferred.reject(response);

                            // Call the error function if there is one
                            if ( angular.isDefined(error) && angular.isFunction(error) )
                            {
                                error(response);
                            }
                        }
                    );
                }

                // Return the promise
                return deferred.promise;
            }
        };
    }
})();
(function () {
    'use strict';
    angular.module('app.core')
        .service('message', function ($mdDialog, $mdToast) {
            this.show = function (msg) {
                $mdDialog.show({
                    parent: angular.element(document.body),
                    template:
                        '<md-dialog class="message md-primary-bg" aria-label="message dialog">' +
                        '  <md-dialog-content style="min-width: 400px">' +
                        '   <div class="md-dialog-content">' +
                        '       <p class="text-center">'+ msg +'</p>' +
                        '   </div>' +
                        '</md-dialog-content>' +
                        '  <md-dialog-actions>' +
                        '    <md-button ng-click="closeDialog()" class="md-warn">OK</md-button>' +
                        '  </md-dialog-actions>' +
                        '</md-dialog>',
                    controller: function dialogCtrl($scope) {
                        $scope.closeDialog = function() {
                            $mdDialog.hide();
                        }
                    }
                });
            };
            this.infoMultiple = function (msg) {
                $mdDialog.show(
                    $mdDialog.alert()
                        .clickOutsideToClose(true)
                        .multiple(true)
                        .parent(angular.element(document.body))
                        .textContent(msg)
                        .ariaLabel('Alert Dialog')
                        .ok('OK')
                )
            };
            this.popup = function (msg){
                $mdDialog.show({
                    controller: popupDialogCtrl,
                    templateUrl: 'app/main/announcements/views/dialog.html',
                    // clickOutsideToClose:true,
                    // fullscreen: true,
                    locals: {msg: msg}
                })

                function popupDialogCtrl($scope, $mdDialog, msg) {
                    $scope.cancel = function() {
                        $mdDialog.cancel();
                    };
                    function htmlDecode(input){
                        let e = document.createElement('textarea');
                        e.innerHTML = input;
                        // handle case of empty input
                        return e.childNodes.length === 0 ? "" : e.childNodes[0].nodeValue;
                    }
                    $scope.message = htmlDecode(msg);
                }
            }
            this.toast = function (msg) {
                $mdToast.show($mdToast.simple().textContent(msg).position('bottom right').hideDelay(3000))
            }
        })
})();

(function ()
{
    'use strict';

    angular
        .module('app.core')
        .factory('apiResolver', apiResolverService);

    /** @ngInject */
    function apiResolverService($q, $log, api)
    {
        var service = {
            resolve: resolve
        };

        return service;

        //////////
        /**
         * Resolve api
         * @param action
         * @param parameters
         */
        function resolve(action, parameters)
        {
            var actionParts = action.split('@'),
                resource = actionParts[0],
                method = actionParts[1],
                params = parameters || {};

            if ( !resource || !method )
            {
                $log.error('apiResolver.resolve requires correct action parameter (ResourceName@methodName)');
                return false;
            }

            // Create a new deferred object
            var deferred = $q.defer();

            // Get the correct api object from api service
            var apiObject = getApiObject(resource);

            if ( !apiObject )
            {
                $log.error('Resource "' + resource + '" is not defined in the api service!');
                deferred.reject('Resource "' + resource + '" is not defined in the api service!');
            }
            else
            {
                apiObject[method](params,

                    // Success
                    function (response)
                    {
                        deferred.resolve(response);
                    },

                    // Error
                    function (response)
                    {
                        deferred.reject(response);
                    }
                );
            }

            // Return the promise
            return deferred.promise;
        }

        /**
         * Get correct api object
         *
         * @param resource
         * @returns {*}
         */
        function getApiObject(resource)
        {
            // Split the resource in case if we have a dot notated object
            var resourceParts = resource.split('.'),
                apiObject = api;

            // Loop through the resource parts and go all the way through
            // the api object and return the correct one
            for ( var l = 0; l < resourceParts.length; l++ )
            {
                if ( angular.isUndefined(apiObject[resourceParts[l]]) )
                {
                    $log.error('Resource part "' + resourceParts[l] + '" is not defined!');
                    apiObject = false;
                    break;
                }

                apiObject = apiObject[resourceParts[l]];
            }

            if ( !apiObject )
            {
                return false;
            }

            return apiObject;
        }
    }

})();
(function ()
{
    'use strict';

    angular
        .module('app.core')
        .filter('filterByTags', filterByTags)
        .filter('filterSingleByTags', filterSingleByTags);

    /** @ngInject */
    function filterByTags()
    {
        return function (items, tags)
        {
            if ( items.length === 0 || tags.length === 0 )
            {
                return items;
            }

            var filtered = [];

            items.forEach(function (item)
            {
                var match = tags.every(function (tag)
                {
                    var tagExists = false;

                    item.tags.forEach(function (itemTag)
                    {
                        if ( itemTag.name === tag.name )
                        {
                            tagExists = true;
                            return;
                        }
                    });

                    return tagExists;
                });

                if ( match )
                {
                    filtered.push(item);
                }
            });

            return filtered;
        };
    }

    /** @ngInject */
    function filterSingleByTags()
    {
        return function (itemTags, tags)
        {
            if ( itemTags.length === 0 || tags.length === 0 )
            {
                return;
            }

            if ( itemTags.length < tags.length )
            {
                return [];
            }

            var filtered = [];

            var match = tags.every(function (tag)
            {
                var tagExists = false;

                itemTags.forEach(function (itemTag)
                {
                    if ( itemTag.name === tag.name )
                    {
                        tagExists = true;
                        return;
                    }
                });

                return tagExists;
            });

            if ( match )
            {
                filtered.push(itemTags);
            }

            return filtered;
        };
    }

})();
(function (){
    'use strict';
    angular
        .module('app.core')
        .filter('SportGroup', function () {
            let SportList = [
                {SportType: 0, en: 'SportsBook', vn: 'Thể Thao'},
                {SportType: 1, en: 'NumberGame', vn: 'Trò chơi Số'},
                {SportType: 2, en: 'VirtualSports', vn: 'Thể Thao Ảo'},
                {SportType: 3, en: 'Arcadia Gaming', vn: 'Arcadia Gaming'},
                {SportType: 4, en: 'Saba.Club', vn: 'Saba.Club'},
                {SportType: 5, en: 'Keno', vn: 'Keno'},
                {SportType: 6, en: 'Lottery', vn: 'Lottery'},
                {SportType: 7, en: 'RNG Casino', vn: 'RNG Casino'},
                {SportType: 99, en: 'Others', vn: 'Trò chơi khác'},
            ];
            return function (input, cond) {
                let Sport = $.grep(SportList, function (value, i) {
                    return value.SportType === parseInt(input)
                });
                if (Sport.length){
                    return cond === 'en' ? Sport[0].en : Sport[0].vn;
                }else{
                    return 'Undefined'
                }
            }
        })

        .filter('sabaSportType', function () {
            let SportList = [
                {SportType: '1', name: 'Soccer', vn: 'Bóng Đá'},
                {SportType: '1MP', name: 'SoccerParlay', vn: 'Xiên Bóng Đá'},
                {SportType: '2', name: 'Basketball', vn: 'Bóng Rổ'},
                {SportType: '3', name: 'Football', vn: 'Bóng Bầu Dục Mỹ'},
                {SportType: '5', name: 'Tennis', vn: 'Quần Vợt'},
                {SportType: '8', name: 'Baseball', vn: 'Bóng Chày'},
                {SportType: '10', name: 'Golf', vn: 'Đánh Golf'},
                {SportType: '11', name: 'Motorsports', vn: 'Đua xe Mô Tô'},
                {SportType: '43', name: 'E_Sports', vn: 'Thể Thao Điện Tử'},
                {SportType: '99', name: 'OtherSports', vn: 'Môn Thể Thao khác'},
                {SportType: '99MP', name: 'MixSportsParlay', vn: 'Xiên Thể Thao'},
                {SportType: '161', name: 'NumberGame', vn: 'Number Game'},
                {SportType: '180', name: 'VirtualSports', vn: 'Thể Thao Ảo'},
            ];
            return function (input, cond) {
                let Sport = $.grep(SportList, function (value, i) {
                    return value.name === input
                });
                if (Sport.length){
                    return cond === 'vn' ? Sport[0].vn : Sport[0].SportType;
                }else{
                    return 'Undefined'
                }
            }
        })

        .filter('SabaTicketStatus', function () {
            let Languages = [
                {en: "won", vn: 'Thắng'},
                {en: "lose", vn: 'Thua'},
                {en: "half won", vn: 'Thắng nửa'},
                {en: "half lose", vn: 'Thua nửa'},
                {en: "void", vn: 'Huỷ'},
                {en: "running", vn: 'Đang chạy'},
                {en: "draw", vn: 'Hoà'},
                {en: "reject", vn: 'Từ chối'},
                {en: "refund", vn: 'Hoàn tiền'},
                {en: "waiting", vn: 'Đang chờ'},
            ];
            return function (input) {
                let lang = $.grep(Languages, function (value, i) {
                    return value.en === input
                });
                if (lang.length){
                    return lang[0].vn;
                }else{
                    return input
                }
            }
        })

        .filter('SabaOddsType', function () {
            let OddsType = [
                {id: 0, name: 'SP'},
                {id: 1, name: 'MY'},
                {id: 2, name: 'CN'},
                {id: 3, name: 'DEC'},
                {id: 4, name: 'IN'},
                {id: 5, name: 'AM'},
            ];
            return function (input) {
                let odd = $.grep(OddsType, function (value, i) {
                    return value.id === parseInt(input)
                });
                if (odd.length){
                    return odd[0].name;
                }else{
                    return input
                }
            }
        })

        .filter('sabaSportsBet', function (){
            let SportTypes = [
                {"SportID": 1,"Sport": "Bóng đá"},
                {"SportID": 2,"Sport": "Bóng rổ"},
                {"SportID": 3,"Sport": "Bóng bầu dục Mỹ"},
                {"SportID": 4,"Sport": "Khúc côn cầu trên băng"},
                {"SportID": 5,"Sport": "Quần vợt"},
                {"SportID": 6,"Sport": "Bóng chuyền"},
                {"SportID": 7,"Sport": "Snooker/Pool"},
                {"SportID": 8,"Sport": "Bóng chày"},
                {"SportID": 9,"Sport": "Cầu lông"},
                {"SportID": 10,"Sport": "Đánh Golf"},
                {"SportID": 11,"Sport": "Thể Thao Môtô"},
                {"SportID": 12,"Sport": "Bơi lội"},
                {"SportID": 13,"Sport": "Chính trị"},
                {"SportID": 14,"Sport": "Bóng nước"},
                {"SportID": 15,"Sport": "Lặn"},
                {"SportID": 16,"Sport": "Quyền anh"},
                {"SportID": 17,"Sport": "Bắn cung"},
                {"SportID": 18,"Sport": "Bóng bàn"},
                {"SportID": 19,"Sport": "Cử tạ"},
                {"SportID": 20,"Sport": "Canoeing"},
                {"SportID": 21,"Sport": "Thể dục"},
                {"SportID": 22,"Sport": "Điền kinh"},
                {"SportID": 23,"Sport": "Cưỡi ngựa"},
                {"SportID": 24,"Sport": "Bóng ném"},
                {"SportID": 25,"Sport": "Ném phi tiêu"},
                {"SportID": 26,"Sport": "Bóng bầu dục"},
                {"SportID": 27,"Sport": "Cricket"},
                {"SportID": 28,"Sport": "Khúc côn cầu trên cỏ"},
                {"SportID": 29,"Sport": "Winter Sports"},
                {"SportID": 30,"Sport": "Squash"},
                {"SportID": 31,"Sport": "Giải Trí"},
                {"SportID": 32,"Sport": "Netball"},
                {"SportID": 33,"Sport": "Đua xe đạp"},
                {"SportID": 34,"Sport": "Đấu kiếm"},
                {"SportID": 35,"Sport": "Judo"},
                {"SportID": 36,"Sport": "M. Pentathlon"},
                {"SportID": 37,"Sport": "Rowing"},
                {"SportID": 38,"Sport": "Đua thuyền buồm"},
                {"SportID": 39,"Sport": "Bắn súng"},
                {"SportID": 40,"Sport": "Taekwondo"},
                {"SportID": 41,"Sport": "Triathlon"},
                {"SportID": 42,"Sport": "Đấu vật"},
                {"SportID": 43,"Sport": "Thể Thao Điện Tử"},
                {"SportID": 44,"Sport": "Quyền Thái"},
                {"SportID": 45,"Sport": "Beach Volleyball"},
                {"SportID": 47,"Sport": "Kabaddi"},
                {"SportID": 48,"Sport": "Cầu mây"},
                {"SportID": 49,"Sport": "Bóng đá trong nhà"},
                {"SportID": 50,"Sport": "Cricket"},
                {"SportID": 51,"Sport": "Bóng đá bãi biển"},
                {"SportID": 52,"Sport": "Poker"},
                {"SportID": 53,"Sport": "Cờ vua"},
                {"SportID": 54,"Sport": "Olympics"},
                {"SportID": 55,"Sport": "Tài chính"},
                {"SportID": 56,"Sport": "Lô tô"},
                {"SportID": 99,"Sport": "Môn thể thao khác"},
                {"SportID": 161, "Sport": "Number Game"},
                {"SportID": 164, "Sport": "Happy 5"},
                {"SportID": 168, "Sport": "Các trò chơi liên kết Happy 5"},
                {"SportID": 165, "Sport": "Arcadia Gaming"},
                {"SportID": 180, "Sport": "Bóng đá Ảo"},
                {"SportID": 181, "Sport": "Đua Ngựa Ảo"},
                {"SportID": 182, "Sport": "Đua Chó Ảo"},
                {"SportID": 183, "Sport": "Đua xe mô tô ảo"},
                {"SportID": 184, "Sport": "Đua xe Ảo"},
                {"SportID": 185, "Sport": "Đua xe đạp ảo"},
                {"SportID": 186, "Sport": "Quần Vợt Ảo"},
                {"SportID": 190, "Sport": "Giải đấu Bóng đá Ảo"},
                {"SportID": 191, "Sport": "Quốc gia Bóng đá Ảo"},
                {"SportID": 192, "Sport": "Giải vô địch bóng đá thế giới ảo"},
                {"SportID": 193, "Sport": "Bóng rổ Ảo"},
                {"SportID": 194, "Sport": "Cúp bóng đá ảo Châu Á"},
                {"SportID": 195, "Sport": "Virtual Soccer English Premier"},
                {"SportID": 196, "Sport": "Cúp bóng đá ảo"},
                {"SportID": 197, "Sport": "Cúp Bóng Đá Euro Ảo"},
                {"SportID": 199, "Sport": "Virtual Sports Parlay"},
                {"SportID": 200, "Sport": "Saba.Club"},
                {"SportID": 202, "Sport": "RNG Keno"},
                {"SportID": 220, "Sport": "Lottery"},
                {"SportID": 208, "Sport": "RNG Game"},
                {"SportID": 210, "Sport": "RNG Mobile"},
            ];
            return function (input) {
                let SportType = $.grep(SportTypes, function (value, i) {
                    return value.SportID === parseInt(input)
                });
                if (SportType.length){
                    return SportType[0].Sport;
                }else{
                    return 'SportType ['+ input + ']'
                }
            }
        })

        .filter('BetTag', function (){
            return function (input, tag){
                if (tag === undefined){
                    return input
                }else{
                    let arTag = tag.split('-')
                    input = input.replace("{X}", arTag[0]);
                    input = input.replace("{Y}", arTag[1]);
                    return input
                }
            }
        })

        .filter('sabaCurrency', function (){
            return function (input){
                if (!isNaN(input)){
                    return new Intl.NumberFormat({ maximumSignificantDigits: 4 }).format(input)
                }else{
                    return input
                }
            }
        })
})();
(function () {
    'use strict';
    angular
        .module('app.core')


        .filter('legendGame', function () {
            let gameList = [
                {id: 0, name: 'Miền Bắc'},
                {id: 1, name: 'Miền Nam'}
            ];
            return function (input) {
                let game = $.grep(gameList, function (value, i) {
                    return value.id === parseInt(input)
                });
                if (game.length){
                    return game[0].name;
                }
            }
        })


})();
(function () {
    'use strict';
    angular
        .module('app.core')
        .filter('roundPam', function () {
            return function (input) {
                if (input > 1000000000) {
                    return input / 1000000000 + 'B'
                } else if (input > 1000000) {
                    return input / 1000000 + 'M'
                } else if (input > 1000) {
                    return input / 1000 + 'K'
                } else {
                    return input
                }
            }
        })
        .filter('shortname', function () {
            return function (input) {
                var name = input.split(' '), result = '';
                angular.forEach(name, function (n) {
                    result += n.substring(0, 1)
                });
                return result
            }
        })
        .filter('unixToHuman', function () {
            return function (input) {
                input = input < 0 ? 0 : input;
                var hour, minute, second;
                hour = Math.floor(input / 3600);
                minute = Math.floor((input - hour * 3600) / 60);
                second = Math.floor((input - hour * 3600 - minute * 60));

                // hour = hour < 10 ? '0' + hour : hour;
                minute = minute < 10 ? '0' + minute : minute;
                second = second < 10 ? '0' + second : second;
                if (hour !== 0) {
                    return hour + ':' + minute + ':' + second
                } else {
                    return minute + ':' + second
                }

            }
        })
        .filter('toHuman', function () {
            return function (input) {
                var minute = Math.floor(input / 60);
                var second = Math.floor((input - minute * 60));
                second = second < 10 ? '0' + second : second;
                return minute + ':' + second
            }
        })
        .filter('sumPointTicket', function () {
            return function (input) {
                var output = 0;
                angular.forEach(input, function (item) {
                    output += item.Point
                });
                return output;
            }
        })
        .filter('sumMoneyCost', function ($rootScope) {
            return function (input) {
                let betTimesArr = [
                    {GameType: 0, BetType: 5, times: 10},
                    {GameType: 0, BetType: 6, times: 4},

                    {GameType: 1, BetType: 2, times: 54},
                    {GameType: 1, BetType: 3, times: 81},
                    {GameType: 1, BetType: 4, times: 108},
                    {GameType: 1, BetType: 7, times: 4},
                    {GameType: 1, BetType: 9, times: 27},
                    {GameType: 1, BetType: 10, times: 3},
                    {GameType: 1, BetType: 12, times: 23},
                    {GameType: 1, BetType: 14, times: 20},

                    {GameType: 2, BetType: 2, times: 36},
                    {GameType: 2, BetType: 3, times: 54},
                    {GameType: 2, BetType: 4, times: 72},
                    {GameType: 2, BetType: 15, times: 18},
                    {GameType: 2, BetType: 16, times: 7},
                    {GameType: 2, BetType: 17, times: 17},
                    {GameType: 2, BetType: 18, times: 7},
                    {GameType: 2, BetType: 19, times: 16},

                    {GameType: 3, BetType: 2, times: 36},
                    {GameType: 3, BetType: 3, times: 54},
                    {GameType: 3, BetType: 4, times: 72},
                    {GameType: 3, BetType: 15, times: 18},
                    {GameType: 3, BetType: 16, times: 7},
                    {GameType: 3, BetType: 17, times: 17},
                    {GameType: 3, BetType: 18, times: 7},
                    {GameType: 3, BetType: 19, times: 16},

                    {GameType: 4, BetType: 2, times: 36},
                    {GameType: 4, BetType: 3, times: 54},
                    {GameType: 4, BetType: 4, times: 72},
                    {GameType: 4, BetType: 15, times: 18},
                    {GameType: 4, BetType: 16, times: 7},
                    {GameType: 4, BetType: 17, times: 17},
                    {GameType: 4, BetType: 18, times: 7},
                    {GameType: 4, BetType: 19, times: 16},

                    {GameType: 5, BetType: 2, times: 72},
                    {GameType: 5, BetType: 3, times: 108},
                    {GameType: 5, BetType: 4, times: 144}
                ];
                let betTimesObj = betTimesArr.filter(function (item) {
                    return item.GameType === input.GameType && item.BetType === input.BetType
                });
                let betTimes = betTimesObj.length ? betTimesObj[0].times : 1;
                let output = 0;
                let payout = $rootScope.myParameters.filter(function (my) {
                    return my.GameType === input.GameType && my.BetType === input.BetType
                })[0].Payouts;
                angular.forEach(input.Items, function (item) {
                    if (input.GameType === 0 && input.BetType === 5) {
                        output += item.Point * (item.Price - payout) / 10
                    } else if (input.GameType === 0 && input.BetType === 6) {
                        output += item.Point * (item.Price - payout)
                    } else {
                        output += item.Price * item.Point
                    }
                });
                if (input.GameType === 0 && input.BetType === 5) {
                    return output
                } else if (input.GameType === 2 && input.BetType ===27) {
                    return output * input.PrizeNr
                }else if (input.GameType === 1 && input.BetType === 20){
                    return output * input.PrizeNr
                }else{
                    return output * betTimes
                }
            }
        })
        .filter('pickingNumber', function () {
            return function (input) {
                var output = [];
                angular.forEach(input, function (nrs) {
                    output = output.concat(nrs.Nrs)
                });
                output = output.filter(function (item, index, inputArray) {	//Lọc trùng
                    return inputArray.indexOf(item) === index;
                });
                return output.join(', ')
            }
        })
        .filter('gameByTerm', function ($rootScope) {
            return function (input) {
                if (parseInt(input) === 1) {
                    return 'Miền Bắc 2'
                } else {
                    return $.grep($rootScope.currentTerm, function (value, i) {
                        return value.GameType === parseInt(input)
                    })[0].CityName;
                }

            }
        })
        .filter('production', function () {
            return function (input) {
                if (input === 0){
                    return 'Xổ số truyền thống'
                }else if (input === 1){
                    return 'Xổ số 789'
                }else if (input === 2){
                    return '789 Casino'
                }else if (input === 100){
                    return 'WM Casino'
                }else if (input === 101){
                    return 'Bong88'
                }
            }
        })
        .filter('payment', function () {
            return function (input) {
                let output = input === 0 ? 'Trả sau' : 'Trả trước';
                return output
            }
        })
        .filter('paymentDay', function () {
            let paymentDays = [
                {id: 1, name: 'Thứ 2'},
                {id: 2, name: 'Thứ 3'},
                {id: 3, name: 'Thứ 4'},
                {id: 4, name: 'Thứ 5'},
                {id: 5, name: 'Thứ 6'},
                {id: 6, name: 'Thứ 7'},
                {id: 7, name: 'Chủ nhật'}
            ];
            return function (input) {
                let day = $.grep(paymentDays, function (value, i) {
                    return value.id === parseInt(input)
                });
                if (day.length){
                    return day[0].name;
                }
            }
        })
        .filter('LegendCasino', function () {
            let gameList = [
                {id: 0, name: 'Xóc Đĩa'},
                {id: 100, name: 'Bầu cử TT'},
            ];
            return function (input) {
                let game = $.grep(gameList, function (value, i) {
                    return value.id === parseInt(input)
                });
                if (game.length){
                    return game[0].name;
                }
            }
        })
        .filter('SedieBet', function () {
            let gameList = [
                {id: 0, name: 'Chẵn'},
                {id: 1, name: 'Lẻ'},
                {id: 2, name: '4 Đỏ'},
                {id: 3, name: '4 Trắng'},
                {id: 4, name: '1 Đỏ'},
                {id: 5, name: '3 Đỏ'}
            ];
            return function (input) {
                let game = $.grep(gameList, function (value, i) {
                    return value.id === parseInt(input)
                });
                if (game.length) {
                    return game[0].name;
                }
            }
        })
        .filter('WMGame', function () {
            let gameList = [
                {id: 101, name: 'Baccarat'},
                {id: 102, name: 'Rồng Hổ'},
                {id: 103, name: 'Roulette'},
                {id: 104, name: 'Tài Xỉu'},
                {id: 105, name: 'Ngưu Ngưu'},
                {id: 106, name: 'Ba Cây'},
                {id: 107, name: 'Fan Tan'},
                {id: 108, name: 'Xóc Đĩa'},
                {id: 110, name: 'Tôm Cua Cá'},
                {id: 111, name: 'Trác Kim Hoa'},
                {id: 112, name: 'Bài cửu Ôn Châu'},
                {id: 113, name: 'Mạt Chược'},
                {id: 128, name: 'Andar Bahar'}
            ];
            return function (input) {
                let game = $.grep(gameList, function (value, i) {
                    return value.id === parseInt(input)
                });
                if (game.length){
                    return game[0].name;
                }
            }
        })
        .filter('game', function () {
            // GameType
            var gameList = [
                {id: 0, name: 'Miền Bắc 1'},
                {id: 1, name: 'Miền Bắc 2'},
                {id: 2, name: 'Miền Nam 18A'},
                {id: 3, name: 'Miền Nam 18B'},
                {id: 4, name: 'Miền Nam 18C'},
                {id: 5, name: 'Miền Nam 18A + 18B'}
            ];
            return function (input) {
                let game = $.grep(gameList, function (value, i) {
                    return value.id === parseInt(input)
                });
                if (game.length) {
                    return game[0].name;
                }
            }
        })
        .filter('bet', function () {
            // BetType
            let betList = [
                {id: 0, name: 'Đề'},
                {id: 1, name: 'Lô'},
                {id: 2, name: 'Xiên 2'},
                {id: 3, name: 'Xiên 3'},
                {id: 4, name: 'Xiên 4'},
                {id: 5, name: 'Đề trượt'},
                {id: 6, name: 'Lô Trượt'},
                {id: 7, name: '2D Đầu'},
                {id: 8, name: '2D Đuôi'},
                {id: 9, name: '2D 27Lô'},
                {id: 10, name: '3D Đầu'},
                {id: 11, name: '3D Đuôi', mb: 'Đề 3 Càng'},
                {id: 12, name: '3D 23Lô', mb: 'Lô 3 Càng'},
                {id: 13, name: '4D Đuôi', mb: 'Đề 4 Càng'},
                {id: 14, name: '4D 20Lô', mb: 'Lô 4 Càng'},
                {id: 15, name: '2D 18Lô'},
                {id: 16, name: '2D 7Lô'},
                {id: 17, name: '3D 17Lô'},
                {id: 18, name: '3D 7Lô'},
                {id: 19, name: '4D 16Lô'},
                {id: 20, name: 'Lô Live'},
                {id: 21, name: 'Đề Đầu'},
                {id: 22, name: 'Đề Giải 1'},
                {id: 23, name: 'Đề Đầu Giải 1', short: 'Đề Đầu G1'},
                {id: 24, name: 'Đề Thần Tài', short: 'Đề TT'},
                {id: 25, name: 'Đề Đầu Thần Tài', short: 'Đề Đầu TT'},
                {id: 26, name: 'Live 3D', mb: 'Live 3 Càng'},
                {id: 27, name: '2D 18Lô Live'},
                {id: 28, name: 'Live 3D'},
                {id: 29, name: 'Lô Đầu'},
                {id: 30, name: '2D 18Lô Đầu'},
            ];
            return function (input, short, GameType) {
                GameType = parseInt(GameType);
                let bet = $.grep(betList, function (value, i) {
                    return value.id === parseInt(input)
                });
                if (bet.length){
                    if (GameType === 0){
                        if (bet[0].mb !== undefined){
                            return bet[0].mb
                        }else {
                            return bet[0].name
                        }
                    }
                    if (short && bet[0].short !== undefined){
                        return  bet[0].short;
                    }else{
                        return  bet[0].name;
                    }
                }
            }

        })
        .filter('announcements', function () {
            return function (input) {
                if (input === 'normal'){
                    return 'Thông thường'
                }else if (input === 'special'){
                    return 'Quan Trọng'
                }else if (input === 'system'){
                    return 'Hệ thống'
                }else{
                    return 'Cá nhân'
                }
            };
        })
        .filter('joinArr', function () {
            return function (input) {
                input = input.filter(function (item, index, inputArray) {	//Lọc trùng
                    return inputArray.indexOf(item) === index;
                });
                return input.join(', ');
            }
        })
        .filter('group', function () {
            var groups = [
                {id: 0, name: 'Administrator'},
                {id: 16, name: 'Công ty'},
                {id: 32, name: 'Quản trị'},
                {id: 64, name: 'Cổ đông'},
                {id: 128, name: 'Tổng đại lý'},
                {id: 256, name: 'Đại lý'},
                {id: 512, name: 'Hội viên'}
            ];

            function localization(input) {
                return $.grep(groups, function (value) {
                    return value.id === parseInt(input)
                })[0].name;
            }

            localization.$stateful = true;
            return localization;
        })
        .filter('betfilter', function () {
            return function (input) {
                if (input === undefined) {
                    return 'Tất cả'
                } else {
                    var output = [];
                    var outbet = [];
                    $.each(input, function (index, value) {
                        if (value.gameType === 0) {
                            outbet = [];
                            if (value.betTypes === undefined) {
                                outbet.push('Tất cả')
                            } else {
                                $.each(value.betTypes, function (i, bet) {
                                    if (bet === 0) {
                                        outbet.push('Đề')
                                    }
                                    if (bet === 1) {
                                        outbet.push('Lô')
                                    }
                                    if (bet === 2) {
                                        outbet.push('Xiên 2')
                                    }
                                    if (bet === 3) {
                                        outbet.push('Xiên 3')
                                    }
                                    if (bet === 4) {
                                        outbet.push('Xiên 4')
                                    }
                                    if (bet === 5) {
                                        outbet.push('Đề Trượt')
                                    }
                                    if (bet === 6) {
                                        outbet.push('Lô Trượt')
                                    }
                                    if (bet === 21) {
                                        outbet.push('Đề Đầu')
                                    }
                                    if (bet === 22) {
                                        outbet.push('Đề Giải 1')
                                    }
                                    if (bet === 23) {
                                        outbet.push('Đề Đầu Giải 1')
                                    }
                                    if (bet === 24) {
                                        outbet.push('Đề Thần Tài')
                                    }
                                    if (bet === 25) {
                                        outbet.push('Đề Đầu Thần Tài')
                                    }
                                });
                            }
                            output.push('MB 1 (' + outbet.toString() + ')')
                        }

                        if (value.gameType === 1) {
                            outbet = [];
                            if (value.betTypes === undefined) {
                                outbet.push('Tất cả')
                            } else {
                                $.each(value.betTypes, function (i, bet) {
                                    if (bet === 2) {
                                        outbet.push('Xiên 2')
                                    }
                                    if (bet === 3) {
                                        outbet.push('Xiên 3')
                                    }
                                    if (bet === 4) {
                                        outbet.push('Xiên 4')
                                    }
                                    if (bet === 7) {
                                        outbet.push('2D Đầu')
                                    }
                                    if (bet === 8) {
                                        outbet.push('2D Đuôi')
                                    }
                                    if (bet === 9) {
                                        outbet.push('2D 27Lô')
                                    }
                                    if (bet === 10) {
                                        outbet.push('3D Đầu')
                                    }
                                    if (bet === 11) {
                                        outbet.push('3D Đuôi')
                                    }
                                    if (bet === 12) {
                                        outbet.push('3D 23Lô')
                                    }
                                    if (bet === 13) {
                                        outbet.push('4D Đuôi')
                                    }
                                    if (bet === 14) {
                                        outbet.push('4D 20Lô')
                                    }
                                });
                            }
                            output.push('MB 2 (' + outbet.toString() + ')')
                        }

                        if (value.gameType === 2) {
                            outbet = [];
                            if (value.betTypes === undefined) {
                                outbet.push('Tất cả')
                            } else {
                                $.each(value.betTypes, function (i, bet) {
                                    if (bet === 2) {
                                        outbet.push('Xiên 2')
                                    }
                                    if (bet === 3) {
                                        outbet.push('Xiên 3')
                                    }
                                    if (bet === 4) {
                                        outbet.push('Xiên 4')
                                    }
                                    if (bet === 7) {
                                        outbet.push('2D Đầu')
                                    }
                                    if (bet === 8) {
                                        outbet.push('2D Đuôi')
                                    }
                                    if (bet === 15) {
                                        outbet.push('2D 18Lô')
                                    }
                                    if (bet === 16) {
                                        outbet.push('2D 7Lô')
                                    }
                                    if (bet === 10) {
                                        outbet.push('3D Đầu')
                                    }
                                    if (bet === 11) {
                                        outbet.push('3D Đuôi')
                                    }
                                    if (bet === 17) {
                                        outbet.push('3D 17Lô')
                                    }
                                    if (bet === 18) {
                                        outbet.push('3D 7Lô')
                                    }
                                    if (bet === 13) {
                                        outbet.push('4D Đuôi')
                                    }
                                    if (bet === 19) {
                                        outbet.push('4D 16Lô')
                                    }
                                });
                            }
                            output.push('MN A (' + outbet.toString() + ')')
                        }

                        if (value.gameType === 3) {
                            outbet = [];
                            if (value.betTypes === undefined) {
                                outbet.push('Tất cả')
                            } else {
                                $.each(value.betTypes, function (i, bet) {
                                    if (bet === 2) {
                                        outbet.push('Xiên 2')
                                    }
                                    if (bet === 3) {
                                        outbet.push('Xiên 3')
                                    }
                                    if (bet === 4) {
                                        outbet.push('Xiên 4')
                                    }
                                    if (bet === 7) {
                                        outbet.push('2D Đầu')
                                    }
                                    if (bet === 8) {
                                        outbet.push('2D Đuôi')
                                    }
                                    if (bet === 15) {
                                        outbet.push('2D 18Lô')
                                    }
                                    if (bet === 16) {
                                        outbet.push('2D 7Lô')
                                    }
                                    if (bet === 10) {
                                        outbet.push('3D Đầu')
                                    }
                                    if (bet === 11) {
                                        outbet.push('3D Đuôi')
                                    }
                                    if (bet === 17) {
                                        outbet.push('3D 17Lô')
                                    }
                                    if (bet === 18) {
                                        outbet.push('3D 7Lô')
                                    }
                                    if (bet === 13) {
                                        outbet.push('4D Đuôi')
                                    }
                                    if (bet === 19) {
                                        outbet.push('4D 16Lô')
                                    }
                                });
                            }

                            output.push('MN B (' + outbet.toString() + ')')
                        }

                        if (value.gameType === 4) {
                            outbet = [];
                            if (value.betTypes === undefined) {
                                outbet.push('Tất cả')
                            } else {
                                $.each(value.betTypes, function (i, bet) {
                                    if (bet === 2) {
                                        outbet.push('Xiên 2')
                                    }
                                    if (bet === 3) {
                                        outbet.push('Xiên 3')
                                    }
                                    if (bet === 4) {
                                        outbet.push('Xiên 4')
                                    }
                                    if (bet === 7) {
                                        outbet.push('2D Đầu')
                                    }
                                    if (bet === 8) {
                                        outbet.push('2D Đuôi')
                                    }
                                    if (bet === 15) {
                                        outbet.push('2D 18Lô')
                                    }
                                    if (bet === 16) {
                                        outbet.push('2D 7Lô')
                                    }
                                    if (bet === 10) {
                                        outbet.push('3D Đầu')
                                    }
                                    if (bet === 11) {
                                        outbet.push('3D Đuôi')
                                    }
                                    if (bet === 17) {
                                        outbet.push('3D 17Lô')
                                    }
                                    if (bet === 18) {
                                        outbet.push('3D 7Lô')
                                    }
                                    if (bet === 13) {
                                        outbet.push('4D Đuôi')
                                    }
                                    if (bet === 19) {
                                        outbet.push('4D 16Lô')
                                    }
                                });
                            }
                            output.push('MN C (' + outbet.toString() + ')')
                        }

                        if (value.gameType === 5) {
                            outbet = [];
                            if (value.betTypes === undefined) {
                                outbet.push('Tất cả')
                            } else {
                                $.each(value.betTypes, function (i, bet) {
                                    if (bet === 2) {
                                        outbet.push('Xiên 2')
                                    }
                                    if (bet === 3) {
                                        outbet.push('Xiên 3')
                                    }
                                    if (bet === 4) {
                                        outbet.push('Xiên 4')
                                    }
                                });
                            }
                            output.push('MN AB (' + outbet.toString() + ')')
                        }
                    });
                    return output.toString()
                }
            }
        })
        .filter('sumByKey', function () {
            return function (data, key) {
                if (typeof (data) === 'undefined' || typeof (key) === 'undefined') {
                    return 0;
                }

                var sum = 0;
                for (var i = data.length - 1; i >= 0; i--) {
                    sum += parseInt(data[i][key]);
                }

                return sum;
            };
        })
        .filter('sumOfValue', function () {
            return function (data, key) {
                if (angular.isUndefined(data) || angular.isUndefined(key))
                    return 0;
                var sum = 0;
                angular.forEach(data, function (value) {
                    // console.log(value[key])
                    var val = value[key] === undefined ? 0 : value[key];
                    sum = sum + Math.floor(val);
                });
                return sum;
            }
        })
        .filter('words', function () {
            function isInteger(x) {
                return x % 1 === 0;
            }

            return function (value) {
                if (value && isInteger(value))
                    return numberToText(value * 1000);
                return value;
            };
        })
        .filter('term', function (){
            return function (input) {
                if (input !== undefined){
                    return input.substring(2).replace(/-/g, '')
                }
            }
        })


    let arText = ['không', 'một', 'hai', 'ba', 'bốn', 'năm', 'sáu', 'bảy', 'tám', 'chín'];

    function readDozens(number, fully) {
        let string = "",
            dozen = Math.floor(number / 10),
            unit = number % 10;
        if (dozen > 1) {
            string = " " + arText[dozen] + " mươi";
            if (unit === 1) {
                string += " mốt";
            }
        } else if (dozen === 1) {
            string = " mười";
            if (unit === 1) {
                string += " một";
            }
        } else if (fully && unit > 0) {
            string = " lẻ";
        }
        if (unit === 5 && dozen >= 1) {
            string += " lăm";
        } else if (unit > 1 || (unit === 1 && dozen === 0)) {
            string += " " + arText[unit];
        }
        return string;
    }
    function readBlock(number, fully) {
        let string = "",
            hundred = Math.floor(number / 100);
        number = number % 100;
        if (fully || hundred > 0) {
            string = " " + arText[hundred] + " trăm";
            string += readDozens(number, true);
        } else {
            string = readDozens(number, false);
        }
        return string;
    }
    function readMillions(number, fully) {
        let string = "",
            million = Math.floor(number / 1000000);
        number = number % 1000000;
        if (million > 0) {
            string = readBlock(million, fully) + " triệu";
            fully = true;
        }
        let thousand = Math.floor(number / 1000);
        number = number % 1000;
        if (thousand > 0) {
            string += readBlock(thousand, fully) + " nghìn";
            fully = true;
        }
        if (number > 0) {
            string += readBlock(number, fully);
        }
        return string;
    }
    function numberToText(number) {
        if (number === 0) return ' ' + arText[0];
        let string = "", suffixes = "";
        do {
            let Billion = number % 1000000000;
            number = Math.floor(number / 1000000000);
            if (number > 0) {
                string = readMillions(Billion, true) + suffixes + string;
            } else {
                string = readMillions(Billion, false) + suffixes + string;
            }
            suffixes = " tỷ";
        } while (number > 0);
        return string;
    }

})();

(function ()
{
    'use strict';

    angular
        .module('app.core')
        .filter('filterByPropIds', filterByPropIds);

    /** @ngInject */
    function filterByPropIds()
    {
        return function (items, parameter, ids)
        {
            if ( items.length === 0 || !ids || ids.length === 0 )
            {
                return items;
            }

            var filtered = [];

            for ( var i = 0; i < items.length; i++ )
            {
                var item = items[i];
                var match = false;

                for ( var j = 0; j < ids.length; j++ )
                {
                    var id = ids[j];
                    if ( item[parameter].indexOf(id) > -1 )
                    {
                        match = true;
                        break;
                    }
                }

                if ( match )
                {
                    filtered.push(item);
                }

            }

            return filtered;

        };
    }

})();
(function ()
{
    'use strict';

    angular
        .module('app.core')
        .filter('filterByIds', filterByIds);

    /** @ngInject */
    function filterByIds()
    {
        return function (items, ids)
        {

            if ( items.length === 0 || !ids )
            {
                return items;
            }

            if ( ids.length === 0 )
            {
                return [];
            }

            var filtered = [];

            for ( var i = 0; i < items.length; i++ )
            {
                var item = items[i];
                var match = false;

                for ( var j = 0; j < ids.length; j++ )
                {
                    var id = ids[j];
                    if ( item.id === id )
                    {
                        match = true;
                        break;
                    }
                }

                if ( match )
                {
                    filtered.push(item);
                }

            }

            return filtered;

        };
    }

})();
(function ()
{
    'use strict';

    angular
        .module('app.core')
        .filter('toTrusted', toTrustedFilter)
        .filter('htmlToPlaintext', htmlToPlainTextFilter)
        .filter('nospace', nospaceFilter)
        .filter('humanizeDoc', humanizeDocFilter);

    /** @ngInject */
    function toTrustedFilter($sce)
    {
        return function (value)
        {
            return $sce.trustAsHtml(value);
        };
    }

    /** @ngInject */
    function htmlToPlainTextFilter()
    {
        return function (text)
        {
            return String(text).replace(/<[^>]+>/gm, '').replace(/&nbsp;/g, ' ');
        };
    }

    /** @ngInject */
    function nospaceFilter()
    {
        return function (value)
        {
            return (!value) ? '' : value.replace(/ /g, '');
        };
    }

    /** @ngInject */
    function humanizeDocFilter()
    {
        return function (doc)
        {
            if ( !doc )
            {
                return;
            }
            if ( doc.type === 'directive' )
            {
                return doc.name.replace(/([A-Z])/g, function ($1)
                {
                    return '-' + $1.toLowerCase();
                });
            }
            return doc.label || doc.name;
        };
    }

})();
(function ()
{
    'use strict';

    angular
        .module('app.core')
        .filter('altDate', altDate);

    /** @ngInject */
    function altDate()
    {
        return function (value)
        {
            var diff = Date.now() - new Date(value);

            /**
             * If in a hour
             * e.g. "2 minutes ago"
             */
            if ( diff < (60 * 60 * 1000) )
            {
                return moment(value).fromNow();
            }
            /*
             * If in the day
             * e.g. "11:23"
             */
            else if ( diff < (60 * 60 * 24 * 1000) )
            {
                return moment(value).format('HH:mm');
            }
            /*
             * If in week
             * e.g "Tuesday"
             */
            else if ( diff < (60 * 60 * 24 * 7 * 1000) )
            {
                return moment(value).format('dddd');
            }
            /*
             * If more than a week
             * e.g. 03/29/2016
             */
            else
            {
                return moment(value).calendar();
            }

        };
    }

})();
;(function(global,factory){typeof exports==='object'&&typeof module!=='undefined'&&typeof require==='function'?factory(require('../moment')):typeof define==='function'&&define.amd?define(['../moment'],factory):factory(global.moment)}(this,(function(moment){'use strict';var vi=moment.defineLocale('vi',{months:'Tháng 1_Tháng 2_Tháng 3_Tháng 4_Tháng 5_Tháng 6_Tháng 7_Tháng 8_Tháng 9_Tháng 10_Tháng 11_Tháng 12'.split('_'),monthsShort:'Th01_Th02_Th03_Th04_Th05_Th06_Th07_Th08_Th09_Th10_Th11_Th12'.split('_'),monthsParseExact:true,weekdays:'Chủ nhật_Thứ hai_Thứ ba_Thứ tư_Thứ năm_Thứ sáu_Thứ bảy'.split('_'),weekdaysShort:'CN_T2_T3_T4_T5_T6_T7'.split('_'),weekdaysMin:'CN_T2_T3_T4_T5_T6_T7'.split('_'),weekdaysParseExact:true,meridiemParse:/sa|ch/i,isPM:function(input){return /^ch$/i.test(input);},meridiem:function(hours,minutes,isLower){if(hours<12){return isLower?'sa':'SA';}else{return isLower?'ch':'CH';}},longDateFormat:{LT:'HH:mm',LTS:'HH:mm:ss',L:'DD/MM/YYYY',LL:'D MMMM [năm] YYYY',LLL:'D MMMM [năm] YYYY HH:mm',LLLL:'dddd, D MMMM [năm] YYYY HH:mm',l:'DD/M/YYYY',ll:'D MMM YYYY',lll:'D MMM YYYY HH:mm',llll:'ddd, D MMM YYYY HH:mm'},calendar:{sameDay:'[Hôm nay lúc] LT',nextDay:'[Ngày mai lúc] LT',nextWeek:'dddd [tuần tới lúc] LT',lastDay:'[Hôm qua lúc] LT',lastWeek:'dddd [tuần rồi lúc] LT',sameElse:'L'},relativeTime:{future:'%s tới',past:'%s trước',s:'vài giây',m:'một phút',mm:'%d phút',h:'một giờ',hh:'%d giờ',d:'một ngày',dd:'%d ngày',M:'một tháng',MM:'%d tháng',y:'một năm',yy:'%d năm'},ordinalParse:/\d{1,2}/,ordinal:function(number){return number;},week:{dow:1,doy:4}});return vi;})));
//---------------------------------------------------------------------
// QRCode for JavaScript
//
// Copyright (c) 2009 Kazuhiko Arase, URL: http://www.d-project.com/
// Copyright (c) 2013 Jan Antala, URL: http://www.janantala.com/
//
// Licensed under the MIT license:
//   http://www.opensource.org/licenses/mit-license.php
//
// The word "QR Code" is registered trademark of
// DENSO WAVE INCORPORATED
//   http://www.denso-wave.com/qrcode/faqpatent-e.html
//
//---------------------------------------------------------------------

//---------------------------------------------------------------------
// QR8bitByte
//---------------------------------------------------------------------

function QR8bitByte(data) {
  this.mode = QRMode.MODE_8BIT_BYTE;
  this.data = data;
}

QR8bitByte.prototype = {

  getLength : function(buffer) {
    return this.data.length;
  },

  write : function(buffer) {
    for (var i = 0; i < this.data.length; i++) {
      // not JIS ...
      buffer.put(this.data.charCodeAt(i), 8);
    }
  }
};

//---------------------------------------------------------------------
// ALPHA_NUM
//---------------------------------------------------------------------

function ALPHA_NUM(data) {
  this.mode = QRMode.MODE_ALPHA_NUM;
  this.data = data;
}

ALPHA_NUM.prototype = {

  getCode: function(code) {
    var codes = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ $%*+-./:';
    return codes.indexOf(code);
  },

  getLength : function(buffer) {
    return this.data.length;
  },

  write : function(buffer) {
    for (var i = 0; i < this.data.length; i++) {
      if (this.data[i+1]) {
        buffer.put((45 * this.getCode(this.data[i])) + this.getCode(this.data[i+1]), 11);
      }
      else {
        buffer.put(this.getCode(this.data[i]), 6);
      }
      i++;
    }
  }
};

//---------------------------------------------------------------------
// NUMBER
//---------------------------------------------------------------------

function NUMBER(data) {
  this.mode = QRMode.MODE_NUMBER;
  this.data = data;
}

NUMBER.prototype = {

  getBitLen: function(length) {
    var NUMBER_LENGTH = {3: 10, 2: 7, 1: 4};
    return NUMBER_LENGTH[length];
  },

  getLength : function(buffer) {
    return this.data.length;
  },

  write : function(buffer) {
    for (var i = 0; i < this.data.length; i++) {

      var chars = this.data[i];
      if (this.data[i+1]) {
        chars += this.data[i+1];
      }
      if (this.data[i+2]) {
        chars += this.data[i+2];
      }

      var bitLength = this.getBitLen(chars.length);
      buffer.put(parseInt(chars, 10), bitLength);

      i++;
      i++;
    }
  }
};

//---------------------------------------------------------------------
// QRCode
//---------------------------------------------------------------------

function QRCode(typeNumber, errorCorrectLevel, inputMode) {
  this.typeNumber = typeNumber;
  this.errorCorrectLevel = errorCorrectLevel;
  this.inputMode = inputMode;
  this.modules = null;
  this.moduleCount = 0;
  this.dataCache = null;
  this.dataList = new Array();
}

QRCode.prototype = {

  addData : function(data) {
    var newData;
    if (this.inputMode === 'NUMBER') {
      newData = new NUMBER(data);
    }
    else if (this.inputMode === 'ALPHA_NUM') {
      newData = new ALPHA_NUM(data);
    }
    else {
      newData = new QR8bitByte(data);
    }

    this.dataList.push(newData);
    this.dataCache = null;
  },

  isDark : function(row, col) {
    if (row < 0 || this.moduleCount <= row || col < 0 || this.moduleCount <= col) {
      throw new Error(row + "," + col);
    }
    return this.modules[row][col];
  },

  getModuleCount : function() {
    return this.moduleCount;
  },

  make : function() {
    // Calculate automatically typeNumber if provided is < 1
    if (this.typeNumber < 1 ){
      var typeNumber = 1;
      for (typeNumber = 1; typeNumber < 40; typeNumber++) {
        var rsBlocks = QRRSBlock.getRSBlocks(typeNumber, this.errorCorrectLevel);
        var buffer = new QRBitBuffer();
        var totalDataCount = 0;
        for (var i = 0; i < rsBlocks.length; i++) {
          totalDataCount += rsBlocks[i].dataCount;
        }

        for (var i = 0; i < this.dataList.length; i++) {
          var data = this.dataList[i];
          buffer.put(data.mode, 4);
          buffer.put(data.getLength(), QRUtil.getLengthInBits(data.mode, typeNumber) );
          data.write(buffer);
        }
        if (buffer.getLengthInBits() <= totalDataCount * 8)
          break;
      }
      this.typeNumber = typeNumber;
    }
    this.makeImpl(false, this.getBestMaskPattern() );
  },

  makeImpl : function(test, maskPattern) {

    this.moduleCount = this.typeNumber * 4 + 17;
    this.modules = new Array(this.moduleCount);

    for (var row = 0; row < this.moduleCount; row++) {

      this.modules[row] = new Array(this.moduleCount);

      for (var col = 0; col < this.moduleCount; col++) {
        this.modules[row][col] = null;//(col + row) % 3;
      }
    }

    this.setupPositionProbePattern(0, 0);
    this.setupPositionProbePattern(this.moduleCount - 7, 0);
    this.setupPositionProbePattern(0, this.moduleCount - 7);
    this.setupPositionAdjustPattern();
    this.setupTimingPattern();
    this.setupTypeInfo(test, maskPattern);

    if (this.typeNumber >= 7) {
      this.setupTypeNumber(test);
    }

    if (this.dataCache == null) {
      this.dataCache = QRCode.createData(this.typeNumber, this.errorCorrectLevel, this.dataList);
    }

    this.mapData(this.dataCache, maskPattern);
  },

  setupPositionProbePattern : function(row, col)  {

    for (var r = -1; r <= 7; r++) {

      if (row + r <= -1 || this.moduleCount <= row + r) continue;

      for (var c = -1; c <= 7; c++) {

        if (col + c <= -1 || this.moduleCount <= col + c) continue;

        if ( (0 <= r && r <= 6 && (c == 0 || c == 6) )
            || (0 <= c && c <= 6 && (r == 0 || r == 6) )
            || (2 <= r && r <= 4 && 2 <= c && c <= 4) ) {
          this.modules[row + r][col + c] = true;
        } else {
          this.modules[row + r][col + c] = false;
        }
      }
    }
  },

  getBestMaskPattern : function() {

    var minLostPoint = 0;
    var pattern = 0;

    for (var i = 0; i < 8; i++) {

      this.makeImpl(true, i);

      var lostPoint = QRUtil.getLostPoint(this);

      if (i == 0 || minLostPoint >  lostPoint) {
        minLostPoint = lostPoint;
        pattern = i;
      }
    }

    return pattern;
  },

  createMovieClip : function(target_mc, instance_name, depth) {

    var qr_mc = target_mc.createEmptyMovieClip(instance_name, depth);
    var cs = 1;

    this.make();

    for (var row = 0; row < this.modules.length; row++) {

      var y = row * cs;

      for (var col = 0; col < this.modules[row].length; col++) {

        var x = col * cs;
        var dark = this.modules[row][col];

        if (dark) {
          qr_mc.beginFill(0, 100);
          qr_mc.moveTo(x, y);
          qr_mc.lineTo(x + cs, y);
          qr_mc.lineTo(x + cs, y + cs);
          qr_mc.lineTo(x, y + cs);
          qr_mc.endFill();
        }
      }
    }

    return qr_mc;
  },

  setupTimingPattern : function() {

    for (var r = 8; r < this.moduleCount - 8; r++) {
      if (this.modules[r][6] != null) {
        continue;
      }
      this.modules[r][6] = (r % 2 == 0);
    }

    for (var c = 8; c < this.moduleCount - 8; c++) {
      if (this.modules[6][c] != null) {
        continue;
      }
      this.modules[6][c] = (c % 2 == 0);
    }
  },

  setupPositionAdjustPattern : function() {

    var pos = QRUtil.getPatternPosition(this.typeNumber);

    for (var i = 0; i < pos.length; i++) {

      for (var j = 0; j < pos.length; j++) {

        var row = pos[i];
        var col = pos[j];

        if (this.modules[row][col] != null) {
          continue;
        }

        for (var r = -2; r <= 2; r++) {

          for (var c = -2; c <= 2; c++) {

            if (r == -2 || r == 2 || c == -2 || c == 2
                || (r == 0 && c == 0) ) {
              this.modules[row + r][col + c] = true;
            } else {
              this.modules[row + r][col + c] = false;
            }
          }
        }
      }
    }
  },

  setupTypeNumber : function(test) {

    var bits = QRUtil.getBCHTypeNumber(this.typeNumber);

    for (var i = 0; i < 18; i++) {
      var mod = (!test && ( (bits >> i) & 1) == 1);
      this.modules[Math.floor(i / 3)][i % 3 + this.moduleCount - 8 - 3] = mod;
    }

    for (var i = 0; i < 18; i++) {
      var mod = (!test && ( (bits >> i) & 1) == 1);
      this.modules[i % 3 + this.moduleCount - 8 - 3][Math.floor(i / 3)] = mod;
    }
  },

  setupTypeInfo : function(test, maskPattern) {

    var data = (this.errorCorrectLevel << 3) | maskPattern;
    var bits = QRUtil.getBCHTypeInfo(data);

    // vertical
    for (var i = 0; i < 15; i++) {

      var mod = (!test && ( (bits >> i) & 1) == 1);

      if (i < 6) {
        this.modules[i][8] = mod;
      } else if (i < 8) {
        this.modules[i + 1][8] = mod;
      } else {
        this.modules[this.moduleCount - 15 + i][8] = mod;
      }
    }

    // horizontal
    for (var i = 0; i < 15; i++) {

      var mod = (!test && ( (bits >> i) & 1) == 1);

      if (i < 8) {
        this.modules[8][this.moduleCount - i - 1] = mod;
      } else if (i < 9) {
        this.modules[8][15 - i - 1 + 1] = mod;
      } else {
        this.modules[8][15 - i - 1] = mod;
      }
    }

    // fixed module
    this.modules[this.moduleCount - 8][8] = (!test);

  },

  mapData : function(data, maskPattern) {

    var inc = -1;
    var row = this.moduleCount - 1;
    var bitIndex = 7;
    var byteIndex = 0;

    for (var col = this.moduleCount - 1; col > 0; col -= 2) {

      if (col == 6) col--;

      while (true) {

        for (var c = 0; c < 2; c++) {

          if (this.modules[row][col - c] == null) {

            var dark = false;

            if (byteIndex < data.length) {
              dark = ( ( (data[byteIndex] >>> bitIndex) & 1) == 1);
            }

            var mask = QRUtil.getMask(maskPattern, row, col - c);

            if (mask) {
              dark = !dark;
            }

            this.modules[row][col - c] = dark;
            bitIndex--;

            if (bitIndex == -1) {
              byteIndex++;
              bitIndex = 7;
            }
          }
        }

        row += inc;

        if (row < 0 || this.moduleCount <= row) {
          row -= inc;
          inc = -inc;
          break;
        }
      }
    }

  }

};

QRCode.PAD0 = 0xEC;
QRCode.PAD1 = 0x11;

QRCode.createData = function(typeNumber, errorCorrectLevel, dataList) {

  var rsBlocks = QRRSBlock.getRSBlocks(typeNumber, errorCorrectLevel);

  var buffer = new QRBitBuffer();

  for (var i = 0; i < dataList.length; i++) {
    var data = dataList[i];
    buffer.put(data.mode, 4);
    buffer.put(data.getLength(), QRUtil.getLengthInBits(data.mode, typeNumber) );
    data.write(buffer);
  }

  // calc num max data.
  var totalDataCount = 0;
  for (var i = 0; i < rsBlocks.length; i++) {
    totalDataCount += rsBlocks[i].dataCount;
  }

  if (buffer.getLengthInBits() > totalDataCount * 8) {
    throw new Error("code length overflow. ("
      + buffer.getLengthInBits()
      + ">"
      +  totalDataCount * 8
      + ")");
  }

  // end code
  if (buffer.getLengthInBits() + 4 <= totalDataCount * 8) {
    buffer.put(0, 4);
  }

  // padding
  while (buffer.getLengthInBits() % 8 != 0) {
    buffer.putBit(false);
  }

  // padding
  while (true) {

    if (buffer.getLengthInBits() >= totalDataCount * 8) {
      break;
    }
    buffer.put(QRCode.PAD0, 8);

    if (buffer.getLengthInBits() >= totalDataCount * 8) {
      break;
    }
    buffer.put(QRCode.PAD1, 8);
  }

  return QRCode.createBytes(buffer, rsBlocks);
}

QRCode.createBytes = function(buffer, rsBlocks) {

  var offset = 0;

  var maxDcCount = 0;
  var maxEcCount = 0;

  var dcdata = new Array(rsBlocks.length);
  var ecdata = new Array(rsBlocks.length);

  for (var r = 0; r < rsBlocks.length; r++) {

    var dcCount = rsBlocks[r].dataCount;
    var ecCount = rsBlocks[r].totalCount - dcCount;

    maxDcCount = Math.max(maxDcCount, dcCount);
    maxEcCount = Math.max(maxEcCount, ecCount);

    dcdata[r] = new Array(dcCount);

    for (var i = 0; i < dcdata[r].length; i++) {
      dcdata[r][i] = 0xff & buffer.buffer[i + offset];
    }
    offset += dcCount;

    var rsPoly = QRUtil.getErrorCorrectPolynomial(ecCount);
    var rawPoly = new QRPolynomial(dcdata[r], rsPoly.getLength() - 1);

    var modPoly = rawPoly.mod(rsPoly);
    ecdata[r] = new Array(rsPoly.getLength() - 1);
    for (var i = 0; i < ecdata[r].length; i++) {
            var modIndex = i + modPoly.getLength() - ecdata[r].length;
      ecdata[r][i] = (modIndex >= 0)? modPoly.get(modIndex) : 0;
    }

  }

  var totalCodeCount = 0;
  for (var i = 0; i < rsBlocks.length; i++) {
    totalCodeCount += rsBlocks[i].totalCount;
  }

  var data = new Array(totalCodeCount);
  var index = 0;

  for (var i = 0; i < maxDcCount; i++) {
    for (var r = 0; r < rsBlocks.length; r++) {
      if (i < dcdata[r].length) {
        data[index++] = dcdata[r][i];
      }
    }
  }

  for (var i = 0; i < maxEcCount; i++) {
    for (var r = 0; r < rsBlocks.length; r++) {
      if (i < ecdata[r].length) {
        data[index++] = ecdata[r][i];
      }
    }
  }

  return data;

}

//---------------------------------------------------------------------
// QRMode
//---------------------------------------------------------------------

var QRMode = {
  MODE_NUMBER :   1 << 0,
  MODE_ALPHA_NUM :  1 << 1,
  MODE_8BIT_BYTE :  1 << 2,
  MODE_KANJI :    1 << 3
};

//---------------------------------------------------------------------
// QRErrorCorrectLevel
//---------------------------------------------------------------------

var QRErrorCorrectLevel = {
  L : 1,
  M : 0,
  Q : 3,
  H : 2
};

//---------------------------------------------------------------------
// QRMaskPattern
//---------------------------------------------------------------------

var QRMaskPattern = {
  PATTERN000 : 0,
  PATTERN001 : 1,
  PATTERN010 : 2,
  PATTERN011 : 3,
  PATTERN100 : 4,
  PATTERN101 : 5,
  PATTERN110 : 6,
  PATTERN111 : 7
};

//---------------------------------------------------------------------
// QRUtil
//---------------------------------------------------------------------

var QRUtil = {

    PATTERN_POSITION_TABLE : [
      [],
      [6, 18],
      [6, 22],
      [6, 26],
      [6, 30],
      [6, 34],
      [6, 22, 38],
      [6, 24, 42],
      [6, 26, 46],
      [6, 28, 50],
      [6, 30, 54],
      [6, 32, 58],
      [6, 34, 62],
      [6, 26, 46, 66],
      [6, 26, 48, 70],
      [6, 26, 50, 74],
      [6, 30, 54, 78],
      [6, 30, 56, 82],
      [6, 30, 58, 86],
      [6, 34, 62, 90],
      [6, 28, 50, 72, 94],
      [6, 26, 50, 74, 98],
      [6, 30, 54, 78, 102],
      [6, 28, 54, 80, 106],
      [6, 32, 58, 84, 110],
      [6, 30, 58, 86, 114],
      [6, 34, 62, 90, 118],
      [6, 26, 50, 74, 98, 122],
      [6, 30, 54, 78, 102, 126],
      [6, 26, 52, 78, 104, 130],
      [6, 30, 56, 82, 108, 134],
      [6, 34, 60, 86, 112, 138],
      [6, 30, 58, 86, 114, 142],
      [6, 34, 62, 90, 118, 146],
      [6, 30, 54, 78, 102, 126, 150],
      [6, 24, 50, 76, 102, 128, 154],
      [6, 28, 54, 80, 106, 132, 158],
      [6, 32, 58, 84, 110, 136, 162],
      [6, 26, 54, 82, 110, 138, 166],
      [6, 30, 58, 86, 114, 142, 170]
    ],

    G15 : (1 << 10) | (1 << 8) | (1 << 5) | (1 << 4) | (1 << 2) | (1 << 1) | (1 << 0),
    G18 : (1 << 12) | (1 << 11) | (1 << 10) | (1 << 9) | (1 << 8) | (1 << 5) | (1 << 2) | (1 << 0),
    G15_MASK : (1 << 14) | (1 << 12) | (1 << 10)  | (1 << 4) | (1 << 1),

    getBCHTypeInfo : function(data) {
      var d = data << 10;
      while (QRUtil.getBCHDigit(d) - QRUtil.getBCHDigit(QRUtil.G15) >= 0) {
        d ^= (QRUtil.G15 << (QRUtil.getBCHDigit(d) - QRUtil.getBCHDigit(QRUtil.G15) ) );
      }
      return ( (data << 10) | d) ^ QRUtil.G15_MASK;
    },

    getBCHTypeNumber : function(data) {
      var d = data << 12;
      while (QRUtil.getBCHDigit(d) - QRUtil.getBCHDigit(QRUtil.G18) >= 0) {
        d ^= (QRUtil.G18 << (QRUtil.getBCHDigit(d) - QRUtil.getBCHDigit(QRUtil.G18) ) );
      }
      return (data << 12) | d;
    },

    getBCHDigit : function(data) {

      var digit = 0;

      while (data != 0) {
        digit++;
        data >>>= 1;
      }

      return digit;
    },

    getPatternPosition : function(typeNumber) {
      return QRUtil.PATTERN_POSITION_TABLE[typeNumber - 1];
    },

    getMask : function(maskPattern, i, j) {

      switch (maskPattern) {

      case QRMaskPattern.PATTERN000 : return (i + j) % 2 == 0;
      case QRMaskPattern.PATTERN001 : return i % 2 == 0;
      case QRMaskPattern.PATTERN010 : return j % 3 == 0;
      case QRMaskPattern.PATTERN011 : return (i + j) % 3 == 0;
      case QRMaskPattern.PATTERN100 : return (Math.floor(i / 2) + Math.floor(j / 3) ) % 2 == 0;
      case QRMaskPattern.PATTERN101 : return (i * j) % 2 + (i * j) % 3 == 0;
      case QRMaskPattern.PATTERN110 : return ( (i * j) % 2 + (i * j) % 3) % 2 == 0;
      case QRMaskPattern.PATTERN111 : return ( (i * j) % 3 + (i + j) % 2) % 2 == 0;

      default :
        throw new Error("bad maskPattern:" + maskPattern);
      }
    },

    getErrorCorrectPolynomial : function(errorCorrectLength) {

      var a = new QRPolynomial([1], 0);

      for (var i = 0; i < errorCorrectLength; i++) {
        a = a.multiply(new QRPolynomial([1, QRMath.gexp(i)], 0) );
      }

      return a;
    },

    getLengthInBits : function(mode, type) {

      if (1 <= type && type < 10) {

        // 1 - 9

        switch(mode) {
        case QRMode.MODE_NUMBER   : return 10;
        case QRMode.MODE_ALPHA_NUM  : return 9;
        case QRMode.MODE_8BIT_BYTE  : return 8;
        case QRMode.MODE_KANJI    : return 8;
        default :
          throw new Error("mode:" + mode);
        }

      } else if (type < 27) {

        // 10 - 26

        switch(mode) {
        case QRMode.MODE_NUMBER   : return 12;
        case QRMode.MODE_ALPHA_NUM  : return 11;
        case QRMode.MODE_8BIT_BYTE  : return 16;
        case QRMode.MODE_KANJI    : return 10;
        default :
          throw new Error("mode:" + mode);
        }

      } else if (type < 41) {

        // 27 - 40

        switch(mode) {
        case QRMode.MODE_NUMBER   : return 14;
        case QRMode.MODE_ALPHA_NUM  : return 13;
        case QRMode.MODE_8BIT_BYTE  : return 16;
        case QRMode.MODE_KANJI    : return 12;
        default :
          throw new Error("mode:" + mode);
        }

      } else {
        throw new Error("type:" + type);
      }
    },

    getLostPoint : function(qrCode) {

      var moduleCount = qrCode.getModuleCount();

      var lostPoint = 0;

      // LEVEL1

      for (var row = 0; row < moduleCount; row++) {

        for (var col = 0; col < moduleCount; col++) {

          var sameCount = 0;
          var dark = qrCode.isDark(row, col);

        for (var r = -1; r <= 1; r++) {

            if (row + r < 0 || moduleCount <= row + r) {
              continue;
            }

            for (var c = -1; c <= 1; c++) {

              if (col + c < 0 || moduleCount <= col + c) {
                continue;
              }

              if (r == 0 && c == 0) {
                continue;
              }

              if (dark == qrCode.isDark(row + r, col + c) ) {
                sameCount++;
              }
            }
          }

          if (sameCount > 5) {
            lostPoint += (3 + sameCount - 5);
          }
        }
      }

      // LEVEL2

      for (var row = 0; row < moduleCount - 1; row++) {
        for (var col = 0; col < moduleCount - 1; col++) {
          var count = 0;
          if (qrCode.isDark(row,     col    ) ) count++;
          if (qrCode.isDark(row + 1, col    ) ) count++;
          if (qrCode.isDark(row,     col + 1) ) count++;
          if (qrCode.isDark(row + 1, col + 1) ) count++;
          if (count == 0 || count == 4) {
            lostPoint += 3;
          }
        }
      }

      // LEVEL3

      for (var row = 0; row < moduleCount; row++) {
        for (var col = 0; col < moduleCount - 6; col++) {
          if (qrCode.isDark(row, col)
              && !qrCode.isDark(row, col + 1)
              &&  qrCode.isDark(row, col + 2)
              &&  qrCode.isDark(row, col + 3)
              &&  qrCode.isDark(row, col + 4)
              && !qrCode.isDark(row, col + 5)
              &&  qrCode.isDark(row, col + 6) ) {
            lostPoint += 40;
          }
        }
      }

      for (var col = 0; col < moduleCount; col++) {
        for (var row = 0; row < moduleCount - 6; row++) {
          if (qrCode.isDark(row, col)
              && !qrCode.isDark(row + 1, col)
              &&  qrCode.isDark(row + 2, col)
              &&  qrCode.isDark(row + 3, col)
              &&  qrCode.isDark(row + 4, col)
              && !qrCode.isDark(row + 5, col)
              &&  qrCode.isDark(row + 6, col) ) {
            lostPoint += 40;
          }
        }
      }

      // LEVEL4

      var darkCount = 0;

      for (var col = 0; col < moduleCount; col++) {
        for (var row = 0; row < moduleCount; row++) {
          if (qrCode.isDark(row, col) ) {
            darkCount++;
          }
        }
      }

      var ratio = Math.abs(100 * darkCount / moduleCount / moduleCount - 50) / 5;
      lostPoint += ratio * 10;

      return lostPoint;
    }

};


//---------------------------------------------------------------------
// QRMath
//---------------------------------------------------------------------

var QRMath = {

  glog : function(n) {

    if (n < 1) {
      throw new Error("glog(" + n + ")");
    }

    return QRMath.LOG_TABLE[n];
  },

  gexp : function(n) {

    while (n < 0) {
      n += 255;
    }

    while (n >= 256) {
      n -= 255;
    }

    return QRMath.EXP_TABLE[n];
  },

  EXP_TABLE : new Array(256),

  LOG_TABLE : new Array(256)

};

for (var i = 0; i < 8; i++) {
  QRMath.EXP_TABLE[i] = 1 << i;
}
for (var i = 8; i < 256; i++) {
  QRMath.EXP_TABLE[i] = QRMath.EXP_TABLE[i - 4]
    ^ QRMath.EXP_TABLE[i - 5]
    ^ QRMath.EXP_TABLE[i - 6]
    ^ QRMath.EXP_TABLE[i - 8];
}
for (var i = 0; i < 255; i++) {
  QRMath.LOG_TABLE[QRMath.EXP_TABLE[i] ] = i;
}

//---------------------------------------------------------------------
// QRPolynomial
//---------------------------------------------------------------------

function QRPolynomial(num, shift) {

  if (num.length == undefined) {
    throw new Error(num.length + "/" + shift);
  }

  var offset = 0;

  while (offset < num.length && num[offset] == 0) {
    offset++;
  }

  this.num = new Array(num.length - offset + shift);
  for (var i = 0; i < num.length - offset; i++) {
    this.num[i] = num[i + offset];
  }
}

QRPolynomial.prototype = {

  get : function(index) {
    return this.num[index];
  },

  getLength : function() {
    return this.num.length;
  },

  multiply : function(e) {

    var num = new Array(this.getLength() + e.getLength() - 1);

    for (var i = 0; i < this.getLength(); i++) {
      for (var j = 0; j < e.getLength(); j++) {
        num[i + j] ^= QRMath.gexp(QRMath.glog(this.get(i) ) + QRMath.glog(e.get(j) ) );
      }
    }

    return new QRPolynomial(num, 0);
  },

  mod : function(e) {

    if (this.getLength() - e.getLength() < 0) {
      return this;
    }

    var ratio = QRMath.glog(this.get(0) ) - QRMath.glog(e.get(0) );

    var num = new Array(this.getLength() );

    for (var i = 0; i < this.getLength(); i++) {
      num[i] = this.get(i);
    }

    for (var i = 0; i < e.getLength(); i++) {
      num[i] ^= QRMath.gexp(QRMath.glog(e.get(i) ) + ratio);
    }

    // recursive call
    return new QRPolynomial(num, 0).mod(e);
  }
};

//---------------------------------------------------------------------
// QRRSBlock
//---------------------------------------------------------------------

function QRRSBlock(totalCount, dataCount) {
  this.totalCount = totalCount;
  this.dataCount  = dataCount;
}

QRRSBlock.RS_BLOCK_TABLE = [

  // L
  // M
  // Q
  // H

  // 1
  [1, 26, 19],
  [1, 26, 16],
  [1, 26, 13],
  [1, 26, 9],

  // 2
  [1, 44, 34],
  [1, 44, 28],
  [1, 44, 22],
  [1, 44, 16],

  // 3
  [1, 70, 55],
  [1, 70, 44],
  [2, 35, 17],
  [2, 35, 13],

  // 4
  [1, 100, 80],
  [2, 50, 32],
  [2, 50, 24],
  [4, 25, 9],

  // 5
  [1, 134, 108],
  [2, 67, 43],
  [2, 33, 15, 2, 34, 16],
  [2, 33, 11, 2, 34, 12],

  // 6
  [2, 86, 68],
  [4, 43, 27],
  [4, 43, 19],
  [4, 43, 15],

  // 7
  [2, 98, 78],
  [4, 49, 31],
  [2, 32, 14, 4, 33, 15],
  [4, 39, 13, 1, 40, 14],

  // 8
  [2, 121, 97],
  [2, 60, 38, 2, 61, 39],
  [4, 40, 18, 2, 41, 19],
  [4, 40, 14, 2, 41, 15],

  // 9
  [2, 146, 116],
  [3, 58, 36, 2, 59, 37],
  [4, 36, 16, 4, 37, 17],
  [4, 36, 12, 4, 37, 13],

  // 10
  [2, 86, 68, 2, 87, 69],
  [4, 69, 43, 1, 70, 44],
  [6, 43, 19, 2, 44, 20],
  [6, 43, 15, 2, 44, 16],

  // 11
  [4, 101, 81],
  [1, 80, 50, 4, 81, 51],
  [4, 50, 22, 4, 51, 23],
  [3, 36, 12, 8, 37, 13],

  // 12
  [2, 116, 92, 2, 117, 93],
  [6, 58, 36, 2, 59, 37],
  [4, 46, 20, 6, 47, 21],
  [7, 42, 14, 4, 43, 15],

  // 13
  [4, 133, 107],
  [8, 59, 37, 1, 60, 38],
  [8, 44, 20, 4, 45, 21],
  [12, 33, 11, 4, 34, 12],

  // 14
  [3, 145, 115, 1, 146, 116],
  [4, 64, 40, 5, 65, 41],
  [11, 36, 16, 5, 37, 17],
  [11, 36, 12, 5, 37, 13],

  // 15
  [5, 109, 87, 1, 110, 88],
  [5, 65, 41, 5, 66, 42],
  [5, 54, 24, 7, 55, 25],
  [11, 36, 12],

  // 16
  [5, 122, 98, 1, 123, 99],
  [7, 73, 45, 3, 74, 46],
  [15, 43, 19, 2, 44, 20],
  [3, 45, 15, 13, 46, 16],

  // 17
  [1, 135, 107, 5, 136, 108],
  [10, 74, 46, 1, 75, 47],
  [1, 50, 22, 15, 51, 23],
  [2, 42, 14, 17, 43, 15],

  // 18
  [5, 150, 120, 1, 151, 121],
  [9, 69, 43, 4, 70, 44],
  [17, 50, 22, 1, 51, 23],
  [2, 42, 14, 19, 43, 15],

  // 19
  [3, 141, 113, 4, 142, 114],
  [3, 70, 44, 11, 71, 45],
  [17, 47, 21, 4, 48, 22],
  [9, 39, 13, 16, 40, 14],

  // 20
  [3, 135, 107, 5, 136, 108],
  [3, 67, 41, 13, 68, 42],
  [15, 54, 24, 5, 55, 25],
  [15, 43, 15, 10, 44, 16],

  // 21
  [4, 144, 116, 4, 145, 117],
  [17, 68, 42],
  [17, 50, 22, 6, 51, 23],
  [19, 46, 16, 6, 47, 17],

  // 22
  [2, 139, 111, 7, 140, 112],
  [17, 74, 46],
  [7, 54, 24, 16, 55, 25],
  [34, 37, 13],

  // 23
  [4, 151, 121, 5, 152, 122],
  [4, 75, 47, 14, 76, 48],
  [11, 54, 24, 14, 55, 25],
  [16, 45, 15, 14, 46, 16],

  // 24
  [6, 147, 117, 4, 148, 118],
  [6, 73, 45, 14, 74, 46],
  [11, 54, 24, 16, 55, 25],
  [30, 46, 16, 2, 47, 17],

  // 25
  [8, 132, 106, 4, 133, 107],
  [8, 75, 47, 13, 76, 48],
  [7, 54, 24, 22, 55, 25],
  [22, 45, 15, 13, 46, 16],

  // 26
  [10, 142, 114, 2, 143, 115],
  [19, 74, 46, 4, 75, 47],
  [28, 50, 22, 6, 51, 23],
  [33, 46, 16, 4, 47, 17],

  // 27
  [8, 152, 122, 4, 153, 123],
  [22, 73, 45, 3, 74, 46],
  [8, 53, 23, 26, 54, 24],
  [12, 45, 15, 28, 46, 16],

  // 28
  [3, 147, 117, 10, 148, 118],
  [3, 73, 45, 23, 74, 46],
  [4, 54, 24, 31, 55, 25],
  [11, 45, 15, 31, 46, 16],

  // 29
  [7, 146, 116, 7, 147, 117],
  [21, 73, 45, 7, 74, 46],
  [1, 53, 23, 37, 54, 24],
  [19, 45, 15, 26, 46, 16],

  // 30
  [5, 145, 115, 10, 146, 116],
  [19, 75, 47, 10, 76, 48],
  [15, 54, 24, 25, 55, 25],
  [23, 45, 15, 25, 46, 16],

  // 31
  [13, 145, 115, 3, 146, 116],
  [2, 74, 46, 29, 75, 47],
  [42, 54, 24, 1, 55, 25],
  [23, 45, 15, 28, 46, 16],

  // 32
  [17, 145, 115],
  [10, 74, 46, 23, 75, 47],
  [10, 54, 24, 35, 55, 25],
  [19, 45, 15, 35, 46, 16],

  // 33
  [17, 145, 115, 1, 146, 116],
  [14, 74, 46, 21, 75, 47],
  [29, 54, 24, 19, 55, 25],
  [11, 45, 15, 46, 46, 16],

  // 34
  [13, 145, 115, 6, 146, 116],
  [14, 74, 46, 23, 75, 47],
  [44, 54, 24, 7, 55, 25],
  [59, 46, 16, 1, 47, 17],

  // 35
  [12, 151, 121, 7, 152, 122],
  [12, 75, 47, 26, 76, 48],
  [39, 54, 24, 14, 55, 25],
  [22, 45, 15, 41, 46, 16],

  // 36
  [6, 151, 121, 14, 152, 122],
  [6, 75, 47, 34, 76, 48],
  [46, 54, 24, 10, 55, 25],
  [2, 45, 15, 64, 46, 16],

  // 37
  [17, 152, 122, 4, 153, 123],
  [29, 74, 46, 14, 75, 47],
  [49, 54, 24, 10, 55, 25],
  [24, 45, 15, 46, 46, 16],

  // 38
  [4, 152, 122, 18, 153, 123],
  [13, 74, 46, 32, 75, 47],
  [48, 54, 24, 14, 55, 25],
  [42, 45, 15, 32, 46, 16],

  // 39
  [20, 147, 117, 4, 148, 118],
  [40, 75, 47, 7, 76, 48],
  [43, 54, 24, 22, 55, 25],
  [10, 45, 15, 67, 46, 16],

  // 40
  [19, 148, 118, 6, 149, 119],
  [18, 75, 47, 31, 76, 48],
  [34, 54, 24, 34, 55, 25],
  [20, 45, 15, 61, 46, 16]
];

QRRSBlock.getRSBlocks = function(typeNumber, errorCorrectLevel) {

  var rsBlock = QRRSBlock.getRsBlockTable(typeNumber, errorCorrectLevel);

  if (rsBlock == undefined) {
    throw new Error("bad rs block @ typeNumber:" + typeNumber + "/errorCorrectLevel:" + errorCorrectLevel);
  }

  var length = rsBlock.length / 3;

  var list = new Array();

  for (var i = 0; i < length; i++) {

    var count = rsBlock[i * 3 + 0];
    var totalCount = rsBlock[i * 3 + 1];
    var dataCount  = rsBlock[i * 3 + 2];

    for (var j = 0; j < count; j++) {
      list.push(new QRRSBlock(totalCount, dataCount) );
    }
  }

  return list;
}

QRRSBlock.getRsBlockTable = function(typeNumber, errorCorrectLevel) {

  switch(errorCorrectLevel) {
  case QRErrorCorrectLevel.L :
    return QRRSBlock.RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 0];
  case QRErrorCorrectLevel.M :
    return QRRSBlock.RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 1];
  case QRErrorCorrectLevel.Q :
    return QRRSBlock.RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 2];
  case QRErrorCorrectLevel.H :
    return QRRSBlock.RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 3];
  default :
    return undefined;
  }
}

//---------------------------------------------------------------------
// QRBitBuffer
//---------------------------------------------------------------------

function QRBitBuffer() {
  this.buffer = new Array();
  this.length = 0;
}

QRBitBuffer.prototype = {

  get : function(index) {
    var bufIndex = Math.floor(index / 8);
    return ( (this.buffer[bufIndex] >>> (7 - index % 8) ) & 1) == 1;
  },

  put : function(num, length) {
    for (var i = 0; i < length; i++) {
      this.putBit( ( (num >>> (length - i - 1) ) & 1) == 1);
    }
  },

  getLengthInBits : function() {
    return this.length;
  },

  putBit : function(bit) {

    var bufIndex = Math.floor(this.length / 8);
    if (this.buffer.length <= bufIndex) {
      this.buffer.push(0);
    }

    if (bit) {
      this.buffer[bufIndex] |= (0x80 >>> (this.length % 8) );
    }

    this.length++;
  }
};

/*
 * author: Amstel D'Almeida
 * email: amstel91@gmail.com
 * https://github.com/amstel91/otp-input-directive
 */
angular.module("otpInputDirective", [])
.directive('otpInputDirective', ['$timeout', function($timeout) {
    return {
        restrict: 'A', // restrict by attribute
        scope: {
            options: "="
        },
        template: "<div>" +
        "<input type='{{type}}' ng-repeat=\"c in characters\" autocomplete='off' ng-keyup='onKeyUp($index,$event)' ng-keydown='onKeyDown($index,$event)' ng-model='c.value' id='otpInput{{c.index}}' name='otpInput{{c.index}}' ng-style=\"style\" placeholder=\"{{placeholder}}\" maxlength=\"1\"  />\n" +
        "</div>",
        link: function($scope, elem) {
            var size = parseInt($scope.options.size) || 6;
            var width = 100 / (size + 1);
            var margin = width / size;
            var tmp = [],
                elementArr = [];
            var DEFAULT_COLOR = "#6f6d6d";
            //generating a random number to attach to id
            var randomNumber = Math.floor(Math.random() * 10000) + 100;
            $scope.style = {
                "margin-right": margin + "%",
                "border": "none",
                "border-bottom": "2px solid",
                "border-radius": "0",
                "display": "inline-block",
                "width": width + "%",
                "text-align": "center",
                "padding": "5px 0px",
                "outline":"none",
                "box-shadow":"none",
                "background":"transparent",
                "border-color": $scope.options.style && $scope.options.style.lineColor ? $scope.options.style.lineColor : DEFAULT_COLOR,
                "color": $scope.options.style && $scope.options.style.color ? $scope.options.style.color : DEFAULT_COLOR,
                "font-size": $scope.options.style && $scope.options.style.fontSize ? scope.options.style.fontSize : "20px"
            };

            $scope.type = $scope.options.type ? $scope.options.type : "text";
            $scope.placeholder = $scope.options.placeholder && $scope.options.placeholder.length === 1 ? $scope.options.placeholder : "";

            $scope.setOtpValue = function() {
                $scope.options.value = "";
                var done = true;
                angular.forEach($scope.characters, function(v, k) {
                    if (v.value.length !== 1) {
                        done = false;
                        return false;
                    }
                    $scope.options.value = $scope.options.value + v.value;
                });
                if (done) {
                    if (typeof($scope.options.onDone) === "function") {
                        $scope.options.onDone($scope.options.value);
                    }
                }
            };

            $scope.onKeyUp = function(index, e) {
                var key = e.keyCode || e.which;
                var old = $scope.options.value;
                $scope.setOtpValue();
                if ($scope.characters[index].value.length > 0 && key !== 8 && index !== size - 1) {
                    $timeout(function() {
                        elementArr[index + 1][0].focus();
                    });
                }
                if (typeof($scope.options.onChange) === "function" && old !== $scope.options.value) {
                    $scope.options.onChange($scope.options.value);
                }
            };

            $scope.onKeyDown = function(index, e) {
                var key = e.keyCode || e.which;
                if (key === 8 && $scope.characters[index].value === "" && index !== 0) {
                    $timeout(function() {
                        elementArr[index - 1][0].focus();
                    });
                }
            };

            for (var i = 0; i < size; i++) {
                tmp.push({
                    index: randomNumber + "-" + i,
                    value: ""
                });
            }
            $scope.characters = tmp;

            $timeout(function() {
                for (var i = 0; i < size; i++) {
                    elementArr.push(angular.element(document.querySelector("#otpInput" + randomNumber + "-" + i)));
                }
                elementArr[0][0].focus();
            });

        }
    }
}]);

(function () {
    'use strict';

    angular
        .module('app.core')
        .directive('numericOnly', numericOnlyDirective)
        .directive('selectOnClick', selectOnClick);

        function selectOnClick($window, $timeout) {
            return {
                restrict: 'A',
                link: function (scope, element, attrs) {
                    element.on('focus', function () {
                        if (parseInt(this.value) === 0){
                            this.value = ''
                        }else{
                            this.select()
                        }
                    })
                }
            };
        }

        function numericOnlyDirective() {
            return {
                require: 'ngModel',
                link: function(scope, element, attrs, modelCtrl) {

                    modelCtrl.$parsers.push(function (inputValue) {
                        var transformedInput = inputValue ? inputValue.replace(/[^\d.-]/g,'') : null;

                        if (transformedInput !== inputValue) {
                            modelCtrl.$setViewValue(transformedInput);
                            modelCtrl.$render();
                        }

                        return transformedInput;
                    });
                }
            };
        }

})();
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require("angular"));
	else if(typeof define === 'function' && define.amd)
		define("ng-currency", ["angular"], factory);
	else if(typeof exports === 'object')
		exports["ng-currency"] = factory(require("angular"));
	else
		root["ng-currency"] = factory(root["angular"]);
})(window, function(__WEBPACK_EXTERNAL_MODULE_angular__) {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./ng-currency-settings.provider.js":
/*!******************************************!*\
  !*** ./ng-currency-settings.provider.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ngCurrencySettings = function () {
  function ngCurrencySettings() {
    _classCallCheck(this, ngCurrencySettings);

    this._defaults = {
      fraction: 0,
      hardCap: false,
      min: undefined,
      max: undefined,
      currencySymbol: ''
    };
  }

  /**
   * The default property values for 'ng-currency'
   */


  _createClass(ngCurrencySettings, [{
    key: "$get",
    value: function $get() {
      var provider = this;
      return {
        /**
         * The default property values for 'ng-currency'
         */
        get defaults() {
          return provider.defaults;
        }
      };
    }
  }, {
    key: "defaults",
    get: function get() {
      return this._defaults;
    },
    set: function set(defaults) {
      this._defaults = defaults;
    }
  }]);

  return ngCurrencySettings;
}();

exports.default = ngCurrencySettings;

/***/ }),

/***/ "./ng-currency.directive.js":
/*!**********************************!*\
  !*** ./ng-currency.directive.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = ngCurrency;
function ngCurrency($filter, $locale, $timeout, ngCurrencySettings) {
  return {
    require: 'ngModel',
    link: function link(scope, element, attrs, controller) {
      var _ngCurrencySettings$d = ngCurrencySettings.defaults,
          hardCap = _ngCurrencySettings$d.hardCap,
          min = _ngCurrencySettings$d.min,
          max = _ngCurrencySettings$d.max,
          currencySymbol = _ngCurrencySettings$d.currencySymbol,
          fraction = _ngCurrencySettings$d.fraction;

      var ngRequired = attrs.required;
      var active = true;

      attrs.$observe('ngCurrency', function (value) {
        active = value !== 'false';
        if (active) {
          reformat();
        } else {
          controller.$viewValue = controller.$$rawModelValue;
          controller.$render();
        }
      });
      attrs.$observe('hardCap', function (value) {
        hardCap = value === 'true';
        revalidate();
      });
      attrs.$observe('min', function (value) {
        min = value ? Number(value) : undefined;
        revalidate();
      });
      attrs.$observe('max', function (value) {
        max = value ? Number(value) : undefined;
        revalidate();
      });
      attrs.$observe('currencySymbol', function (value) {
        currencySymbol = value;
        reformat();
      });
      attrs.$observe('required', function (value) {
        ngRequired = value;
        revalidate();
      });
      attrs.$observe('fraction', function (value) {
        fraction = value || 2;
        reformat();
        revalidate();
      });

      // HACK(nick-woodward): Seriously angular?
      $timeout(function () {
        scope.$emit('currencyRedraw');
      });

      controller.$parsers.push(function (value) {
        if (active && [undefined, null, ''].indexOf(value) === -1) {
          value = clearValue(value);
          value = keepInRange(Number(value));
          return value;
        }
        return value;
      });

      controller.$formatters.push(function (value) {
        if (active && [undefined, null, ''].indexOf(value) === -1) {
          return $filter('currency')(value, getCurrencySymbol(), fraction);
        }
        return value;
      });

      controller.$validators.min = function (value) {
        if (!ngRequired && ([undefined, null, ''].indexOf(value) !== -1 || isNaN(value))) {
          return true;
        }
        return !active || [undefined, null].indexOf(min) !== -1 || isNaN(min) || value >= min;
      };

      controller.$validators.max = function (value) {
        if (!ngRequired && ([undefined, null, ''].indexOf(value) !== -1 || isNaN(value))) {
          return true;
        }
        return !active || [undefined, null].indexOf(max) !== -1 || isNaN(max) || value <= max;
      };

      controller.$validators.fraction = function (value) {
        return !active || !value || !isNaN(value);
      };

      function reformat() {
        if (active) {
          var value = void 0;
          var updateOn = void 0,
              debounce = void 0;
          if (controller.$options) {
            // HACK(nick-woodward): this is to maintain backwards compatability with Angular 1.5.9 and lower.
            // TODO(nick-woodward): This should be removed when ngCurrency does a 2.0.0 release
            // Reference: https://github.com/angular/angular.js/commit/296cfce40c25e9438bfa46a0eb27240707a10ffa
            if (controller.$options.getOption) {
              updateOn = controller.$options.getOption('updateOn');
              debounce = controller.$options.getOption('debounce');
            } else {
              updateOn = controller.$options.updateOn;
              debounce = controller.$options.debounce;
            }
          }
          if (updateOn === 'blur' || debounce) {
            value = controller.$viewValue;
            for (var i = controller.$parsers.length - 1; i >= 0; i--) {
              value = controller.$parsers[i](value);
            }
          } else {
            value = controller.$$rawModelValue;
          }
          for (var _i = controller.$formatters.length - 1; _i >= 0; _i--) {
            value = controller.$formatters[_i](value);
          }
          controller.$viewValue = value;
          controller.$render();
        }
      }

      function revalidate() {
        controller.$validate();
        if (active) {
          var value = keepInRange(controller.$$rawModelValue);
          if (value !== controller.$$rawModelValue) {
            controller.$setViewValue(value.toFixed(fraction));
            controller.$commitViewValue();
            reformat();
          }
        }
      }

      function keepInRange(value) {
        if (hardCap) {
          if (max !== undefined && value > max) {
            value = max;
          } else if (min !== undefined && value < min) {
            value = min;
          }
        }
        return value;
      }

      scope.$on('currencyRedraw', function () {
        revalidate();
        reformat();
      });

      element.bind('focus', function () {
        if (active) {
          var value = clearValue(controller.$viewValue, false);

          if (controller.$viewValue !== value) {
            controller.$viewValue = value;
            controller.$render();
            element.triggerHandler('focus');
          }
        }
      });

      element.bind('blur', reformat);

      // TODO: Rewrite this parsing logic to more readable.

      function decimalRex(dChar) {
        return RegExp('\\d|\\-|\\' + dChar, 'g');
      }

      function clearRex(dChar) {
        return RegExp('\\-{0,1}((\\' + dChar + ')|([0-9]{1,}\\' + dChar + '?))&?[0-9]{0,' + fraction + '}', 'g');
      }

      function clearValue(value) {
        var replaceSeparator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

        value = String(value);
        var decimalSeparator = $locale.NUMBER_FORMATS.DECIMAL_SEP;
        var cleared = null;

        // Replace negative pattern to minus sign (-)
        var neg_dummy = $filter('currency')('-1', getCurrencySymbol(), fraction);
        var neg_regexp = RegExp('[0-9.' + decimalSeparator + $locale.NUMBER_FORMATS.GROUP_SEP + ']+');
        var neg_dummy_txt = neg_dummy.replace(neg_regexp.exec(neg_dummy), '');
        var value_dummy_txt = value.replace(neg_regexp.exec(value), '');

        // If is negative
        if (neg_dummy_txt === value_dummy_txt) {
          value = '-' + neg_regexp.exec(value);
        }

        if (RegExp('^-[\\s]*$', 'g').test(value)) {
          value = '-0';
        }

        if (decimalRex(decimalSeparator).test(value)) {
          cleared = value.match(decimalRex(decimalSeparator)).join('').match(clearRex(decimalSeparator)) || [''];

          cleared = cleared[0];
          cleared = replaceSeparator ? cleared.replace(decimalSeparator, '.') : cleared;
        }

        return cleared || null;
      }

      function getCurrencySymbol() {
        return currencySymbol === undefined ? $locale.NUMBER_FORMATS.CURRENCY_SYM : currencySymbol;
      }
    }
  };
}
ngCurrency.$inject = ['$filter', '$locale', '$timeout', 'ngCurrencySettings'];

/***/ }),

/***/ "./ng-currency.module.js":
/*!*******************************!*\
  !*** ./ng-currency.module.js ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _angular = __webpack_require__(/*! angular */ "angular");

var _angular2 = _interopRequireDefault(_angular);

var _ngCurrencySettingsProvider = __webpack_require__(/*! ./ng-currency-settings.provider.js */ "./ng-currency-settings.provider.js");

var _ngCurrencySettingsProvider2 = _interopRequireDefault(_ngCurrencySettingsProvider);

var _ngCurrencyDirective = __webpack_require__(/*! ./ng-currency.directive.js */ "./ng-currency.directive.js");

var _ngCurrencyDirective2 = _interopRequireDefault(_ngCurrencyDirective);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _module = _angular2.default.module('ng-currency', []);

_module.provider('ngCurrencySettings', _ngCurrencySettingsProvider2.default);
_module.directive('ngCurrency', _ngCurrencyDirective2.default);

exports.default = _module.name;

/***/ }),

/***/ 0:
/*!*************************************!*\
  !*** multi ./ng-currency.module.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! ./ng-currency.module.js */"./ng-currency.module.js");


/***/ }),

/***/ "angular":
/*!**************************!*\
  !*** external "angular" ***!
  \**************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_angular__;

/***/ })

/******/ });
});
//# sourceMappingURL=ng-currency.js.map
(function () {
    'use strict';

    angular
        .module('app.core')
        .directive('hljs', hljsDirective)
        .directive('compareTo', compareTo)

    /** @ngInject */
    function hljsDirective($timeout, $q, $interpolate) {
        return {
            restrict: 'E',
            compile : function (element, attr) {
                var code;
                //No attribute? code is the content
                if (!attr.code) {
                    code = element.html();
                    element.empty();
                }

                return function (scope, element, attr) {

                    if (attr.code) {
                        // Attribute? code is the evaluation
                        code = scope.$eval(attr.code);
                    }
                    var shouldInterpolate = scope.$eval(attr.shouldInterpolate);

                    $q.when(code).then(function (code) {
                        if (code) {
                            if (shouldInterpolate) {
                                code = $interpolate(code)(scope);
                            }
                            var contentParent = angular.element(
                                '<pre><code class="highlight" ng-non-bindable></code></pre>'
                            );
                            element.append(contentParent);
                            // Defer highlighting 1-frame to prevent GA interference...
                            $timeout(function () {
                                render(code, contentParent);
                            }, 34, false);
                        }
                    });

                    function render(contents, parent) {

                        var codeElement = parent.find('code');
                        var lines = contents.split('\n');

                        // Remove empty lines
                        lines = lines.filter(function (line) {
                            return line.trim().length;
                        });

                        // Make it so each line starts at 0 whitespace
                        var firstLineWhitespace = lines[0].match(/^\s*/)[0];
                        var startingWhitespaceRegex = new RegExp('^' + firstLineWhitespace);
                        lines = lines.map(function (line) {
                            return line
                                .replace(startingWhitespaceRegex, '')
                                .replace(/\s+$/, '');
                        });

                        var highlightedCode = hljs.highlight(attr.language || attr.lang, lines.join('\n'), true);
                        highlightedCode.value = highlightedCode.value
                            .replace(/=<span class="hljs-value">""<\/span>/gi, '')
                            .replace('<head>', '')
                            .replace('<head/>', '');
                        codeElement.append(highlightedCode.value).addClass('highlight');
                    }
                };
            }
        }
    }

    compareTo.$inject = [];
    function compareTo() {
        return {
            require: "ngModel",
            scope: {
                compareTolValue: "=compareTo"
            },
            link: function(scope, element, attributes, ngModel) {

                ngModel.$validators.compareTo = function(modelValue) {

                    return modelValue === scope.compareTolValue;
                };

                scope.$watch("compareTolValue", function() {
                    ngModel.$validate();
                });
            }
        };
    }
})();


(function(QRCode){
  'use strict';

  angular.module('ja.qr', [])
  .controller('QrCtrl', ['$scope', function($scope){
    $scope.getTypeNumeber = function(){
      return $scope.typeNumber || 0;
    };

    $scope.getCorrection = function(){
      var levels = {
        'L': 1,
        'M': 0,
        'Q': 3,
        'H': 2
      };

      var correctionLevel = $scope.correctionLevel || 0;
      return levels[correctionLevel] || 0;
    };

    $scope.getText = function(){
      return $scope.text || '';
    };

    $scope.getSize = function(){
      return $scope.size || 250;
    };

    $scope.isNUMBER = function(text){
      var ALLOWEDCHARS = /^[0-9]*$/;
      return ALLOWEDCHARS.test(text);
    };

    $scope.isALPHA_NUM = function(text){
      var ALLOWEDCHARS = /^[0-9A-Z $%*+\-./:]*$/;
      return ALLOWEDCHARS.test(text);
    };

    $scope.is8bit = function(text){
      for (var i = 0; i < text.length; i++) {
        var code = text.charCodeAt(i);
        if (code > 255) {
          return false;
        }
      }
      return true;
    };

    $scope.checkInputMode = function(inputMode, text){
      if (inputMode === 'NUMBER' && !$scope.isNUMBER(text)) {
        throw new Error('The `NUMBER` input mode is invalid for text.');
      }
      else if (inputMode === 'ALPHA_NUM' && !$scope.isALPHA_NUM(text)) {
        throw new Error('The `ALPHA_NUM` input mode is invalid for text.');
      }
      else if (inputMode === '8bit' && !$scope.is8bit(text)) {
        throw new Error('The `8bit` input mode is invalid for text.');
      }
      else if (!$scope.is8bit(text)) {
        throw new Error('Input mode is invalid for text.');
      }

      return true;
    };

    $scope.getInputMode = function(text){
      var inputMode = $scope.inputMode;
      inputMode = inputMode || ($scope.isNUMBER(text) ? 'NUMBER' : undefined);
      inputMode = inputMode || ($scope.isALPHA_NUM(text) ? 'ALPHA_NUM' : undefined);
      inputMode = inputMode || ($scope.is8bit(text) ? '8bit' : '');

      return $scope.checkInputMode(inputMode, text) ? inputMode : '';
    };
  }])
  .directive('qr', ['$timeout', '$window', function($timeout, $window){

    return {
      restrict: 'E',
      template: '<canvas ng-hide="image"></canvas><img ng-if="image" ng-src="{{canvasImage}}"/>',
      scope: {
        typeNumber: '=',
        correctionLevel: '=',
        inputMode: '=',
        size: '=',
        text: '=',
        image: '='
      },
      controller: 'QrCtrl',
      link: function postlink(scope, element, attrs){

        if (scope.text === undefined) {
          throw new Error('The `text` attribute is required.');
        }

        var canvas = element.find('canvas')[0];
        var canvas2D = !!$window.CanvasRenderingContext2D;

        scope.TYPE_NUMBER = scope.getTypeNumeber();
        scope.TEXT = scope.getText();
        scope.CORRECTION = scope.getCorrection();
        scope.SIZE = scope.getSize();
        scope.INPUT_MODE = scope.getInputMode(scope.TEXT);
        scope.canvasImage = '';

        var draw = function(context, qr, modules, tile){
          for (var row = 0; row < modules; row++) {
            for (var col = 0; col < modules; col++) {
              var w = (Math.ceil((col + 1) * tile) - Math.floor(col * tile)),
                  h = (Math.ceil((row + 1) * tile) - Math.floor(row * tile));
              context.fillStyle = qr.isDark(row, col) ? '#000' : '#fff';
              context.fillRect(Math.round(col * tile), Math.round(row * tile), w, h);
            }
          }
        };

        var render = function(canvas, value, typeNumber, correction, size, inputMode){
          var trim = /^\s+|\s+$/g;
          var text = value.replace(trim, '');

          var qr = new QRCode(typeNumber, correction, inputMode);
          qr.addData(text);
          qr.make();

          var context = canvas.getContext('2d');

          var modules = qr.getModuleCount();
          var tile = size / modules;
          canvas.width = canvas.height = size;

          if (canvas2D) {
            draw(context, qr, modules, tile);
            scope.canvasImage = canvas.toDataURL() || '';
          }
        };

        render(canvas, scope.TEXT, scope.TYPE_NUMBER, scope.CORRECTION, scope.SIZE, scope.INPUT_MODE);

        $timeout(function(){
          scope.$watch('text', function(value, old){
            if (value !== old) {
              scope.TEXT = scope.getText();
              scope.INPUT_MODE = scope.getInputMode(scope.TEXT);
              render(canvas, scope.TEXT, scope.TYPE_NUMBER, scope.CORRECTION, scope.SIZE, scope.INPUT_MODE);
            }
          });

          scope.$watch('correctionLevel', function(value, old){
            if (value !== old) {
              scope.CORRECTION = scope.getCorrection();
              render(canvas, scope.TEXT, scope.TYPE_NUMBER, scope.CORRECTION, scope.SIZE, scope.INPUT_MODE);
            }
          });

          scope.$watch('typeNumber', function(value, old){
            if (value !== old) {
              scope.TYPE_NUMBER = scope.getTypeNumeber();
              render(canvas, scope.TEXT, scope.TYPE_NUMBER, scope.CORRECTION, scope.SIZE, scope.INPUT_MODE);
            }
          });

          scope.$watch('size', function(value, old){
            if (value !== old) {
              scope.SIZE = scope.getSize();
              render(canvas, scope.TEXT, scope.TYPE_NUMBER, scope.CORRECTION, scope.SIZE, scope.INPUT_MODE);
            }
          });

          scope.$watch('inputMode', function(value, old){
            if (value !== old) {
              scope.INPUT_MODE = scope.getInputMode(scope.TEXT);
              render(canvas, scope.TEXT, scope.TYPE_NUMBER, scope.CORRECTION, scope.SIZE, scope.INPUT_MODE);
            }
          });
        });

      }
    };
  }]);

})(window.QRCode);

(function(window) {
   var createModule = function(angular) {
      var module = angular.module('FBAngular', []);

      module.factory('Fullscreen', ['$document', function ($document) {
         var document = $document[0];

         var serviceInstance = {
            all: function() {
               serviceInstance.enable( document.documentElement );
            },
            enable: function(element) {
               if(element.requestFullScreen) {
                  element.requestFullScreen();
               } else if(element.mozRequestFullScreen) {
                  element.mozRequestFullScreen();
               } else if(element.webkitRequestFullScreen) {
                  element.webkitRequestFullScreen(Element.ALLOW_KEYBOARD_INPUT);
               } else if (element.msRequestFullscreen) {
                  element.msRequestFullscreen();
               }
            },
            cancel: function() {

               if(document.cancelFullScreen) {
                  document.cancelFullScreen();
               } else if(document.mozCancelFullScreen) {
                  document.mozCancelFullScreen();
               } else if(document.webkitCancelFullScreen) {
                  document.webkitCancelFullScreen();
               } else if (document.msExitFullscreen) {
                  document.msExitFullscreen();
               }
            },
            isEnabled: function(){
               var fullscreenElement = document.fullscreenElement || document.mozFullScreenElement || document.webkitFullscreenElement || document.msFullscreenElement;
               return fullscreenElement;
            },
            toggleAll: function(){
                serviceInstance.isEnabled() ? serviceInstance.cancel() : serviceInstance.all();
            },
            isSupported: function(){
                var docElm = document.documentElement;
                return docElm.requestFullScreen || docElm.mozRequestFullScreen || docElm.webkitRequestFullScreen || docElm.msRequestFullscreen;
            }
         };
         
         return serviceInstance;
      }]);

      module.directive('fullscreen', ['Fullscreen',  function(Fullscreen) {
         return {
            link : function ($scope, $element, $attrs) {
               // Watch for changes on scope if model is provided
               if ($attrs.fullscreen) {
                  $scope.$watch($attrs.fullscreen, function(value) {
                     var isEnabled = Fullscreen.isEnabled();
                     if (value && !isEnabled) {
                        Fullscreen.enable($element[0]);
                        $element.addClass('isInFullScreen');
                     } else if (!value && isEnabled) {
                        Fullscreen.cancel();
                        $element.removeClass('isInFullScreen');
                     }
                  });
                  $element.on('fullscreenchange webkitfullscreenchange mozfullscreenchange', function(){
                     if(!Fullscreen.isEnabled()){
                        $scope.$evalAsync(function(){
                           $scope[$attrs.fullscreen] = false
                           $element.removeClass('isInFullScreen');
                        })
                     }
                  })
               } else {
                  $element.on('click', function (ev) {
                     Fullscreen.enable(  $element[0] );
                  });

                  if ($attrs.onlyWatchedProperty !== undefined) {
                     return;
                  }
               }
            }
         };
      }]);
      return module;
   };

   if (typeof define === "function" && define.amd) {
      define("FBAngular", ['angular'], function (angular) { return createModule(angular); } );
   } else {
      createModule(window.angular);
   }
})(window);

(function ()
{
    'use strict';

    angular
        .module('app.core')
        .provider('fuseConfig', fuseConfigProvider);

    /** @ngInject */
    function fuseConfigProvider()
    {
        // Default configuration
        var fuseConfiguration = {
            'disableCustomScrollbars'        : false,
            'disableMdInkRippleOnMobile'     : true,
            'disableCustomScrollbarsOnMobile': true
        };

        // Methods
        this.config = config;

        //////////

        /**
         * Extend default configuration with the given one
         *
         * @param configuration
         */
        function config(configuration)
        {
            fuseConfiguration = angular.extend({}, fuseConfiguration, configuration);
        }

        /**
         * Service
         */
        this.$get = function ()
        {
            var service = {
                getConfig: getConfig,
                setConfig: setConfig
            };

            return service;

            //////////

            /**
             * Returns a config value
             */
            function getConfig(configName)
            {
                if ( angular.isUndefined(fuseConfiguration[configName]) )
                {
                    return false;
                }

                return fuseConfiguration[configName];
            }

            /**
             * Creates or updates config object
             *
             * @param configName
             * @param configValue
             */
            function setConfig(configName, configValue)
            {
                fuseConfiguration[configName] = configValue;
            }
        };
    }

})();
(function ()
{
    'use strict';

    angular
        .module('app.toolbar')
        .controller('ToolbarController', ToolbarController);

    /** @ngInject */
    function ToolbarController($rootScope, $scope, $q, $state, $timeout, $location, $mdSidenav, $mdDialog, $translate, $mdMedia, $mdToast, msNavigationService, aGames, network, message, Fullscreen, fuseTheming){
        var vm = this;
        $scope.$mdMedia = $mdMedia;
        vm.bodyEl = angular.element('body');
        $rootScope.setTheme = setTheme;

        // Methods
        vm.toggleSidenav = toggleSidenav;
        vm.toggleHorizontalMobileMenu = toggleHorizontalMobileMenu;
        vm.toggleMsNavigationFolded = toggleMsNavigationFolded;
        $rootScope.gotoGame = gotoGame;
        vm.gotoGame = gotoGame;
        vm.showToolbar = showToolbar;
        vm.isFullscreen = isFullscreen;

        vm.setActiveTheme = setActiveTheme;
        vm.viewNotification = viewNotification;


        vm.aGames = aGames.data;
        msNavigationService.saveItem('one.wm-casino', {
            title : 'WM CASINO',
            icon  : 'icon-wm-casino',
            weight: 4
        });

        angular.forEach(vm.aGames, function (item) {
            msNavigationService.saveItem('one.wm-casino.' + item.interName, {
                title: item.name,
                state: 'app.game',
                stateParams: {
                    id: item.interName
                },
                hidden: function () {
                    return item.hidden
                }
            });
        });


        $rootScope.setupTheme = localStorage.getItem('setupTheme') === null ? 'auto' : localStorage.getItem('setupTheme');
        $timeout(function (){
            // console.log($rootScope.setupTheme)
            vm.setActiveTheme($rootScope.setupTheme)
        }, 2000)


        window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', function (event) {
            let newColorScheme = event.matches ? "default" : "tealTheme";
            if ($rootScope.setupTheme === 'auto'){
                fuseTheming.setActiveTheme(newColorScheme)
            }
        });

        function setTheme(theme){
            $rootScope.setupTheme = theme;
            localStorage.setItem('setupTheme', theme);
            vm.setActiveTheme(theme)
        }

        function setActiveTheme(theme){
            if (theme === 'auto' || theme === null){
                if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
                    fuseTheming.setActiveTheme('default')
                }else{
                    fuseTheming.setActiveTheme('tealTheme')
                }
            }else{
                fuseTheming.setActiveTheme(theme)
            }
        }

        function viewNotification(item) {
            if (!item.Read){
                network.Communication.Notification.read({Id: item.Id}).then(function (response) {
                    item.Read = true;
                    $scope.$digest();
                });
            }
            if (item.Category === 0){
                $state.go('app.announcements.threads', {filter: 'system'}).then(function () {
                    $state.go('app.announcements.threads.thread', {threadId: item.Id});
                });
            }else if (item.Category === 1){
                $state.go('app.announcements.threads', {filter: 'normal'}).then(function () {
                    $state.go('app.announcements.threads.thread', {threadId: item.Id});
                });
            }else if (item.Category === 2){
                $state.go('app.announcements.threads', {filter: 'special'}).then(function () {
                    $state.go('app.announcements.threads.thread', {threadId: item.Id});
                });
            }else if (item.Category === 3){
                $state.go('app.announcements.threads', {filter: 'personal'}).then(function () {
                    $state.go('app.announcements.threads.thread', {threadId: item.Id});
                });
            }
        }

        function gotoGame(item, $event) {
            if ($rootScope.isAuthenticated && $rootScope.User.Suspended){
                message.show('Tài khoản của quý khách đang không được phép đặt cược.')
            }else{
                if (item === 'lobby'){
                    console.log('ss')
                    $state.go("app.casino")
                }else {
                    $state.go("app.game", {"id": item.interName})
                }
            }
        }

        // console.log()

        vm.headerMenus = [
            {
                name: 'Miền Bắc',
                state: 'app.traditional.northern.jackpot',
                img: 'assets/images/production/bac.jpg'
            },
            {
                name: 'Miền Nam',
                state: 'app.traditional.southern.2d.dau',
                img: 'assets/images/production/nam.jpg'
            }
        ];
        vm.headerMegaMenus = [
            {
                name: 'Miền Bắc 1',
                state: 'app.traditional.northern.jackpot',
                sub: [
                    {name: 'Đề', state: 'app.traditional.northern.jackpot'},
                    {name: 'Đề đầu', state: 'app.traditional.northern.head-jackpot'},
                    {name: 'Đề giải 1', state: 'app.traditional.northern.first'},
                    {name: 'Đề đầu giải 1', state: 'app.traditional.northern.head-first'},
                    {name: 'Đề Thần Tài', state: 'app.traditional.northern.caishen'},
                    {name: 'Đề đầu Thần Tài', state: 'app.traditional.northern.head-caishen'},
                    {name: 'Lô', state: 'app.traditional.northern.lotto'},
                    {name: 'Lô Live', state: 'app.traditional.northern.live'},
                    {name: 'Lô Xiên', state: 'app.traditional.northern.parlay'},
                    {name: 'Đề trượt', state: 'app.traditional.northern.except-jackpot'},
                    {name: 'Lô trượt', state: 'app.traditional.northern.except-lotto'},
                    {name: '', state: ''},
                ]
            },
            {
                name: 'Miền Bắc 2',
                state: 'app.traditional.northern-2nd.2d.dau',
                sub: [
                    {name: '2D Đầu', state: 'app.traditional.northern-2nd.2d.dau'},
                    {name: '2D Đuôi', state: 'app.traditional.northern-2nd.2d.duoi'},
                    {name: '2D 27Lô', state: 'app.traditional.northern-2nd.2d.27lo'},
                    {name: '3D Đầu', state: 'app.traditional.northern-2nd.3d.dau'},
                    {name: '3D Đuôi', state: 'app.traditional.northern-2nd.3d.duoi'},
                    {name: '3D 23Lô', state: 'app.traditional.northern-2nd.3d.23lo'},
                    {name: '4D Đuôi', state: 'app.traditional.northern-2nd.4d.duoi'},
                    {name: '4D 20Lô', state: 'app.traditional.northern-2nd.4d.20lo'},
                    {name: 'Lô Xiên', state: 'app.traditional.northern-2nd.parlay'},
                    {name: 'Lô Live', state: 'app.traditional.northern-2nd.live'},
                ]
            },
            {
                name: 'Miền Nam',
                state: 'app.traditional.southern.2d.dau',
                sub: [
                    {name: '2D Đầu', state: 'app.traditional.southern.2d.dau'},
                    {name: '2D Đuôi', state: 'app.traditional.southern.2d.duoi'},
                    {name: '2D 18Lô', state: 'app.traditional.southern.2d.18lo'},
                    {name: '3D Đầu', state: 'app.traditional.southern.3d.dau'},
                    {name: '3D Đuôi', state: 'app.traditional.southern.3d.duoi'},
                    {name: '3D 17Lô', state: 'app.traditional.southern.3d.17lo'},
                    {name: '3D 7Lô', state: 'app.traditional.southern.3d.7lo'},
                    {name: '4D Đuôi', state: 'app.traditional.southern.4d.duoi'},
                    {name: '4D 16Lô', state: 'app.traditional.southern.4d.16lo'},
                    {name: 'Xiên 2', state: 'app.traditional.southern.parlay.pair-2'},
                    {name: 'Xiên 3', state: 'app.traditional.southern.parlay.pair-3'},
                    {name: 'Xiên 4', state: 'app.traditional.southern.parlay.pair-4'},
                    {name: '7 Lô', state: 'app.traditional.southern.7lo'},
                    {name: '', state: ''},
                ]
            },
            {
                name: 'Xiên 18A+B',
                state: 'app.traditional.18ab',
                sub: [
                    {name: 'Xiên 2', state: 'app.traditional.18ab'},
                    {name: 'Xiên 3', state: 'app.traditional.18ab'},
                    {name: 'Xiên 4', state: 'app.traditional.18ab'},
                    {name: '', state: ''}
                ]
            }
        ];

        function toggleSidenav(sidenavId){
            $mdSidenav(sidenavId).toggle();
        }

        function toggleHorizontalMobileMenu(){
            vm.bodyEl.toggleClass('ms-navigation-horizontal-mobile-menu-active');
        }

        function toggleMsNavigationFolded(){
            msNavigationService.toggleFolded();
        }

        function isFullscreen() {
            angular.element('html').addClass('is-fullscreen');
            // if (!$mdMedia('gt-sm') && !Fullscreen.isEnabled()){
            //     angular.element('html').addClass('is-fullscreen');
            //     Fullscreen.all();
            // }
        }

        function showToolbar() {
            angular.element('html').removeClass('is-fullscreen');
            if (Fullscreen.isEnabled()){
                Fullscreen.cancel();
            }
        }

        if (document.addEventListener){
            document.addEventListener('fullscreenchange', exitHandler, false);
            document.addEventListener('mozfullscreenchange', exitHandler, false);
            document.addEventListener('MSFullscreenChange', exitHandler, false);
            document.addEventListener('webkitfullscreenchange', exitHandler, false);
        }

        function exitHandler(){
            if (document.webkitIsFullScreen || document.mozFullScreen || document.msFullscreenElement !== null){
                if (!Fullscreen.isEnabled()){
                    angular.element('html').removeClass('is-fullscreen');
                }
            }
        }
    }

})();
(function ()
{
    'use strict';

    angular
        .module('app.quick-panel')
        .controller('QuickPanelController', QuickPanelController);

    /** @ngInject */
    function QuickPanelController(msApi)
    {
        var vm = this;

        // Data
        vm.date = new Date();
        vm.settings = {
            notify: true,
            cloud : false,
            retro : true
        };

        msApi.request('quickPanel.activities@get', {},
            // Success
            function (response)
            {
                vm.activities = response.data;
            }
        );

        msApi.request('quickPanel.events@get', {},
            // Success
            function (response)
            {
                vm.events = response.data;
            }
        );

        msApi.request('quickPanel.notes@get', {},
            // Success
            function (response)
            {
                vm.notes = response.data;
            }
        );

        // Methods

        //////////
    }

})();
(function ()
{
    'use strict';

    angular
        .module('app.navigation', [])
        .config(config);

    /** @ngInject */
    function config()
    {
        
    }

})();
(function ()
{
    'use strict';

    angular
        .module('app.navigation')
        .controller('NavigationController', NavigationController);

    /** @ngInject */
    function NavigationController($scope, fuseTheming){
        var vm = this;

        // Data
        vm.bodyEl = angular.element('body');
        vm.folded = false;
        vm.msScrollOptions = {
            suppressScrollX: true
        };

        // Methods
        vm.toggleMsNavigationFolded = toggleMsNavigationFolded;

        //////////

        /**
         * Toggle folded status
         */
        function toggleMsNavigationFolded(){
            vm.folded = !vm.folded;
        }

        // Close the mobile menu on $stateChangeSuccess
        $scope.$on('$stateChangeSuccess', function (){
            vm.bodyEl.removeClass('ms-navigation-horizontal-mobile-menu-active');
        });

    }

})();
(function (){
    'use strict';

    /**
     * Main module of the Fuse
     */
    angular
        .module('fuse', [
            // Core
            'app.core',
            // Navigation
            'app.navigation',
            // Toolbar
            'app.toolbar',
            // Quick Panel
            'app.quick-panel',
            'app.home',
            'app.account',
            'app.game',
            'app.presidential',
            'app.casino',
            'app.announcements',
            'app.traditional',
            'app.legendary',
            'app.results',
            'app.auth',
            'app.saba',
            'app.wiki',
        ]);
})();
(function (){
    'use strict';

    angular
        .module('fuse')
        .controller('MainController', MainController);

    /** @ngInject */
    function MainController($scope, $rootScope){
        var one = this;
        //////////
        $scope.$on('$viewContentAnimationEnded', function (event){
            if ( event.targetScope.$id === $scope.$id ){
                $rootScope.$broadcast('msSplashScreen::remove');
            }
        });
    }
})();
(function ()
{
    'use strict';

    angular
        .module('app.core')
        .run(runBlock);

    /** @ngInject */
    function runBlock(msUtils, fuseGenerator, fuseConfig)
    {
        /**
         * Generate extra classes based on registered themes so we
         * can use same colors with non-angular-material elements
         */
        fuseGenerator.generate();

        /**
         * Disable md-ink-ripple effects on mobile
         * if 'disableMdInkRippleOnMobile' config enabled
         */
        if ( fuseConfig.getConfig('disableMdInkRippleOnMobile') && msUtils.isMobile() )
        {
            var bodyEl = angular.element('body');
            bodyEl.attr('md-no-ink', true);
        }

        /**
         * Put isMobile() to the html as a class
         */
        if ( msUtils.isMobile() )
        {
            angular.element('html').addClass('is-mobile');
        }

        /**
         * Put browser information to the html as a class
         */
        var browserInfo = msUtils.detectBrowser();
        if ( browserInfo ){
            var htmlClass = browserInfo.browser + ' ' + browserInfo.version + ' ' + browserInfo.os;
            angular.element('html').addClass(htmlClass);
        }
    }
})();
(function ()
{
    'use strict';

    angular
        .module('app.core')
        .config(config);

    /** @ngInject */
    function config($ariaProvider, $logProvider, msScrollConfigProvider, fuseConfigProvider)
    {
        // Enable debug logging
        $logProvider.debugEnabled(true);

        /*eslint-disable */

        // ng-aria configuration
        $ariaProvider.config({
            tabindex: false
        });

        // Fuse theme configurations
        fuseConfigProvider.config({
            'disableCustomScrollbars'        : false,
            'disableCustomScrollbarsOnMobile': true,
            'disableMdInkRippleOnMobile'     : true
        });

        // msScroll configuration
        msScrollConfigProvider.config({
            wheelPropagation: true
        });

        /*eslint-enable */
    }
})();
(function (){
    'use strict';
    angular.module('app.account').controller('accountPanelCtrl', accountPanelCtrl);
    function accountPanelCtrl($mdSidenav){
        var vm = this;
        vm.closeSidenav = closeSidenav;
        function closeSidenav() {
            $mdSidenav('account-panel').close()
        }
    }

})();
(function (){
    'use strict';
    angular
        .module('fuse')
        .run(runBlock);

    /** @ngInject */
    function runBlock($rootScope, $timeout, $state, $location)    {
        // Activate loading indicator
        var stateChangeStartEvent = $rootScope.$on('$stateChangeStart', function (){
            $rootScope.loadingProgress = true;
        });

        // De-activate loading indicator
        var stateChangeSuccessEvent = $rootScope.$on('$stateChangeSuccess', function (){
            $timeout(function (){
                $rootScope.loadingProgress = false;
            });
        });

        // Store state in the root scope for easy access
        $rootScope.state = $state;

        // Cleanup
        $rootScope.$on('$destroy', function (){
            stateChangeStartEvent();
            stateChangeSuccessEvent();
        });


        let urls, UserPoolId, UserPoolClientId;
        if ($location.host() === 'nothing88.net' || $location.host() === 'demo.nothing88.net' || $location.host() === 'localhost'){
            urls = {
                Lottery: "https://lotto.rst9.net",
                Identity: "https://id.rst9.net",
                WMCasino: "https://wm.rst9.net",
                Communication: "https://comm.rst9.net",
                Reporting: "https://reporting.rst9.net",
                Lottery789: "https://lotto789.rst9.net",
                TelegramChatApp: "https://common.rst9.net/telegram",
                Saba: "https://sb.rst9.net",
                SenCasino: {
                    Base: "https://sen.rst9.net",
                    Games: {
                        Sedie: "https://sen-sedie.rst9.net",
                        Politics: "https://sen-politics.rst9.net",
                    },
                },
            };
            UserPoolId = 'ap-southeast-1_7qZOytT0i';
            UserPoolClientId = '67s4egt2pqcotjdt0hg3h95fll';
        }else{
            urls = {
                Lottery: "https://lotto.lotusapi.com",
                Identity: "https://id.lotusapi.com",
                WMCasino: "https://wm.lotusapi.com",
                Communication: "https://comm.lotusapi.com",
                Reporting: "https://report.lotusapi.com",
                Lottery789: "https://lotto789.lotusapi.com",
                TelegramChatApp: "https://common.lotusapi.com/telegram",
                Saba: "https://sb.lotusapi.com",
                SenCasino: {
                    Base: "https://sen.lotusapi.com",
                    Games: {
                        Sedie: "https://sen-sedie.lotusapi.com",
                        Politics: "https://sen-politics.lotusapi.com",
                    },
                },
            };
            UserPoolId = 'ap-southeast-1_rz3gbsuS3';
            UserPoolClientId = '29js9qodnnghp3n09589nbu7bb';
        }
        Lotus.configure({
            Urls: urls,
            UserPoolId: UserPoolId,
            UserPoolClientId: UserPoolClientId,
            AdvancedSecurityDataCollectionFlag: true,
        });
    }
})();
(function (){
    'use strict';

    angular
        .module('fuse')
        .config(routeConfig);

    /** @ngInject */
    function routeConfig($stateProvider, $urlRouterProvider, $locationProvider, msApiProvider)    {
        $locationProvider.html5Mode(true);
        $urlRouterProvider.otherwise('/');
        /**
         * Layout Style Switcher
         *
         * This code is here for demonstration purposes.
         * If you don't need to switch between the layout
         * styles like in the demo, you can set one manually by
         * typing the template urls into the `State definitions`
         * area and remove this code
         */
        // Inject $cookies
        let $cookies;

        angular.injector(['ngCookies']).invoke([
            '$cookies', function (_$cookies){
                $cookies = _$cookies;
            }
        ]);


        // State definitions
        $stateProvider
            .state('app', {
                abstract: true,
                views   : {
                    'main@'         : {
                        templateUrl: 'app/core/layouts/content-account.html',
                        controller : 'MainController as one'
                    },
                    'toolbar@app'   : {
                        templateUrl: 'app/toolbar/layouts/vertical-navigation/toolbar.html',
                        controller : 'ToolbarController as vm'
                    },
                    'navigation@app': {
                        templateUrl: 'app/navigation/layouts/vertical-navigation/navigation.html',
                        controller : 'NavigationController as vm'
                    },
                    'accountPanel@app': {
                        templateUrl: 'app/account-panel/account-panel.html',
                        controller : 'accountPanelCtrl as vm'
                    },
                },
                resolve: {
                    aGames: function (msApi){
                        return msApi.resolve('wm-game@get');
                    }
                },
            });
        msApiProvider.register('wm-game', ['app/data/games.json']);
    }

})();

(function (){
    'use strict';
    angular
        .module('fuse')
        .controller('IndexController', IndexController);

    function IndexController($rootScope, $scope, $interval, $timeout, $state, $document, $mdMedia, $location, $filter, $mdDialog, $mdSidenav, $anchorScroll, $window, fuseTheming, network, msUtils, message, Analytics){
        var vm = this;
        vm.themes = fuseTheming.themes;
        $rootScope.connectState = undefined;
        $rootScope.joinedServer = false;

        //////////
        vm.userInfo = userInfo;
        vm.publicNotifications = publicNotifications;
        vm.getNotificationsOnSection = getNotificationsOnSection;

        $rootScope.bellUnRead = 0;
        vm.countUnRead = countUnRead;
        $rootScope.updateBalance = updateBalance;
        $rootScope.signOut = signOut;
        $rootScope.popupLogin = popupLogin;
        $rootScope.quickLogin = quickLogin;
        $rootScope.gotoCasino = gotoCasino;
        $rootScope.gotoSaba = gotoSaba;

        vm.ConnectServer = ConnectServer;
        vm.mustChangePassword = mustChangePassword;
        vm.setNotify = setNotify;
        vm.commitBetting = commitBetting;
        vm.sendBettingRequest = sendBettingRequest;

        vm.checkPlayingGame = checkPlayingGame;
        vm.showAds = showAds;
        vm.marquee = marquee;
        vm.showPopup = showPopup;


        vm.earlier = "https://earlier." + $location.host();

        $rootScope.$on('$stateChangeSuccess', function (){
            if ($mdMedia('max-width: 959px')){
                $timeout(function (){
                    $mdSidenav('navigation').close();
                }, 100)
            }

            $rootScope.isSaba = $location.path() === '/saba'
            $rootScope.isCasino = msUtils.exists($location.path().split('/')[1], ['casino', 'live-casino'])
            Lotus.User.isAuthenticated().then(function(authenticated){
                $rootScope.isAuthenticated = authenticated;
                if (authenticated) {
                    if ($rootScope.state.current.url === '/auth' || $rootScope.state.current.url === '/auth?force&reload'){
                        $state.go('app.home');
                    }else{
                        if ($rootScope.User === undefined){
                            vm.userInfo();
                        }
                    }
                    if ($rootScope.connectState === 'Closed' || $rootScope.connectState === 'Failed'){
                        vm.ConnectServer();
                    }
                }else{
                    vm.publicNotifications();
                }
            })
            
            vm.checkPlayingGame();
            if ($rootScope.isAuthenticated){
                // vm.showAds();
            }
        });

        function mustChangePassword(){
            if (!msUtils.exists($location.path(), ['/account/change-password', '/account/otp', '/auth/otp'])){
                $state.go('app.auth.expired')
            }
            $timeout(function () {
                if ($rootScope.User.MustChangePassword){
                    vm.mustChangePassword();
                }
            }, 1000)
        }

        function setNotify(){
            if (!msUtils.exists($location.path(), ['/my/otp', '/my/password', '/auth'])){
                $rootScope.passwordExpired = $rootScope.User.MustChangePasswordNotify
            }
        }

        function gotoCasino($event) {
            if ($rootScope.isAuthenticated){
                if (!$rootScope.User.Suspended){
                    $rootScope.gotoGame('lobby', $event)
                }else{
                    message.show('Tài khoản của quý khách đang không được phép đặt cược.')
                }
            }else{
                $rootScope.gotoGame('lobby', $event)
            }
        }

        function popupLogin($event){
            $rootScope.returnUrl = $location.url();
            $mdDialog.show({
                controller: authCtrl,
                templateUrl: 'app/main/auth/auth.dialog.html',
                parent: angular.element(document.body),
                targetEvent: $event,
                clickOutsideToClose: true,
                fullscreen: true
            });
            function authCtrl($scope, $location, message) {
                $scope.cancel = function() {
                    $mdDialog.cancel();
                };
                if ($location.host() === 'localhost'){
                    $scope.form = {
                        username: 'BTKF0211102',
                        password: 'WwVPjP1TeRGi0ZLGzxjR-' //hu6AgTL1B5cZatEt5eLH
                    };
                }
                $scope.show = false;
                $scope.showText = 'SHOW';
                $scope.showPassword = function() {
                    $scope.show = !$scope.show;
                    $scope.showText = $scope.show ? 'HIDE' : 'SHOW'
                };

                $scope.login = function() {
                    $scope.submitting = true;
                    network.User.authenticate($scope.form).then(function (response) {
                        $mdDialog.cancel();
                        if (Object.keys(response).length === 0){
                            $state.go('app.auth.agreement');
                        }else if(response.RequireAction === 'NEW_PASSWORD_REQUIRED'){
                            $state.go('app.auth.set-password');
                        } else if (response.RequireAction === 'SOFTWARE_TOKEN_MFA') {
                            $state.go('app.auth.otp');
                        }
                        $scope.$digest();
                    }).catch(function (error) {
                        $scope.submitting = false;
                        if (error.code === 'UserLambdaValidationException' || error.code === 'UserBlockedException'){
                            message.show('Tài khoản của quý khách đang tạm ngừng phục vụ')
                        }else if (error.code === 'NotAuthorizedException' || error.code === 'UserNotFoundException'){
                            message.show('Tên người dùng hoặc mật khẩu không chính xác')
                        }else{
                            message.show(error.message);
                        }
                    })
                }
            }
        }

        $rootScope.quick = {username: '',password: ''}

        function quickLogin(){
            sessionStorage.removeItem('lastClick')
            $rootScope.returnUrl = $location.url();
            if ($rootScope.quick.username.length < 4 || $rootScope.quick.password.length < 6){
                message.show('Tài khoản hoặc mật khẩu không hợp lệ')
            }else{
                $rootScope.submitting = true;
                network.User.authenticate($rootScope.quick).then(function (response) {
                    $rootScope.submitting = false;
                    if (Object.keys(response).length === 0){
                        $state.go('app.auth.agreement');
                    }else if(response.RequireAction === 'NEW_PASSWORD_REQUIRED'){
                        $state.go('app.auth.set-password');
                    } else if (response.RequireAction === 'SOFTWARE_TOKEN_MFA') {
                        $state.go('app.auth.otp');
                    }
                    $scope.$digest();
                }).catch(function (error) {
                    $rootScope.submitting = false;
                    if (error.code === 'UserLambdaValidationException' || error.code === 'UserBlockedException'){
                        message.show('Tài khoản của quý khách đang tạm ngừng phục vụ')
                    }else if (error.code === 'NotAuthorizedException' || error.code === 'UserNotFoundException'){
                        message.show('Tên người dùng hoặc mật khẩu không chính xác')
                    }else{
                        message.show(error.message);
                    }
                })
            }
        }

        //User Info section
        function userInfo() {
            //Only for first Time
            network.User.me({bypassCache: false}).then(function (resp) {
                // resp.MustChangePasswordNotify = 'true';
                // console.log('userInfo: ', resp)
                $rootScope.User = resp;
                $rootScope.$digest();
                $timeout(function () {
                    vm.getNotificationsOnSection();
                    vm.ConnectServer();
                    $rootScope.$broadcast('JoinServer');
                    // heap.identify(resp.Username);

                    if ($rootScope.User.MustChangePassword){
                        vm.mustChangePassword();
                    }
                    if ($rootScope.User.MustChangePasswordNotify !== undefined){
                        vm.setNotify();
                    }
                }, 500)
            });
            $timeout(function () {
                $rootScope.$broadcast('userAccount::update');
            })
        }

        function signOut() {
            $rootScope.joinedServer = false;
            Lotus.User.Current.signOut();
            $rootScope.User = undefined;
            $rootScope.myParameters = undefined;
            $timeout(function (){
                $window.location = '/'
            }, 100)

        }

        function updateBalance(){
            $rootScope.User.updating = true;
            $timeout(function () {
                Lotus.User.Wallet.getBalance().then(function(response){
                    // console.log('getBalance: ', response);
                    $rootScope.User.Balance = response.Balance;
                    delete $rootScope.User.updating;
                })
            }, 5000)
        }

        $scope.$on('userAccount::update', function () {
            network.User.me({bypassCache: true}).then(function (resp) {
                $rootScope.User = resp;
                $rootScope.$digest();
                $rootScope.$broadcast('userAccount::updateComplete');
            })
        });
        $scope.$on('userAccount::updateComplete', function () {
            // console.log($rootScope.User);
            if ($rootScope.User.MfaRequired && $rootScope.User.MfaType !== 1) {
                $state.go('app.auth.enable-otp')
            } else if ($location.path() === '/auth/set-password' || $location.path() === '/auth' || $location.path() === '/auth/enable-otp' || $location.path() === '/auth/otp') {
                // $state.go('app.auth.agreement');
                $window.location.href = '/auth/agreement';
            }
            $timeout(function () {
                $rootScope.crucialMessage = $rootScope.User.Suspended ? 'Tài khoản của quý khách đang không được phép đặt cược.' : undefined
            }, 1000)
        });
        $scope.$on('userAccount::signOut', function () {
            $rootScope.signOut();
        });
        //User Info section

        // message.popup('data.Message');

        let countConnected = 0;
        function ConnectServer(){
            $rootScope.connectState = 'Connect';
            Lotus.Realtime.connect().then(function () {
                $rootScope.connectState = 'Init';
                Lotus.Realtime.Connection.on("connecting", function(){
                    console.log("connecting");
                    $rootScope.connectState = 'Connecting';
                    // Analytics.trackEvent('Realtime', 'Connecting', $rootScope.User.Username);
                });
                Lotus.Realtime.Connection.on("disconnected", function(){
                    console.log("disconnected");
                    $rootScope.connectState = 'Disconnected';
                    Analytics.trackEvent('Realtime', 'Disconnected', $rootScope.User.Username);
                });
                Lotus.Realtime.Connection.on("closed", function(){
                    console.log("Closed");
                    $rootScope.connectState = 'Closed';
                    Analytics.trackEvent('Realtime', 'Closed', $rootScope.User.Username);
                });
                Lotus.Realtime.Connection.on("closing", function(){
                    console.log("closing");
                    $rootScope.connectState = 'Closing';
                    Analytics.trackEvent('Realtime', 'Closing', $rootScope.User.Username);
                });
                Lotus.Realtime.Connection.on("suspended", function(){
                    console.log("Suspended");
                    $rootScope.connectState = 'Suspended';
                    Analytics.trackEvent('Realtime', 'Suspended', $rootScope.User.Username);
                    message.show('Không kết nối được đến Server. Quý khách vui lòng kiểm tra lại kết nối mạng và Refresh (F5) lại Website')
                });
                Lotus.Realtime.Connection.on("connected", function(){
                    console.log("Connected");
                    countConnected ++;
                    $rootScope.connectState = 'Connected';
                    // Analytics.trackEvent('Realtime', 'Connected', $rootScope.User.Username);
                    if (!$rootScope.joinedServer){
                        $rootScope.joinedServer = true;
                        if (countConnected === 1){
                            // Đăng ký nhận thông tin kênh User
                            Lotus.User.Realtime.subcribe().then(function(){
                                console.log("Subscribed");
                                Lotus.User.Realtime.on("self:event:0", function(data, mes){
                                    //Yêu cầu tài khoản thoát
                                    Lotus.User.Current.getSession().then(function(session){
                                        let authTime = session.getIdToken().getAuthTime();
                                        if (authTime !== data.AuthTime) {
                                            let mess = data.Message.length !== 0 ? data.Message : 'Phiên đăng nhập của quý khách đã hết hạn. Quý khách vui lòng đăng nhập lại'
                                            message.show(mess);
                                            Lotus.User.Current.signOut();
                                            $rootScope.User = undefined;
                                            $rootScope.joinedServer = false;
                                            $rootScope.isAuthenticated = false;
                                            $state.go('app.home');
                                        }
                                    })
                                })
                                Lotus.User.Realtime.on("ancestor:event:0", function(data){
                                    //Yêu cầu tài khoản thoát
                                    $rootScope.$broadcast('userAccount::signOut')
                                    message.show(data.Message + 'Quý khách vui lòng đăng nhập lại để tiếp tục');
                                })
                                Lotus.User.Realtime.on("ancestor:event:1", function(data, message){
                                    //Số dư tài khoản thay đổi
                                    //console.log(data)
                                })
                                // console.log('Realtime')
                                Lotus.User.Realtime.on("general:event:3001", function (data){
                                    // console.log(data)
                                    message.popup(data.Message);
                                })
                                Lotus.User.Realtime.on("self:event:3001", function (data){
                                    message.popup(data.Message);
                                })
                                // $rootScope.$broadcast('Realtime::Subscribed');
                            })
                        }
                    }
                })
                Lotus.Realtime.Connection.on('failed', function () {
                    $rootScope.connectState = 'Failed';
                    Analytics.trackEvent('Realtime', 'Failed', $rootScope.User.Username);
                })
            }).catch(function (error) {console.log(error)})
        }

        //Notifications Section
        function getNotificationsOnSection() {
            $rootScope.bellNotifications = [];
            $rootScope.setInfoBarContents = [];

            network.Communication.Notification.getNotificationsOnSection().then(function (response) {
                angular.forEach(response, function (no) {
                    if ( msUtils.exists(2, no.DisplaySections) ){
                        $rootScope.bellNotifications.push(no);
                    }
                    if ( msUtils.exists(1, no.DisplaySections) ){
                        $rootScope.setInfoBarContents.push(no);
                    }
                });
                $rootScope.setInfoBarContents = $rootScope.setInfoBarContents.sort(function (a, b) {
                    return a.Code - b.Code
                });
                if ($rootScope.setInfoBarContents.length){
                    vm.marquee();
                }
                vm.countUnRead();
                vm.popupMessages = response.filter(function (res) {
                    return msUtils.exists(0, res.DisplaySections)
                });
                if (vm.popupMessages.length){
                    if($state.current.name !== 'app.auth.agreement' && $state.current.name !== 'app.casino' && $state.current.name !== 'app.casino.single'){
                        message.popup(vm.popupMessages[0].Message);
                    }
                }
            })
        }

        function publicNotifications() {
            if ($rootScope.setInfoBarContents === undefined){
                network.Public.Communication.Notification.latest().then(function (response) {
                    $rootScope.setInfoBarContents = response.sort(function (a, b) {
                        return a.Code - b.Code
                    });
                    if ($rootScope.setInfoBarContents.length){
                        vm.marquee();
                    }
                    $scope.$digest();
                })
            }
        }

        function marquee(){
            let mIndex = 0;
            $interval(function (){
                mIndex += 1;
                if (document.getElementById("marquee-id")){
                    let windowSize = document.getElementById("marquee-id").clientWidth;
                    let contentSize = document.getElementById("marquee-id-inner").clientWidth;
                    let textIndent = windowSize/2 - 100 - mIndex;
                    if (textIndent < - windowSize/2){
                        mIndex = 0
                    }
                    $rootScope.marqueeStyle = {"text-indent": textIndent}
                }
            }, 50)
        }

        function countUnRead() {
            $rootScope.bellUnRead = 0;
            angular.forEach($rootScope.bellNotifications, function (no) {
                if (!no.Read){
                    $rootScope.bellUnRead ++
                }
            });
            if ($rootScope.bellUnRead !== 0){}
        }
        //Notifications Section

        vm.callbackApproved = callbackApproved;
        $rootScope.data = {closePanel: false};
        $rootScope.latestTicket = [];
        $rootScope.sabaProductions = [
            {name: 'Bóng đá', class: 'football', game: '',cover: 'assets/images/saba/Product_Soccer.jpg', icon: 'assets/images/production/saba/icon-football.png', description: 'Đặt cược và đắm mình trong môn thể thao phổ biến nhất thế giới'},
            {name: 'Cổng Game SABA', class: 'saba-game', game: 'Vgaming', cover: 'assets/images/saba/SabaClub.jpg', icon: 'assets/images/production/saba/icon-headphone.png', description: 'Đại tiệc Game Việt'},
            {name: '', class: 'e-sports', game: '', cover: 'assets/images/saba/SabaScore.jpg', icon: 'assets/images/production/saba/icon-headphone.png', description: ''},
            {name: 'Bóng rổ',  class: 'basketball', game: '', cover: 'assets/images/saba/Product_Basketball.jpg', icon: 'assets/images/production/saba/basketball.png', description: 'Những cú Swish hoàn hảo'},
            {name: 'Thể Thao Điện Tử',  class: 'e-sports', game: 'esports', cover: 'assets/images/saba/sport_esports.jpg', icon: 'assets/images/production/saba/icon-football.png', description: 'Đặt cược vào các đội yêu thích trong các giải đấu trực tuyến hàng đầu'},
            {name: 'Thể Thao Ảo', class: 'virtual-sports', game: '', cover: 'assets/images/saba/Product_VirtualSports.jpg', icon: 'assets/images/production/saba/icon-football.png', description: 'Tận hưởng các trận đấu trực tuyến mà không phải chờ đợi'},
            {name: 'Number Game', class: 'number-game', game: 'kenolottery', cover: 'assets/images/saba/Product_NumberGame.jpg', icon: 'assets/images/production/saba/icon_basketball.png', description: 'Đặt cược vào những con số may mắn'},
            {name: 'Trò chơi', class: 'gaming', game: '', cover: 'assets/images/saba/Product_Gaming.jpg', icon: 'assets/images/production/saba/icon-football.png', description: 'Slot, card và table game cùng rất nhiều lựa chọn'},
            {name: 'RNG Keno', class: 'keno', game: 'keno', cover: 'assets/images/saba/Product_Keno.jpg', icon: 'assets/images/production/saba/icon-football.png', description: '10+ RNG Keno games'},
        ]

        function gotoSaba(item) {
            $state.go("app.saba", {"game": item.game})
        }

        function callbackApproved(tick){
            let newTicket = {
                TicketNumber: tick.TicketNumber,
                GameType: tick.GameType,
                BetType: tick.BetType,
                Point: 0,
                Numbers: [],
                Amount: tick.Amount,
                Status: 1,
                PrizeNr: tick.PrizeNr,
                CancelLimitInSec: 300
            };

            angular.forEach(tick.Items, function (item) {
                newTicket.Point += item.Point;
                newTicket.Numbers = newTicket.Numbers.concat(item.Numbers)
            });
            newTicket.Numbers = newTicket.Numbers.filter(function (item, b, self) {
                return self.indexOf(item) === b
            });
            $rootScope.latestTicket.push(newTicket);
            $rootScope.latestTicket = msUtils.removeDuplicates($rootScope.latestTicket, 'TicketNumber');
            $rootScope.latestTicket.sort(function (a, b) {
                return b.TicketNumber - a.TicketNumber
            })
        }

        $rootScope.$on('EventBetting', function (event, data) {
            if (!$rootScope.isAuthenticated){
                $rootScope.popupLogin();
                return;
            }
            if ($rootScope.User.Suspended){
                message.show('Tài khoản của quý khách đang không được phép đặt cược.');
                Analytics.trackEvent('BETTING-TRAD', 'User Suspended', $rootScope.User.Username);
                return;
            }
            let costMoney = 0;
            angular.forEach(data.betObj.Tickets, function (ticket) {
                costMoney += $filter('sumMoneyCost')(ticket)
            });
            if (costMoney > $rootScope.User.Balance){
                message.show('Số dư tài khoản quý khách không đủ để thực hiện toàn bộ đơn cược.');
                Analytics.trackEvent('BETTING-TRAD', 'BALANCE LOW', $rootScope.User.Username);
                return
            }
            if (JSON.parse(sessionStorage.getItem('always')) !== null){
                vm.sendBettingRequest(data.betObj)
            }else{
                vm.commitBetting(data);
            }
            let IgnorePrice = data.betObj.IgnorePrice === true ? '' : '-NotIgnorePrice';
            Analytics.trackEvent('BETTING-TRAD', 'BETTING'+IgnorePrice, $rootScope.User.Username);
        });

        function commitBetting(data) {

            // console.log(data)

            if (data.sumObj.numbers.length === 0){
                message.show('Danh sách đặt cược không hợp lệ')
                return
            }

            $mdDialog.show({
                controller: commitBettingCtrl,
                templateUrl: 'app/main/legendary/betting/prompt.dialog.html',
                multiple: true,
                clickOutsideToClose: true,
                locals: {point: vm.toPoint, money: vm.totalMoney, numbers: vm.selected}
            });
            function commitBettingCtrl($rootScope, $scope, $mdDialog, $filter, point, money, numbers){
                $scope.cancel = function() {
                    $mdDialog.cancel();
                };
                $scope.alwaysBetting = false;
                $scope.Point = data.sumObj.point;
                $scope.costMoney = data.sumObj.money;
                $scope.numbers = data.sumObj.numbers.toString().replace(/\,+/g, ', ');
                $scope.done = function () {
                    if($scope.alwaysBetting){
                        sessionStorage.setItem('always', 'true');
                    }
                    vm.sendBettingRequest(data.betObj)
                }
            }
        }

        function sendBettingRequest(betObj) {
            $rootScope.$broadcast('ResetBetting');

            // console.log(betObj)

            $mdDialog.show({
                locals:{item: betObj, callback: vm.callbackApproved},
                clickOutsideToClose: false,
                escapeToClose: false,
                controllerAs: 'ctrl',
                templateUrl: 'app/main/traditional/betting/betting.html',
                controller: bettingDialogCtrl
            });

            function bettingDialogCtrl($rootScope, $scope, $mdDialog, $mdMedia, item) {
                $scope.$mdMedia = $mdMedia;
                $scope.showAction = false;
                $scope.tick = {success: 0, total: 0, answered: 0};
                $scope.betTx = [];

                $scope.cancel = function () {
                    $mdDialog.hide();
                    $timeout.cancel($scope.autoCallback);
                    $timeout.cancel($scope.autoMobilize);
                };
                $scope.tickets = angular.copy(item);

                // return;
                if (item.legend){
                    network.Legend.Play(item).then(function(resp){
                        $scope.processing(resp)
                    }).catch(function (error) {
                        message.show(error.message);
                    });
                }else{
                    network.Games.Play(item).then(function(resp){
                        $scope.processing(resp)
                    }).catch(function (error) {
                        message.show(error.message);
                    });
                }
                $scope.processing = function(resp){
                    $scope.betTx = resp;
                    $scope.tick.total = resp.length;
                    angular.forEach($scope.tickets.Tickets, function (tick, index) {
                        tick.Tx = resp[index].Tx;
                        tick.status = 'processing'
                    });
                    let timeAutoCheck = $scope.tickets.Tickets.length < 30 ? 10 : $scope.tickets.Tickets.length;
                    $scope.autoCallback = $timeout(function () {
                        $scope.checkTicket();
                    }, timeAutoCheck * 1000);

                    $scope.autoMobilize = $timeout(function () {
                        $scope.Mobilize = 'Quá trình đặt cược diễn ra hơi lâu hơn bình thường. Quý khách vui lòng kiên nhẫn chờ thêm vài giây nữa.'
                    }, timeAutoCheck * 1000 * 2/3);
                }

                $scope.$on('ticketApproved', function ($event, aDatas){
                    angular.forEach(aDatas, function (data) {
                        angular.forEach($scope.tickets.Tickets, function (tick){
                            if (tick.Tx === data.Tx && tick.status === 'processing'){
                                tick.status = 'approved';
                                $rootScope.User.Balance -= data.Amount; // $rootScope.User.Balance -= $filter('sumMoneyCost')(tick);
                                tick.TicketNumber = data.TicketNumber;
                                tick.Amount = data.Amount;
                                tick.PrizeNr = data.PrizeNr
                                $scope.tick.success ++;
                                $scope.countAnswer();
                                vm.callbackApproved(tick)
                            }
                        });
                    });
                    if ($scope.tick.success >= $scope.tick.total){
                        $timeout(function () {
                            $scope.allDone = true;
                            if ($rootScope.data.closePanel){
                                $timeout(function () {
                                    $scope.cancel();
                                    $rootScope.$broadcast('allCompleted');
                                }, 1000)
                            }else{
                                $scope.showAction = true;
                            }
                        }, 200)
                    }
                    Analytics.trackEvent('BETTING-TRAD', 'Ticket Approved', $rootScope.User.Username);
                });

                $scope.$on('ticketRejected', function ($event, aDatas){
                    angular.forEach(aDatas, function (data) {
                        angular.forEach($scope.tickets.Tickets, function (tick){
                            if (tick.Tx === data.Tx && tick.status === 'processing'){
                                tick.status = 'rejected';
                                tick.errorMessage = data.Errors[0].Message;
                                $scope.countAnswer();
                            }
                        })
                    });
                    Analytics.trackEvent('BETTING-TRAD', 'Ticket Rejected', $rootScope.User.Username);
                });

                $scope.countAnswer = function () {
                    $scope.tick.answered ++;
                    if ($scope.tick.totalErrors){
                        $scope.tick.totalErrors --;
                        $scope.fireMessageTx();
                    }
                    if ($scope.tick.answered === $scope.tick.total && $scope.tick.total !== $scope.tick.success){
                        $scope.errorMessageTx = 'Xử lý đơn cược thành công.<br/> Nhưng có <b>' + ($scope.tick.total - $scope.tick.success) + '</b> phiếu bị lỗi. Quý khách vui lòng kiểm tra lại.';
                        $scope.alertTick = true;
                        $scope.showAction = true;
                    }
                    if ($scope.tick.answered === $scope.tick.total){
                        $rootScope.$broadcast('bettingCompleted', item);
                        $timeout.cancel($scope.autoCallback);
                        $timeout.cancel($scope.autoMobilize);
                        $scope.Mobilize = undefined;
                    }
                    $scope.$digest();
                };

                $scope.checkTicket = function (fire) {
                    $scope.Mobilize = undefined;

                    let TxLists = [];
                    if ($scope.tick.answered < $scope.tick.total){
                        angular.forEach($scope.tickets.Tickets, function(tick){
                            if (tick.status === 'processing'){
                                TxLists.push(tick.Tx)
                            }
                        });
                        network.Games.checkTx({TxList: TxLists}).then(function (response) {
                            let successTicks = response.filter(function (tick) {
                                return tick.Errors === undefined || tick.Errors.length === 0;
                            });
                            $rootScope.$broadcast('ticketApproved', successTicks);
                            let rejectedTicks = response.filter(function (tick) {
                                return tick.Errors;
                            });
                            $rootScope.$broadcast('ticketRejected', rejectedTicks);

                            if (response.length < TxLists.length) {
                                if (!fire){
                                    $scope.autoCallback = $timeout(function () {
                                        $scope.checkTicket(true);
                                    }, 20000);
                                }else{
                                    $scope.alertTick = true;
                                    $scope.showAction = true;
                                    $scope.tick.totalErrors = (TxLists.length - response.length);
                                    $scope.fireMessageTx();

                                    angular.forEach($scope.tickets.Tickets, function(tick){
                                        tick.notAnswer = tick.status === 'processing';
                                    });
                                }
                            }
                        })

                        Analytics.trackEvent('CHECK-TX', $rootScope.connectState, $rootScope.User.Username, TxLists.length);
                    }
                };

                $scope.fireMessageTx = function () {
                    $scope.errorMessageTx = $scope.tick.totalErrors !== 0 ? 'Có <b>' + $scope.tick.totalErrors + '</b> phiếu bị lỗi không xác định trong quá trình đặt cược.<br>Quý khách vui lòng kiểm tra và đặt cược lại.<br>Rất xin lỗi quý khách vì sự bất tiện này' : undefined;
                }
            }
        }

        vm.hideSwipe = true;
        function checkPlayingGame() {
            if (vm.inter !== undefined){
                $interval.cancel(vm.inter);
            }
            let isSafari = !!navigator.userAgent.match(/Version\/[\d\.]+.*Safari/);
            let iOS = /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;

            if (!$mdMedia('gt-sm') && ( $state.current.name === 'app.casino' || $state.current.name === 'app.game' ) && (iOS) ){
                vm.showMark = true
                vm.inter = $interval(function () {
                    // console.log(document.documentElement.clientHeight, window.innerHeight)
                    vm.hideSwipe = document.documentElement.clientHeight < window.innerHeight
                    if (document.documentElement.clientHeight === window.innerHeight){
                        window.scroll(0, 0)
                    }
                }, 1e3)
            }else{
                vm.showMark = false
                if (vm.inter !== undefined){
                    $interval.cancel(vm.inter);
                }
                $timeout(function () {
                    vm.hideSwipe = true;
                }, 100)
            }
        }

        function showAds(){
            let currentPosition = $location.path().split('/')[1];
            let allowedPosition = ['traditional', 'legendary', 'announcements'];
            vm.localAds = localStorage.getItem('AdsT') === null ? 0 : parseInt(localStorage.getItem('AdsT'));
            if ($location.path().split('/')[1] === 'casino'){
                localStorage.setItem('AdsT', vm.localAds + 1);
            }
            if(msUtils.exists(currentPosition, allowedPosition) && vm.localAds < 20){
                $timeout(function (){
                    $rootScope.showAds = true;
                }, 1000)
            }else{
                $rootScope.showAds = false;
            }
        }

        let range = ['17:00','21:00'];
        function isOutRange(value, range) {
            return value <= range[0] || value >= range[1];
        }
        document.body.addEventListener('click', function (event){
            let state = $state.current.name.split('.')[1]
            let weekday = moment().isoWeekday(); //Monday is 1
            // console.log(state)
            let currentDate = new Date();
            vm.currentUnix = Math.floor(currentDate.getTime()/1000);
            let time = currentDate.getHours() + ":"  + currentDate.getMinutes();
            //Check long time
            let lastClick = sessionStorage.getItem('lastClick');
            if (lastClick !== null && !isNaN(lastClick)){
                let diffTime = vm.currentUnix - parseInt(lastClick)
                if (weekday === 1 && diffTime > 1800 && isOutRange(time, range) && $rootScope.isAuthenticated && msUtils.exists(state, ['results', 'traditional', 'announcements', 'account']) && $location.host() !== '551995.net' ){
                    vm.showPopup();
                }
            }else if ($rootScope.isAuthenticated){
                if (state !== 'auth' && weekday === 1){vm.showPopup();}
            }
        }, true);

        function showPopup(){
            sessionStorage.setItem('lastClick', vm.currentUnix)
            $mdDialog.show({
                controller: rejectionCtrl,
                templateUrl: 'app/main/announcements/warning.dialog.html',
                fullscreen: true
            });
            function rejectionCtrl($scope) {
                $scope.cancel = function () {
                    $mdDialog.cancel();
                };
               $timeout(function (){
                   $scope.thisOK = true;
               }, 1000)
            }
        }
    }
})();
(function ()
{
    'use strict';

    angular
        .module('fuse');
})();

(function ()
{
    'use strict';

    angular
        .module('fuse')
        .config(config)
        .config(['AnalyticsProvider', function (AnalyticsProvider) {
            // Add configuration code as desired
            AnalyticsProvider.setAccount('UA-167864324-1');
            // By default, universal analytics is used, unless this is called with a falsey value.
            // AnalyticsProvider.useAnalytics(false);
            AnalyticsProvider.trackPages(true);
            AnalyticsProvider.trackUrlParams(true);
            // AnalyticsProvider.ignoreFirstPageLoad(true);
            AnalyticsProvider.setPageEvent('$stateChangeSuccess');
            // AnalyticsProvider.readFromRoute(true);

        }]).run(['Analytics', function(Analytics) { }]);

    /** @ngInject */
    function config($translateProvider){
        // Put your common app configurations here

        // angular-translate configuration
        $translateProvider.useLoader('$translatePartialLoader', {
            urlTemplate: '{part}/i18n/{lang}.json'
        });
        $translateProvider.preferredLanguage('en');
        $translateProvider.useSanitizeValueStrategy('sanitize');


    }

})();
(function ()
{
    'use strict';

    angular
        .module('fuse')
        .factory('api', apiService);

    /** @ngInject */
    function apiService($resource)
    {
        /**
         * You can use this service to define your API urls. The "api" service
         * is designed to work in parallel with "apiResolver" service which you can
         * find in the "app/core/services/api-resolver.service.js" file.
         *
         * You can structure your API urls whatever the way you want to structure them.
         * You can either use very simple definitions, or you can use multi-dimensional
         * objects.
         *
         * Here's a very simple API url definition example:
         *
         *      api.getBlogList = $resource('http://api.example.com/getBlogList');
         *
         * While this is a perfectly valid $resource definition, most of the time you will
         * find yourself in a more complex situation where you want url parameters:
         *
         *      api.getBlogById = $resource('http://api.example.com/blog/:id', {id: '@id'});
         *
         * You can also define your custom methods. Custom method definitions allow you to
         * add hardcoded parameters to your API calls that you want to sent every time you
         * make that API call:
         *
         *      api.getBlogById = $resource('http://api.example.com/blog/:id', {id: '@id'}, {
         *         'getFromHomeCategory' : {method: 'GET', params: {blogCategory: 'home'}}
         *      });
         *
         * In addition to these definitions, you can also create multi-dimensional objects.
         * They are nothing to do with the $resource object, it's just a more convenient
         * way that we have created for you to packing your related API urls together:
         *
         *      api.blog = {
         *                   list     : $resource('http://api.example.com/blog'),
         *                   getById  : $resource('http://api.example.com/blog/:id', {id: '@id'}),
         *                   getByDate: $resource('http://api.example.com/blog/:date', {id: '@date'}, {
         *                       get: {
         *                            method: 'GET',
         *                            params: {
         *                                getByDate: true
         *                            }
         *                       }
         *                   })
         *       }
         *
         * If you look at the last example from above, we overrode the 'get' method to put a
         * hardcoded parameter. Now every time we make the "getByDate" call, the {getByDate: true}
         * object will also be sent along with whatever data we are sending.
         *
         * All the above methods are using standard $resource service. You can learn more about
         * it at: https://docs.angularjs.org/api/ngResource/service/$resource
         *
         * -----
         *
         * After you defined your API urls, you can use them in Controllers, Services and even
         * in the UIRouter state definitions.
         *
         * If we use the last example from above, you can do an API call in your Controllers and
         * Services like this:
         *
         *      function MyController (api)
         *      {
         *          // Get the blog list
         *          api.blog.list.get({},
         *
         *              // Success
         *              function (response)
         *              {
         *                  console.log(response);
         *              },
         *
         *              // Error
         *              function (response)
         *              {
         *                  console.error(response);
         *              }
         *          );
         *
         *          // Get the blog with the id of 3
         *          var id = 3;
         *          api.blog.getById.get({'id': id},
         *
         *              // Success
         *              function (response)
         *              {
         *                  console.log(response);
         *              },
         *
         *              // Error
         *              function (response)
         *              {
         *                  console.error(response);
         *              }
         *          );
         *
         *          // Get the blog with the date by using custom defined method
         *          var date = 112314232132;
         *          api.blog.getByDate.get({'date': date},
         *
         *              // Success
         *              function (response)
         *              {
         *                  console.log(response);
         *              },
         *
         *              // Error
         *              function (response)
         *              {
         *                  console.error(response);
         *              }
         *          );
         *      }
         *
         * Because we are directly using $resource service, all your API calls will return a
         * $promise object.
         *
         * --
         *
         * If you want to do the same calls in your UI Router state definitions, you need to use
         * "apiResolver" service we have prepared for you:
         *
         *      $stateProvider.state('app.blog', {
         *          url      : '/blog',
         *          views    : {
         *               'content@app': {
         *                   templateUrl: 'app/main/apps/blog/blog.html',
         *                   controller : 'BlogController as vm'
         *               }
         *          },
         *          resolve  : {
         *              Blog: function (apiResolver)
         *              {
         *                  return apiResolver.resolve('blog.list@get');
         *              }
         *          }
         *      });
         *
         *  You can even use parameters with apiResolver service:
         *
         *      $stateProvider.state('app.blog.show', {
         *          url      : '/blog/:id',
         *          views    : {
         *               'content@app': {
         *                   templateUrl: 'app/main/apps/blog/blog.html',
         *                   controller : 'BlogController as vm'
         *               }
         *          },
         *          resolve  : {
         *              Blog: function (apiResolver, $stateParams)
         *              {
         *                  return apiResolver.resolve('blog.getById@get', {'id': $stateParams.id);
         *              }
         *          }
         *      });
         *
         *  And the "Blog" object will be available in your BlogController:
         *
         *      function BlogController(Blog)
         *      {
         *          var vm = this;
         *
         *          // Data
         *          vm.blog = Blog;
         *
         *          ...
         *      }
         */

        var api = {};

        // Base Url
        api.baseUrl = 'app/data/';

        // api.sample = $resource(api.baseUrl + 'sample/sample.json');

        return api;
    }

})();
angular.module('fuse').run(['$templateCache', function($templateCache) {$templateCache.put('app/account-panel/account-panel.html','<md-content layout="column"><div class="menu-balance"><div class="QmmpTlfM" layout="row"><div flex="65" \nclass="QWGfHzbQ"><h3>{{ $root.User.Username }}</h3><h5>H\u1ED9i vi\xEAn</h5></div><div flex="35" class="ojAwmwDn"><md-button \nclass="md-color" ng-click="$root.signOut()">Tho\xE1t</md-button></div></div><div class="divider"></div><div \nclass="yyVSRqdh"><div class="menu-balance-item" layout="row" layout-align="space-between center"><h5>T\xEDn d\u1EE5ng</h5><p>\n{{ $root.User.CreditLimit | currency : \'\' : 0 }}</p></div><div class="menu-balance-item" layout="row" \nlayout-align="space-between center"><h5>S\u1ED1 d\u01B0</h5><p>{{ $root.User.Balance | currency : \'\' : 0 }}</p></div><div \nclass="menu-balance-item" layout="row" layout-align="space-between center" ng-if="$root.isSaba"><h5>S\u1ED1 d\u01B0 Bong88</h5><p>\n{{ $root.User.SabaBalance | currency : \'\' : 0 }}</p></div><div class="menu-balance-item saba" layout="row" \nlayout-align="space-between center" ng-if="$root.isSaba"><h5>Ng\xF4n ng\u1EEF</h5><p><img src="/assets/images/flags/vn.jpg" \nalt="" ui-sref="app.saba({lang: \'vn\'})"> <img src="/assets/images/flags/us.jpg" alt="" ui-sref="app.saba({lang: \'en\'})">\n</p></div><div class="menu-balance-item saba" layout="row" layout-align="space-between center" ng-if="$root.isSaba"><h5>\nGiao di\u1EC7n</h5><p class="native"><md-button class="md-icon-button" ui-sref="app.saba({native: \'desktop\'})" \nui-sref-active="active"><md-icon md-font-icon="icon-desktop-mac"></md-icon></md-button><md-button \nclass="md-icon-button" ui-sref="app.saba({native: \'\'})" ui-sref-active="active"><md-icon md-font-icon="icon-cellphone">\n</md-icon></md-button></p></div><div class="menu-balance-item saba-transfer" layout="row" layout-align="center center" \nng-if="$root.isSaba"><md-button class="md-accent md-raised" ng-click="$root.transferBalance(1, $event)">\nChuy\u1EC3n ti\u1EC1n v\xE0o Bong88</md-button></div></div></div><div class="menu-account"><md-list-item ui-sref="app.account.my" \nng-click="vm.closeSidenav()"><p>Th\xF4ng tin t\xE0i kho\u1EA3n</p><md-icon md-font-icon="icon-chevron-right"></md-icon>\n</md-list-item><md-list-item ui-sref="app.account.change-password" ng-click="vm.closeSidenav()"><p>Thay \u0111\u1ED5i m\u1EADt kh\u1EA9u</p>\n<md-icon md-font-icon="icon-chevron-right"></md-icon></md-list-item><md-list-item ui-sref="app.account.otp" \nng-click="vm.closeSidenav()"><p>C\xE0i \u0111\u1EB7t OTP</p><md-icon md-font-icon="icon-chevron-right"></md-icon></md-list-item>\n<md-list-item ui-sref="app.account.telegram" ng-click="vm.closeSidenav()"><p>Li\xEAn k\u1EBFt Telegram</p><md-icon \nmd-font-icon="icon-chevron-right"></md-icon></md-list-item><md-list-item ui-sref="app.account.rules" \nng-click="vm.closeSidenav()"><p>Quy t\u1EAFc</p><md-icon md-font-icon="icon-chevron-right"></md-icon></md-list-item>\n<md-list-item class="report" ui-sref="app.account.bet-list.traditional" ng-click="vm.closeSidenav()"><p>B\u1EA3ng c\u01B0\u1EE3c</p>\n<md-icon md-font-icon="icon-chevron-right"></md-icon></md-list-item><md-list-item class="report" \nui-sref="app.account.statement" ng-click="vm.closeSidenav()"><p>Sao k\xEA</p><md-icon md-font-icon="icon-chevron-right">\n</md-icon></md-list-item><md-list-item class="report" ui-sref="app.account.cancelled.traditional" \nng-click="vm.closeSidenav()"><p>Phi\u1EBFu c\u01B0\u1EE3c \u0111\xE3 h\u1EE7y</p><md-icon md-font-icon="icon-chevron-right"></md-icon>\n</md-list-item><md-list-item ng-click="$root.signOut()"><p>Tho\xE1t</p><md-icon md-font-icon="icon-chevron-right">\n</md-icon></md-list-item></div></md-content>');
$templateCache.put('app/quick-panel/quick-panel.html','<md-content><md-tabs md-no-pagination md-swipe-content md-stretch-tabs="always"><md-tab><md-tab-label><span \ntranslate="QUICKPANEL.TODAY">TODAY</span></md-tab-label><md-tab-body><md-content class="today-tab scrollable" ms-scroll \nng-include="\'app/quick-panel/tabs/today/today-tab.html\'"></md-content></md-tab-body></md-tab><md-tab><md-tab-label><span\n translate="QUICKPANEL.CHAT">CHAT</span></md-tab-label><md-tab-body><md-content class="chat-tab scrollable" ms-scroll \nng-include="\'app/quick-panel/tabs/chat/chat-tab.html\'" ng-controller="ChatTabController as vm"></md-content>\n</md-tab-body></md-tab><md-tab><md-tab-label><span translate="QUICKPANEL.ACTIVITY">ACTIVITY</span></md-tab-label>\n<md-tab-body><md-content class="activity-tab scrollable" ms-scroll \nng-include="\'app/quick-panel/tabs/activity/activity-tab.html\'"></md-content></md-tab-body></md-tab></md-tabs>\n</md-content>');
$templateCache.put('app/core/layouts/content-account.html','<div id="layout-content-with-toolbar" class="template-layout" layout="column" flex><md-sidenav id="vertical-navigation" \nmd-component-id="navigation" ms-scroll class="md-primary-bg" ui-view="navigation"></md-sidenav><md-toolbar id="toolbar" \nclass="md-menu-toolbar md-whiteframe-1dp" ui-view="toolbar"></md-toolbar><md-content id="content" class="md-hue-2" \nms-scroll flex layout="row"><div flex-gt-sm="20" hide show-gt-sm ui-view="menu-account"></div><div flex-gt-sm="80" \nflex="100" ui-view="content"></div></md-content><md-sidenav id="account-panel" \nclass="md-sidenav-right md-primary-bg md-whiteframe-4dp" md-component-id="account-panel" ms-scroll \nui-view="accountPanel"></md-sidenav></div>');
$templateCache.put('app/core/layouts/content-game-play.html','<div id="layout-content-with-toolbar" class="template-layout" layout="column" flex><md-sidenav id="vertical-navigation" \nmd-component-id="navigation" ms-scroll class="md-primary-bg" ui-view="navigation"></md-sidenav><md-toolbar id="toolbar" \nclass="md-menu-toolbar md-whiteframe-1dp" ui-view="toolbar"></md-toolbar><md-content id="content" class="md-hue-2" \nms-scroll flex ui-view="content"></md-content><md-sidenav id="account-panel" \nclass="md-primary-bg md-sidenav-right md-whiteframe-4dp" md-component-id="account-panel" ms-scroll \nui-view="accountPanel"></md-sidenav></div>');
$templateCache.put('app/core/layouts/content-general.html','<div id="layout-content-with-toolbar" class="template-layout" layout="column" flex><md-sidenav id="vertical-navigation" \nmd-component-id="navigation" ms-scroll class="md-primary-bg" ui-view="navigation"></md-sidenav><md-toolbar id="toolbar" \nclass="md-menu-toolbar md-whiteframe-1dp" ui-view="toolbar" ng-class="{\'stuck\': $root.stickVideo}"></md-toolbar>\n<md-content id="content" class="" ms-scroll flex ui-view="content" ng-class="{\'stuck\': $root.stickVideo}"></md-content>\n<md-sidenav id="account-panel" class="md-primary-bg md-sidenav-right md-whiteframe-4dp" md-component-id="account-panel" \nms-scroll ui-view="accountPanel"></md-sidenav></div>');
$templateCache.put('app/core/layouts/content-lottery.html','<div id="layout-content-with-toolbar" class="template-layout" layout="column" flex><md-sidenav id="vertical-navigation" \nmd-component-id="navigation" ms-scroll class="md-primary-bg" ui-view="navigation"></md-sidenav><md-toolbar id="toolbar" \nclass="md-menu-toolbar md-whiteframe-1dp" ui-view="toolbar"></md-toolbar><md-content id="content" class="md-hue-2" \nms-scroll flex layout="row"><md-sidenav flex-gt-sm="20" id="lottery-navigation" md-component-id="lottery-menu" \nmd-is-locked-open="$mdMedia(\'gt-sm\')" ms-scroll ui-view="lottery-menu"></md-sidenav><div flex-gt-sm="80" flex="100" \nui-view="content"></div></md-content><md-sidenav id="account-panel" \nclass="md-primary-bg md-sidenav-right md-whiteframe-4dp" md-component-id="account-panel" ms-scroll \nui-view="accountPanel"></md-sidenav></div>');
$templateCache.put('app/core/layouts/content-only.html','<div id="layout-content-only" class="template-layout" layout="column" flex><md-content id="content" \nclass="animate-fade-in-out" ui-view="content" flex></md-content></div>');
$templateCache.put('app/core/layouts/content-with-toolbar.html','<div id="layout-content-with-toolbar" class="template-layout" layout="column" flex><md-toolbar id="toolbar" \nclass="md-menu-toolbar md-whiteframe-1dp" ui-view="toolbar"></md-toolbar><md-content id="content" \nclass="animate-slide-up md-hue-2" ui-view="content" flex></md-content><md-sidenav id="quick-panel" \nclass="md-sidenav-right md-whiteframe-4dp" md-component-id="quick-panel" ms-scroll ui-view="quickPanel"></md-sidenav>\n</div>');
$templateCache.put('app/core/layouts/vertical-navigation.html','<div id="layout-vertical-navigation" class="template-layout" layout="row" flex><md-sidenav id="vertical-navigation" \nmd-component-id="navigation" ms-scroll class="md-primary-bg" ui-view="navigation"></md-sidenav><md-content id="content" \nclass="animate-slide-up" ms-scroll ui-view="content" flex></md-content><md-sidenav id="account-panel" \nclass="md-primary-bg md-sidenav-right md-whiteframe-4dp" md-component-id="account-panel" ms-scroll \nui-view="accountPanel"></md-sidenav></div>');
$templateCache.put('app/core/theme-options/theme-options.html','<div class="ms-theme-options-button md-primary-bg" ng-click="toggleOptionsSidenav()"><md-icon md-font-icon="icon-cog" \nclass="white-text"></md-icon></div><md-sidenav md-component-id="fuse-theme-options" class="md-sidenav-right"><div \nclass="ms-theme-options-list" layout="column"><div class="theme-option layout-options"><div class="option-title">\nLayout Style:</div><md-radio-group layout="row" layout-align="start start" layout-wrap ng-model="vm.layoutStyle" \nng-change="vm.updateLayoutStyle()"><md-radio-button ng-repeat="layoutStyle in vm.layoutStyles" \nng-value="layoutStyle.value"><div layout="column" layout-align="center center"><img ng-src="{{layoutStyle.figure}}"> \n<span class="text-center font-size-12 mt-8">{{layoutStyle.label}}</span></div></md-radio-button></md-radio-group></div>\n<md-divider></md-divider><div class="theme-option"><div class="option-title">Layout Mode:</div><md-radio-group \nlayout="row" layout-align="start center" ng-model="vm.layoutMode" ng-change="vm.updateLayoutMode()"><md-radio-button \nng-repeat="layoutMode in vm.layoutModes" ng-value="layoutMode.value">{{layoutMode.label}}</md-radio-button>\n</md-radio-group></div><md-divider></md-divider><div class="theme-option color-palettes"><div class="option-title">\nColor Palette:</div><div layout="row" layout-align="start start" layout-wrap><md-button \nng-repeat="(themeName, theme) in vm.themes.list" class="md-raised theme-button" layout="row" \nlayout-align="center center" aria-label="{{themeName}}" ng-click="vm.setActiveTheme(themeName)" \nng-style="{\'background-color\': theme.primary.color,\'border-color\': theme.accent.color,\'color\': theme.primary.contrast1}" \nng-class="{active: vm.getActiveTheme().name === themeName}"><md-icon ng-style="{\'color\': theme.primary.contrast1}" \nmd-font-icon="icon-palette" class="icon s32"></md-icon></md-button></div></div></div></md-sidenav>');
$templateCache.put('app/main/account/menu.html','<div class="menu-my-account"><ul><li ui-sref="app.account.my" ui-sref-active="active"><md-icon \nmd-font-icon="icon-account" class="s20"></md-icon><span>Th\xF4ng tin t\xE0i kho\u1EA3n</span></li><li \nui-sref="app.account.change-password" ui-sref-active="active"><md-icon md-font-icon="icon-key" class="s20"></md-icon>\nThay \u0111\u1ED5i m\u1EADt kh\u1EA9u</li><li ui-sref="app.account.otp" ui-sref-active="active"><md-icon md-font-icon="icon-security" \nclass="s20"></md-icon>C\xE0i \u0111\u1EB7t OTP</li><li ui-sref="app.account.telegram" ui-sref-active="active"><md-icon \nmd-font-icon="icon-telegram" class="s20"></md-icon>Li\xEAn k\u1EBFt Telegram</li><md-divider></md-divider><li \nui-sref="app.account.rules" ui-sref-active="active"><md-icon md-font-icon="icon-ruler" class="s20"></md-icon>Quy t\u1EAFc\n</li><li ui-sref="app.account.limit" ui-sref-active="active"><md-icon md-font-icon="icon-code-less-than-or-equal" \nclass="s20"></md-icon>Th\xF4ng s\u1ED1</li><md-divider></md-divider><li layout="row" layout-align="space-between center">\n<md-icon md-font-icon="icon-calendar-today" class="s20"></md-icon><p>B\u1EA3ng c\u01B0\u1EE3c</p><span flex></span><md-icon \nmd-font-icon="icon-chevron-down" class="s20"></md-icon></li><li ui-sref="app.account.bet-list.traditional" \nui-sref-active="active"><p class="bet-list">X\u1ED5 s\u1ED1 truy\u1EC1n th\u1ED1ng</p></li><md-divider></md-divider><li \nui-sref="app.account.statement" ui-sref-active="active"><md-icon md-font-icon="icon-bulletin-board" class="s20">\n</md-icon>Sao k\xEA</li><li layout="row" layout-align="space-between center"><md-icon md-font-icon="icon-cancel" \nclass="s20"></md-icon><p>Phi\u1EBFu \u0111\xE3 h\u1EE7y</p><span flex></span><md-icon md-font-icon="icon-chevron-down" class="s20">\n</md-icon></li><li ui-sref="app.account.cancelled.traditional" ui-sref-active="active"><p class="bet-list">\nX\u1ED5 s\u1ED1 truy\u1EC1n th\u1ED1ng</p></li><md-divider></md-divider><li class="logout" ng-click="$root.signOut()"><md-icon \nmd-font-icon="icon-logout" class="s20"></md-icon>Tho\xE1t</li></ul></div>');
$templateCache.put('app/main/announcements/announcements.html','<div id="announcements" class="page-layout carded left-sidenav" layout="row"><div class="" layout="column" flex><h2 \nng-hide="$mdMedia(\'xs\')" class="primary">{{ vm.currentFilter.filter | announcements }}</h2><div \nclass="announcements-wrap md-primary-bg md-whiteframe-1dp" layout="column" flex \nng-include="\'app/main/announcements/views/classic-view.html\'"></div></div></div>');
$templateCache.put('app/main/announcements/announcements.menu.html','<div class="menu-my-account"><ul><li ui-sref-active="active" ui-sref="app.announcements.threads({filter: \'normal\'})">\n<span>Th\xF4ng th\u01B0\u1EDDng</span></li><li ui-sref-active="active" ui-sref="app.announcements.threads({filter: \'special\'})">\n<span>Quan tr\u1ECDng</span></li><li ui-sref-active="active" ui-sref="app.announcements.threads({filter: \'system\'})"><span>\nH\u1EC7 th\u1ED1ng</span></li><li ui-sref-active="active" ui-sref="app.announcements.threads({filter: \'personal\'})" \nng-if="$root.isAuthenticated"><span>C\xE1 nh\xE2n</span></li></ul></div>');
$templateCache.put('app/main/announcements/warning.dialog.html','<md-dialog aria-label="dialog" class="announcements-dialog"><md-dialog-content><div class="md-dialog-content"><div \nclass="content" layout="column"><div>\nTH\xD4NG B\xC1O: C\xD4NG TY C\xD3 QUY\u1EC0N H\u1EE6Y C\xC1C PHI\u1EBEU C\u01AF\u1EE2C GIAN L\u1EACN M\xC0 KH\xD4NG C\u1EA6N TH\xD4NG B\xC1O TR\u01AF\u1EDAC<br>\n(THEO TH\xD4NG L\u1EC6 QU\u1ED0C T\u1EBE: "NH\xCCN B\xC1O BI\u1EC2U T\xCDNH TI\u1EC0N")</div><div>XIN C\u1EA2M \u01A0N S\u1EF0 H\u1EE2P T\xC1C V\xC0 \u0110\u1ED2NG H\xC0NH C\u1EE6A QU\xDD KH\xC1CH</div><div \nclass="text-right">TR\xC2N TR\u1ECCNG!</div><div><md-button class="md-raised md-accent" type="button" ng-click="cancel()" \nng-disabled="!thisOK">B\u1ECE QUA</md-button></div></div></div></md-dialog-content></md-dialog>');
$templateCache.put('app/main/game/game.html','<div flex class="page-layout simple fullwidth game-play" layout="column" layout-align="center center" \nng-style="vm.gameStyle"><div class="overlay"></div><div layout="column" ng-hide="vm.isWMMaintenance"><div \nclass="frame-play" ng-hide="vm.introduction"><iframe scrolling="no" ng-src="{{vm.currentProjectUrl}}" allow="autoplay" \nid="iframe"></iframe><div class="wait-wm" layout="row" layout-align="center center" ng-show="vm.loadingGame" \nng-class="{\'pre\' : vm.preHasGame}"><div class="logo"><div class="loader"></div><div class="message" ng-if="vm.message">\n{{ vm.message }}</div></div></div></div><div class="NbBbRNil" ng-show="vm.introduction"><h1>{{ $root.gameName }}</h1><p>\nCh\xE0o m\u1EEBng qu\xFD kh\xE1ch \u0111\u1EBFn v\u1EDBi Casino tr\u1EF1c tuy\u1EBFn c\u1EE7a ONE789</p><div class="CgcIEXRw"><md-button class="JcuPtOnP" \nng-click="$root.popupLogin()" hide>\u0110\u0103ng nh\u1EADp</md-button><md-button class="IMshVrGI" \nui-sref="app.game({id: vm.gameName, play: \'free\'})">Ch\u01A1i th\u1EED</md-button></div></div></div><div \nclass="NbBbRNil maintenance" layout="column" layout-align="center center" ng-if="vm.isWMMaintenance"><p>\n{{vm.MaintenanceMessage}}</p><p>Qu\xFD kh\xE1ch vui l\xF2ng quay l\u1EA1i sau.</p></div><md-button \nclass="md-icon-button md-accent md-raised btn-home" class="exit" ui-sref="app.home" \nng-show="$mdMedia(\'min-width: 1400px\')"><md-icon md-font-icon="icon-home"></md-icon></md-button></div>');
$templateCache.put('app/main/casino/casino.html','<div flex class="page-layout simple fullwidth game-play" layout="column" layout-align="top center" \nlayout-align-gt-md="center center" ng-style="vm.gameStyle"><div class="overlay"></div><div layout="column" \nng-if="!vm.isWMMaintenance"><div class="frame-play casino-789" ng-if="$root.isAuthenticated"><iframe scrolling="no" \nng-src="{{vm.currentProjectUrl}}" allow="autoplay" id="iframe"></iframe><div class="wait-wm" layout="row" \nlayout-align="center center" ng-show="vm.loadingGame" ng-class="{\'pre\' : vm.preHasGame}"><div class="logo"><div \nclass="loader"></div><div class="message" ng-if="vm.message">{{ vm.message }}</div></div></div></div><div \nclass="NbBbRNil" ng-show="!$root.isAuthenticated"><h1>{{ $root.gameName }}</h1><p>\nQu\xFD kh\xE1ch vui l\xF2ng \u0111\u0103ng nh\u1EADp \u0111\u1EC3 ti\u1EBFp t\u1EE5c</p><div class="CgcIEXRw"><md-button class="JcuPtOnP" \nng-click="$root.popupLogin()">\u0110\u0103ng nh\u1EADp</md-button></div></div></div><div class="NbBbRNil maintenance" layout="column" \nlayout-align="center center" ng-if="vm.isWMMaintenance"><p>Live Casino \u0111ang b\u1EA3o tr\xEC \u0111\u1ECBnh k\u1EF3</p><p>\nQu\xFD kh\xE1ch vui l\xF2ng quay l\u1EA1i sau.</p></div><md-button class="md-icon-button md-accent md-raised btn-home" class="exit" \nui-sref="app.home" ng-show="$mdMedia(\'min-width: 1400px\')"><md-icon md-font-icon="icon-home"></md-icon></md-button>\n</div>');
$templateCache.put('app/main/auth/auth.dialog.html','<md-dialog aria-label="One Dialog" class="auth-dialog"><md-toolbar class="md-accent"><div class="md-toolbar-tools">\n<md-button class="md-icon-button" ng-click="cancel()"><md-icon md-font-icon="icon-keyboard-backspace"></md-icon>\n</md-button><span flex></span><h2>\u0110\u0103ng nh\u1EADp</h2></div></md-toolbar><md-dialog-content><div \nclass="md-dialog-content auth-template md-primary-bg"><div class="content" layout="column"><form name="formAuth" \nng-submit="login()" novalidate><div class="content-wrap" layout="column"><h2>H\u1ED9i vi\xEAn \u0111\u0103ng nh\u1EADp</h2><div \nclass="input-content"><label><md-icon md-font-icon="icon-account"></md-icon></label> <input type="text" name="username" \nng-model="form.username" placeholder="T\xE0i kho\u1EA3n" minlength="4" class="md-one-input" required autocomplete="off"></div>\n<div class="input-content"><label><md-icon md-font-icon="icon-lock"></md-icon></label> <input \nng-attr-type="{{ show ? \'text\' : \'password\' }}" name="password" ng-model="form.password" placeholder="M\u1EADt kh\u1EA9u" \nminlength="4" class="md-one-input" required autocomplete="off"> <label class="show-hide" ng-click="showPassword()">\n{{showText}}</label></div><div class="input-content"><md-button type="submit" \nng-disabled="formAuth.$invalid || formAuth.$pristine || submitting" class="md-raised md-accent"><md-progress-circular \nclass="md-accent" md-diameter="20px" ng-disabled="!submitting"></md-progress-circular>\u0110\u0103ng nh\u1EADp</md-button></div></div>\n</form></div></div></md-dialog-content></md-dialog>');
$templateCache.put('app/main/auth/auth.html','<div class="page-layout simple fullwidth" layout="row" layout-align="center center"><div \nclass="auth-template md-whiteframe-4dp md-primary-bg" layout="column"><div class="toolbar" layout="row" \nlayout-align="space-between center"><md-button class="md-icon-button" ui-sref="app.home"><md-icon \nmd-font-icon="icon-keyboard-backspace"></md-icon></md-button><h2>\u0110\u0103ng nh\u1EADp</h2></div><div \nng-include="\'app/main/auth/auth.template.html\'"></div></div></div>');
$templateCache.put('app/main/auth/auth.template.html','<div class="content" layout="column"><form name="formAuth" ng-submit="vm.login()" novalidate><div class="content-wrap" \nlayout="column"><h2>H\u1ED9i vi\xEAn \u0111\u0103ng nh\u1EADp</h2><div class="input-content"><label><md-icon md-font-icon="icon-account">\n</md-icon></label> <input type="text" name="Email" ng-model="vm.form.username" placeholder="T\xE0i kho\u1EA3n" minlength="4" \nrequired autocomplete="off"></div><div class="input-content"><label><md-icon md-font-icon="icon-lock"></md-icon></label>\n <input ng-attr-type="{{ vm.show ? \'text\' : \'password\' }}" name="password" ng-model="vm.form.password" \nplaceholder="M\u1EADt kh\u1EA9u" minlength="4" required autocomplete="off"> <label class="show-hide" ng-click="vm.showPassword()">\n{{vm.showText}}</label></div><div class="input-content"><md-button type="submit" class="md-raised md-accent" \nng-disabled="formAuth.$invalid || formAuth.$pristine || vm.submitting"><md-progress-circular class="md-accent" \nmd-diameter="20px" ng-disabled="!vm.submitting"></md-progress-circular>\u0110\u0103ng nh\u1EADp</md-button></div></div></form></div>');
$templateCache.put('app/main/home/home.html','<div id="home" class="flex-scrollable" layout="column" ms-scroll><section id="header" \nng-class="{ \'sticky\' : vm.offsetToTop }"><div class="main-menu"><md-toolbar id="toolbar" \nclass="md-menu-toolbar md-whiteframe-1dp" ui-view="toolbar"></md-toolbar></div></section><section id="banner-vid"><div \nclass="slider-content" layout="row" layout-align="space-between end"><div layout="column"><div class="video_contain" \nng-if="vm.$mdMedia(\'gt-xs\')"><iframe \nsrc="https://customer-j860qvbthbggesc4.cloudflarestream.com/31163be42792cba8cfdbb77fdfc11219/iframe?muted=true&preload=true&autoplay=true&poster=https%3A%2F%2Fcustomer-j860qvbthbggesc4.cloudflarestream.com%2F5dc310a56c050651f867630a97aaaf42%2Fthumbnails%2Fthumbnail.jpg%3Ftime%3D%26height%3D600&controls=false" \nloading="lazy" allow="accelerometer; gyroscope; autoplay; encrypted-media; picture-in-picture;"></iframe></div></div>\n<div class="production-wrapper"><div class="one-container" layout="row" layout-xs="column" \nlayout-align="space-between end"><div class="home-pro"><a ui-sref="app.traditional.northern.jackpot"><img \nsrc="/assets/images/home/xoso.jpg" class="home-img" alt="X\u1ED5 s\u1ED1 truy\u1EC1n th\u1ED1ng"></a><div class="item-info"><span \nclass="item-name">X\u1ED5 s\u1ED1 truy\u1EC1n th\u1ED1ng</span></div></div><div class="home-pro"><a ui-sref="app.casino"><img \nsrc="/assets/images/home/xocdia.jpg" class="home-img" alt="X\xF3c \u0111\u0129a"></a><div class="item-info"><span class="item-name">\nX\xF3c \u0111\u0129a 789</span></div></div><div class="home-pro"><a ui-sref="app.saba({game: \'sabaclub\'})"><img \nsrc="/assets/images/home/baccarat.jpg" class="home-img" alt="baccarat"></a><div class="item-info"><span \nclass="item-name">baccarat</span></div></div></div></div></div></section><section id="production" \nng-show="$root.setInfoBarContents.length"><div class="one-container"><div class="notification md-one-input"><p \nclass="marquee"><span ng-repeat="item in $root.setInfoBarContents"><label>\n{{ item.PublishedAt | amDateFormat : \'DD/MM/YYYY HH:mm\' }}</label>{{ item.Message | htmlToPlaintext }}</span></p></div>\n</div></section><section id="saba"><div class="one-container"><div class="str-cont"><h2 class="md-accent-fg md-hue-1">\n\u0110\u1EB7t c\u01B0\u1EE3c BONG88</h2></div><div class="product" ng-include="\'app/main/home/saba.html\'"></div></div></section><section \nid="live-casino"><div class="one-container"><div class="str-cont"><h2 class="md-accent-fg md-hue-1">Casino tr\u1EF1c tuy\u1EBFn\n</h2><h5>Nh\u1EEFng tr\xF2 ch\u01A1i casino m\u1EDBi nh\u1EA5t, tr\u1EA3 th\u01B0\u1EDFng cao nh\u1EA5t</h5></div><div class="game-list-wrap"><div \nclass="wm-casino" ng-repeat="item in vm.aGames" ng-if="!item.homeHidden" ng-click="$root.gotoGame(item, $event)"><div \nclass="game" ng-class="item.interName"><img class="cover" ng-src="{{ item.thumbnail }}" alt="{{ item.name }}"><div \nclass="game-title"><h3>{{ item.name }}</h3></div></div></div></div></div></section><section id="footer"><div \nclass="one-container" layout="row" layout-xs="column"><div flex="100" layout="row" layout-align="center center"><div \nclass="copyright-text"><p>\xA9 {{ vm.thisYear }} ONE789</p></div></div></div></section></div>');
$templateCache.put('app/main/home/nav.menu.template.html','<ul><li class="nav-link drop-down"><a class="main" ui-sref="app.traditional.northern.jackpot">X\u1ED5 s\u1ED1</a><div \nclass="small-mega-menu"><div class="mega-menu-wrap md-primary-bg md-whiteframe-4dp" layout="row"><a flex="50" \nclass="game-wrap" ng-repeat="game in vm.headerMenus | limitTo : 2" ui-sref="{{ game.state }}"><div class="game-content">\n<img class="cover" ng-src="{{ game.img }}" alt="{{ game.name }}"><div class="game-title"><h3>{{ game.name }}</h3></div>\n</div></a></div></div></li><li class="nav-link drop-down"><a class="main" ui-sref="app.casino">X\xF3c \u0111\u0129a 789</a><div \nclass="small-mega-menu"><div class="mega-menu-wrap md-primary-bg md-whiteframe-4dp" layout="row"><a flex="100" \nclass="game-wrap" ui-sref="app.casino"><div class="game-content" style="height: 230px"><img class="cover" \nsrc="/assets/images/casino/banner.jpg" alt="casino"><div class="game-title"><h3>X\xF3c \u0111\u0129a 789</h3></div></div></a></div>\n</div></li><li class="nav-link"><a class="main live-casino" href="#">Bong88</a><div class="mega-menu"><div \nclass="mega-menu-wrap md-primary-bg" layout="column"><div layout="row" layout-align="start start" layout-wrap><div \nclass="game-wrap saba" ng-repeat="item in $root.sabaProductions" ng-hide="$index === 2" ng-if="!item.hidden" \nng-click="$root.gotoSaba(item)"><div class="game-content"><img class="cover" ng-src="{{ item.cover }}" \nalt="{{ item.name }}"><div class="game-title"><h3>{{ item.name }}</h3></div></div></div></div></div></div></li><li \nclass="nav-link"><a class="main live-casino" href="#">Live Casino</a><div class="mega-menu"><div \nclass="mega-menu-wrap md-primary-bg" layout="column"><div layout="row" layout-align="start start" layout-wrap><div \nclass="game-wrap" ng-repeat="item in vm.aGames" ng-if="!item.hidden" ng-click="vm.gotoGame(item, $event)"><div \nclass="game-content" ng-class="item.interName"><img class="cover" ng-src="{{ item.thumbnail }}" alt="{{ item.name }}">\n<div class="game-title"><h3>{{ item.name }}</h3></div></div></div></div></div></div></li><li class="nav-link"><a \nclass="main" ui-sref="app.announcements.threads({filter: \'normal\'})">Th\xF4ng b\xE1o</a></li><li class="nav-link"><a \nclass="main" ui-sref="app.results.traditional">K\u1EBFt qu\u1EA3</a></li></ul>');
$templateCache.put('app/main/home/saba.html','<div class="saba-wrap" flex><div class="second" flex><div ng-repeat="item in $root.sabaProductions" \nclass="item-production" ng-click="$root.gotoSaba(item)" ng-hide="vm.$mdMedia(\'xs\') && $index === 2"><img class="cover" \nng-src="{{ item.cover }}" alt="{{ item.name }}"><div class="item-info"><span class="item-name">{{ item.name }}</span> \n<span class="item-short">{{ item.description }}</span></div></div></div></div>');
$templateCache.put('app/main/saba/saba.html','<div flex class="page-layout simple fullwidth saba-game" layout="column" layout-align="center center"><div \nlayout="column" flex class="game-content" ng-if="!vm.cantLogin" ng-class="{\'saba-club\': vm.isClub}"><div flex \nclass="frame-play" layout="column"><iframe flex scrolling="yes" ng-src="{{vm.currentProjectUrl}}" allow="autoplay" \nid="iframe"></iframe><div class="free-play" layout="row" layout-align="center center" ng-if="vm.requestOpen"><div \nclass="message">T\xE0i kho\u1EA3n c\u1EE7a qu\xFD kh\xE1ch hi\u1EC7n kh\xF4ng c\xF3 quy\u1EC1n \u0111\u1EB7t c\u01B0\u1EE3c Bong88, h\xE3y li\xEAn h\u1EC7 \u0111\u1EA1i l\xFD \u0111\u1EC3 m\u1EDF ch\u1EE9c n\u0103ng n\xE0y\n</div></div><div class="wait-wm" layout="row" layout-align="center center" ng-show="vm.loadingGame" \nng-class="{\'pre\' : vm.preHasGame}"><div class="logo"><div class="loader" ng-hide="vm.hideLoader"></div><div \nclass="message" ng-if="vm.message"><p>{{ vm.message }}</p></div></div></div></div></div><div class="need-transfer" \nlayout="column" layout-align="center center" ng-if="vm.needTransfer"><p>\nQu\xFD kh\xE1ch c\u1EA7n th\u1EF1c hi\u1EC7n chuy\u1EC3n ti\u1EC1n v\xE0o Game tr\u01B0\u1EDBc.</p><div class="CgcIEXRw"><md-button class="JcuPtOnP" \nng-click="vm.transferBalance(1, $event, true)">Chuy\u1EC3n ti\u1EC1n</md-button></div></div><div class="account-locked" \nlayout="column" layout-align="center center" ng-if="vm.accountLocked"><p>\nT\xE0i kho\u1EA3n c\u1EE7a qu\xFD kh\xE1ch kh\xF4ng \u0111\u01B0\u1EE3c ph\xE9p ch\u01A1i Game</p></div><div class="maintenance" layout="column" \nlayout-align="center center" ng-if="vm.isWMMaintenance"><p ng-bind-html="vm.MaintenanceMessage"></p></div></div>');
$templateCache.put('app/main/saba/transfer-balance.html','<md-dialog aria-label="One Dialog" class="auth-dialog saba"><md-toolbar class="md-accent"><div class="md-toolbar-tools">\n<md-button class="md-icon-button" ng-click="cancel()"><md-icon md-font-icon="icon-keyboard-backspace"></md-icon>\n</md-button><span flex></span><h2>{{label}}</h2></div></md-toolbar><md-dialog-content><div \nclass="md-dialog-content auth-template"><div class="content" layout="column"><form name="formTransfer" \nng-submit="transferAction()" novalidate><div class="content-wrap" layout="column"><h2>{{shortLabel}}</h2><div \nclass="input-content direction" layout="row" layout-align="space-between center" ng-hide="firstTime"><div flex class="" \nng-class="{\'active\' : direction === 1}" ng-click="initDirection(1)">Chuy\u1EC3n ti\u1EC1n</div><div flex class="" \nng-class="{\'active\' : direction === 0}" ng-click="initDirection(0)">R\xFAt ti\u1EC1n</div></div><div class="note" layout="row" \nlayout-align="center center" ng-if="direction === 0"><span>S\u1ED1 ti\u1EC1n giao d\u1ECBch ph\u1EA3i l\xE0 b\u1ED9i s\u1ED1 c\u1EE7a 1.000 \u0111\u1ED3ng</span></div>\n<div class="input-content"><h3>S\u1ED1 d\u01B0: <b>{{ $root.User.Balance | currency : \'\' : 0 }}</b></h3></div><div \nclass="input-content saba" layout="row"><h3>S\u1ED1 d\u01B0 Bong88: <b>{{ $root.User.SabaBalance | currency : \'\' : 0 }}</b></h3>\n</div><div class="input-content"><label><md-icon md-font-icon="icon-coin"></md-icon></label> <input type="tel" \nname="Amount" ng-model="transfer.Amount" placeholder="S\u1ED1 ti\u1EC1n" minlength="2" required ng-currency autocomplete="off"> \n<label class="show-hide">\xD7 1,000</label><div class="message" ng-class="{\'has-dada\': transfer.Amount !== undefined }">\n<span>{{ transfer.Amount | words}}</span></div></div><div class="input-content money-template"><div \nclass="template-wrap" layout="row" layout-wrap><div class="money-item" ng-repeat="item in arTemplates" \nng-click="setMoney(item)"><div>{{ item | sabaCurrency }}</div></div><div class="money-item all-in" \nng-click="transferAll(item)"><div>T\u1EA5t c\u1EA3</div></div></div></div><div class="input-content" \nng-show="transfer.Direction === 1"><md-checkbox ng-model="transfer.Remember" aria-label="Remember">\nT\u1EF1 \u0111\u1ED9ng chuy\u1EC3n kho\u1EA3n ti\u1EC1n n\xE0y h\xE0ng ng\xE0y sau khi k\u1EBFt to\xE1n</md-checkbox></div><div class="input-content"><md-button \ntype="submit" ng-disabled="submitting" class="md-raised md-accent transfer"><md-progress-circular class="md-accent" \nmd-diameter="20px" ng-disabled="!submitting"></md-progress-circular>{{shortLabel}}</md-button></div></div></form></div>\n</div></md-dialog-content></md-dialog>');
$templateCache.put('app/main/presidential/presidential.html','<div flex class="page-layout simple fullwidth" layout="column" id="presidential"><div class="NbBbRNil" layout="column" \nlayout-align="center center" ng-show="!$root.isAuthenticated"><div class="wrap"><p>\nQu\xFD kh\xE1ch vui l\xF2ng \u0111\u0103ng nh\u1EADp \u0111\u1EC3 ti\u1EBFp t\u1EE5c</p><div class="CgcIEXRw"><md-button class="JcuPtOnP" \nng-click="$root.popupLogin()">\u0110\u0103ng nh\u1EADp</md-button></div></div></div><div layout="column" class="presidential-wrapper" \nng-if="$root.isAuthenticated"><div class="title"><h1>{{vm.event.Description}}</h1><h4>\n{{vm.event.EventDate | amDateFormat : \'DD-MM-YYYY\'}}</h4></div><div flex layout="row" layout-align="center center" \nclass="layout-wrap"><div ng-repeat="item in vm.Candidates" flex="50" layout="row" layout-align="center center" \nclass="candidates" ng-click="vm.chooseCandidate(item)" ng-class="{\'disabled\': !item.Enabled || !vm.event.Enabled}"><div \nclass="candidate-content"><div class="candidate" layout="row" layout-align="space-between center" layout-xs="column" \nng-if="item.BetType === 1 || item.BetType === 20 || item.BetType === 21"><div class="pictures" layout="row" \nlayout-align="start center" layout-align-xs="center center"><img ng-src="{{item.pictures}}" alt="{{item.name}}"></div>\n<div class="content"><h1 class="name">{{item.name}}</h1><h2><span ng-class="{\'md-warn\' : item.Odds < 0}">{{item.Odds}}\n</span></h2></div></div><div class="candidate even" layout="row" layout-align="space-between center" layout-xs="column" \nng-if="item.BetType === 0 || item.BetType === 10 || item.BetType === 11"><div class="pictures" layout="row" \nlayout-align="start center" layout-align-xs="center center"><img ng-src="{{item.pictures}}" alt="{{item.name}}"></div>\n<div class="content"><h1 class="name">{{item.name}}</h1><h2><span ng-class="{\'md-warn\' : item.Odds < 0}">{{item.Odds}}\n</span></h2></div></div><div class="candidate unknown" layout="column" ng-if="item.BetType === 30"><div \nclass="pictures"><img ng-src="{{item.pictures}}" alt="{{item.name}}"></div><div class="content"><h1 class="name">\n{{item.name}}</h1><h2><span ng-class="{\'md-warn\' : item.Odds < 0}">{{item.Odds}}</span></h2></div></div></div></div>\n</div><div class="histories" ng-if="vm.histories.length"><div class="histories-content" layout="column"><p \nclass="title">L\u1ECBch s\u1EED \u0111\u1EB7t c\u01B0\u1EE3c</p><table class="table one-table" ms-responsive-table><thead><tr><th>#</th><th>Th\u1EDDi gian\n</th><th>\u1EE8ng vi\xEAn</th><th>T\u1EF7 l\u1EC7</th><th>Ti\u1EC1n c\u01B0\u1EE3c</th><th>Hoa h\u1ED3ng</th><th ng-if="vm.histories[0].Status === 1">K\u1EBFt qu\u1EA3\n</th><th ng-if="vm.histories[0].Status === 1">Th\u1EAFng thua</th></tr></thead><tbody><tr ng-repeat="item in vm.histories">\n<td>{{item.BetNumber}}</td><td>{{item.CreatedAt | amDateFormat : \'DD/MM HH:mm\'}}</td><td>{{item.BetType | candidate}}\n</td><td ng-class="{\'warn\': item.Odds < 0}">{{item.Odds}}</td><td>{{item.Amount | currency : \'\' : 0}}</td><td>\n{{item.Commission | currency : \'\' : 0}} <span>({{item.CommissionPercent}}%)</span></td><td ng-if="item.Status === 1">\n{{item.Result | currency : \'\' : 0}}</td><td ng-if="item.Status === 1" ng-class="{\'warn\': item.WinLose < 0}">\n{{item.WinLose | currency : \'\' : 0}}</td></tr></tbody><tfoot ng-if="vm.hasRecords"><tr><td colspan="8"><span \nng-click="vm.eventHistory(vm.lastId)">xem ti\u1EBFp</span></td></tr></tfoot></table><md-progress-linear \nmd-mode="indeterminate" class="md-warn" ng-show="submitting"></md-progress-linear></div></div></div></div>');
$templateCache.put('app/main/traditional/ads.html','<div class="image md-whiteframe-1dp" layout="row"><a ui-sref="app.casino"><img alt="piano" \nsrc="/assets/images/casino/piano.jpg"></a></div>');
$templateCache.put('app/main/traditional/traditional.html','<div id="traditional" class="page-layout simple fullwidth" layout="column"><div class="notification md-one-input" \nng-show="$root.setInfoBarContents.length"><p class="marquee" id="marquee-id" ng-style="$root.marqueeStyle"><span \nid="marquee-id-inner"><span ng-repeat="item in $root.setInfoBarContents"><label>\n{{ item.PublishedAt | amDateFormat : \'DD/MM/YYYY HH:mm\' }}</label>{{ item.Message | htmlToPlaintext }}</span></span></p>\n</div><div layout="row"><md-sidenav id="lottery-navigation" md-component-id="lottery-menu" class="md-primary-bg" \nmd-is-locked-open="$mdMedia(\'min-width: 1150px\')" ms-scroll ui-view="lottery-menu"></md-sidenav><div \nclass="content-wrap flex" layout-sm="column" layout-xs="column"><div layout="column" flex="100" flex-order-gt-sm="1" \nflex-order="2"><div layout="row" class="game-titles" ng-show="$mdMedia(\'max-width: 1149px\')" \nlayout-align="space-between center"><div layout="row"><md-button id="navigation-toggle" class="md-icon-button" \nng-click="one.toggleSidenav(\'lottery-menu\')" aria-label="Toggle navigation"><md-icon md-font-icon="icon-menu" \nclass="icon"></md-icon></md-button><h2 \nng-hide="one.northernLotto || one.northernJackpot || one.southern2D || one.southern3D || one.southern4D || one.southernXien || one.northern2D || one.northern3D || one.northern4D">\n{{ one.titles }}</h2><md-menu md-position-mode="left bottom" ng-show="one.northernLotto || one.northernJackpot">\n<md-button aria-label="Open menu" ng-click="$mdMenu.open($event)">{{ one.titles }}<md-icon \nmd-font-icon="icon-menu-down"></md-icon></md-button><md-menu-content width="3" class="md-primary-bg"><md-menu-item>\n<md-button ui-sref="app.traditional.northern.jackpot">\u0110\u1EC1</md-button></md-menu-item><md-menu-item><md-button \nui-sref="app.traditional.northern.lotto">L\xF4</md-button></md-menu-item></md-menu-content></md-menu><md-menu \nmd-position-mode="left bottom" ng-show="one.southern2D || one.southern3D || one.southern4D || one.southernXien">\n<md-button aria-label="Open menu" ng-click="$mdMenu.open($event)">{{ one.titles }}<md-icon \nmd-font-icon="icon-menu-down"></md-icon></md-button><md-menu-content width="3" class="md-primary-bg"><md-menu-item>\n<md-button ui-sref="app.traditional.southern.2d.dau">2D</md-button></md-menu-item><md-menu-item><md-button \nui-sref="app.traditional.southern.3d.dau">3D</md-button></md-menu-item><md-menu-item><md-button \nui-sref="app.traditional.southern.4d.duoi">4D</md-button></md-menu-item><md-menu-item><md-button \nui-sref="app.traditional.southern.parlay.pair-2">Xi\xEAn</md-button></md-menu-item></md-menu-content></md-menu><md-menu \nmd-position-mode="left bottom" ng-show="one.northern2D || one.northern3D || one.northern4D"><md-button \naria-label="Open menu" ng-click="$mdMenu.open($event)">{{ one.titles }}<md-icon md-font-icon="icon-menu-down"></md-icon>\n</md-button><md-menu-content width="3" class="md-primary-bg"><md-menu-item><md-button \nui-sref="app.traditional.northern-2nd.2d.dau">2D</md-button></md-menu-item><md-menu-item><md-button \nui-sref="app.traditional.northern-2nd.3d.dau">3D</md-button></md-menu-item><md-menu-item><md-button \nui-sref="app.traditional.northern-2nd.4d.duoi">4D</md-button></md-menu-item></md-menu-content></md-menu></div><div \nng-show="one.northernLotto"><md-button class="md-raised md-accent" ui-sref="app.traditional.northern.lotto" \nng-show="one.currentName !== \'app.traditional.northern.lotto\'">L\xF4</md-button><md-button class="md-raised md-accent" \nui-sref="app.traditional.northern.lotto-head" ng-show="one.currentName !== \'app.traditional.northern.lotto-head\'">\u0110\u1EA7u\n</md-button><md-button class="md-raised md-accent" ui-sref="app.traditional.northern.parlay" \nng-show="one.currentName !== \'app.traditional.northern.parlay\'">Xi\xEAn</md-button><md-button class="md-raised md-accent" \nui-sref="app.traditional.northern.except-lotto" ng-show="one.currentName !== \'app.traditional.northern.except-lotto\'">\nTr\u01B0\u1EE3t</md-button><md-button class="md-raised md-warn" ui-sref="app.traditional.northern.live" \nng-show="(one.currentName !== \'app.traditional.northern.live\') && $mdMedia(\'min-width: 400px\')">Live</md-button></div>\n<div ng-show="one.northernJackpot"><md-button class="md-raised md-accent" ui-sref="app.traditional.northern.jackpot" \nng-show="one.currentName !== \'app.traditional.northern.jackpot\'">\u0110\u1EC1</md-button><md-button class="md-raised md-accent" \nui-sref="app.traditional.northern.head-jackpot" ng-show="one.currentName !== \'app.traditional.northern.head-jackpot\'">\n\u0110\u1EA7u</md-button><md-button class="md-raised md-accent" ui-sref="app.traditional.northern.except-jackpot" \nng-show="one.currentName !== \'app.traditional.northern.except-jackpot\'">Tr\u01B0\u1EE3t</md-button></div><div \nng-show="one.southern2D"><md-button class="md-raised md-accent" ui-sref="app.traditional.southern.2d.dau" \nng-show="one.currentName !== \'app.traditional.southern.2d.dau\'">\u0110\u1EA7u</md-button><md-button class="md-raised md-accent" \nui-sref="app.traditional.southern.2d.duoi" ng-show="one.currentName !== \'app.traditional.southern.2d.duoi\'">\u0110u\xF4i\n</md-button><md-button class="md-raised md-accent" ui-sref="app.traditional.southern.2d.18lo" \nng-show="one.currentName !== \'app.traditional.southern.2d.18lo\'">18L\xF4</md-button><md-button class="md-raised md-accent" \nui-sref="app.traditional.southern.2d.18lo-head" ng-show="one.currentName !== \'app.traditional.southern.2d.18lo-head\'">\nL\xF4 \u0110\u1EA7u</md-button></div><div ng-show="one.southern3D"><md-button class="md-raised md-accent" \nui-sref="app.traditional.southern.3d.dau" ng-show="one.currentName !== \'app.traditional.southern.3d.dau\'">\u0110\u1EA7u\n</md-button><md-button class="md-raised md-accent" ui-sref="app.traditional.southern.3d.duoi" \nng-show="one.currentName !== \'app.traditional.southern.3d.duoi\'">\u0110u\xF4i</md-button><md-button class="md-raised md-accent" \nui-sref="app.traditional.southern.3d.17lo" ng-show="one.currentName !== \'app.traditional.southern.3d.17lo\'">17L\xF4\n</md-button><md-button class="md-raised md-accent" ui-sref="app.traditional.southern.3d.7lo" \nng-show="one.currentName !== \'app.traditional.southern.3d.7lo\'">7L\xF4</md-button></div><div ng-show="one.southern4D">\n<md-button class="md-raised md-accent" ui-sref="app.traditional.southern.4d.duoi" \nng-show="one.currentName !== \'app.traditional.southern.4d.duoi\'">\u0110u\xF4i</md-button><md-button class="md-raised md-accent" \nui-sref="app.traditional.southern.4d.16lo" ng-show="one.currentName !== \'app.traditional.southern.4d.16lo\'">16L\xF4\n</md-button></div><div ng-show="one.southernXien"><md-button class="md-raised md-accent" \nui-sref="app.traditional.southern.parlay.pair-2" ng-show="one.currentName !== \'app.traditional.southern.parlay.pair-2\'">\nXi\xEAn 2</md-button><md-button class="md-raised md-accent" ui-sref="app.traditional.southern.parlay.pair-3" \nng-show="one.currentName !== \'app.traditional.southern.parlay.pair-3\'">Xi\xEAn 3</md-button><md-button \nclass="md-raised md-accent" ui-sref="app.traditional.southern.parlay.pair-4" \nng-show="one.currentName !== \'app.traditional.southern.parlay.pair-4\'">Xi\xEAn 4</md-button></div><div \nng-show="one.northern2D"></div><div ng-show="one.northern3D"><md-button class="md-raised md-accent" \nui-sref="app.traditional.northern-2nd.3d.dau" ng-show="one.currentName !== \'app.traditional.northern-2nd.3d.dau\'">\u0110\u1EA7u\n</md-button><md-button class="md-raised md-accent" ui-sref="app.traditional.northern-2nd.3d.duoi" \nng-show="one.currentName !== \'app.traditional.northern-2nd.3d.duoi\'">\u0110u\xF4i</md-button><md-button \nclass="md-raised md-accent" ui-sref="app.traditional.northern-2nd.3d.23lo" \nng-show="one.currentName !== \'app.traditional.northern-2nd.3d.23lo\'">23L\xF4</md-button></div><div \nng-show="one.northern4D"><md-button class="md-raised md-accent" ui-sref="app.traditional.northern-2nd.4d.duoi" \nng-show="one.currentName !== \'app.traditional.northern-2nd.4d.duoi\'">\u0110u\xF4i</md-button><md-button \nclass="md-raised md-accent" ui-sref="app.traditional.northern-2nd.4d.20lo" \nng-show="one.currentName !== \'app.traditional.northern-2nd.4d.20lo\'">20L\xF4</md-button></div></div><div \nui-view="traditional-content" flex class="traditional-content"></div></div><div layout="column" flex-order-gt-sm="2" \nflex-order="1" flex-gt-sm="70" flex="100" id="inline-betting" \nng-include="\'app/main/traditional/betting/inline-betting/inline-betting.html\'" ng-show="$root.Tickets.length"></div>\n</div><md-button class="md-icon-button home-button md-accent md-raised" class="exit" ui-sref="app.home" \nng-show="$mdMedia(\'min-width: 1400px\')"><md-icon md-font-icon="icon-home"></md-icon></md-button></div></div>');
$templateCache.put('app/main/wiki/wiki.html','<iframe src="https://en.wikipedia.org/wiki/Main_Page" title="description"></iframe>');
$templateCache.put('app/main/legendary/dialog.label.html','<md-dialog aria-label="Legendary" class="legendary-dialog-label"><md-toolbar><div class="md-toolbar-tools"><h2>{{label}}\n</h2><div flex></div><md-button class="md-icon-button" ng-click="cancel()"><md-icon md-font-icon="icon-close"></md-icon>\n</md-button></div></md-toolbar><md-dialog-content><div class="md-dialog-content" layout="row" layout-wrap=""><div \nflex="10" class="repeater-label" ng-repeat="pop in popLabels" layout="row" layout-align="center center"><md-button \nmd-no-ink ng-class="{\'md-warn\': cond4d.name === pop.name}" ng-click="changeLabel(pop)">{{pop.name}}</md-button></div>\n</div></md-dialog-content></md-dialog>');
$templateCache.put('app/main/legendary/dialog.move.living.html','<md-dialog class="message" aria-label="message dialog"><md-dialog-content style="min-width: 400px"><div \nclass="md-dialog-content"><p class="text-center">\nCh\xFAng t\xF4i \u0111ang th\u1EF1c hi\u1EC7n quay th\u01B0\u1EDFng \u0111\xE0i {{ data.GameType | legendGame }}.</p><p class="text-center">\nQu\xFD kh\xE1ch c\xF3 mu\u1ED1n di chuy\u1EC3n sang \u0111\u1EB7t c\u01B0\u1EE3c \u0111\xE0i {{ data.GameType | legendGame }} kh\xF4ng?</p></div></md-dialog-content>\n<md-dialog-actions><md-button ng-click="cancel()" class="md-warn">\u1EDF l\u1EA1i</md-button><span flex></span><md-button \nng-click="move()" class="md-accent">Chuy\u1EC3n \u0111i</md-button></md-dialog-actions></md-dialog>');
$templateCache.put('app/main/legendary/legendary.html','<div id="legendary" class="page-layout simple fullwidth" layout="column"><div class="notification" \nng-show="$root.setInfoBarContents.length"><p class="marquee" id="marquee-id" ng-style="$root.marqueeStyle"><span \nid="marquee-id-inner"><span ng-repeat="item in $root.setInfoBarContents"><label>\n{{ item.PublishedAt | amDateFormat : \'DD/MM/YYYY HH:mm\' }}</label>{{ item.Message | htmlToPlaintext }}</span></span></p>\n</div><div class="cinematic-stage" layout-gt-sm="row" layout="column"><div class="video-content" \nng-class="{\'stuck\': $root.stickVideo}"><div class="video-required-login" ng-show="!$root.isAuthenticated"><div \nclass="preview-element" layout="row" layout-align="center center"><div class="play-btn" ng-click="$root.popupLogin()">\n<img src="/assets/images/backgrounds/play.png"></div></div></div><div class="video-element" \nng-show="$root.isAuthenticated"><div class="player-element" id="player-element"></div><div class="note" \nng-show="legend.cinematicState === \'idle\'"><span ng-show="$mdMedia(\'min-width: 768px\')">X\u1ED5 s\u1ED1 789 - </span>\n\u0110\xE0i {{ legend.DrawResultAt.Name }} s\u1EBD quay th\u01B0\u1EDFng phi\xEAn ti\u1EBFp theo v\xE0o l\xFAc <span class="time">\n{{ legend.DrawResultAt.Time | amDateFormat : \'HH:mm\' }}</span></div><div class="live" \nng-show="legend.cinematicState === \'live\'"><md-icon md-font-icon="icon-checkbox-blank-circle" class="s20"></md-icon>\nTR\u1EF0C TI\u1EBEP <span class="results" ng-if="legend.latestResult">{{legend.latestResult}}</span> <span class="comment" \nng-if="legend.commentText.length">{{legend.commentText}}</span></div><div class="sound-control" \nng-show="legend.cinematicState === \'live\'"><md-icon md-font-icon="icon-volume" class="s32" ng-click="legend.setMuted()" \nng-show="!legend.muted"></md-icon><md-icon md-font-icon="icon-volume-off" class="s32" ng-click="legend.setMuted()" \nng-show="legend.muted"></md-icon></div><div class="notifications" ng-show="legend.showNotify">{{legend.textNotify}}\n</div><div class="mask" layout="column" layout-align="center center" ng-show="legend.showMaskVideo"><p>\n\u0110ang quay th\u01B0\u1EDFng \u0111\xE0i {{ legend.showing | legendGame }}</p><p>\n\u0110\xE0i {{ legend.DrawResultAt.Name }} s\u1EBD quay th\u01B0\u1EDFng phi\xEAn ti\u1EBFp theo v\xE0o l\xFAc {{ legend.DrawResultAt.Time | amDateFormat : \'HH:mm\' }}\n</p></div></div></div><div class="cinematic-result" flex><div class="cinematic-result-wrap" layout="column"><div \nclass="cinematic-result-header" layout="row" layout-align="space-between center" \nng-click="legend.showResultTableOnChange()"><p>K\u1EBFt qu\u1EA3 \u0110\xE0i <span>{{ legend.GameType | legendGame }}</span> phi\xEAn: <span>\n{{ legend.resultTables.Term | term }}</span></p><md-button class="md-icon-button md-primary" aria-label="More" \nng-hide="$mdMedia(\'gt-sm\')"><md-icon md-font-icon="icon-menu-down" ng-show="legend.showResultTable"></md-icon><md-icon \nmd-font-icon="icon-menu-right" ng-show="!legend.showResultTable"></md-icon></md-button><md-button \nclass="md-icon-button md-accent" ng-click="legend.reloadResult()" ng-hide="!$mdMedia(\'gt-sm\')" \nng-disabled="legend.reloadingResult"><md-icon md-font-icon="icon-refresh" class="s20" \nng-class="{\'rotating\': legend.reloadingResult}"></md-icon></md-button></div><div class="cinematic-result-content" \nlayout="row" ng-show="legend.showResultTable"><div flex="70"><div \nng-include="\'app/main/legendary/result.template/northern.html\'" ng-if="legend.resultTables.GameType === 0"></div><div \nng-include="\'app/main/legendary/result.template/southern.html\'" ng-if="legend.resultTables.GameType === 1"></div></div>\n<div flex="30"><table class="table matrix" cellspacing="0"><tbody><tr ng-repeat="(key, arr) in legend.matrix"><td><div>\n{{key}}</div></td><td><span ng-repeat="item in arr" ng-class="{\'jack\': item.jack}">{{item.value}}</span></td></tr>\n</tbody></table></div></div></div></div></div><div layout="row"><md-sidenav id="legendary-navigation" \nmd-component-id="legendary-menu" md-is-locked-open="$mdMedia(\'min-width: 1150px\')" ms-scroll ui-view="legendary-menu">\n</md-sidenav><div class="content-wrap flex" layout-sm="column" layout-xs="column"><div layout="column" flex="100" \nflex-order-gt-sm="1" flex-order="2"><div layout="row" class="game-titles" ng-show="$mdMedia(\'max-width: 1149px\')" \nlayout-align="space-between center"><div layout="row"><md-button id="navigation-toggle" class="md-icon-button" \nng-click="legend.toggleSidenav(\'legendary-menu\')" aria-label="Toggle navigation"><md-icon md-font-icon="icon-menu" \nclass="icon"></md-icon></md-button><h2 ng-hide="legend.northernLotto || legend.northernJackpot">{{ legend.titles }}</h2>\n<md-menu md-position-mode="left bottom" ng-show="legend.northernLotto || legend.northernJackpot"><md-button \naria-label="Open menu" ng-click="$mdMenu.open($event)">{{ legend.titles }}<md-icon md-font-icon="icon-menu-down">\n</md-icon></md-button><md-menu-content width="3"><md-menu-item><md-button ui-sref="app.legendary.northern.jackpot">\u0110\u1EC1\n</md-button></md-menu-item><md-menu-item><md-button ui-sref="app.legendary.northern.lotto">L\xF4</md-button></md-menu-item>\n</md-menu-content></md-menu></div><div ng-show="legend.northernLotto"><md-button class="md-raised md-accent" \nui-sref="app.legendary.northern.lotto" ng-show="legend.currentName !== \'app.legendary.northern.lotto\'">L\xF4</md-button>\n<md-button class="md-raised md-accent" ui-sref="app.legendary.northern.lotto-head" \nng-show="legend.currentName !== \'app.legendary.northern.lotto-head\'">\u0110\u1EA7u</md-button><md-button \nclass="md-raised md-accent" ui-sref="app.legendary.northern.parlay" \nng-show="legend.currentName !== \'app.legendary.northern.parlay\'">Xi\xEAn</md-button><md-button class="md-raised md-accent" \nui-sref="app.legendary.northern.3d.lotto" ng-show="legend.currentName !== \'app.legendary.northern.3d.lotto\'">3 C\xE0ng\n</md-button><md-button class="md-raised md-accent" ui-sref="app.legendary.northern.4d.lotto" \nng-show="legend.currentName !== \'app.legendary.northern.4d.lotto\'">4 C\xE0ng</md-button><md-button \nclass="md-raised md-warn" ui-sref="app.legendary.northern.live" \nng-show="(legend.currentName !== \'app.legendary.northern.live\') && $mdMedia(\'min-width: 425px\')">Live</md-button></div>\n<div ng-show="legend.northernJackpot"><md-button class="md-raised md-accent" ui-sref="app.legendary.northern.jackpot" \nng-show="legend.currentName !== \'app.legendary.northern.jackpot\'">\u0110\u1EC1</md-button><md-button class="md-raised md-accent" \nui-sref="app.legendary.northern.head-jackpot" ng-show="legend.currentName !== \'app.legendary.northern.head-jackpot\'">\u0110\u1EA7u\n</md-button><md-button class="md-raised md-accent" ui-sref="app.legendary.northern.3d.jackpot" \nng-show="legend.currentName !== \'app.legendary.northern.3d.jackpot\'">3 C\xE0ng</md-button><md-button \nclass="md-raised md-accent" ui-sref="app.legendary.northern.4d.jackpot" \nng-show="legend.currentName !== \'app.legendary.northern.4d.jackpot\'">4 C\xE0ng</md-button></div><div \nng-show="legend.northernLive"><md-button class="md-raised md-accent" ui-sref="app.legendary.northern.live({tab: \'\'})">\n2 C\xE0ng</md-button><md-button class="md-raised md-accent" ui-sref="app.legendary.northern.live({tab: \'3d\'})">3 C\xE0ng\n</md-button></div><div ng-show="legend.southern2D"><md-button class="md-raised md-accent" \nui-sref="app.legendary.southern.2d.eighth" ng-show="legend.currentName !== \'app.legendary.southern.2d.eighth\'">\u0110\u1EA7u\n</md-button><md-button class="md-raised md-accent" ui-sref="app.legendary.southern.2d.jackpot" \nng-show="legend.currentName !== \'app.legendary.southern.2d.jackpot\'">\u0110u\xF4i</md-button><md-button \nclass="md-raised md-accent" ui-sref="app.legendary.southern.2d.lotto" \nng-show="legend.currentName !== \'app.legendary.southern.2d.lotto\'">18L\xF4</md-button><md-button \nclass="md-raised md-accent" ui-sref="app.legendary.southern.2d.lotto-head" \nng-show="legend.currentName !== \'app.legendary.southern.2d.18lo-head\'">L\xF4 \u0110\u1EA7u</md-button></div><div \nng-show="legend.southern3D"><md-button class="md-raised md-accent" ui-sref="app.legendary.southern.3d.seventh" \nng-show="legend.currentName !== \'app.legendary.southern.3d.seventh\'">\u0110\u1EA7u</md-button><md-button \nclass="md-raised md-accent" ui-sref="app.legendary.southern.3d.jackpot" \nng-show="legend.currentName !== \'app.legendary.southern.3d.jackpot\'">\u0110u\xF4i</md-button><md-button \nclass="md-raised md-accent" ui-sref="app.legendary.southern.3d.lotto" \nng-show="legend.currentName !== \'app.legendary.southern.3d.lotto\'">17L\xF4</md-button></div><div \nng-show="legend.southern4D"><md-button class="md-raised md-accent" ui-sref="app.legendary.southern.4d.jackpot" \nng-show="legend.currentName !== \'app.legendary.southern.4d.jackpot\'">\u0110u\xF4i</md-button><md-button \nclass="md-raised md-accent" ui-sref="app.legendary.southern.4d.lotto" \nng-show="legend.currentName !== \'app.legendary.southern.4d.lotto\'">16L\xF4</md-button></div></div><div \nui-view="legendary-content" flex class="legendary-content"></div></div></div></div></div>');
$templateCache.put('app/main/legendary/missing.help.dialog.html','<md-dialog aria-label="missing.help.dialog" class="missing-help-dialog"><md-dialog-content><div \nclass="md-dialog-content" layout="column"><div class="img"><img ng-src="/assets/images/etc/missing-2.jpg" \nalt="missing help"></div><p><b class="missing">KHAN:</b> S\u1ED1 phi\xEAn s\u1ED1 n\xE0y ch\u01B0a ra</p><p><b class="max-missing">\nKHAN G\u1EA6N NH\u1EA4T:</b> S\u1ED1 phi\xEAn khan g\u1EA7n \u0111\xE2y nh\u1EA5t c\u1EE7a s\u1ED1 n\xE0y</p><p><b class="frequency">T\u1EA6N SU\u1EA4T:</b>\n S\u1ED1 l\u1EA7n xu\u1EA5t hi\u1EC7n t\xEDnh theo %</p><small>S\u1ED1 li\u1EC7u \u0111\u01B0\u1EE3c t\xEDnh t\u1EEB ng\xE0y 15/08/2020</small></div></md-dialog-content>\n<md-dialog-actions layout="row"><md-button class="md-accent" ng-click="cancel()">OK</md-button></md-dialog-actions>\n</md-dialog>');
$templateCache.put('app/main/legendary/seamless.dialog.html','<md-dialog aria-label="Seamless" class="seamless"><md-toolbar class="md-accent"><div class="md-toolbar-tools"><h2>\nSoi c\u1EA7u</h2><span flex></span><md-button class="md-icon-button" ng-click="cancel()"><md-icon md-font-icon="icon-close" \naria-label="Close dialog"></md-icon></md-button></div></md-toolbar><md-dialog-content><div class="md-dialog-content">\n<div class="seamless-content" layout="column"><div layout="row" layout-xs="column"><div class="label" flex="25">S\u1ED1 nh\xE1y\n</div><div layout="row" flex="75" flex-xs="100"><div class="content" flex="50" layout="row"><div \nng-repeat="item in FrequencyArray" flex="20" class="max-times" ng-class="{\'active\' : Frequency === item}" \nng-click="setFrequency(item)"><div>{{item}}</div></div></div><div flex="50" layout="row" class="has-switch" \nlayout-align="center center"><md-button ng-class="{\'active\': Reverse}" ng-click="changeReverse(true)">L\u1ED9n</md-button>\n<md-button ng-class="{\'active\': !Reverse}" ng-click="changeReverse(false)">Kh\xF4ng l\u1ED9n</md-button></div></div></div><div \nlayout="row" layout-xs="column"><div class="label" flex="25">C\u1EA7u ch\u1EA1y (phi\xEAn)</div><div class="content" flex="75" \nflex-xs="100" layout="row"><div ng-repeat="item in maxTimesArray track by $index" flex="10" class="max-times" \nng-class="{\'active\' : maxTimes === item}" ng-click="setMaxTimes(item)"><div>{{item}}</div></div></div></div><div \nlayout="row" layout-wrap><div flex="5" flex-xs="10" class="result-wrap" ng-repeat="item in SeamlessViews"><md-menu><div \nng-class="{\'more\': item.hasMore, \'active\': exitsSelected(item)}" ng-click="$mdMenu.open()"><md-tooltip \nmd-direction="top">T\u1EA1i v\u1ECB tr\xED {{ item.Index[0] }} \xD7 {{ item.Index[1] }}</md-tooltip>{{item.Number}}</div>\n<md-menu-content width="2" class="menu-seamless" ng-mouseleave="$mdMenu.close()"><md-menu-item \nng-show="!exitsSelected(item)"><md-button ng-click="chooseBet(item)">Ch\u1ECDn</md-button></md-menu-item><md-menu-item \nng-show="exitsSelected(item)"><md-button ng-click="chooseClear(item)">B\u1ECF ch\u1ECDn</md-button></md-menu-item><md-menu-item>\n<md-button ng-click="chooseView(item)">Xem chi ti\u1EBFt</md-button></md-menu-item></md-menu-content></md-menu></div></div>\n<div ng-show="SeamlessViews.length">Nh\u1EEFng s\u1ED1 \u0111\u01B0\u1EE3c in \u0111\u1EADm l\xE0 c\xF2n c\u1EA7u d\xE0i h\u01A1n</div></div></div></md-dialog-content>\n<md-dialog-actions layout="row"><span flex></span><md-button class="md-accent" ng-click="confirm()" \nng-disabled="chooseNumbers.length === 0">X\xE1c nh\u1EADn</md-button></md-dialog-actions></md-dialog>');
$templateCache.put('app/main/legendary/seamless.full.dialog.html','<md-dialog aria-label="Seamless" class="seamless-full"><md-toolbar class="md-warn"><div class="md-toolbar-tools"><h2>\nSoi c\u1EA7u s\u1ED1 {{ viewNumber.Number }} - V\u1ECB tr\xED: {{viewNumber.Index[0]}} \xD7 {{viewNumber.Index[1]}}</h2><span flex></span>\n<md-button class="md-icon-button" ng-click="cancel()"><md-icon md-font-icon="icon-close" aria-label="Close dialog">\n</md-icon></md-button></div></md-toolbar><md-dialog-content><div class="md-dialog-content"><div \nclass="seamless-content" layout="column"><div class="results-table" layout="column" \nng-repeat="item in resultCalculated"><div class="text-label" layout="row" layout-align="space-between center">\n\u0110\xE0i Mi\u1EC1n B\u1EAFc phi\xEAn {{ item.Term | term }}</div><div class="draw-result-label">\nTh\u1EDDi gian m\u1EDF th\u01B0\u1EDFng {{ item.DrawResultAt | amDateFormat : \'DD/MM/YYYY HH:mm\' }}</div><div layout="row"><table \nclass="table" cellspacing="0"><tbody><tr class="jackpot"><td>\u0110B</td><td><div class="padding-8" layout="row" \nlayout-align="center"><span ng-class="{ \'position\': item.data[0].position, \'match\': item.data[0].match }">\n{{item.data[0].number}}</span> <span ng-class="{ \'position\': item.data[1].position, \'match\': item.data[1].match }">\n{{item.data[1].number}}</span> <span ng-class="{ \'position\': item.data[2].position }">{{item.data[2].number}}</span> \n<span ng-class="{ \'position\': item.data[3].position, \'match\': item.data[3].match }">{{item.data[3].number}}</span> <span\n ng-class="{ \'position\': item.data[4].position, \'match\': item.data[4].match }">{{item.data[4].number}}</span></div></td>\n</tr><tr><td>G1</td><td><div class="padding-8" layout="row" layout-align="center"><span \nng-class="{ \'position\': item.data[5].position, \'match\': item.data[5].match }">{{item.data[5].number}}</span> <span \nng-class="{ \'position\': item.data[6].position, \'match\': item.data[6].match }">{{item.data[6].number}}</span> <span \nng-class="{ \'position\': item.data[7].position }">{{item.data[7].number}}</span> <span \nng-class="{ \'position\': item.data[8].position, \'match\': item.data[8].match }">{{item.data[8].number}}</span> <span \nng-class="{ \'position\': item.data[9].position, \'match\': item.data[9].match }">{{item.data[9].number}}</span></div></td>\n</tr><tr><td>G2</td><td><div layout="row"><div flex="50" class="padding-8" layout="row" layout-align="center"><span \nng-class="{ \'position\': item.data[10].position, \'match\': item.data[10].match }">{{item.data[10].number}}</span> <span \nng-class="{ \'position\': item.data[11].position, \'match\': item.data[11].match }">{{item.data[11].number}}</span> <span \nng-class="{ \'position\': item.data[12].position }">{{item.data[12].number}}</span> <span \nng-class="{ \'position\': item.data[13].position, \'match\': item.data[13].match }">{{item.data[13].number}}</span> <span \nng-class="{ \'position\': item.data[14].position, \'match\': item.data[14].match }">{{item.data[14].number}}</span></div>\n<div flex="50" class="padding-8" layout="row" layout-align="center"><span \nng-class="{ \'position\': item.data[15].position, \'match\': item.data[15].match }">{{item.data[15].number}}</span> <span \nng-class="{ \'position\': item.data[16].position, \'match\': item.data[16].match }">{{item.data[16].number}}</span> <span \nng-class="{ \'position\': item.data[17].position }">{{item.data[17].number}}</span> <span \nng-class="{ \'position\': item.data[18].position, \'match\': item.data[18].match }">{{item.data[18].number}}</span> <span \nng-class="{ \'position\': item.data[19].position, \'match\': item.data[19].match }">{{item.data[19].number}}</span></div>\n</div></td></tr><tr><td>G3</td><td><div layout="column" class="double"><div layout="row" flex="100"><div flex="33" \nclass="padding-8" layout="row" layout-align="center"><span \nng-class="{ \'position\': item.data[20].position, \'match\': item.data[20].match }">{{item.data[20].number}}</span> <span \nng-class="{ \'position\': item.data[21].position, \'match\': item.data[21].match }">{{item.data[21].number}}</span> <span \nng-class="{ \'position\': item.data[22].position }">{{item.data[22].number}}</span> <span \nng-class="{ \'position\': item.data[23].position, \'match\': item.data[23].match }">{{item.data[23].number}}</span> <span \nng-class="{ \'position\': item.data[24].position, \'match\': item.data[24].match }">{{item.data[24].number}}</span></div>\n<div flex="33" class="padding-8" layout="row" layout-align="center"><span \nng-class="{ \'position\': item.data[25].position, \'match\': item.data[25].match }">{{item.data[25].number}}</span> <span \nng-class="{ \'position\': item.data[26].position, \'match\': item.data[26].match }">{{item.data[26].number}}</span> <span \nng-class="{ \'position\': item.data[27].position }">{{item.data[27].number}}</span> <span \nng-class="{ \'position\': item.data[28].position, \'match\': item.data[28].match }">{{item.data[28].number}}</span> <span \nng-class="{ \'position\': item.data[29].position, \'match\': item.data[29].match }">{{item.data[29].number}}</span></div>\n<div flex="33" class="padding-8" layout="row" layout-align="center"><span \nng-class="{ \'position\': item.data[30].position, \'match\': item.data[30].match }">{{item.data[30].number}}</span> <span \nng-class="{ \'position\': item.data[31].position, \'match\': item.data[31].match }">{{item.data[31].number}}</span> <span \nng-class="{ \'position\': item.data[32].position }">{{item.data[32].number}}</span> <span \nng-class="{ \'position\': item.data[33].position, \'match\': item.data[33].match }">{{item.data[33].number}}</span> <span \nng-class="{ \'position\': item.data[34].position, \'match\': item.data[34].match }">{{item.data[34].number}}</span></div>\n</div><div layout="row" flex="100"><div flex="33" class="padding-8" layout="row" layout-align="center"><span \nng-class="{ \'position\': item.data[35].position, \'match\': item.data[35].match }">{{item.data[35].number}}</span> <span \nng-class="{ \'position\': item.data[36].position, \'match\': item.data[36].match }">{{item.data[36].number}}</span> <span \nng-class="{ \'position\': item.data[37].position }">{{item.data[37].number}}</span> <span \nng-class="{ \'position\': item.data[38].position, \'match\': item.data[38].match }">{{item.data[38].number}}</span> <span \nng-class="{ \'position\': item.data[39].position, \'match\': item.data[39].match }">{{item.data[39].number}}</span></div>\n<div flex="33" class="padding-8" layout="row" layout-align="center"><span \nng-class="{ \'position\': item.data[40].position, \'match\': item.data[40].match }">{{item.data[40].number}}</span> <span \nng-class="{ \'position\': item.data[41].position, \'match\': item.data[41].match }">{{item.data[41].number}}</span> <span \nng-class="{ \'position\': item.data[42].position }">{{item.data[42].number}}</span> <span \nng-class="{ \'position\': item.data[43].position, \'match\': item.data[43].match }">{{item.data[43].number}}</span> <span \nng-class="{ \'position\': item.data[44].position, \'match\': item.data[44].match }">{{item.data[44].number}}</span></div>\n<div flex="33" class="padding-8" layout="row" layout-align="center"><span \nng-class="{ \'position\': item.data[45].position, \'match\': item.data[45].match }">{{item.data[45].number}}</span> <span \nng-class="{ \'position\': item.data[46].position, \'match\': item.data[46].match }">{{item.data[46].number}}</span> <span \nng-class="{ \'position\': item.data[47].position }">{{item.data[47].number}}</span> <span \nng-class="{ \'position\': item.data[48].position, \'match\': item.data[48].match }">{{item.data[48].number}}</span> <span \nng-class="{ \'position\': item.data[49].position, \'match\': item.data[49].match }">{{item.data[49].number}}</span></div>\n</div></div></td></tr><tr><td>G4</td><td><div layout="row"><div flex="25" class="padding-8" layout="row" \nlayout-align="center"><span ng-class="{ \'position\': item.data[50].position, \'match\': item.data[50].match }">\n{{item.data[50].number}}</span> <span ng-class="{ \'position\': item.data[51].position, \'match\': item.data[51].match }">\n{{item.data[51].number}}</span> <span ng-class="{ \'position\': item.data[52].position, \'match\': item.data[52].match }">\n{{item.data[52].number}}</span> <span ng-class="{ \'position\': item.data[53].position, \'match\': item.data[53].match }">\n{{item.data[53].number}}</span></div><div flex="25" class="padding-8" layout="row" layout-align="center"><span \nng-class="{ \'position\': item.data[54].position, \'match\': item.data[54].match }">{{item.data[54].number}}</span> <span \nng-class="{ \'position\': item.data[55].position, \'match\': item.data[55].match }">{{item.data[55].number}}</span> <span \nng-class="{ \'position\': item.data[56].position, \'match\': item.data[56].match }">{{item.data[56].number}}</span> <span \nng-class="{ \'position\': item.data[57].position, \'match\': item.data[57].match }">{{item.data[57].number}}</span></div>\n<div flex="25" class="padding-8" layout="row" layout-align="center"><span \nng-class="{ \'position\': item.data[58].position, \'match\': item.data[58].match }">{{item.data[58].number}}</span> <span \nng-class="{ \'position\': item.data[59].position, \'match\': item.data[59].match }">{{item.data[59].number}}</span> <span \nng-class="{ \'position\': item.data[60].position, \'match\': item.data[60].match }">{{item.data[60].number}}</span> <span \nng-class="{ \'position\': item.data[61].position, \'match\': item.data[61].match }">{{item.data[61].number}}</span></div>\n<div flex="25" class="padding-8" layout="row" layout-align="center"><span \nng-class="{ \'position\': item.data[62].position, \'match\': item.data[62].match }">{{item.data[62].number}}</span> <span \nng-class="{ \'position\': item.data[63].position, \'match\': item.data[63].match }">{{item.data[63].number}}</span> <span \nng-class="{ \'position\': item.data[64].position, \'match\': item.data[64].match }">{{item.data[64].number}}</span> <span \nng-class="{ \'position\': item.data[65].position, \'match\': item.data[65].match }">{{item.data[65].number}}</span></div>\n</div></td></tr><tr><td>G5</td><td><div layout="column" class="double"><div layout="row" flex="100"><div flex="33" \nclass="padding-8" layout="row" layout-align="center"><span \nng-class="{ \'position\': item.data[66].position, \'match\': item.data[66].match }">{{item.data[66].number}}</span> <span \nng-class="{ \'position\': item.data[67].position, \'match\': item.data[67].match }">{{item.data[67].number}}</span> <span \nng-class="{ \'position\': item.data[68].position, \'match\': item.data[68].match }">{{item.data[68].number}}</span> <span \nng-class="{ \'position\': item.data[69].position, \'match\': item.data[69].match }">{{item.data[69].number}}</span></div>\n<div flex="33" class="padding-8" layout="row" layout-align="center"><span \nng-class="{ \'position\': item.data[70].position, \'match\': item.data[70].match }">{{item.data[70].number}}</span> <span \nng-class="{ \'position\': item.data[71].position, \'match\': item.data[71].match }">{{item.data[71].number}}</span> <span \nng-class="{ \'position\': item.data[72].position, \'match\': item.data[72].match }">{{item.data[72].number}}</span> <span \nng-class="{ \'position\': item.data[73].position, \'match\': item.data[73].match }">{{item.data[73].number}}</span></div>\n<div flex="33" class="padding-8" layout="row" layout-align="center"><span \nng-class="{ \'position\': item.data[74].position, \'match\': item.data[74].match }">{{item.data[74].number}}</span> <span \nng-class="{ \'position\': item.data[75].position, \'match\': item.data[75].match }">{{item.data[75].number}}</span> <span \nng-class="{ \'position\': item.data[76].position, \'match\': item.data[76].match }">{{item.data[76].number}}</span> <span \nng-class="{ \'position\': item.data[77].position, \'match\': item.data[77].match }">{{item.data[77].number}}</span></div>\n</div><div layout="row" flex="100"><div flex="33" class="padding-8" layout="row" layout-align="center"><span \nng-class="{ \'position\': item.data[78].position, \'match\': item.data[78].match }">{{item.data[78].number}}</span> <span \nng-class="{ \'position\': item.data[79].position, \'match\': item.data[79].match }">{{item.data[79].number}}</span> <span \nng-class="{ \'position\': item.data[80].position, \'match\': item.data[80].match }">{{item.data[80].number}}</span> <span \nng-class="{ \'position\': item.data[81].position, \'match\': item.data[81].match }">{{item.data[81].number}}</span></div>\n<div flex="33" class="padding-8" layout="row" layout-align="center"><span \nng-class="{ \'position\': item.data[82].position, \'match\': item.data[82].match }">{{item.data[82].number}}</span> <span \nng-class="{ \'position\': item.data[83].position, \'match\': item.data[83].match }">{{item.data[83].number}}</span> <span \nng-class="{ \'position\': item.data[84].position, \'match\': item.data[84].match }">{{item.data[84].number}}</span> <span \nng-class="{ \'position\': item.data[85].position, \'match\': item.data[85].match }">{{item.data[85].number}}</span></div>\n<div flex="33" class="padding-8" layout="row" layout-align="center"><span \nng-class="{ \'position\': item.data[86].position, \'match\': item.data[86].match }">{{item.data[86].number}}</span> <span \nng-class="{ \'position\': item.data[87].position, \'match\': item.data[87].match }">{{item.data[87].number}}</span> <span \nng-class="{ \'position\': item.data[88].position, \'match\': item.data[88].match }">{{item.data[88].number}}</span> <span \nng-class="{ \'position\': item.data[89].position, \'match\': item.data[89].match }">{{item.data[89].number}}</span></div>\n</div></div></td></tr><tr><td>G6</td><td><div layout="row"><div flex="33" class="padding-8" layout="row" \nlayout-align="center"><span ng-class="{ \'position\': item.data[90].position, \'match\': item.data[90].match }">\n{{item.data[90].number}}</span> <span ng-class="{ \'position\': item.data[91].position, \'match\': item.data[91].match }">\n{{item.data[91].number}}</span> <span ng-class="{ \'position\': item.data[92].position, \'match\': item.data[92].match }">\n{{item.data[92].number}}</span></div><div flex="33" class="padding-8" layout="row" layout-align="center"><span \nng-class="{ \'position\': item.data[93].position, \'match\': item.data[93].match }">{{item.data[93].number}}</span> <span \nng-class="{ \'position\': item.data[94].position, \'match\': item.data[94].match }">{{item.data[94].number}}</span> <span \nng-class="{ \'position\': item.data[95].position, \'match\': item.data[95].match }">{{item.data[95].number}}</span></div>\n<div flex="33" class="padding-8" layout="row" layout-align="center"><span \nng-class="{ \'position\': item.data[96].position, \'match\': item.data[96].match }">{{item.data[96].number}}</span> <span \nng-class="{ \'position\': item.data[97].position, \'match\': item.data[97].match }">{{item.data[97].number}}</span> <span \nng-class="{ \'position\': item.data[98].position, \'match\': item.data[98].match }">{{item.data[98].number}}</span></div>\n</div></td></tr><tr><td>G7</td><td><div layout="row"><div flex="25" class="padding-8" layout="row" \nlayout-align="center"><span ng-class="{ \'position\': item.data[99].position, \'match\': item.data[99].match }">\n{{item.data[99].number}}</span> <span ng-class="{ \'position\': item.data[100].position, \'match\': item.data[100].match }">\n{{item.data[100].number}}</span></div><div flex="25" class="padding-8" layout="row" layout-align="center"><span \nng-class="{ \'position\': item.data[101].position, \'match\': item.data[101].match }">{{item.data[101].number}}</span> <span\n ng-class="{ \'position\': item.data[102].position, \'match\': item.data[102].match }">{{item.data[102].number}}</span>\n</div><div flex="25" class="padding-8" layout="row" layout-align="center"><span \nng-class="{ \'position\': item.data[103].position, \'match\': item.data[103].match }">{{item.data[103].number}}</span> <span\n ng-class="{ \'position\': item.data[104].position, \'match\': item.data[104].match }">{{item.data[104].number}}</span>\n</div><div flex="25" class="padding-8" layout="row" layout-align="center"><span \nng-class="{ \'position\': item.data[105].position, \'match\': item.data[105].match }">{{item.data[105].number}}</span> <span\n ng-class="{ \'position\': item.data[106].position, \'match\': item.data[106].match }">{{item.data[106].number}}</span>\n</div></div></td></tr></tbody></table></div></div></div></div></md-dialog-content><md-dialog-actions layout="row" hide>\n<span flex></span><md-button class="md-accent" ng-click="confirm()" ng-disabled="chooseNumbers.length === 0">X\xE1c nh\u1EADn\n</md-button></md-dialog-actions></md-dialog>');
$templateCache.put('app/core/directives/ms-ads/ms-ads.html','<div id="ms-ads" layout="row" layout-align="start center" flex><md-button id="ms-ads-close" class="md-icon-button" \nng-click="removeAds()"><md-icon md-font-icon="icon-close"></md-icon></md-button><div id="ms-ads-message" \nlayout="column" flex ui-sref="app.casino" layout-align="center"><div class="img" flex layout-align="center"><img \nsrc="/assets/images/casino/banner.jpg" alt=""></div><div class="message hide">\nLi\xEAn k\u1EBFt t\xE0i kho\u1EA3n c\u1EE7a qu\xFD kh\xE1ch v\u1EDBi Telegram \u0111\u1EC3 \u0111\u1EB7t c\u01B0\u1EE3c, xem b\xE1o bi\u1EC3u, ... v\xE0 nhi\u1EC1u h\u01A1n n\u1EEFa</div></div></div>');
$templateCache.put('app/core/directives/ms-crucial-message/crucial-message.html','<div id="ms-crucial" layout="row" layout-align="start center" flex><div id="ms-crucial-message" ng-transclude flex>\n</div></div>');
$templateCache.put('app/core/directives/ms-info-bar/ms-info-bar.html','<div id="ms-info-bar" layout="row" layout-align="start center" flex><div id="ms-info-bar-message" ng-transclude flex>\n</div><md-button id="ms-info-bar-close" class="md-icon-button" aria-label="Close" ng-click="removeInfoBar()"><md-icon \nmd-font-icon="icon-close s24"></md-icon></md-button></div>');
$templateCache.put('app/core/directives/password-expired-soon/password-expired-soon.html','<div id="ms-password" layout="row" layout-align="start center" flex><p>{{$root.passwordExpired}} Qu\xFD kh\xE1ch vui l\xF2ng\n<md-button class="md-raised md-accent" ui-sref="app.account.change-password">\u0110\u1ED5i m\u1EADt kh\u1EA9u</md-button>ho\u1EB7c<md-button \nclass="md-raised md-warn" ui-sref="app.account.otp">c\xE0i \u0111\u1EB7t OTP</md-button>\u0111\u1EC3 b\u1EA3o v\u1EC7 t\xE0i kho\u1EA3n.</p></div>');
$templateCache.put('app/navigation/layouts/vertical-navigation/navigation.html','<md-toolbar class="navigation-header md-whiteframe-1dp" layout="row" layout-align="space-between center"><div \nclass="logo" layout="row" layout-align="start center"><img src="/assets/images/logos/one-logo.png" alt="One 789"></div>\n<div layout="row"><md-menu-bar class="change-theme"><md-menu md-position-mode="left bottom"><md-button \nclass="md-icon-button" ng-click="$mdOpenMenu()"><md-icon ng-if="$root.setupTheme === \'default\'" \nmd-font-icon="icon-theme-light-dark"></md-icon><md-icon ng-if="$root.setupTheme === \'tealTheme\'" \nmd-font-icon="icon-white-balance-sunny" class="icon"></md-icon><md-icon ng-if="$root.setupTheme === \'auto\'" \nmd-font-icon="icon-brightness-auto" class="icon"></md-icon></md-button><md-menu-content width="3" \nclass="change-theme md-primary-bg"><md-menu-item class="md-indent"><md-icon md-font-icon="icon-theme-light-dark" \nclass="icon"></md-icon><md-button ng-click="$root.setTheme(\'default\')">T\u1ED1i</md-button></md-menu-item><md-menu-item \nclass="md-indent"><md-icon md-font-icon="icon-white-balance-sunny" class="icon"></md-icon><md-button \nng-click="$root.setTheme(\'tealTheme\')">S\xE1ng</md-button></md-menu-item><md-menu-divider></md-menu-divider><md-menu-item \nclass="md-indent"><md-icon md-font-icon="icon-brightness-auto" class="icon"></md-icon><md-button \nng-click="$root.setTheme(\'auto\')">T\u1EF1 \u0111\u1ED9ng</md-button></md-menu-item></md-menu-content></md-menu></md-menu-bar></div>\n</md-toolbar><ms-navigation class="scrollable" folded="vm.folded" ms-scroll="vm.msScrollOptions"></ms-navigation>');
$templateCache.put('app/navigation/layouts/horizontal-navigation/navigation.html','<div layout="row" layout-align="start center"><ms-navigation-horizontal></ms-navigation-horizontal></div>');
$templateCache.put('app/navigation/layouts/vertical-navigation-fullwidth-toolbar-2/navigation.html','<ms-navigation class="scrollable" folded="vm.folded" ms-scroll="vm.msScrollOptions"></ms-navigation>');
$templateCache.put('app/main/account/limit/limit.html','<div id="betting-limit" class="page-layout simple fullwidth" layout="column"><h2 class="primary">Gi\u1EDBi h\u1EA1n \u0111\u1EB7t c\u01B0\u1EE3c</h2>\n<div class="param-content md-whiteframe-1dp md-primary-bg" ng-repeat="p in vm.parameter"><table class="table one-table" \nms-responsive-table><thead><tr><th colspan="{{ p.group.length + 1 }}">{{ p.group[0].GameType | game }}</th></tr><tr><th \nng-if="$index === 0"></th><th ng-repeat="b in p.group">{{ b.BetType | bet : true }}</th></tr></thead><tbody><tr><td \nng-if="$index === 0" class="label">Gi\xE1 b\xE1n</td><td ng-repeat="b in p.group">{{ b.Price | currency : \'\' : 0 }}</td></tr>\n<tr><td ng-if="$index === 0" class="label">Tr\u1EA3 th\u01B0\u1EDFng</td><td ng-repeat="b in p.group">{{ b.Payouts | roundPam }}</td>\n</tr><tr><td ng-if="$index === 0" class="label">T\u1ED1i \u0111a 1 l\u1EA7n c\u01B0\u1EE3c</td><td ng-repeat="b in p.group">\n{{ b.MaxPointPerNumber | roundPam }}</td></tr><tr><td ng-if="$index === 0" class="label">T\u1ED1i \u0111a tr\xEAn 1 s\u1ED1</td><td \nng-repeat="b in p.group">{{ b.TotalPointPerNumber | roundPam }}</td></tr></tbody></table></div><div layout="row" \nclass="margin-top-64" layout-align="center center" ng-if="!vm.parameter"><md-progress-circular class="md-hue-2" \nmd-diameter="48px"></md-progress-circular></div></div>');
$templateCache.put('app/main/account/change-password/change-password.html','<div class="change-password"><div class="container"><div class="header" layout="row" layout-align="center center"><h2 \nclass="primary">\u0110\u1ED5i m\u1EADt kh\u1EA9u</h2></div><div class="content" layout="row" layout-align="center center"><form \nname="passwordForm" ng-submit="vm.changePassword()" novalidate autocomplete="off"><div \nclass="QtnRDpta md-whiteframe-1dp md-primary-bg" layout="column"><div class="help-content"><p>\nQu\xFD h\u1ED9i vi\xEAn vui l\xF2ng cung c\u1EA5p m\u1EADt kh\u1EA9u c\u0169 v\xE0 m\u1EDBi. M\u1EADt kh\u1EA9u ph\u1EA3i bao g\u1ED3m \xEDt nh\u1EA5t 6 k\xFD t\u1EF1 v\xE0 ph\u1EA3i tho\u1EA3 m\xE3n t\u1ED1i thi\u1EC3u 3 \u0111i\u1EC1u ki\u1EC7n d\u01B0\u1EDBi \u0111\xE2y\n</p><ul><li>C\xF3 \xEDt nh\u1EA5t m\u1ED9t k\xFD t\u1EF1 s\u1EED d\u1EE5ng ch\u1EEF vi\u1EBFt HOA</li><li>C\xF3 \xEDt nh\u1EA5t m\u1ED9t k\xFD t\u1EF1 s\u1EED d\u1EE5ng ch\u1EEF vi\u1EBFt th\u01B0\u1EDDng</li><li>\nC\xF3 \xEDt nh\u1EA5t m\u1ED9t k\xFD t\u1EF1 s\u1EED d\u1EE5ng s\u1ED1</li><li>C\xF3 \xEDt nh\u1EA5t m\u1ED9t k\xFD t\u1EF1 s\u1EED d\u1EE5ng k\xFD t\u1EF1 \u0111\u1EB7c bi\u1EC7t</li></ul></div><div \nclass="VJuRrcaz"><label><md-icon md-font-icon="icon-lock"></md-icon></label> <input \nng-attr-type="{{ vm.show ? \'text\' : \'password\' }}" name="password" minlength="5" ng-model="vm.form.password" \nplaceholder="M\u1EADt kh\u1EA9u" required autocomplete="off"> <label class="show-hide" ng-click="vm.showPassword()">\n{{vm.showText}}</label><div ng-messages="passwordForm.password.$error"><div ng-message="minlength"><span>\nM\u1EADt kh\u1EA9u ph\u1EA3i c\xF3 \xEDt nh\u1EA5t 6 k\xFD t\u1EF1</span></div></div></div><div class="VJuRrcaz check-mark"><label><md-icon \nmd-font-icon="icon-lock"></md-icon></label> <input ng-attr-type="{{ vm.show ? \'text\' : \'password\' }}" \nname="newPassword" ng-class="{\'weak\': !vm.passwordPerfect}" ng-model="vm.form.newPassword" placeholder="M\u1EADt kh\u1EA9u m\u1EDBi" \nrequired autocomplete="off" ng-focus="vm.inputFocus()" ng-blur="vm.showCheck = false" ng-keyup="vm.inputKeyup()"> <label\n class="show-hide" ng-click="vm.showPassword()">{{vm.showText}}</label><div \nclass="md-input-message-animation password-perfect" ng-show="vm.passwordPerfect">M\u1EADt kh\u1EA9u an to\xE0n \u0111\u1EC3 s\u1EED d\u1EE5ng</div><div \nclass="md-input-message-animation password-weak" ng-show="!vm.passwordPerfect && vm.form.newPassword.length">\nM\u1EADt kh\u1EA9u y\u1EBFu</div><div class="password-requirements" ng-show="vm.showCheck"><ul class="not_listing"><li \nng-class="{ \'completed\': vm.upperCase === 1, \'line-through\' : vm.totalScore >= 3 && vm.upperCase === 0 }">\nT\u1ED1i thi\u1EC3u m\u1ED9t ch\u1EEF HOA</li><li \nng-class="{ \'completed\': vm.lowerCase === 1, \'line-through\' : vm.totalScore >= 3 && vm.lowerCase === 0 }">\nT\u1ED1i thi\u1EC3u m\u1ED9t ch\u1EEF th\u01B0\u1EDDng</li><li \nng-class="{ \'completed\': vm.number === 1, \'line-through\' : vm.totalScore >= 3 && vm.number === 0 }">T\u1ED1i thi\u1EC3u m\u1ED9t s\u1ED1\n</li><li ng-class="{ \'completed\': vm.specialChar === 1, \'line-through\' : vm.totalScore >= 3 && vm.specialChar === 0 }">\nT\u1ED1i thi\u1EC3u m\u1ED9t k\xFD t\u1EF1 \u0111\u1EB7c bi\u1EC7t</li><li class="strong" ng-class="{ \'completed\': vm.characterCount }">T\u1ED1i thi\u1EC3u 6 k\xFD t\u1EF1</li>\n</ul></div></div><div class="VJuRrcaz"><label><md-icon md-font-icon="icon-lock"></md-icon></label> <input \nng-attr-type="{{ vm.show ? \'text\' : \'password\' }}" name="confirmPassword" minlength="6" \nng-model="vm.form.confirmPassword" compare-to="vm.form.newPassword" placeholder="X\xE1c nh\u1EADn l\u1EA1i m\u1EADt kh\u1EA9u" required \nautocomplete="off"> <label class="show-hide" ng-click="vm.showPassword()">{{vm.showText}}</label><div \nng-messages="passwordForm.confirmPassword.$error"><div ng-message="minlength"><span>M\u1EADt kh\u1EA9u ph\u1EA3i c\xF3 \xEDt nh\u1EA5t 6 k\xFD t\u1EF1\n</span></div><div ng-message="compareTo">M\u1EADt kh\u1EA9u x\xE1c nh\u1EADn kh\xF4ng kh\u1EDBp</div></div></div><div class="VJuRrcaz"><md-button \ntype="submit" class="md-accent md-raised" \nng-disabled="passwordForm.$invalid || passwordForm.$pristine || !vm.passwordPerfect || vm.submitting">\n<md-progress-circular class="md-accent" md-diameter="20px" ng-disabled="!vm.submitting"></md-progress-circular>\n\u0110\u1ED5i m\u1EADt kh\u1EA9u</md-button></div></div></form></div></div></div>');
$templateCache.put('app/main/account/otp/otp.html','<div class="page-layout simple fullwidth" layout="row" layout-align="center start"><div class="content" layout="column" \nui-view="otpView"></div></div>');
$templateCache.put('app/main/account/otp/otp.template.html','<div class="wait-data" ng-if="vm.waitData"><md-progress-circular md-diameter="96"></md-progress-circular></div><div \nclass="enable-tfa simple-table-container md-whiteframe-4dp" ng-if="!vm.waitData"><div class="setup-otp md-primary-bg" \nlayout="column"><div class="on1txb"><div class="iH9H0b"><div class="tvv1nd"></div></div><div class="I4mZgb" \nlayout="column" ng-if="vm.EnabledOTP"><div class="nUt1y">T\xE0i kho\u1EA3n c\u1EE7a qu\xFD kh\xE1ch \u0111\xE3 \u0111\u01B0\u1EE3c b\u1EA3o v\u1EC7 b\u1EB1ng x\xE1c minh 2 b\u01B0\u1EDBc!\n</div></div><div class="I4mZgb" layout="column" ng-if="!vm.EnabledOTP"><div class="nUt1y">\nB\u1EA3o v\u1EC7 t\xE0i kho\u1EA3n c\u1EE7a qu\xFD kh\xE1ch b\u1EB1ng OTP (One Time Password)</div><div class="qDDjIb" layout="column"><div \nclass="UJm2Pb">M\u1ED7i khi qu\xFD kh\xE1ch \u0111\u0103ng nh\u1EADp v\xE0o T\xE0i kho\u1EA3n c\u1EE7a m\xECnh, qu\xFD kh\xE1ch s\u1EBD c\u1EA7n m\u1EADt kh\u1EA9u v\xE0 m\xE3 x\xE1c minh. <a \nhref="https://www.google.com/intl/vi/landing/2step/" target="_blank">T\xECm hi\u1EC3u&nbsp;th\xEAm</a></div><div class="UJm2Pb">\nHacker ho\u1EB7c c\u01A1 quan an ninh c\xF3 r\u1EA5t nhi\u1EC1u c\xE1ch \u0111\xE1nh c\u1EAFp t\xE0i kho\u1EA3n v\xE0 m\u1EADt kh\u1EA9u c\u1EE7a qu\xFD kh\xE1ch th\xF4ng qua c\xE0i virus ho\u1EB7c nghe l\xE9n tr\xEAn \u0111\u01B0\u1EDDng truy\u1EC1n internet c\u1EE7a qu\xFD kh\xE1ch s\u1EED d\u1EE5ng. N\u1EBFu qu\xFD kh\xE1ch kh\xF4ng s\u1EED d\u1EE5ng OTP, vi\u1EC7c m\u1EA5t m\u1EADt kh\u1EA9u d\u1EABn \u0111\u1EBFn l\u1ED9 nh\u1EEFng th\xF4ng tin giao d\u1ECBch, th\xF4ng tin c\xE1 nh\xE2n c\u1EE7a \u0111\u1EA1i l\xFD v\xE0 kh\xE1ch h\xE0ng.\n</div><div class="zdBZpd" layout="row"><div class="lVeBCc" flex="25" flex-xs="30"><div class="hyMrOd qNeFe"></div></div>\n<div class="c8zWkd" flex><div class="fKMMOd">Th\xEAm l\u1EDBp b\u1EA3o m\u1EADt b\u1ED5 sung</div><div class="UkntSc">\nNh\u1EADp m\u1EADt kh\u1EA9u v\xE0 m\xE3 x\xE1c minh duy nh\u1EA5t \u0111\u01B0\u1EE3c g\u1EEDi \u0111\u1EBFn \u0111i\u1EC7n tho\u1EA1i c\u1EE7a qu\xFD kh\xE1ch.</div></div></div><div class="zdBZpd" \nlayout="row"><div class="lVeBCc" flex="25" flex-xs="30"><div class="hyMrOd GsuOzd"></div></div><div class="c8zWkd" flex>\n<div class="fKMMOd">Tr\xE1nh nh\u1EEFng k\u1EBB x\u1EA5u ra</div><div class="UkntSc">\nK\u1EC3 c\u1EA3 n\u1EBFu ai \u0111\xF3 l\u1EA5y \u0111\u01B0\u1EE3c m\u1EADt kh\u1EA9u c\u1EE7a qu\xFD kh\xE1ch th\xEC c\u0169ng s\u1EBD kh\xF4ng \u0111\u1EE7 \u0111\u1EC3 \u0111\u0103ng nh\u1EADp v\xE0o t\xE0i kho\u1EA3n c\u1EE7a qu\xFD kh\xE1ch.</div>\n</div></div><div class="zdBZpd" layout="row"><div class="lVeBCc" flex="25" flex-xs="30"><div class="hyMrOd G3gOzr">\n</div></div><div class="c8zWkd" flex><div class="fKMMOd">\u0110\u1EA3m b\u1EA3o an to\xE0n cho \u0111\u1EA1i l\xFD v\xE0 kh\xE1ch h\xE0ng</div><div \nclass="UkntSc">\nVi\u1EC7c qu\xFD kh\xE1ch kh\xF4ng s\u1EED d\u1EE5ng OTP, n\u1EBFu b\u1ECB m\u1EA5t m\u1EADt kh\u1EA9u d\u1EABn \u0111\u1EBFn b\u1ECB l\u1ED9 l\u1ECBch s\u1EED giao d\u1ECBch c\u1EE7a qu\xFD kh\xE1ch, l\u1ED9 th\xF4ng tin c\xE1 nh\xE2n c\u1EE7a \u0111\u1EA1i l\xFD v\xE0 kh\xE1ch h\xE0ng v\xE0 s\u1EBD tr\u1EF1c ti\u1EBFp g\xE2y nguy hi\u1EC3m cho h\u1ECD v\xE0 ch\xEDnh m\xECnh.\n</div></div></div></div></div></div><div class="RH9rqf" layout="row" layout-align="end center"><md-button \nclass="md-raised md-accent" ng-if="!vm.EnabledOTP" ng-click="vm.starting($event)">B\u1EAFt \u0111\u1EA7u</md-button><md-button \nclass="md-raised md-warn" ng-if="vm.EnabledOTP" ng-click="vm.cancelOTP($event)" ng-disabled="$root.User.MfaRequired">\nH\u1EE7y x\xE1c minh 2 b\u01B0\u1EDBc</md-button></div><div class="nUt2y" ng-if="$root.User.MfaRequired"><div>\nC\xF4ng ty y\xEAu c\u1EA7u qu\xFD kh\xE1ch ph\u1EA3i s\u1EED d\u1EE5ng OTP \u0111\u1EC3 \u0111\u1EA3m b\u1EA3o an to\xE0n.<br>\nN\u1EBFu qu\xFD kh\xE1ch c\xF3 nhu c\u1EA7u b\u1ECF OTP, xin vui l\xF2ng li\xEAn h\u1EC7 v\u1EDBi c\xF4ng ty \u0111\u1EC3 \u0111\u01B0\u1EE3c t\u1EAFt OTP.</div></div><div class="B34EJ" \nng-if="$root.User.MfaRequired && $root.User.MfaType === 0">Do y\xEAu c\u1EA7u t\u1EEB c\xF4ng ty, Qu\xFD kh\xE1ch vui l\xF2ng b\u1EADt OTP \u0111\u1EC3 ti\u1EBFp t\u1EE5c\n</div></div></div>');
$templateCache.put('app/main/account/otp/setup.dialog.html','<md-dialog aria-label="setup-otp" class="setup-otp md-primary-bg"><form name="formOTP" ng-submit="setupOTP()" \nnovalidate><md-toolbar class="md-accent"><div class="nsbjKc"></div></md-toolbar><md-dialog-content \nclass="md-setup-otp-dialog"><div md-dynamic-height class="md-dialog-content"><div class="I4mZgb" layout="column" \nng-if="data.step === 0"><div class="nUt1y">Nh\u1EADn m\xE3 t\u1EEB \u1EE9ng d\u1EE5ng Google Authenticator</div><div class="njmKQb">\nM\xE3 x\xE1c minh mi\u1EC5n ph\xED t\u1EEB \u1EE9ng d\u1EE5ng Google Authenticator. \u1EE8ng d\u1EE5ng n\xE0y ho\u1EA1t \u0111\u1ED9ng ngay c\u1EA3 khi \u0111i\u1EC7n tho\u1EA1i c\u1EE7a qu\xFD kh\xE1ch kh\xF4ng c\xF3 m\u1EA1ng.\n</div><div class="Fywh3b njmKQb">Qu\xFD kh\xE1ch c\xF3 lo\u1EA1i \u0111i\u1EC7n tho\u1EA1i n\xE0o?</div><div class="njmKQb"><md-radio-group \nng-model="data.device"><md-radio-button value="apple">Apple (iPhone, iPad)</md-radio-button><md-radio-button \nvalue="android">Android (Samsung, Sony, Oppo, ...)</md-radio-button></md-radio-group></div></div><div class="I4mZgb" \nlayout="column" ng-if="data.step === 1"><div class="nUt1y">Thi\u1EBFt l\u1EADp Authenticator</div><div class="qDDjIb"><li>\nT\u1EA3i \u1EE9ng d\u1EE5ng Authenticator t\u1EEB <a target="_blank" \nhref="https://itunes.apple.com/us/app/google-authenticator/id388497605?mt=8">App Store</a>.</li><li>\nTrong \u1EE8ng d\u1EE5ng h\xE3y ch\u1ECDn <b>C\xE0i \u0111\u1EB7t t\xE0i kho\u1EA3n</b>.</li><li>Ch\u1ECDn <b>Qu\xE9t m\xE3 v\u1EA1ch</b>.</li></div><div class="K8EGIe" \nng-if="!hasPsk"><md-progress-circular md-mode="indeterminate"></md-progress-circular><p>\u0110ang t\u1EA3i m\xE3 QR...</p></div><div \nclass="bZMVCe" layout="column" ng-if="hasPsk"><div class="img"><qr type-number="8" correction-level="\'M\'" size="170" \ntext="imgSrc" image="true"></qr></div><div class="_button"><a ng-click="cannotScan()">Kh\xF4ng th\u1EC3 qu\xE9t m\xE3?</a></div></div>\n</div><div class="I4mZgb" layout="column" ng-if="data.step === 2"><div class="nUt1y">Thi\u1EBFt l\u1EADp Authenticator</div><div \nclass="qDDjIb"><li>T\u1EA3i \u1EE9ng d\u1EE5ng Authenticator t\u1EEB <a target="_blank" \nhref="https://play.google.com/store/apps/details?id=com.google.android.apps.authenticator2">C\u1EEDa h\xE0ng Play</a>.</li><li>\nTrong \u1EE8ng d\u1EE5ng h\xE3y ch\u1ECDn <b>C\xE0i \u0111\u1EB7t t\xE0i kho\u1EA3n</b>.</li><li>Ch\u1ECDn <b>Qu\xE9t m\xE3 v\u1EA1ch</b>.</li></div><div class="K8EGIe" \nng-if="!hasPsk"><md-progress-circular md-mode="indeterminate"></md-progress-circular><p>\u0110ang t\u1EA3i m\xE3 QR...</p></div><div \nclass="bZMVCe" layout="column" ng-if="hasPsk"><div class="img"><qr type-number="8" correction-level="\'M\'" size="170" \ntext="imgSrc" image="true"></qr></div><div class="_button"><a ng-click="cannotScan()">Kh\xF4ng th\u1EC3 qu\xE9t m\xE3?</a></div></div>\n</div><div class="I4mZgb" layout="column" ng-if="data.step === 3"><div class="nUt1y">Qu\xFD kh\xE1ch kh\xF4ng th\u1EC3 qu\xE9t m\xE3 v\u1EA1ch?\n</div><div class="fKMMOd"><ol class="nGQ74"><li>Nh\u1EA5n v\xE0o <b>Menu </b>, sau \u0111\xF3 <b>Thi\u1EBFt l\u1EADp t\xE0i kho\u1EA3n</b>.</li><li>\nNh\u1EA5n v\xE0o <b>Nh\u1EADp kh\xF3a \u0111\xE3 c\u1EA5p</b>.</li><li>Nh\u1EADp \u0111\u1ECBa ch\u1EC9 email c\u1EE7a qu\xFD kh\xE1ch v\xE0 kh\xF3a n\xE0y:</li><div class="W30gRe"><div \nclass="mZ7JQb" ngclipboard ngclipboard-success="onSuccess(e);" ngclipboard-error="onError(e);" \ndata-clipboard-text="{{sharedKey}}">{{sharedKey}}</div><div ng-class="{\'ZYIfFd\' : copied}" class="copy copy_code" \nngclipboard ngclipboard-success="onSuccess(e);" ngclipboard-error="onError(e);" data-clipboard-text="{{sharedKey}}">\nB\u1EA5m \u0111\u1EC3 sao ch\xE9p m\xE3</div><div ng-class="{\'ZYIfFd\' : !copied}" class="copy copied">\u0110\xE3 sao ch\xE9p m\xE3</div></div><li>\u0110\u1EA3m b\u1EA3o \n<b>D\u1EF1a tr\xEAn th\u1EDDi gian</b> \u0111\u01B0\u1EE3c b\u1EADt v\xE0 nh\u1EA5n v\xE0o <b>Th\xEAm</b> \u0111\u1EC3 k\u1EBFt th\xFAc.</li></ol></div></div><div class="I4mZgb" \nlayout="column" ng-if="data.step === 4"><div class="nUt1y">Thi\u1EBFt l\u1EADp Authenticator</div><div class="njmKQb">\nNh\u1EADp m\xE3 6 ch\u1EEF s\u1ED1 qu\xFD kh\xE1ch th\u1EA5y trong \u1EE9ng d\u1EE5ng.</div><div class="PQ3dUd"><div otp-input-directive options="otpInput">\n</div></div><div class="otp_not_val" ng-if="valFalse">M\xE3 OTP kh\xF4ng h\u1EE3p l\u1EC7</div></div><div class="I4mZgb" \nng-if="data.step === 5"><div class="nUt1y">Xong!</div><div class="qDDjIb fKMMOd">\nQu\xFD kh\xE1ch \u0111\xE3 ho\xE0n t\u1EA5t. T\u1EEB b\xE2y gi\u1EDD, qu\xFD kh\xE1ch s\u1EBD s\u1EED d\u1EE5ng Authenticator \u0111\u1EC3 \u0111\u0103ng nh\u1EADp v\xE0o t\xE0i kho\u1EA3n c\u1EE7a m\xECnh.</div></div>\n</div></md-dialog-content><md-dialog-actions layout="row"><md-button class="md-warn" ng-click="cancel()" \nng-disabled="submitting" ng-if="data.step !== 3 && data.step !== 5">H\u1EE7y</md-button><md-button class="md-accent" \nng-disabled="submitting" ng-click="data.step = data.remember" ng-if="data.step === 3">Quay l\u1EA1i</md-button><md-button \nclass="md-accent" ng-disabled="submitting" ng-click="nextStep()" ng-if="data.step < 4">Ti\u1EBFp theo</md-button><md-button \nclass="md-accent" type="submit" ng-disabled="!otpOk || submitting" ng-if="data.step === 4">X\xE1c minh</md-button>\n<md-button class="md-accent" ng-click="cancel(true)" ng-if="data.step === 5">Xong</md-button></md-dialog-actions></form>\n</md-dialog>');
$templateCache.put('app/main/account/my-account/my-account.html','<div id="my-account" class="page-layout simple fullwidth" layout="column" layout-align="start center"><h2 \nclass="primary">Th\xF4ng tin t\xE0i kho\u1EA3n</h2><div class="content-wrap" layout="column"><div \nclass="XLK0Od md-whiteframe-1dp md-primary-bg"><div layout="row" layout-align="space-between center" class="line"><div \nlayout="column"><h3>{{ $root.User.Username }}</h3><h5>H\u1ED9i vi\xEAn</h5></div><div><md-button class="md-raised out" \nng-click="$root.signOut()">Tho\xE1t</md-button></div></div><md-divider></md-divider><div class="margin-top-32 line" \nlayout="row" layout-align="space-between center"><div><h4>T\xEDn d\u1EE5ng</h4></div><div><p>\n{{ $root.User.CreditLimit | currency : \'\' : 0 }}</p></div></div><md-divider></md-divider><div \nclass="margin-top-32 line" layout="row" layout-align="space-between center"><div><h4>S\u1ED1 d\u01B0</h4></div><div><p>\n{{ $root.User.Balance | currency : \'\' : 0 }}</p></div></div><md-divider></md-divider><div class="margin-top-32" \nlayout="row" layout-align="space-between center"><div><h4>S\u1ED1 d\u01B0 Bong88</h4></div><div><p>\n{{ $root.User.SabaBalance | currency : \'\' : 0 }}</p></div></div><div class="margin-top-32 line" layout="row" \nlayout-align="space-between center" hide><div><h4>Thanh to\xE1n</h4></div><div><p>{{ $root.User.PaymentMethod | payment }}\n</p></div></div><div class="margin-top-32" layout="row" layout-align="space-between center" \nng-if="$root.User.PlayerPaymentDates.length === 7 && $root.User.PaymentMethod === 0" hide><div><h4>Ng\xE0y thanh to\xE1n</h4>\n</div><div><p class="payment-day">H\xE0ng ng\xE0y</p></div></div><div class="margin-top-32" layout="row" \nlayout-align="space-between center" \nng-if="$root.User.PlayerPaymentDates.length !== 7 && $root.User.PaymentMethod === 0" hide><div><h4>Ng\xE0y thanh to\xE1n</h4>\n</div><div layout="row"><p class="payment-day" ng-repeat="day in $root.User.PlayerPaymentDates">{{ day | paymentDay }}\n</p></div></div></div><div class="XLK0Od md-whiteframe-1dp md-primary-bg"><div layout="row" \nlayout-align="space-between center" class="line"><div><h4>Chuy\u1EC3n ti\u1EC1n Bong88</h4></div></div><md-divider></md-divider>\n<div layout="row" layout-xs="column" layout-align="space-between center" class="transfer"><md-button \nclass="md-raised md-accent" ng-click="vm.transferBalance(1, $event)">Chuy\u1EC3n ti\u1EC1n sang Bong88</md-button><md-button \nclass="md-raised" ng-click="vm.transferBalance(0, $event)">R\xFAt ti\u1EC1n t\u1EEB Bong88 v\u1EC1</md-button></div></div></div></div>');
$templateCache.put('app/main/account/rules/rules.html','<div id="rules"><div class="container"><div class="header" layout="row" layout-align="center center"><h2 \nclass="primary">Quy t\u1EAFc</h2></div><div class="content" layout="row" layout-align="center center"><md-tabs \nmd-dynamic-height md-swipe-content><md-tab label="N\u1ED9i quy di\u1EC5n gi\u1EA3i"><div \nng-include="\'app/main/account/rules/tab/noiquy.html\'"></div></md-tab><md-tab label="Mi\u1EC1n B\u1EAFc 1"><div \nng-include="\'app/main/account/rules/tab/mienbac1.html\'"></div></md-tab><md-tab label="Mi\u1EC1n B\u1EAFc 2"><div \nng-include="\'app/main/account/rules/tab/mienbac2.html\'"></div></md-tab><md-tab label="Mi\u1EC1n Nam"><div \nng-include="\'app/main/account/rules/tab/miennam.html\'"></div></md-tab></md-tabs></div></div></div>');
$templateCache.put('app/main/account/telegram/telegram.html','<div class="change-password"><div class="container"><div class="header" layout="row" layout-align="center center"><h2 \nclass="primary">Li\xEAn k\u1EBFt Telegram</h2></div><div class="content" layout="row" layout-align="center center"><div \nclass="telegram md-whiteframe-1dp md-primary-bg" layout="column" ng-class="{\'linked\': vm.telegramBot.Status === 1}" \nng-if="vm.telegramBot.Status === 0"><div class="K8EGIe" ng-if="!vm.hasPsk" layout="column" layout-align="center center">\n<md-progress-circular md-mode="indeterminate" class="md-warn"></md-progress-circular><p>\u0110ang t\u1EA3i m\xE3 QR...</p></div><div \nclass="" ng-show="vm.hasPsk"><div class="helper">\nQu\xFD kh\xE1ch c\xF3 th\u1EC3 li\xEAn k\u1EBFt t\xE0i kho\u1EA3n One789 c\u1EE7a qu\xFD kh\xE1c v\u1EDBi Telegram b\u1EB1ng 1 trong 3 c\xE1ch sau:</div><div class="the-way">\nC\xE1ch 1:</div><div class="helper" ng-show="vm.hasPsk">Qu\xE9t m\xE3 QR d\u01B0\u1EDBi \u0111\xE2y.</div><div class="qr-bot" layout="row" \nlayout-align="center center"><qr type-number="8" correction-level="\'M\'" size="240" text="vm.telegramBot.DirectLink" \nimage="true"></qr></div><div class="the-way">C\xE1ch 2:</div><div class="helper" ng-if="vm.telegramBot.Status === 0">\nT\u1EEB t\xE0i kho\u1EA3n Telegram c\u1EE7a qu\xFD kh\xE1ch, c\xF3 th\u1EC3 chat tr\u1EF1c ti\u1EBFp v\u1EDBi t\xE0i kho\u1EA3n <span class="bot">\n@{{vm.telegramBot.BotUsername}} </span>v\xE0 nh\u1EADp l\u1EC7nh<div class="command" ngclipboard \nngclipboard-success="vm.onSuccess(e);" ngclipboard-error="onError(e);" \ndata-clipboard-text="/link {{vm.telegramBot.LinkMessage}}">/link {{vm.telegramBot.LinkMessage}}<div \nng-class="{\'ZYIfFd\' : !vm.copied}" class="copy copied">\u0110\xE3 sao ch\xE9p m\xE3</div></div>\u0111\u1EC3 k\u1EBFt n\u1ED1i</div><div class="the-way">\nC\xE1ch 3:</div><div class="helper mt-16" ng-show="vm.hasPsk">\nN\u1EBFu qu\xFD kh\xE1ch \u0111ang s\u1EED d\u1EE5ng Telegram tr\xEAn c\xF9ng {{vm.deviceName}} n\xE0y, qu\xFD kh\xE1ch c\xF3 th\u1EC3 click tr\u1EF1c ti\u1EBFp v\xE0o \u0111\xE2y \u0111\u1EC3 li\xEAn k\u1EBFt:\n<div class="btn" layout="column" layout-align="center center"><md-button class="md-raised md-accent command" \naria-label="Link" ng-href="{{vm.telegramBot.DirectLink}}" target="_blank"><md-icon md-font-icon="icon-telegram" \nclass="s20"></md-icon>Li\xEAn k\u1EBFt</md-button></div></div></div></div><div class="telegram linked" layout="column" \nng-if="vm.telegramBot.Status === 1"><div class="helper" ng-show="vm.hasPsk">\nT\xE0i kho\u1EA3n c\u1EE7a qu\xFD kh\xE1ch \u0111\xE3 \u0111\u01B0\u1EE3c li\xEAn k\u1EBFt v\u1EDBi Telegram. T\u1EEB t\xE0i kho\u1EA3n Telegram c\u1EE7a qu\xFD kh\xE1ch, c\xF3 th\u1EC3 chat tr\u1EF1c ti\u1EBFp v\u1EDBi t\xE0i kho\u1EA3n \n<span class="bot">@{{vm.telegramBot.BotUsername}} </span>\u0111\u1EC3 qu\u1EA3n l\xFD, ho\u1EB7c nh\u1EADp l\u1EC7nh<div class="command" ngclipboard \nngclipboard-success="vm.onSuccess(e);" ngclipboard-error="onError(e);" data-clipboard-text="/help">/help<div \nng-class="{\'ZYIfFd\' : !vm.copied}" class="copy copied">Copied</div></div>\u0111\u1EC3 nh\u1EADn \u0111\u01B0\u1EE3c tr\u1EE3 gi\xFAp</div><div class="K8EGIe" \nng-if="!vm.hasPsk" layout="column" layout-align="center center"><md-progress-circular md-mode="indeterminate" \nclass="md-warn"></md-progress-circular></div><div class="cancel" ng-if="vm.telegramBot.Status === 1" \nng-click="vm.cancelTelegram($event)">h\u1EE7y li\xEAn k\u1EBFt</div></div></div></div></div>');
$templateCache.put('app/main/announcements/views/classic-view.html','<div class="toolbar" layout="row" layout-align="space-between center"><div><md-button \nclass="md-icon-button close-thread" aria-label="Back" ng-click="vm.closeThread()" ng-if="vm.currentThread"><md-icon \nmd-font-icon="icon-keyboard-backspace"></md-icon></md-button></div><div layout="row" layout-align="start center" \nclass="date-picker" ng-hide="$mdMedia(\'xs\')"><div><label>T\u1EEB ng\xE0y</label><md-datepicker ng-model="vm.From" \nmd-placeholder="Expired"></md-datepicker></div><div><label>\u0110\u1EBFn ng\xE0y</label><md-datepicker ng-model="vm.To" \nmd-placeholder="Expired"></md-datepicker></div><div><md-button class="md-raised md-accent" \nng-click="vm.loadAnnouncements()" ng-disabled="vm.loadingThreads">OK</md-button></div></div><div layout="row" \nng-show="$mdMedia(\'xs\')" class="filter-title"><h2></h2><md-menu md-position-mode="right bottom"><md-button \nng-click="$mdMenu.open()"><div layout="row" layout-align="space-between center">\n{{ vm.currentFilter.filter | announcements }}<md-icon md-menu-origin md-font-icon="icon-menu-down"></md-icon></div>\n</md-button><md-menu-content width="4"><md-menu-item><md-button ui-sref="app.announcements.threads({filter: \'normal\'})">\nTh\xF4ng th\u01B0\u1EDDng</md-button></md-menu-item><md-menu-item><md-button \nui-sref="app.announcements.threads({filter: \'special\'})">Quan tr\u1ECDng</md-button></md-menu-item><md-menu-item><md-button \nui-sref="app.announcements.threads({filter: \'system\'})">H\u1EC7 th\u1ED1ng</md-button></md-menu-item><md-menu-item><md-button \nui-sref="app.announcements.threads({filter: \'personal\'})">C\xE1 nh\xE2n</md-button></md-menu-item></md-menu-content></md-menu>\n</div></div><div class="content-wrapper" layout="column" flex><div class="content thread-detail" \nng-if="vm.currentThread" ng-include="\'app/main/announcements/views/detail/detail.html\'" ms-scroll flex></div><div \nclass="content thread-list" ng-if="!vm.currentThread" ng-include="\'app/main/announcements/views/list/list.html\'" \nms-scroll flex></div></div>');
$templateCache.put('app/main/announcements/views/dialog.html','<md-dialog class="popup" aria-label="One"><md-dialog-content><div class="md-dialog-content"><p ng-bind-html="message">\n</p></div></md-dialog-content><md-dialog-actions layout="row"><md-button ng-click="cancel()" class="md-warn">OK\n</md-button></md-dialog-actions></md-dialog>');
$templateCache.put('app/main/account/statement/statement.html','<div id="statement" class="page-layout simple fullwidth" layout="column"><h2 class="primary">Sao k\xEA</h2><div \nng-if="vm.groupedData.length"><table class="table one-table group-statement md-primary-bg" ms-responsive-table \nng-repeat="w in vm.groupedData" ng-init="first = $index"><thead><tr><th colspan="7">{{ w.weekDay }}</th></tr><tr><th \nclass="mw-150">Ng\xE0y</th><th>S\u1ED1 phi\u1EBFu</th><th>Ti\u1EC1n c\u01B0\u1EE3c</th><th>Hoa h\u1ED3ng</th><th>Th\u1EAFng thua</th></tr></thead><tbody \nng-repeat="dateYear in w.groupByDate" ng-init="second = $index"><tr class="group-date"><td \nng-click="vm.show[first][second] = !vm.show[first][second]"><md-icon md-font-icon="icon-menu-right" \nng-class="{\'open\' : vm.show[first][second]}"></md-icon>{{ dateYear.group[0].dateVi }}</td><td>\n{{ dateYear.sumDay.Quantity | sabaCurrency }}</td><td>{{ dateYear.sumDay.Amount | sabaCurrency }}</td><td>\n{{ dateYear.sumDay.Commission | sabaCurrency }}</td><td ng-class="{\'warn\' : dateYear.sumDay.WinLose < 0 }">\n{{ dateYear.sumDay.WinLose | sabaCurrency }}</td></tr><tr ng-repeat="d in dateYear.group" \nng-show="vm.show[first][second]" ng-init="third = $index"><td class="production"><a \nui-sref="app.account.statement.lottery.date({ time: d.unixDate })" ng-if="d.ProductType === 0">\n{{ d.ProductType | production }}</a> <a ui-sref="app.account.statement.legend.date({ time: d.unixDate })" \nng-if="d.ProductType === 1">{{ d.ProductType | production }}</a> <a \nui-sref="app.account.statement.casino.date({ time: d.unixDate })" ng-if="d.ProductType === 2">\n{{ d.ProductType | production }}</a> <a ui-sref="app.account.statement.wm-casino.date({ time: d.unixDate })" \nng-if="d.ProductType === 100">{{ d.ProductType | production }}</a> <a \nui-sref="app.account.statement.saba.sport({ date: d.unixDate })" ng-if="d.ProductType === 101">\n{{ d.ProductType | production }}</a></td><td>{{ d.Quantity | sabaCurrency }}</td><td>{{ d.Amount | sabaCurrency }}</td>\n<td>{{ d.Commission | sabaCurrency }}</td><td ng-class="{\'warn\' : d.WinLose < 0 }">{{ d.WinLose | sabaCurrency }}</td>\n</tr></tbody><tfoot><tr><td>C\u1ED9ng tu\u1EA7n</td><td>{{ w.sumWeek.Quantity | sabaCurrency }}</td><td>\n{{ w.sumWeek.Amount | sabaCurrency }}</td><td>{{ w.sumWeek.Commission | sabaCurrency }}</td><td \nng-class="{\'warn\' : w.sumWeek.WinLose < 0 }">{{ w.sumWeek.WinLose | sabaCurrency }}</td></tr></tfoot></table></div><div \nlayout="row" class="margin-top-64" layout-align="center center" ng-if="vm.loading"><md-progress-circular \nclass="md-hue-2" md-diameter="48px"></md-progress-circular></div><div ng-if="!vm.groupedData.length && !vm.loading"><h3 \nclass="text-center padding-top-24 primary">Qu\xFD kh\xE1ch kh\xF4ng c\xF3 b\xE1o bi\u1EC3u trong 2 tu\u1EA7n g\u1EA7n \u0111\xE2y</h3></div></div>');
$templateCache.put('app/main/auth/enable-otp/enable-otp.html','<div class="page-layout simple fullwidth" layout="row" layout-align="center center"><div class="content" \nlayout="column" ui-view="otpView"></div></div>');
$templateCache.put('app/main/auth/agreement/agreement.html','<div class="page-layout simple fullwidth" layout="row" layout-align="center start"><div \nclass="agreement-template md-whiteframe-4dp md-primary-bg" layout="column"><div class="toolbar" layout="row" \nlayout-align="center center"><h2>Quy t\u1EAFc \u0111\u1EB7t c\u01B0\u1EE3c</h2></div><div class="content" layout="column"><div \nclass="content-wrap"><ol><li>\nC\xF3 th\u1EC3 lu\u1EADt c\u1EE7a n\u01A1i b\u1EA1n \u0111ang s\u1ED1ng c\xF3 quy \u0111\u1ECBnh r\u1EB1ng c\xE1 c\u01B0\u1EE3c tr\xEAn m\u1EA1ng l\xE0 b\u1EA5t h\u1EE3p ph\xE1p. N\u1EBFu th\u1EADt s\u1EF1 x\u1EA3y ra t\xECnh tr\u1EA1ng n\xE0y, C\xF4ng ty ch\xFAng t\xF4i s\u1EBD kh\xF4ng ch\u1ECBu tr\xE1ch nhi\u1EC7m v\u1EC1 nh\u1EEFng s\u1EF1 c\u1ED1 m\xE0 kh\xE1ch h\xE0ng g\u1EB7p ph\u1EA3i.\n</li><li>\nN\u1EBFu kh\xE1ch h\xE0ng nghi ng\u1EDD r\u1EB1ng d\u1EEF li\u1EC7u c\xF9a m\xECnh b\u1ECB \u0111\xE1nh c\u1EAFp, n\xEAn th\xF4ng b\xE1o ngay cho \u0110\u1EA1i l\xFD c\u1EA5p tr\xEAn ho\u1EB7c V\u0103n ph\xF2ng C\xF4ng ty \u0111\u1EC3 \u0111\u01B0\u1EE3c h\u1ED7 tr\u1EE3 k\u1ECBp th\u1EDDi tr\xE1nh nh\u1EEFng thi\u1EC7t h\u1EA1i \u0111\xE1ng ti\u1EBFc.\n</li><li>\nKh\xE1ch h\xE0ng c\xF3 tr\xE1ch nhi\u1EC7m b\u1EA3o m\u1EADt v\u1EC1 t\xE0i kho\u1EA3n v\xE0 th\xF4ng tin \u0111\u0103ng nh\u1EADp c\u1EE7a m\xECnh. \u0110\u1ED1i v\u1EDBi nh\u1EEFng c\xE1 c\u01B0\u1EE3c tr\u1EF1c tuy\u1EBFn b\u1EB1ng t\xEAn ng\u01B0\u1EDDi s\u1EED d\u1EE5ng v\xE0 m\u1EADt kh\u1EA9u h\u1EE3p l\u1EC7, th\xEC C\xF4ng ty s\u1EBD coi l\xE0 c\xF3 hi\u1EC7u l\u1EF1c.\n</li><li>\nKhi ph\xE1t h\xE0nh t\u1EF7 l\u1EC7 c\u01B0\u1EE3c m\xE0 x\u1EA3y ra b\u1EA5t k\u1EF3 l\u1ED7i \u0111\xE1nh m\xE1y ho\u1EB7c l\u1ED7i kh\xF4ng ch\u1EE7 \xFD c\u1EE7a con ng\u01B0\u1EDDi, b\u1EA5t k\u1EC3 tr\u01B0\u1EDBc ho\u1EB7c sau khi c\xF3 k\u1EBFt qu\u1EA3 m\u1EDF th\u01B0\u1EDFng, C\xF4ng ty c\xF3 quy\u1EC1n xo\xE1 ho\u1EB7c hu\u1EF7 b\u1ECF nh\u1EEFng m\xE3 c\u01B0\u1EE3c b\u1ECB l\u1ED7i \u1EDF b\u1EA5t c\u1EE9 l\xFAc n\xE0o v\xE0 th\xF4ng b\xE1o qua Th\xF4ng b\xE1o \u0111i\u1EC7n t\u1EED (C\xF4ng ty s\u1EBD kh\xF4ng th\xF4ng b\xE1o cho t\u1EEBng c\xE1 nh\xE2n).\n</li><li>\nM\u1ED7i l\u1EA7n \u0111\u0103ng nh\u1EADp kh\xE1ch h\xE0ng n\xEAn ki\u1EC3m tra s\u1ED1 d\u01B0 t\xE0i kho\u1EA3n c\u1EE7a m\xECnh. N\u1EBFu c\xF3 b\u1EA5t k\u1EF3 v\u1EA5n \u0111\u1EC1 v\u1EC1 s\u1ED1 d\u01B0 t\xE0i kho\u1EA3n, xin h\xE3y th\xF4ng b\xE1o cho \u0110\u1EA1i l\xFD c\u1EA5p tr\xEAn ho\u1EB7c V\u0103n ph\xF2ng C\xF4ng ty ngay l\u1EADp t\u1EE9c.\n</li><li>\nM\u1ED9t khi \u0111\u1EB7t c\u01B0\u1EE3c \u0111\u01B0\u1EE3c ch\u1EA5p nh\u1EADn (\u0111\xE3 qua th\u1EDDi gian h\u1EE7y \u0111\u1EB7t c\u01B0\u1EE3c), ng\u01B0\u1EDDi ch\u01A1i s\u1EBD kh\xF4ng th\u1EC3 s\u1EEDa hay h\u1EE7y b\u1ECF c\xE1c m\xE3 \u0111\u1EB7t c\u01B0\u1EE3c.\n</li><li>\nT\u1EF7 l\u1EC7 c\u01B0\u1EE3c c\u1EE7a c\xE1c con s\u1ED1 s\u1EBD \u0111\u01B0\u1EE3c bi\u1EBFn \u0111\u1ED5i th\u01B0\u1EDDng xuy\xEAn, Khi ph\xE1t th\u01B0\u1EDFng s\u1EBD \xE1p d\u1EE5ng theo t\u1EF7 l\u1EC7 c\u01B0\u1EE3c m\xE0 ban \u0111\u1EA7u b\u1EA1n \u0111\xE3 \u0111\u1EB7t c\u01B0\u1EE3c.\n</li><li>\nT\u1EA5t c\u1EA3 c\xE1c c\xE1 c\u01B0\u1EE3c \u0111\u1EC1u ph\u1EA3i ti\u1EBFn h\xE0nh tr\u01B0\u1EDBc th\u1EDDi gian m\u1EDF th\u01B0\u1EDFng X\u1ED5 S\u1ED1 n\u1EBFu kh\xF4ng c\xE1c m\xE3 c\u01B0\u1EE3c \u0111\xF3 s\u1EBD \u0111\u01B0\u1EE3c xem l\xE0 kh\xF4ng h\u1EE3p l\u1EC7.\n</li><li class="noted">C\xF4ng ty c\xF3 quy\u1EC1n t\u1EEB ch\u1ED1i, h\u1EE7y nh\u1EEFng m\xE3 \u0111\u1EB7t c\u01B0\u1EE3c b\u1EA5t th\u01B0\u1EDDng ho\u1EB7c c\xF3 bi\u1EC3u hi\u1EC7n gian l\u1EADn. <b>\nXin l\u01B0u \xFD!</b></li></ol></div></div><div class="agree" layout="row" layout-align="end center"><md-button \nclass="md-raised md-accent btn-agreement" ng-click="vm.iAgree()" ng-disabled="!vm.thisOK">T\xF4i \u0111\u1ED3ng \xFD <span \nng-if="vm.wait > 0">({{vm.wait}})</span></md-button></div></div></div>');
$templateCache.put('app/main/auth/otp/otp.html','<div class="page-layout simple fullwidth" layout="row" layout-align="center center"><div \nclass="auth-template md-whiteframe-4dp md-primary-bg" layout="column"><div class="toolbar" layout="row" \nlayout-align="space-between center"><md-button class="md-icon-button" ui-sref="app.home"><md-icon \nmd-font-icon="icon-keyboard-backspace"></md-icon></md-button><h2>X\xE1c minh 2 b\u01B0\u1EDBc</h2></div><div \nclass="content provided-otp" layout="column"><form name="formOtp" ng-submit="vm.validateOTP()" novalidate><div \nclass="content-wrap" layout="column"><h2>Cung c\u1EA5p m\xE3 OTP \u0111\u1EC3 ti\u1EBFp t\u1EE5c</h2><div class="input-content" layout="row" \nlayout-align="center center"><input type="tel" name="OTP" ng-model="vm.otp" minlength="6" \nng-readonly="vm.otp.length === 6" required autocomplete="off" ng-class="{\'full\' : vm.otp.length === 6 }"><md-button \nclass="md-button-icon md-warn" ng-disabled="vm.otp.length !== 6" ng-click="vm.otp = \'\'">X\xF3a</md-button></div><div \nclass="input-content"><md-button type="submit" class="md-raised md-accent" \nng-disabled="formOtp.$invalid || formOtp.$pristine || vm.submitting"><md-progress-circular class="md-accent" \nmd-diameter="20px" ng-disabled="!vm.submitting"></md-progress-circular>X\xE1c nh\u1EADn</md-button></div></div></form></div>\n</div></div>');
$templateCache.put('app/main/auth/password/password.html','<div class="page-layout simple fullwidth" layout="row" layout-align="center center"><div \nclass="auth-template md-whiteframe-4dp change-password md-primary-bg" layout="column"><div class="toolbar" layout="row" \nlayout-align="space-between center"><md-button class="md-icon-button" ui-sref="app.home"><md-icon \nmd-font-icon="icon-keyboard-backspace"></md-icon></md-button><h2>C\xE0i \u0111\u1EB7t m\u1EADt kh\u1EA9u m\u1EDBi</h2></div><div \nclass="content set-password" layout="column"><form name="formAuth" ng-submit="vm.setPassword()" novalidate><div \nclass="content-wrap" layout="column"><h2>Qu\xFD h\u1ED9i vi\xEAn vui l\xF2ng thay \u0111\u1ED5i m\u1EADt kh\u1EA9u m\u1EDBi \u0111\u1EC3 ti\u1EBFp t\u1EE5c</h2><div \nclass="input-content"><label><md-icon md-font-icon="icon-lock"></md-icon></label> <input \nng-attr-type="{{ vm.show ? \'text\' : \'password\' }}" name="newPassword" ng-model="vm.form.newPassword" \nplaceholder="M\u1EADt kh\u1EA9u" ng-focus="vm.inputFocus()" ng-blur="vm.showCheck = false" ng-keyup="vm.inputKeyup()" required \nautocomplete="off"> <label class="show-hide" ng-click="vm.showPassword()">{{vm.showText}}</label><div \nclass="md-input-message-animation password-perfect" ng-show="vm.passwordPerfect">M\u1EADt kh\u1EA9u an to\xE0n \u0111\u1EC3 s\u1EED d\u1EE5ng</div><div \nclass="md-input-message-animation password-weak" ng-show="!vm.passwordPerfect && vm.form.newPassword.length">\nM\u1EADt kh\u1EA9u y\u1EBFu</div><div class="password-requirements" ng-show="vm.showCheck"><ul class="not_listing"><li \nng-class="{ \'completed\': vm.upperCase === 1, \'line-through\' : vm.totalScore >= 3 && vm.upperCase === 0 }">\nT\u1ED1i thi\u1EC3u m\u1ED9t ch\u1EEF HOA</li><li \nng-class="{ \'completed\': vm.lowerCase === 1, \'line-through\' : vm.totalScore >= 3 && vm.lowerCase === 0 }">\nT\u1ED1i thi\u1EC3u m\u1ED9t ch\u1EEF th\u01B0\u1EDDng</li><li \nng-class="{ \'completed\': vm.number === 1, \'line-through\' : vm.totalScore >= 3 && vm.number === 0 }">T\u1ED1i thi\u1EC3u m\u1ED9t s\u1ED1\n</li><li ng-class="{ \'completed\': vm.specialChar === 1, \'line-through\' : vm.totalScore >= 3 && vm.specialChar === 0 }">\nT\u1ED1i thi\u1EC3u m\u1ED9t k\xFD t\u1EF1 \u0111\u1EB7c bi\u1EC7t</li><li class="strong" ng-class="{ \'completed\': vm.characterCount }">T\u1ED1i thi\u1EC3u 6 k\xFD t\u1EF1</li>\n</ul></div></div><div class="input-content"><label><md-icon md-font-icon="icon-lock"></md-icon></label> <input \nng-attr-type="{{ vm.show ? \'text\' : \'password\' }}" name="confirmPassword" ng-model="vm.form.confirmPassword" \nplaceholder="X\xE1c nh\u1EADn l\u1EA1i m\u1EADt kh\u1EA9u" minlength="6" compare-to="vm.form.newPassword" required autocomplete="off"><div \nng-messages="formAuth.confirmPassword.$error"><div ng-message="minlength"><span>M\u1EADt kh\u1EA9u ph\u1EA3i c\xF3 \xEDt nh\u1EA5t 6 k\xFD t\u1EF1</span>\n</div><div ng-message="compareTo">M\u1EADt kh\u1EA9u x\xE1c nh\u1EADn kh\xF4ng kh\u1EDBp</div></div></div><div class="input-content"><md-button \nclass="md-accent md-raised" type="submit" \nng-disabled="formAuth.$invalid || formAuth.$pristine || !vm.passwordPerfect || vm.submitting"><md-progress-circular \nclass="md-accent" md-diameter="20px" ng-disabled="!vm.submitting"></md-progress-circular>Thay \u0111\u1ED5i m\u1EADt kh\u1EA9u</md-button>\n</div></div></form></div></div></div>');
$templateCache.put('app/main/traditional/betting/betting.html','<md-dialog aria-label="Betting" class="betting-dialog"><form ng-cloak><md-toolbar ng-class="{\'md-warn\' : alertTick}">\n<div class="md-toolbar-tools"><h2>\u0110\u1EB7t c\u01B0\u1EE3c</h2><span flex></span><md-button class="md-icon-button" ng-click="cancel()" \nng-show="showAction"><md-icon md-font-icon="icon-close" aria-label="Close dialog"></md-icon></md-button></div>\n</md-toolbar><md-dialog-content md-dynamic-height ng-class="{\'mobilize\': Mobilize}"><div class="md-dialog-content"><div \nlayout="column" layout-align="center center" class="padding-bottom-12"><div class="betting-circle-loader" \nng-class="{\'load-complete\': allDone, \'transparent\' : alertTick }"><div class="checkmark draw" ng-show="allDone"></div>\n</div><div class="betting-status betting-warning scaleWarning" ng-if="alertTick"><span \nclass="exclamation-body pulseWarningIns"></span> <span class="exclamation-dot pulseWarningIns"></span></div><div \nclass="small">C\u01B0\u1EE3c th\xE0nh c\xF4ng {{tick.success}}/{{tick.total}} phi\u1EBFu</div><div class="betting-summary" flex \nng-if="alertTick" ng-bind-html="errorMessageTx"></div><div class="betting-mobilize" flex ng-if="Mobilize" \nng-bind-html="Mobilize"></div><div class="table-container"><table class="table"><thead><tr><th>#</th><th>\u0110\xE0i</th><th>\nKi\u1EC3u c\u01B0\u1EE3c</th><th>T\u1ED5ng \u0111i\u1EC3m</th><th>Th\xE0nh ti\u1EC1n</th><th>Tr\u1EA1ng th\xE1i</th></tr></thead><tbody \nng-repeat="item in tickets.Tickets"><tr ng-class="{\'with-error\': item.status === \'rejected\'}"><td>{{ $index+1}}</td><td>\n{{ item.GameType | gameByTerm }}</td><td>{{ item.BetType | bet }}</td><td>\n{{ item.Items | sumPointTicket | currency : \'\' : 0 }}</td><td ng-class="{\'blank\': (item | sumMoneyCost) <= 0}">\n{{ item | sumMoneyCost | currency : \'\' : 0 }}</td><td><md-icon md-font-icon="icon-check" class="s20 approved" \nng-show="item.status === \'approved\'"></md-icon><md-icon md-font-icon="icon-alert" class="s20 md-warn" \nng-show="item.status === \'rejected\'"></md-icon><md-icon md-font-icon="icon-play" class="s20" \nng-class="{\'blink\': item.status === \'processing\'}" ng-show="item.status === \'processing\' && !item.notAnswer"></md-icon>\n<md-icon md-font-icon="icon-stop" class="s20 icon-stop" ng-show="item.status === \'processing\' && item.notAnswer ">\n</md-icon></td></tr><tr class="error-message" ng-if="item.status === \'rejected\'"><td colspan="6">{{item.errorMessage}}\n</td></tr></tbody></table></div></div></div></md-dialog-content><md-dialog-actions layout="row" align="end"><md-switch \nng-model="$root.data.closePanel" aria-label="closePanel">\u0110\xF3ng c\u1EEDa s\u1ED5 sau khi c\u01B0\u1EE3c th\xE0nh c\xF4ng</md-switch><span flex>\n</span><md-button ng-click="cancel()" class="md-accent" ng-show="showAction">OK</md-button></md-dialog-actions></form>\n</md-dialog>');
$templateCache.put('app/main/traditional/betting/cancel.html','<md-dialog aria-label="Betting" class="betting-dialog canceled-message"><form ng-cloak><md-dialog-content \nmd-dynamic-height><div class="md-dialog-content"><div layout="column"><div layout="column" layout-align="center center" \nclass="padding-bottom-12"><div class="table-container"><table class="table"><thead><tr><th>Phi\u1EBFu c\u01B0\u1EE3c</th><th>Tr\u1EA1ng th\xE1i\n</th><th>N\u1ED9i dung</th></tr></thead><tbody ng-repeat="item in $root.infoMessages"><tr \nng-class="{\'with-error\': item.status === \'rejected\'}"><td>{{item.TicketNumber}}</td><td>\n{{ item.status === \'rejected\' ? \'Kh\xF4ng ch\u1EA5p nh\u1EADn\' : \'Hu\u1EF7 th\xE0nh c\xF4ng\' }}</td><td>{{item.message }}</td></tr></tbody>\n</table></div></div></div></div></md-dialog-content><md-dialog-actions layout="row"><md-button ng-click="cancel()" \nclass="md-accent">OK</md-button></md-dialog-actions></form></md-dialog>');
$templateCache.put('app/main/traditional/betting/prompt.dialog.html','<md-dialog aria-label="Betting" class="betting-prompt-dialog"><form ng-cloak><md-toolbar class="md-warn"><div \nclass="md-toolbar-tools"><h2>C\xF3 s\u1ED1 thay \u0111\u1ED5i</h2></div></md-toolbar><md-dialog-content md-dynamic-height><div \nclass="md-dialog-content"><div layout="column"><div layout="column" layout-align="center center" \nclass="padding-bottom-12"><p>Trong phi\u1EBFu c\u01B0\u1EE3c c\u1EE7a qu\xFD kh\xE1ch c\xF3 s\u1ED1 t\u0103ng gi\xE1. Chi ti\u1EBFt d\u01B0\u1EDBi \u0111\xE2y</p><div \nclass="table-container"><table class="table"><thead><tr><th>#</th><th>\u0110\xE0i</th><th>Ki\u1EC3u c\u01B0\u1EE3c</th><th>S\u1ED1</th><th>\nGi\xE1 thay \u0111\u1ED5i</th><th>Gi\xE1 m\u1EDBi</th></tr></thead><tbody ng-repeat="item in warnPriceChanges"><tr><td>{{ $index + 1 }}</td>\n<td>{{ item.GameType | gameByTerm }}</td><td>{{ item.BetType | bet }}</td><td>{{ item.Number }}</td><td>\n{{ item.PriceChange }}</td><td>{{ item.newPrice }}</td></tr></tbody></table></div></div></div></div></md-dialog-content>\n<md-dialog-actions layout="row" align="end"><md-button ng-click="cancel()" class="md-warn">Kh\xF4ng c\u01B0\u1EE3c</md-button><span \nflex></span><md-button ng-click="continuous()" class="md-raised md-accent">Ti\u1EBFp t\u1EE5c c\u01B0\u1EE3c</md-button></md-dialog-actions>\n</form></md-dialog>');
$templateCache.put('app/main/traditional/betting/recent-ticket.html','<md-list class="recent-tickets md-whiteframe-1dp md-primary-bg"><md-subheader class="md-no-sticky"><div layout="row" \nlayout-align="space-between center"><a ui-sref="app.account.bet-list.traditional">M\xE3 c\u01B0\u1EE3c g\u1EA7n \u0111\xE2y</a><md-button \nclass="md-icon-button" ng-click="one.updateRecentTickets()"><md-icon md-font-icon="icon-refresh" \nclass="s20 updating-tickets" ng-class="{\'rotating\' : $root.updatingTickets }"></md-icon></md-button></div>\n</md-subheader><div ng-repeat="ticket in $root.latestTicket | limitTo: 5 track by $index" \nng-class="{\'show\' : vm.showItem === $index, \'canceled\' : ticket.Status === 9}"><md-list-item class="ticket md-2-line" \nng-click="vm.showItem = $index" md-no-ink><md-icon md-font-icon="icon-plus" class="s16 status" \nng-if="vm.showItem !== $index"></md-icon><md-icon md-font-icon="icon-minus" class="s16 status" \nng-if="vm.showItem === $index"></md-icon><div class="md-list-item-text"><h4>{{ticket.TicketNumber}}</h4></div><div \nclass="amount">{{ticket.Amount | currency : \'\' : 0}}</div></md-list-item><div ng-hide="vm.showItem !== $index" \nclass="ticket-content"><div layout="column" class="padding-8"><div layout="row" class="padding-top-8"><div flex="100" \nclass="sub-title sub-header">{{ticket.BetType | bet }} - {{ticket.GameType | gameByTerm }}</div></div><div layout="row" \nclass="padding-top-16"><div flex class="sub-title" layout="row" layout-align="space-between start"><span class="title">\nDanh s\xE1ch:</span> <span class="number">{{ ticket.Numbers | joinArr }}</span></div></div><div layout="row" \nclass="padding-top-16"><div flex="25" class="sub-title">T\u1ED5ng \u0111i\u1EC3m</div><div flex="75" class="text-right">\n{{ticket.Point | currency : \'\' : 0}}</div></div><div layout="row" class="padding-top-16"><div flex="25" \nclass="sub-title">Th\xE0nh ti\u1EC1n</div><div flex="75" class="text-right">{{ticket.Amount | currency : \'\' : 0}}</div></div>\n<div layout="row" class="padding-top-16" ng-if="ticket.BetType === 20 || ticket.BetType === 27"><div flex="40" \nclass="sub-title">S\u1ED1 gi\u1EA3i c\xF2n l\u1EA1i</div><div flex="60" class="text-right text-red">{{ticket.PrizeNr}}</div></div></div>\n</div></div></md-list>');
$templateCache.put('app/main/auth/password-expired/password-expired.html','<div class="page-layout simple fullwidth password-expired" layout="row" layout-align="center start"><div \nclass="agreement-template md-whiteframe-4dp md-primary-bg" layout="column"><div class="toolbar" layout="row" \nlayout-align="center center"><h2>M\u1EADt kh\u1EA9u \u0111\xE3 h\u1EBFt h\u1EA1n</h2></div><div class="content" layout="column"><div \nclass="content-wrap"><p>\nM\u1EADt kh\u1EA9u c\u1EE7a qu\xFD kh\xE1ch \u0111\xE3 h\u1EBFt h\u1EA1n. Qu\xFD kh\xE1ch ph\u1EA3i thay \u0111\u1ED5i m\u1EADt kh\u1EA9u m\u1ED7i 30 ng\xE0y/l\u1EA7n v\xE0 kh\xF4ng \u0111\u01B0\u1EE3c tr\xF9ng l\u1EB7p v\u1EDBi 3 m\u1EADt kh\u1EA9u g\u1EA7n \u0111\xE2y nh\u1EA5t.\n</p><p>\nQu\xFD kh\xE1ch c\xF3 th\u1EC3 B\u1EADt ch\u1EE9c n\u0103ng b\u1EA3o m\u1EADt OTP \u0111\u1EC3 b\u1ECF y\xEAu c\u1EA7u n\xE0y \u0111\u1EC3 b\u1ECF y\xEAu c\u1EA7u n\xE0y (c\xF3 th\u1EC3 s\u1EED d\u1EE5ng m\u1ED9t m\u1EADt kh\u1EA9u v\u0129nh vi\u1EC5n)\n</p></div></div><div class="agree" layout="row" layout-align="end center"><md-button class="md-warn" \nui-sref="app.account.change-password">Thay \u0111\u1ED5i m\u1EADt kh\u1EA9u</md-button><md-button class="md-raised md-accent btn-agreement" \nui-sref="app.account.otp">C\xE0i \u0111\u1EB7t OTP</md-button></div></div></div>');
$templateCache.put('app/main/presidential/dialog/betting.html','<md-dialog aria-label="Betting" class="presidential-betting"><div class="overlay"></div><form ng-cloak><md-toolbar><div \nclass="md-toolbar-tools" layout="column" layout-align="center center"><div class="pictures"><img \nng-src="{{candidate.pictures}}" alt="{{candidate.name}}"></div><span></span></div></md-toolbar><md-dialog-content \nmd-dynamic-height ng-class="{\'mobilize\': Mobilize}"><div class="md-dialog-content" layout="column"><h1>\n{{candidate.name}}</h1><h2>T\u1EF7 l\u1EC7: <span ng-class="{\'md-warn\' : candidate.Odds < 0}">{{candidate.Odds}}</span></h2><div \nclass="bet-form" layout="row"><div flex="40" class="label">S\u1ED1 ti\u1EC1n c\u01B0\u1EE3c</div><div flex="60" class="form-group"><input \ntype="tel" id="bet-input" class="bet-input" ng-model="betPoint" ng-currency select-on-click numeric-only \nautocomplete="off" tabindex="2"><div class="line"></div></div></div><div class="help" layout="row">\u0110\u1EB7t c\u01B0\u1EE3c t\u1ED1i thi\u1EC3u: \n<span ng-click="betPoint = userGameCandidate.MinBet">{{userGameCandidate.MinBet | currency : \'\' : 0}}</span> t\u1ED1i \u0111a: \n<span ng-click="betPoint = userGameCandidate.MaxBet">{{userGameCandidate.MaxBet | currency : \'\' : 0}}</span></div></div>\n</md-dialog-content><md-dialog-actions layout="row" align="end"><md-button ng-click="cancel()" class="md-warn">Hu\u1EF7\n</md-button><span flex></span><md-button ng-click="confirm()" class="md-accent md-raised" ng-disabled="submitting">\nX\xE1c nh\u1EADn</md-button></md-dialog-actions></form><md-progress-linear md-mode="indeterminate" class="md-warn" \nng-show="submitting"></md-progress-linear></md-dialog>');
$templateCache.put('app/main/casino/lobby/lobby.html','<div flex class="page-layout simple fullwidth game-play casino-lobby" layout="column" layout-align="top center" \nlayout-align-gt-md="center center" ng-style="vm.gameStyle"><div class="overlay"></div><div class="pre-loading" \nlayout="row" layout-align="center center" ng-show="!vm.globalConfig.Ready" ng-if="$root.isAuthenticated">\n<md-progress-circular class="md-hue-2" md-diameter="120px"></md-progress-circular></div><div layout="column"><div \nclass="frame-wrapper" ng-if="$root.isAuthenticated" layout="column" layout-gt-sm="row" \nlayout-align="space-between stretch" ng-class="{\'appear\' : vm.globalConfig.Ready}"><div flex-gt-sm="45" flex="100" \nlayout="row" class="single" ng-repeat="area in [100, 101]"><div class="game-wrap" layout="column"><div \nclass="video-element" id="video-element-{{area}}"></div><div class="game-content" \nng-class="{\'mask\': !vm.Areas[area].videoDisplay}"><div class="header" layout="row" layout-align="space-between center" \nng-class="{\'un-border\': !vm.Areas[area].videoDisplay}"><div class="game-info" layout="column"><div class="game-name">\n{{ vm.Areas[area].AreaProperty.Name }}</div><div class="game-round">{{ $root.User.Balance | currency : \'\' : 0 }}</div>\n</div><div class="navigation" layout="row" layout-align="end center"><md-button \nclass="md-icon-button md-raised md-accent" ng-click="vm.videoToggle(area)" \nng-class="{\'md-warn\': vm.Areas[area].videoDisplay}" ng-disabled="vm.videoInteraction[area]"><md-icon \nmd-font-icon="icon-camcorder-off" class="s20" ng-show="vm.Areas[area].videoDisplay"></md-icon><md-icon \nmd-font-icon="icon-camcorder" class="s20" ng-show="!vm.Areas[area].videoDisplay"></md-icon></md-button><md-button \nclass="md-raised md-accent" ui-sref="app.casino.single({area: area})">V\xE0o B\xE0n</md-button><md-menu \nmd-position-mode="target-right target"><md-button class="md-icon-button md-accent" ng-click="$mdMenu.open($event)">\n<md-icon md-font-icon="icon-menu" class="s20"></md-icon></md-button><md-menu-content width="2" class="md-primary-bg">\n<md-menu-item><md-button class="" ng-click="vm.tableInfo(area)"><md-icon md-font-icon="icon-information-outline" \nclass="s20"></md-icon>Th\xF4ng tin</md-button></md-menu-item><md-menu-item><md-button class="" ng-click="vm.betList()">\n<md-icon md-font-icon="icon-receipt" class="s20"></md-icon>B\u1EA3ng c\u01B0\u1EE3c</md-button></md-menu-item></md-menu-content>\n</md-menu></div></div><div class="video-show" layout="column" layout-align="end center" \nng-class="{\'displayed\': vm.Areas[area].videoDisplay}"><div class="table-time hide" \nng-class="{\'md-warn\': vm.Areas[area].GameProperty.BetSeconds < 10 && vm.Areas[area].GameProperty.BetSeconds !== 0 }">\n{{ vm.Areas[area].GameProperty.BetSeconds }}</div><div class="time-round"><md-progress-circular md-mode="determinate" \nvalue="{{ (vm.Areas[area].GameProperty.BetSeconds/vm.Areas[area].o_Table.maxSeconds)*100 }}" class="md-accent" \nmd-diameter="36" \nng-class="{\'md-warn\' : vm.Areas[area].GameProperty.BetSeconds < 10, \'transparent\': vm.Areas[area].GameProperty.BetSeconds === 0 }">\n</md-progress-circular><div class="countdown" \nng-class="{\'md-warn\': vm.Areas[area].GameProperty.BetSeconds < 10 && vm.Areas[area].GameProperty.BetSeconds !== 0}">\n{{ vm.Areas[area].GameProperty.BetSeconds }}</div></div><div class="table-status">\n{{ vm.Areas[area].o_Table.s_TextStatus }}</div></div><div class="betting-table" layout="row" \nng-class="{\'disabled\': vm.Areas[area].o_Table.o_disabledTable}"><div flex="25" layout="column" class="wrapper" \nlayout-align="space-between stretch"><div class="four-red" layout="column" layout-align="center center" \nng-click="vm.s_oGame._onPromise(area, 2)" ng-class="{\'highlight\': vm.Areas[area].o_Table.highlight[2]}"><div \nclass="wagers-chip"><div class="chip chip-{{item}}" \nng-repeat="item in vm.Areas[area].o_Table.a_Token[2] track by $index" style="top: -{{$index * 4 + 40}}px"></div></div>\n<div class="wagers-money"><span ng-class="{\'committed\': vm.Areas[area].o_Table.o_moneyOnTable[2].committed }" \nng-show="vm.Areas[area].o_Table.o_moneyOnTable[2].money !== 0">\n{{ vm.Areas[area].o_Table.o_moneyOnTable[2].money | currency : \'\' : 0 }}</span></div></div><div class="zero-red" \nlayout="column" layout-align="center center" ng-click="vm.s_oGame._onPromise(area, 3)" \nng-class="{\'highlight\': vm.Areas[area].o_Table.highlight[3]}"><div class="wagers-money"><span \nng-class="{\'committed\': vm.Areas[area].o_Table.o_moneyOnTable[3].committed }" \nng-show="vm.Areas[area].o_Table.o_moneyOnTable[3].money !== 0">\n{{ vm.Areas[area].o_Table.o_moneyOnTable[3].money | currency : \'\' : 0 }}</span></div><div class="wagers-chip"><div \nclass="chip chip-{{item}}" ng-repeat="item in vm.Areas[area].o_Table.a_Token[3] track by $index" \nstyle="top: -{{$index * 4 + 40}}px"></div></div></div></div><div flex="25" layout="column" layout-align="center center" \nclass="even" ng-click="vm.s_oGame._onPromise(area, 0)" ng-class="{\'highlight\': vm.Areas[area].o_Table.highlight[0]}">\n<div class="wagers-chip"><div class="chip chip-{{item}}" \nng-repeat="item in vm.Areas[area].o_Table.a_Token[0] track by $index" style="top: -{{$index * 4 + 10}}px"></div></div>\n<div class="wagers-money"><span ng-class="{\'committed\': vm.Areas[area].o_Table.o_moneyOnTable[0].committed }" \nng-show="vm.Areas[area].o_Table.o_moneyOnTable[0].money !== 0">\n{{ vm.Areas[area].o_Table.o_moneyOnTable[0].money | currency : \'\' : 0 }}</span></div></div><div flex="25" \nlayout="column" layout-align="center center" class="odd" ng-click="vm.s_oGame._onPromise(area, 1)" \nng-class="{\'highlight\': vm.Areas[area].o_Table.highlight[1]}"><div class="wagers-money"><span \nng-class="{\'committed\': vm.Areas[area].o_Table.o_moneyOnTable[1].committed }" \nng-show="vm.Areas[area].o_Table.o_moneyOnTable[1].money !== 0">\n{{ vm.Areas[area].o_Table.o_moneyOnTable[1].money | currency : \'\' : 0 }}</span></div><div class="wagers-chip"><div \nclass="chip chip-{{item}}" ng-repeat="item in vm.Areas[area].o_Table.a_Token[1] track by $index" \nstyle="top: -{{$index * 4 + 10}}px"></div></div></div><div flex="25" layout="column" class="wrapper" \nlayout-align="space-between stretch"><div class="three-red" layout="column" layout-align="center center" \nng-click="vm.s_oGame._onPromise(area, 5)" ng-class="{\'highlight\': vm.Areas[area].o_Table.highlight[5]}"><div \nclass="wagers-chip"><div class="chip chip-{{item}}" \nng-repeat="item in vm.Areas[area].o_Table.a_Token[5] track by $index" style="top: -{{$index * 4 + 40}}px"></div></div>\n<div class="wagers-money"><span ng-class="{\'committed\': vm.Areas[area].o_Table.o_moneyOnTable[5].committed }" \nng-show="vm.Areas[area].o_Table.o_moneyOnTable[5].money !== 0">\n{{ vm.Areas[area].o_Table.o_moneyOnTable[5].money | currency : \'\' : 0 }}</span></div></div><div class="one-red" \nlayout="column" layout-align="center center" ng-click="vm.s_oGame._onPromise(area, 4)" \nng-class="{\'highlight\': vm.Areas[area].o_Table.highlight[4]}"><div class="wagers-chip"><div class="chip chip-{{item}}" \nng-repeat="item in vm.Areas[area].o_Table.a_Token[4] track by $index" style="top: -{{$index * 4 + 40}}px"></div></div>\n<div class="wagers-money"><span ng-class="{\'committed\': vm.Areas[area].o_Table.o_moneyOnTable[4].committed }" \nng-show="vm.Areas[area].o_Table.o_moneyOnTable[4].money !== 0">\n{{ vm.Areas[area].o_Table.o_moneyOnTable[4].money | currency : \'\' : 0 }}</span></div></div></div></div><div \nclass="betting-button" layout="row" layout-align="space-between center"><div flex="33"><md-button \nclass="md-warn btn-cancel" ng-click="vm.s_oGame.b_cancel(area)" \nng-disabled="vm.Areas[area].o_Table.o_disabledButton.cancel"></md-button></div><div flex="33"><md-button \nclass="md-accent md-btn-betting" ng-click="vm.s_oGame.b_betting(area)" \nng-disabled="vm.Areas[area].o_Table.o_disabledButton.betting"></md-button></div><div flex="33"><md-button \nclass="md-accent md-btn-re-betting" ng-click="vm.s_oGame.b_re_betting(area)" \nng-disabled="vm.Areas[area].o_Table.o_disabledButton.reBet"></md-button></div></div><div class="road-roller" \nlayout="column"><div class="roller-summary" layout="row" layout-align="center center"><div class="even" flex="50">\nCh\u1EB5n: {{ vm.Areas[area].roadRoller.even }}</div><div class="odd" flex="50">L\u1EBB: {{ vm.Areas[area].roadRoller.odd }}</div>\n</div><div class="road-content"><div class="roller-bg" layout="row"><div layout="column" class="result-wrap" \nng-repeat="slot in vm.Areas[area].roadRoller.template track by $index"><div ng-repeat="r in slot.data track by $index" \nclass="result"><div class="imd" ng-class="{\'blue\': (r % 2 === 0), \'transparent\': r === 9 }">{{r}}</div></div></div>\n</div></div><div class="bg-message" layout="row" layout-align="center center" \nng-class="{\'show\': vm.showNotify[area].winMoney !== undefined}"><div class="money">\nTh\u1EAFng {{ vm.showNotify[area].winMoney | currency : \'\' : 0 }}</div></div><div class="bg-message" layout="row" \nlayout-align="center center" ng-class="{\'show\': vm.showNotify[area].newDealer !== undefined}"><div class="dealer">\n{{ vm.showNotify[area].newDealer}} h\xE2n h\u1EA1nh \u0111\u01B0\u1EE3c ti\u1EBFp t\u1EE5c ph\u1EE5c v\u1EE5 qu\xFD kh\xE1ch</div></div><div class="bg-message" \nlayout="row" layout-align="center center" ng-class="{\'show\': vm.showNotify[area].roundCanceled}"><div \nclass="round-cancelled">V\xE1n ch\u01A1i hi\u1EC7n t\u1EA1i b\u1ECB hu\u1EF7</div></div></div><div class="image-message" layout="row" \nlayout-align="center"><div class="start-betting" ng-class="{\'show\': vm.showNotify[area].startBetting}"><img \nsrc="/assets/images/casino/start_bet.png" alt="start_bet"></div><div class="betting-success" \nng-class="{\'show\': vm.showNotify[area].bettingSuccess}"><img src="/assets/images/casino/bet_success.png" \nalt="bet_success"></div></div></div><div class="maintenance" layout="row" layout-align="center center" \nng-if="vm.Areas[area].AreaProperty.Status !== 2"><div class="message">{{ vm.Areas[area].AreaProperty.Message }}</div>\n</div></div></div><div class="chip-stack" flex-gt-sm="10" flex="100" layout-gt-sm="column" layout="row" \nlayout-align="center center"><div class="chip {{chip.name}}" ng-repeat="chip in vm.tokenOnStack | limitTo: 5" \nng-class="{\'active\': chip.active, \'hidden\': chip.hidden }" ng-click="vm.setChip(chip)"><div \nclass="chip-image chip-{{chip.name}}"></div></div><div class="chip" ng-click="vm.chipSettings()"><div \nclass="chip-image chip-setting"></div></div></div></div><div class="NbBbRNil" ng-show="!$root.isAuthenticated"><h1>\n{{ $root.gameName }}</h1><p>Qu\xFD kh\xE1ch vui l\xF2ng \u0111\u0103ng nh\u1EADp \u0111\u1EC3 ti\u1EBFp t\u1EE5c</p><div class="CgcIEXRw"><md-button \nclass="JcuPtOnP" ng-click="$root.popupLogin()">\u0110\u0103ng nh\u1EADp</md-button></div></div></div><md-button \nclass="md-icon-button md-accent md-raised btn-home" class="exit" ui-sref="app.home" \nng-show="$mdMedia(\'min-width: 1400px\')"><md-icon md-font-icon="icon-home"></md-icon></md-button></div>');
$templateCache.put('app/main/traditional/manual/manual.html','<div id="manual" layout="column"><div layout-gt-sm="row" layout="column"><div layout="column" flex-gt-sm="50" \nflex="100" class="before-parse"><form name="mathematicalForm" class="md-whiteframe-1dp md-primary-bg" \nng-submit="vm.submitParse()"><md-input-container class="md-block"><label>Nh\u1EADp n\u1ED9i dung v\u1EDBi c\xFA ph\xE1p: <span>\u0110\xE0i</span> \n<span>Lo\u1EA1i</span> <span>\u0110i\u1EC3m</span> <span>S\u1ED1</span></label> <textarea ng-model="vm.mathematical" rows="3"></textarea>\n<div class="balance" ng-if="$root.isAuthenticated">S\u1ED1 d\u01B0: {{ $root.User.Balance | currency : \'\' : 0 }}</div>\n</md-input-container><md-dialog-actions layout="row"><md-button class="md-accent"><a \nhref="https://docs.google.com/document/d/1Koa2FpxgDBs4xf3daRJAb0kYGYfPMUHo3FYKX6XUBK8" target="_blank">H\u01B0\u1EDBng d\u1EABn</a>\n</md-button><span flex></span><md-button class="md-warn" ng-disabled="vm.mathematical.length === 0" \nng-click="vm.resetParse()">X\xF3a</md-button><md-button class="md-accent" type="submit" \nng-disabled="vm.mathematical.length === 0">Ph\xE2n t\xEDch</md-button></md-dialog-actions></form></div><div layout="column" \nflex-gt-sm="50" flex="100" class="after-parse"><div class="parse-content md-whiteframe-1dp md-primary-bg" \nlayout="column" ng-if="vm.mathParses.length"><form name="betting" ng-submit="vm.startBetting()" novalidate><table \nclass="simple" ms-responsive-table><thead><tr><th>Ki\u1EC3u c\u01B0\u1EE3c</th><th>S\u1ED1</th><th>\u0110i\u1EC3m</th></tr></thead><tbody><tr \nng-repeat="item in vm.mathParses"><td>{{ item.GameType | game }} - {{ item.BetType | bet }}</td><td \nng-class="{ \'warn\' : item.validate !== undefined && !item.validate }">{{ item.Numbers.toString() }}</td><td \nng-class="{ \'warn\' : item.pointCheck }">{{ item.Amount | currency : \'\' : 0 }}</td></tr></tbody></table>\n<md-dialog-actions layout="row"><md-button class="md-warn" ng-click="vm.cancelAll()">H\u1EE7y</md-button><span flex></span>\n<md-button class="md-accent md-raised" type="submit">\u0110\u1EB7t c\u01B0\u1EE3c</md-button></md-dialog-actions></form></div></div></div>\n</div>');
$templateCache.put('app/main/traditional/menu/traditional.menu.html','<ms-lottery class="scrollable md-primary-bg md-whiteframe-1dp" folded="vm.folded" ms-scroll="vm.msScrollOptions">\n</ms-lottery>');
$templateCache.put('app/main/traditional/southern-parlay/southern-parlay.html','<div class="main-game" layout-gt-sm="row" layout="column"><div flex-gt-sm="70" flex="100" class="content-number-wrap">\n<div layout="column" class="content-number md-whiteframe-1dp md-primary-bg"><div class="row-input-numbers"><form \nclass="md-inline-form" ng-submit="vm.submitKeyNumber()" novalidate layout="row"><input type="tel" autocomplete="off" \ngo-focus="vm.focusVar" class="input-numbers-array md-one-input" placeholder="D\xE3y s\u1ED1" ng-model="vm.keynumber" \nng-keyup="vm.inputKeyNumber($event)" tabindex="1" ng-disabled="!$root.allowBetting"><md-button \nclass="md-raised key-number" type="button" ng-click="vm.submitKeyNumber(true)" ng-disabled="!vm.keynumber.length">\nTh\xEAm v\xE0o</md-button></form></div><table><tbody><tr hide show-gt-xs><td><md-checkbox md-no-ink aria-label="Checkbox" \nng-checked="vm.exists(3, 1)" ng-click="vm.groupNumbers(3, 1)" ng-disabled="!$root.allowBetting"></md-checkbox></td><td \ncolspan="10" layout="row" class="row-check"><div layout="row" layout-align="center"><md-checkbox md-no-ink \naria-label="Checkbox" ng-checked="vm.exists(0, 10)" ng-click="vm.groupNumbers(0, 10)" ng-disabled="!$root.allowBetting">\n</md-checkbox></div><div layout="row" layout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" \nng-checked="vm.exists(0, 11)" ng-click="vm.groupNumbers(0, 11)" ng-disabled="!$root.allowBetting"></md-checkbox></div>\n<div layout="row" layout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(0, 12)" \nng-click="vm.groupNumbers(0, 12)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(0, 13)" \nng-click="vm.groupNumbers(0, 13)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(0, 14)" \nng-click="vm.groupNumbers(0, 14)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(0, 15)" \nng-click="vm.groupNumbers(0, 15)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(0, 16)" \nng-click="vm.groupNumbers(0, 16)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(0, 17)" \nng-click="vm.groupNumbers(0, 17)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(0, 18)" \nng-click="vm.groupNumbers(0, 18)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(0, 19)" \nng-click="vm.groupNumbers(0, 19)" ng-disabled="!$root.allowBetting"></md-checkbox></div></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(0, 0)" \nng-click="vm.groupNumbers(0, 0)" ng-disabled="!$root.allowBetting"></md-checkbox></td><td colspan="10" rowspan="10" \nclass="main-number"><div class="repeater-number" ng-repeat="n in vm.numbers | limitTo:100"><div \nclass="inner-number miennam md-one-number" layout="row" ng-click="vm.selectNumber(n)" \nng-class="{\'active\' : n.selected, \'changed-price\': n.priceChanged && $root.allowBetting, \'stop\': !$root.allowBetting}">\n<div flex="50" class="price md-accent-fg md-hue-1" layout="column" hide show-gt-xs><div><span \nng-class="{\'price-up\': n.price[2] > n.base[2], \'stop\' : n.disabled[2]}">{{n.price[2]}}</span></div><div><span \nng-class="{\'price-up\': n.price[3] > n.base[3], \'stop\' : n.disabled[3]}">{{n.price[3]}}</span></div><div><span \nng-class="{\'price-up\': n.price[4] > n.base[4], \'stop\' : n.disabled[4]}">{{n.price[4]}}</span></div></div><div flex="50" \nflex-xs="100" class="number">{{n.number}}</div></div></div></td></tr><tr><td layout="row" layout-align="center">\n<md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(0, 1)" ng-click="vm.groupNumbers(0, 1)" \nng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" layout-align="center"><md-checkbox \nmd-no-ink aria-label="Checkbox" ng-checked="vm.exists(0, 2)" ng-click="vm.groupNumbers(0, 2)" \nng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" layout-align="center"><md-checkbox \nmd-no-ink aria-label="Checkbox" ng-checked="vm.exists(0, 3)" ng-click="vm.groupNumbers(0, 3)" \nng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" layout-align="center"><md-checkbox \nmd-no-ink aria-label="Checkbox" ng-checked="vm.exists(0, 4)" ng-click="vm.groupNumbers(0, 4)" \nng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" layout-align="center"><md-checkbox \nmd-no-ink aria-label="Checkbox" ng-checked="vm.exists(0, 5)" ng-click="vm.groupNumbers(0, 5)" \nng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" layout-align="center"><md-checkbox \nmd-no-ink aria-label="Checkbox" ng-checked="vm.exists(0, 6)" ng-click="vm.groupNumbers(0, 6)" \nng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" layout-align="center"><md-checkbox \nmd-no-ink aria-label="Checkbox" ng-checked="vm.exists(0, 7)" ng-click="vm.groupNumbers(0, 7)" \nng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" layout-align="center"><md-checkbox \nmd-no-ink aria-label="Checkbox" ng-checked="vm.exists(0, 8)" ng-click="vm.groupNumbers(0, 8)" \nng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" layout-align="center"><md-checkbox \nmd-no-ink aria-label="Checkbox" ng-checked="vm.exists(0, 9)" ng-click="vm.groupNumbers(0, 9)" \nng-disabled="!$root.allowBetting"></md-checkbox></td></tr></tbody></table></div></div><div flex-gt-sm="30" flex="100" \nlayout="column" class="main-right-betting-form"><div layout="column" class="betting-form-wrap"><div \nclass="betting-form md-whiteframe-1dp md-primary-bg" layout="column"><div class="betting-form-header"><div layout="row">\n<div flex="30">\u0110\u1EB7t c\u01B0\u1EE3c</div><div flex="70" class="text-right">L\xF4 Xi\xEAn - Xi\xEAn 18A+B</div></div></div><div \nclass="betting-form-content"><form name="basicForm" class="md-inline-form" ng-submit="vm.submitBetting()" novalidate>\n<div layout="row" class="padding-top-8" flex="70" flex-offset="30"><div flex="33" class="text-center">Xi\xEAn 2</div><div \nflex="33" class="text-center">Xi\xEAn 3</div><div flex="33" class="text-center">Xi\xEAn 4</div></div><div layout="row" \nclass="padding-top-8"><div class="sub-title padding-right-8" flex="30"><span class="text-boxed-one">S\u1ED1 xi\xEAn</span></div>\n<div flex="70" layout="row"><div flex="33" class="sub-title text-center">{{ vm.pair.count[2] }}</div><div flex="33" \nclass="sub-title text-center">{{ vm.pair.count[3] }}</div><div flex="33" class="sub-title text-center">\n{{ vm.pair.count[4] }}</div></div></div><div layout="row" class="padding-top-8"><div class="sub-title padding-right-8" \nflex="30"><span class="text-boxed-one">S\u1ED1 \u0111i\u1EC3m</span></div><div flex="70" layout="row"><div flex="33" \nclass="bet-input-1"><input type="tel" class="bet-input md-one-input" maxlength="5" ng-model="vm.inputPoint[2]" \nng-currency numeric-only select-on-click ng-disabled="vm.pair.count[2] === 0 || vm.pair.count[2] > 128" \nautocomplete="off" tabindex="2"></div><div flex="33" class="bet-input-2"><input type="tel" \nclass="bet-input md-one-input" maxlength="5" ng-model="vm.inputPoint[3]" ng-currency numeric-only select-on-click \nng-disabled="vm.pair.count[3] === 0 || vm.pair.count[3] > 128" autocomplete="off" tabindex="2"></div><div flex="33" \nclass="bet-input-3"><input type="tel" class="bet-input md-one-input" maxlength="5" ng-model="vm.inputPoint[4]" \nng-currency numeric-only select-on-click ng-disabled="vm.pair.count[4] === 0 || vm.pair.count[4] > 128" \nautocomplete="off" tabindex="2"></div></div></div><div layout="row" class="padding-top-8"><div flex="30" \nclass="padding-right-8"><md-button class="betting-button cancel-button md-warn md-raised" \nng-disabled="!(vm.numbers | filter : {selected : true}).length" ng-click="vm.resetBetting()"><md-icon \nmd-font-icon="icon-close" class="s20"></md-icon></md-button></div><div flex="70"><md-button \nclass="betting-button md-raised md-accent" type="submit" ng-disabled="vm.costMoney() === 0">\u0110\u1EB7t c\u01B0\u1EE3c</md-button></div>\n</div><div class="ignore-price"><md-checkbox ng-model="vm.ignorePrice" aria-label="Ignore Price">\nKh\xF4ng h\u1ECFi l\u1EA1i khi c\xF3 gi\xE1 thay \u0111\u1ED5i</md-checkbox></div></form><div layout="column" class="padding-top-16"><div \nclass="sub-title">Th\xE0nh ti\u1EC1n</div><div layout="row" class="padding-top-8"><div class="sub-title" flex="30">Xi\xEAn 2</div>\n<div flex="70" class="text-bold">{{vm.pair.money[2] | currency : \'\' : 0 }}</div></div><div layout="row" \nclass="padding-top-8"><div class="sub-title" flex="30">Xi\xEAn 3</div><div flex="70" class="text-bold">\n{{ vm.pair.money[3] | currency : \'\' : 0 }}</div></div><div layout="row" class="padding-top-8"><div class="sub-title" \nflex="30">Xi\xEAn 4</div><div flex="70" class="text-bold">{{ vm.pair.money[4] | currency : \'\' : 0 }}</div></div></div><div \nlayout="row" class="padding-top-16" ng-if="$root.isAuthenticated"><div class="sub-title secondary" flex="30">T\u1ED1i \u0111a\n</div><div flex="70" class="text-bold sub-title secondary">Xi\xEAn 2: {{ vm.pair.limit[2] | currency : \'\' : 0 }} \u0110i\u1EC3m</div>\n</div><div layout="row" class="padding-top-8" ng-if="$root.isAuthenticated"><div flex="70" flex-offset="30" \nclass="text-bold sub-title secondary">Xi\xEAn 3: {{ vm.pair.limit[3] | currency : \'\' : 0 }} \u0110i\u1EC3m</div></div><div \nlayout="row" class="padding-top-8" ng-if="$root.isAuthenticated"><div flex="70" flex-offset="30" \nclass="text-bold sub-title secondary">Xi\xEAn 4: {{ vm.pair.limit[4] | currency : \'\' : 0 }} \u0110i\u1EC3m</div></div><div \nlayout="row" class="balance" ng-if="$root.isAuthenticated"><div class="sub-title secondary" flex="30">S\u1ED1 d\u01B0</div><div \nflex="70" class="text-bold sub-title secondary" layout="row" layout-align="space-between center">\n{{ $root.User.Balance | currency : \'\' : 0 }}<md-button class="md-icon-button" ng-click="$root.updateBalance()" \nng-disabled="$root.User.updating"><md-icon md-font-icon="icon-refresh" class="s16" \nng-class="{\'rotating\' : $root.User.updating }"></md-icon></md-button></div></div></div></div></div><div layout="column" \nclass="recent-betting-list" ng-include="\'app/main/traditional/betting/recent-ticket.html\'" \nng-show="$root.latestTicket.length"></div></div></div>');
$templateCache.put('app/main/legendary/betting/betting.html','<md-dialog aria-label="Betting" class="betting-dialog"><form ng-cloak><md-toolbar ng-class="{\'md-warn\' : alertTick}">\n<div class="md-toolbar-tools"><h2>\u0110\u1EB7t c\u01B0\u1EE3c</h2><span flex></span><md-button class="md-icon-button" ng-click="cancel()" \nng-show="showAction"><md-icon md-font-icon="icon-close" aria-label="Close dialog"></md-icon></md-button></div>\n</md-toolbar><md-dialog-content md-dynamic-height ng-class="{\'mobilize\': Mobilize}"><div class="md-dialog-content"><div \nlayout="column" layout-align="center center" class="padding-bottom-12"><div class="betting-circle-loader" \nng-class="{\'load-complete\': allDone, \'transparent\' : alertTick }"><div class="checkmark draw" ng-show="allDone"></div>\n</div><div class="betting-status betting-warning scaleWarning" ng-if="alertTick"><span \nclass="exclamation-body pulseWarningIns"></span> <span class="exclamation-dot pulseWarningIns"></span></div><div \nclass="small">C\u01B0\u1EE3c th\xE0nh c\xF4ng {{tick.success}}/{{tick.total}} phi\u1EBFu</div><div class="betting-summary" flex \nng-if="alertTick" ng-bind-html="errorMessageTx"></div><div class="betting-mobilize" flex ng-if="Mobilize" \nng-bind-html="Mobilize"></div><div class="table-container"><table class="table"><thead><tr><th>#</th><th>\u0110\xE0i</th><th>\nKi\u1EC3u c\u01B0\u1EE3c</th><th>T\u1ED5ng \u0111i\u1EC3m</th><th>Th\xE0nh ti\u1EC1n</th><th>Tr\u1EA1ng th\xE1i</th></tr></thead><tbody \nng-repeat="item in tickets.Tickets"><tr ng-class="{\'with-error\': item.status === \'rejected\'}"><td>{{ $index+1}}</td><td>\n{{ item.GameType | legendGame }}</td><td>{{ item.BetType | bet : false : item.GameType }}</td><td>\n{{ item.Items | sumPointTicket | currency : \'\' : 0 }}</td><td ng-class="{\'blank\': (item.Money) <= 0}">\n{{ item.Money | currency : \'\' : 0 }}</td><td><md-icon md-font-icon="icon-check" class="s20 approved" \nng-show="item.status === \'approved\'"></md-icon><md-icon md-font-icon="icon-alert" class="s20 md-warn" \nng-show="item.status === \'rejected\'"></md-icon><md-icon md-font-icon="icon-play" class="s20" \nng-class="{\'blink\': item.status === \'processing\'}" ng-show="item.status === \'processing\' && !item.notAnswer"></md-icon>\n<md-icon md-font-icon="icon-stop" class="s20 icon-stop" ng-show="item.status === \'processing\' && item.notAnswer ">\n</md-icon></td></tr><tr class="error-message" ng-if="item.status === \'rejected\'"><td colspan="6">{{item.errorMessage}}\n</td></tr></tbody></table></div></div></div></md-dialog-content><md-dialog-actions layout="row" align="end"><md-switch \nng-model="$root.data.closePanel" aria-label="closePanel">\u0110\xF3ng c\u1EEDa s\u1ED5 sau khi c\u01B0\u1EE3c th\xE0nh c\xF4ng</md-switch><span flex>\n</span><md-button ng-click="cancel()" class="md-accent" ng-show="showAction">OK</md-button></md-dialog-actions></form>\n</md-dialog>');
$templateCache.put('app/main/legendary/betting/prompt.dialog.html','<md-dialog aria-label="commit-betting" class="commit-betting md-primary-bg"><form name="form" ng-submit="submit()" \nnovalidate><md-dialog-content><h2>X\xE1c nh\u1EADn \u0111\u1EB7t c\u01B0\u1EE3c</h2><div class="md-dialog-content-body"><div layout="column"><div \nlayout="row"><div flex="20" flex-xs="30" class="text-left">Danh s\xE1ch:</div><div flex="80" flex-xs="70" layout="row">\n<span class="money">{{ numbers }}</span></div></div><div layout="row"><div flex="20" flex-xs="30" class="text-left">\nT\u1ED5ng \u0111i\u1EC3m:</div><div flex="80" flex-xs="70" layout="row"><span class="money">{{ Point | currency : \'\' : 0 }}</span>\n</div></div><div layout="row"><div flex="20" flex-xs="30" class="text-left">Th\xE0nh ti\u1EC1n:</div><div flex="80" \nflex-xs="70" layout="row"><span class="money">{{ costMoney | currency : \'\' : 0 }}</span></div></div><div layout="row">\n<span>Sau khi \u0111\u1EB7t c\u01B0\u1EE3c, qu\xFD kh\xE1ch s\u1EBD kh\xF4ng th\u1EC3 hu\u1EF7 phi\u1EBFu c\u01B0\u1EE3c.</span></div></div></div><div class="always-betting">\n<md-checkbox ng-model="alwaysBetting" md-no-ink aria-label="always Betting">Kh\xF4ng h\u1ECFi l\u1EA1i cho l\u1EA7n \u0111\u1EB7t c\u01B0\u1EE3c sau\n</md-checkbox></div></md-dialog-content><md-dialog-actions layout="row"><md-button class="md-warn" ng-click="cancel()" \nng-disabled="submitting">\u0110\xF3ng</md-button><md-button class="md-accent md-raised" ng-click="done()" \nng-disabled="submitting">OK</md-button></md-dialog-actions></form></md-dialog>');
$templateCache.put('app/main/legendary/result.template/northern.html','<table class="table" cellspacing="0"><tbody><tr class="jackpot"><td>\u0110B</td><td><div class="padding-4" layout="row" \nlayout-align="center"><div class="spin" ng-show="legend.currentSpin === 0"><div><span class="animate d1">\n1 2 3 4 5 6 7 8 9 0</span></div><div><span class="animate d2">1 2 3 4 5 6 7 8 9 0</span></div><div><span \nclass="animate d3">1 2 3 4 5 6 7 8 9 0</span></div><div><span class="animate d4">1 2 3 4 5 6 7 8 9 0</span></div><div>\n<span class="animate d5">1 2 3 4 5 6 7 8 9 0</span></div></div><span ng-hide="legend.currentSpin === 0">\n{{legend.resultTables.Jackpot}}</span></div></td></tr><tr><td>G1</td><td><div class="padding-4" layout="row" \nlayout-align="center"><div class="spin" ng-show="legend.currentSpin === 26"><div><span class="animate d1">\n1 2 3 4 5 6 7 8 9 0</span></div><div><span class="animate d2">1 2 3 4 5 6 7 8 9 0</span></div><div><span \nclass="animate d3">1 2 3 4 5 6 7 8 9 0</span></div><div><span class="animate d4">1 2 3 4 5 6 7 8 9 0</span></div><div>\n<span class="animate d5">1 2 3 4 5 6 7 8 9 0</span></div></div><span ng-hide="legend.currentSpin === 26">\n{{legend.resultTables.First}}</span></div></td></tr><tr><td>G2</td><td><div layout="row"><div flex="50" \nclass="padding-4" layout="row" layout-align="center"><div class="spin" ng-show="legend.currentSpin === 25"><div><span \nclass="animate d1">1 2 3 4 5 6 7 8 9 0</span></div><div><span class="animate d2">1 2 3 4 5 6 7 8 9 0</span></div><div>\n<span class="animate d3">1 2 3 4 5 6 7 8 9 0</span></div><div><span class="animate d4">1 2 3 4 5 6 7 8 9 0</span></div>\n<div><span class="animate d5">1 2 3 4 5 6 7 8 9 0</span></div></div><span ng-hide="legend.currentSpin === 25">\n{{legend.resultTables.Second[0]}}</span></div><div flex="50" class="padding-4" layout="row" layout-align="center"><div \nclass="spin" ng-show="legend.currentSpin === 24"><div><span class="animate d1">1 2 3 4 5 6 7 8 9 0</span></div><div>\n<span class="animate d2">1 2 3 4 5 6 7 8 9 0</span></div><div><span class="animate d3">1 2 3 4 5 6 7 8 9 0</span></div>\n<div><span class="animate d4">1 2 3 4 5 6 7 8 9 0</span></div><div><span class="animate d5">1 2 3 4 5 6 7 8 9 0</span>\n</div></div><span ng-hide="legend.currentSpin === 24">{{legend.resultTables.Second[1]}}</span></div></div></td></tr><tr>\n<td>G3</td><td><div layout="column" class="double"><div layout="row" flex="100"><div flex="33" class="padding-4" \nlayout="row" layout-align="center"><div class="spin" ng-show="legend.currentSpin === 23"><div><span class="animate d1">\n1 2 3 4 5 6 7 8 9 0</span></div><div><span class="animate d2">1 2 3 4 5 6 7 8 9 0</span></div><div><span \nclass="animate d3">1 2 3 4 5 6 7 8 9 0</span></div><div><span class="animate d4">1 2 3 4 5 6 7 8 9 0</span></div><div>\n<span class="animate d5">1 2 3 4 5 6 7 8 9 0</span></div></div><span ng-hide="legend.currentSpin === 23">\n{{legend.resultTables.Third[0]}}</span></div><div flex="33" class="padding-4" layout="row" layout-align="center"><div \nclass="spin" ng-show="legend.currentSpin === 22"><div><span class="animate d1">1 2 3 4 5 6 7 8 9 0</span></div><div>\n<span class="animate d2">1 2 3 4 5 6 7 8 9 0</span></div><div><span class="animate d3">1 2 3 4 5 6 7 8 9 0</span></div>\n<div><span class="animate d4">1 2 3 4 5 6 7 8 9 0</span></div><div><span class="animate d5">1 2 3 4 5 6 7 8 9 0</span>\n</div></div><span ng-hide="legend.currentSpin === 22">{{legend.resultTables.Third[1]}}</span></div><div flex="33" \nclass="padding-4" layout="row" layout-align="center"><div class="spin" ng-show="legend.currentSpin === 21"><div><span \nclass="animate d1">1 2 3 4 5 6 7 8 9 0</span></div><div><span class="animate d2">1 2 3 4 5 6 7 8 9 0</span></div><div>\n<span class="animate d3">1 2 3 4 5 6 7 8 9 0</span></div><div><span class="animate d4">1 2 3 4 5 6 7 8 9 0</span></div>\n<div><span class="animate d5">1 2 3 4 5 6 7 8 9 0</span></div></div><span ng-hide="legend.currentSpin === 21">\n{{legend.resultTables.Third[2]}}</span></div></div><div layout="row" flex="100"><div flex="33" class="padding-4" \nlayout="row" layout-align="center"><div class="spin" ng-show="legend.currentSpin === 20"><div><span class="animate d1">\n1 2 3 4 5 6 7 8 9 0</span></div><div><span class="animate d2">1 2 3 4 5 6 7 8 9 0</span></div><div><span \nclass="animate d3">1 2 3 4 5 6 7 8 9 0</span></div><div><span class="animate d4">1 2 3 4 5 6 7 8 9 0</span></div><div>\n<span class="animate d5">1 2 3 4 5 6 7 8 9 0</span></div></div><span ng-hide="legend.currentSpin === 20">\n{{legend.resultTables.Third[3]}}</span></div><div flex="33" class="padding-4" layout="row" layout-align="center"><div \nclass="spin" ng-show="legend.currentSpin === 19"><div><span class="animate d1">1 2 3 4 5 6 7 8 9 0</span></div><div>\n<span class="animate d2">1 2 3 4 5 6 7 8 9 0</span></div><div><span class="animate d3">1 2 3 4 5 6 7 8 9 0</span></div>\n<div><span class="animate d4">1 2 3 4 5 6 7 8 9 0</span></div><div><span class="animate d5">1 2 3 4 5 6 7 8 9 0</span>\n</div></div><span ng-hide="legend.currentSpin === 19">{{legend.resultTables.Third[4]}}</span></div><div flex="33" \nclass="padding-4" layout="row" layout-align="center"><div class="spin" ng-show="legend.currentSpin === 18"><div><span \nclass="animate d1">1 2 3 4 5 6 7 8 9 0</span></div><div><span class="animate d2">1 2 3 4 5 6 7 8 9 0</span></div><div>\n<span class="animate d3">1 2 3 4 5 6 7 8 9 0</span></div><div><span class="animate d4">1 2 3 4 5 6 7 8 9 0</span></div>\n<div><span class="animate d5">1 2 3 4 5 6 7 8 9 0</span></div></div><span ng-hide="legend.currentSpin === 18">\n{{legend.resultTables.Third[5]}}</span></div></div></div></td></tr><tr><td>G4</td><td><div layout="row"><div flex="25" \nclass="padding-4" layout="row" layout-align="center"><div class="spin" ng-show="legend.currentSpin === 17"><div><span \nclass="animate d1">1 2 3 4 5 6 7 8 9 0</span></div><div><span class="animate d2">1 2 3 4 5 6 7 8 9 0</span></div><div>\n<span class="animate d3">1 2 3 4 5 6 7 8 9 0</span></div><div><span class="animate d4">1 2 3 4 5 6 7 8 9 0</span></div>\n</div><span ng-hide="legend.currentSpin === 17">{{legend.resultTables.Fourth[0]}}</span></div><div flex="25" \nclass="padding-4" layout="row" layout-align="center"><div class="spin" ng-show="legend.currentSpin === 16"><div><span \nclass="animate d1">1 2 3 4 5 6 7 8 9 0</span></div><div><span class="animate d2">1 2 3 4 5 6 7 8 9 0</span></div><div>\n<span class="animate d3">1 2 3 4 5 6 7 8 9 0</span></div><div><span class="animate d4">1 2 3 4 5 6 7 8 9 0</span></div>\n</div><span ng-hide="legend.currentSpin === 16">{{legend.resultTables.Fourth[1]}}</span></div><div flex="25" \nclass="padding-4" layout="row" layout-align="center"><div class="spin" ng-show="legend.currentSpin === 15"><div><span \nclass="animate d1">1 2 3 4 5 6 7 8 9 0</span></div><div><span class="animate d2">1 2 3 4 5 6 7 8 9 0</span></div><div>\n<span class="animate d3">1 2 3 4 5 6 7 8 9 0</span></div><div><span class="animate d4">1 2 3 4 5 6 7 8 9 0</span></div>\n</div><span ng-hide="legend.currentSpin === 15">{{legend.resultTables.Fourth[2]}}</span></div><div flex="25" \nclass="padding-4" layout="row" layout-align="center"><div class="spin" ng-show="legend.currentSpin === 14"><div><span \nclass="animate d1">1 2 3 4 5 6 7 8 9 0</span></div><div><span class="animate d2">1 2 3 4 5 6 7 8 9 0</span></div><div>\n<span class="animate d3">1 2 3 4 5 6 7 8 9 0</span></div><div><span class="animate d4">1 2 3 4 5 6 7 8 9 0</span></div>\n</div><span ng-hide="legend.currentSpin === 14">{{legend.resultTables.Fourth[3]}}</span></div></div></td></tr><tr><td>G5\n</td><td><div layout="column" class="double"><div layout="row" flex="100"><div flex="33" class="padding-4" layout="row" \nlayout-align="center"><div class="spin" ng-show="legend.currentSpin === 13"><div><span class="animate d1">\n1 2 3 4 5 6 7 8 9 0</span></div><div><span class="animate d2">1 2 3 4 5 6 7 8 9 0</span></div><div><span \nclass="animate d3">1 2 3 4 5 6 7 8 9 0</span></div><div><span class="animate d4">1 2 3 4 5 6 7 8 9 0</span></div></div>\n<span ng-hide="legend.currentSpin === 13">{{legend.resultTables.Fifth[0]}}</span></div><div flex="33" class="padding-4" \nlayout="row" layout-align="center"><div class="spin" ng-show="legend.currentSpin === 12"><div><span class="animate d1">\n1 2 3 4 5 6 7 8 9 0</span></div><div><span class="animate d2">1 2 3 4 5 6 7 8 9 0</span></div><div><span \nclass="animate d3">1 2 3 4 5 6 7 8 9 0</span></div><div><span class="animate d4">1 2 3 4 5 6 7 8 9 0</span></div></div>\n<span ng-hide="legend.currentSpin === 12">{{legend.resultTables.Fifth[1]}}</span></div><div flex="33" class="padding-4" \nlayout="row" layout-align="center"><div class="spin" ng-show="legend.currentSpin === 11"><div><span class="animate d1">\n1 2 3 4 5 6 7 8 9 0</span></div><div><span class="animate d2">1 2 3 4 5 6 7 8 9 0</span></div><div><span \nclass="animate d3">1 2 3 4 5 6 7 8 9 0</span></div><div><span class="animate d4">1 2 3 4 5 6 7 8 9 0</span></div></div>\n<span ng-hide="legend.currentSpin === 11">{{legend.resultTables.Fifth[2]}}</span></div></div><div layout="row" \nflex="100"><div flex="33" class="padding-4" layout="row" layout-align="center"><div class="spin" \nng-show="legend.currentSpin === 10"><div><span class="animate d1">1 2 3 4 5 6 7 8 9 0</span></div><div><span \nclass="animate d2">1 2 3 4 5 6 7 8 9 0</span></div><div><span class="animate d3">1 2 3 4 5 6 7 8 9 0</span></div><div>\n<span class="animate d4">1 2 3 4 5 6 7 8 9 0</span></div></div><span ng-hide="legend.currentSpin === 10">\n{{legend.resultTables.Fifth[3]}}</span></div><div flex="33" class="padding-4" layout="row" layout-align="center"><div \nclass="spin" ng-show="legend.currentSpin === 9"><div><span class="animate d1">1 2 3 4 5 6 7 8 9 0</span></div><div><span\n class="animate d2">1 2 3 4 5 6 7 8 9 0</span></div><div><span class="animate d3">1 2 3 4 5 6 7 8 9 0</span></div><div>\n<span class="animate d4">1 2 3 4 5 6 7 8 9 0</span></div></div><span ng-hide="legend.currentSpin === 9">\n{{legend.resultTables.Fifth[4]}}</span></div><div flex="33" class="padding-4" layout="row" layout-align="center"><div \nclass="spin" ng-show="legend.currentSpin === 8"><div><span class="animate d1">1 2 3 4 5 6 7 8 9 0</span></div><div><span\n class="animate d2">1 2 3 4 5 6 7 8 9 0</span></div><div><span class="animate d3">1 2 3 4 5 6 7 8 9 0</span></div><div>\n<span class="animate d4">1 2 3 4 5 6 7 8 9 0</span></div></div><span ng-hide="legend.currentSpin === 8">\n{{legend.resultTables.Fifth[5]}}</span></div></div></div></td></tr><tr><td>G6</td><td><div layout="row"><div flex="33" \nclass="padding-4" layout="row" layout-align="center"><div class="spin" ng-show="legend.currentSpin === 7"><div><span \nclass="animate d1">1 2 3 4 5 6 7 8 9 0</span></div><div><span class="animate d2">1 2 3 4 5 6 7 8 9 0</span></div><div>\n<span class="animate d3">1 2 3 4 5 6 7 8 9 0</span></div></div><span ng-hide="legend.currentSpin === 7">\n{{legend.resultTables.Sixth[0]}}</span></div><div flex="33" class="padding-4" layout="row" layout-align="center"><div \nclass="spin" ng-show="legend.currentSpin === 6"><div><span class="animate d1">1 2 3 4 5 6 7 8 9 0</span></div><div><span\n class="animate d2">1 2 3 4 5 6 7 8 9 0</span></div><div><span class="animate d3">1 2 3 4 5 6 7 8 9 0</span></div></div>\n<span ng-hide="legend.currentSpin === 6">{{legend.resultTables.Sixth[1]}}</span></div><div flex="33" class="padding-4" \nlayout="row" layout-align="center"><div class="spin" ng-show="legend.currentSpin === 5"><div><span class="animate d1">\n1 2 3 4 5 6 7 8 9 0</span></div><div><span class="animate d2">1 2 3 4 5 6 7 8 9 0</span></div><div><span \nclass="animate d3">1 2 3 4 5 6 7 8 9 0</span></div></div><span ng-hide="legend.currentSpin === 5">\n{{legend.resultTables.Sixth[2]}}</span></div></div></td></tr><tr><td>G7</td><td><div layout="row"><div flex="25" \nclass="padding-4" layout="row" layout-align="center"><div class="spin" ng-show="legend.currentSpin === 4"><div><span \nclass="animate d1">1 2 3 4 5 6 7 8 9 0</span></div><div><span class="animate d2">1 2 3 4 5 6 7 8 9 0</span></div></div>\n<span ng-hide="legend.currentSpin === 4">{{legend.resultTables.Seventh[0]}}</span></div><div flex="25" \nclass="padding-4" layout="row" layout-align="center"><div class="spin" ng-show="legend.currentSpin === 3"><div><span \nclass="animate d1">1 2 3 4 5 6 7 8 9 0</span></div><div><span class="animate d2">1 2 3 4 5 6 7 8 9 0</span></div></div>\n<span ng-hide="legend.currentSpin === 3">{{legend.resultTables.Seventh[1]}}</span></div><div flex="25" \nclass="padding-4" layout="row" layout-align="center"><div class="spin" ng-show="legend.currentSpin === 2"><div><span \nclass="animate d1">1 2 3 4 5 6 7 8 9 0</span></div><div><span class="animate d2">1 2 3 4 5 6 7 8 9 0</span></div></div>\n<span ng-hide="legend.currentSpin === 2">{{legend.resultTables.Seventh[2]}}</span></div><div flex="25" \nclass="padding-4" layout="row" layout-align="center"><div class="spin" ng-show="legend.currentSpin === 1"><div><span \nclass="animate d1">1 2 3 4 5 6 7 8 9 0</span></div><div><span class="animate d2">1 2 3 4 5 6 7 8 9 0</span></div></div>\n<span ng-hide="legend.currentSpin === 1">{{legend.resultTables.Seventh[3]}}</span></div></div></td></tr></tbody></table>');
$templateCache.put('app/main/legendary/result.template/southern.html','<table class="table southward" cellspacing="0"><tbody><tr><td>G8</td><td><div class="padding-4" layout="row" \nlayout-align="center"><div class="spin" ng-show="legend.currentSpin === 17"><div><span class="animate d1">\n1 2 3 4 5 6 7 8 9 0</span></div><div><span class="animate d2">1 2 3 4 5 6 7 8 9 0</span></div></div><span \nng-hide="legend.currentSpin === 17">{{legend.resultTables.Eighth}}</span></div></td></tr><tr><td>G7</td><td><div \nclass="padding-4" layout="row" layout-align="center"><div class="spin" ng-show="legend.currentSpin === 16"><div><span \nclass="animate d1">1 2 3 4 5 6 7 8 9 0</span></div><div><span class="animate d2">1 2 3 4 5 6 7 8 9 0</span></div><div>\n<span class="animate d3">1 2 3 4 5 6 7 8 9 0</span></div></div><span ng-hide="legend.currentSpin === 16">\n{{legend.resultTables.Seventh}}</span></div></td></tr><tr><td>G6</td><td><div layout="row" class="padding-4"><div \nflex="33" layout="row" layout-align="center"><div class="spin" ng-show="legend.currentSpin === 15"><div><span \nclass="animate d1">1 2 3 4 5 6 7 8 9 0</span></div><div><span class="animate d2">1 2 3 4 5 6 7 8 9 0</span></div><div>\n<span class="animate d3">1 2 3 4 5 6 7 8 9 0</span></div><div><span class="animate d4">1 2 3 4 5 6 7 8 9 0</span></div>\n</div><span ng-hide="legend.currentSpin === 15">{{legend.resultTables.Sixth[0]}}</span></div><div flex="33" \nlayout="row" layout-align="center"><div class="spin" ng-show="legend.currentSpin === 14"><div><span class="animate d1">\n1 2 3 4 5 6 7 8 9 0</span></div><div><span class="animate d2">1 2 3 4 5 6 7 8 9 0</span></div><div><span \nclass="animate d3">1 2 3 4 5 6 7 8 9 0</span></div><div><span class="animate d4">1 2 3 4 5 6 7 8 9 0</span></div></div>\n<span ng-hide="legend.currentSpin === 14">{{legend.resultTables.Sixth[1]}}</span></div><div flex="33" layout="row" \nlayout-align="center"><div class="spin" ng-show="legend.currentSpin === 13"><div><span class="animate d1">\n1 2 3 4 5 6 7 8 9 0</span></div><div><span class="animate d2">1 2 3 4 5 6 7 8 9 0</span></div><div><span \nclass="animate d3">1 2 3 4 5 6 7 8 9 0</span></div><div><span class="animate d4">1 2 3 4 5 6 7 8 9 0</span></div></div>\n<span ng-hide="legend.currentSpin === 13">{{legend.resultTables.Sixth[2]}}</span></div></div></td></tr><tr><td>G5</td>\n<td><div class="padding-4" layout="row" layout-align="center"><div class="spin" ng-show="legend.currentSpin === 12">\n<div><span class="animate d1">1 2 3 4 5 6 7 8 9 0</span></div><div><span class="animate d2">1 2 3 4 5 6 7 8 9 0</span>\n</div><div><span class="animate d3">1 2 3 4 5 6 7 8 9 0</span></div><div><span class="animate d4">1 2 3 4 5 6 7 8 9 0\n</span></div></div><span ng-hide="legend.currentSpin === 12">{{legend.resultTables.Fifth}}</span></div></td></tr><tr>\n<td>G4</td><td><div layout="row" class="padding-4 double" layout-wrap><div flex="33" layout="row" layout-align="center">\n<div class="spin" ng-show="legend.currentSpin === 11"><div><span class="animate d1">1 2 3 4 5 6 7 8 9 0</span></div>\n<div><span class="animate d2">1 2 3 4 5 6 7 8 9 0</span></div><div><span class="animate d3">1 2 3 4 5 6 7 8 9 0</span>\n</div><div><span class="animate d4">1 2 3 4 5 6 7 8 9 0</span></div><div><span class="animate d5">1 2 3 4 5 6 7 8 9 0\n</span></div></div><span ng-hide="legend.currentSpin === 11">{{legend.resultTables.Fourth[0]}}</span></div><div \nflex="33" layout="row" layout-align="center"><div class="spin" ng-show="legend.currentSpin === 10"><div><span \nclass="animate d1">1 2 3 4 5 6 7 8 9 0</span></div><div><span class="animate d2">1 2 3 4 5 6 7 8 9 0</span></div><div>\n<span class="animate d3">1 2 3 4 5 6 7 8 9 0</span></div><div><span class="animate d4">1 2 3 4 5 6 7 8 9 0</span></div>\n<div><span class="animate d5">1 2 3 4 5 6 7 8 9 0</span></div></div><span ng-hide="legend.currentSpin === 10">\n{{legend.resultTables.Fourth[1]}}</span></div><div flex="33" layout="row" layout-align="center"><div class="spin" \nng-show="legend.currentSpin === 9"><div><span class="animate d1">1 2 3 4 5 6 7 8 9 0</span></div><div><span \nclass="animate d2">1 2 3 4 5 6 7 8 9 0</span></div><div><span class="animate d3">1 2 3 4 5 6 7 8 9 0</span></div><div>\n<span class="animate d4">1 2 3 4 5 6 7 8 9 0</span></div><div><span class="animate d5">1 2 3 4 5 6 7 8 9 0</span></div>\n</div><span ng-hide="legend.currentSpin === 9">{{legend.resultTables.Fourth[2]}}</span></div><div flex="33" \nlayout="row" layout-align="center"><div class="spin" ng-show="legend.currentSpin === 8"><div><span class="animate d1">\n1 2 3 4 5 6 7 8 9 0</span></div><div><span class="animate d2">1 2 3 4 5 6 7 8 9 0</span></div><div><span \nclass="animate d3">1 2 3 4 5 6 7 8 9 0</span></div><div><span class="animate d4">1 2 3 4 5 6 7 8 9 0</span></div><div>\n<span class="animate d5">1 2 3 4 5 6 7 8 9 0</span></div></div><span ng-hide="legend.currentSpin === 8">\n{{legend.resultTables.Fourth[3]}}</span></div><div flex="33" layout="row" layout-align="center"><div class="spin" \nng-show="legend.currentSpin === 7"><div><span class="animate d1">1 2 3 4 5 6 7 8 9 0</span></div><div><span \nclass="animate d2">1 2 3 4 5 6 7 8 9 0</span></div><div><span class="animate d3">1 2 3 4 5 6 7 8 9 0</span></div><div>\n<span class="animate d4">1 2 3 4 5 6 7 8 9 0</span></div><div><span class="animate d5">1 2 3 4 5 6 7 8 9 0</span></div>\n</div><span ng-hide="legend.currentSpin === 7">{{legend.resultTables.Fourth[4]}}</span></div><div flex="33" \nlayout="row" layout-align="center"><div class="spin" ng-show="legend.currentSpin === 6"><div><span class="animate d1">\n1 2 3 4 5 6 7 8 9 0</span></div><div><span class="animate d2">1 2 3 4 5 6 7 8 9 0</span></div><div><span \nclass="animate d3">1 2 3 4 5 6 7 8 9 0</span></div><div><span class="animate d4">1 2 3 4 5 6 7 8 9 0</span></div><div>\n<span class="animate d5">1 2 3 4 5 6 7 8 9 0</span></div></div><span ng-hide="legend.currentSpin === 6">\n{{legend.resultTables.Fourth[5]}}</span></div><div flex="100" layout="row" layout-align="center"><div class="spin" \nng-show="legend.currentSpin === 5"><div><span class="animate d1">1 2 3 4 5 6 7 8 9 0</span></div><div><span \nclass="animate d2">1 2 3 4 5 6 7 8 9 0</span></div><div><span class="animate d3">1 2 3 4 5 6 7 8 9 0</span></div><div>\n<span class="animate d4">1 2 3 4 5 6 7 8 9 0</span></div><div><span class="animate d5">1 2 3 4 5 6 7 8 9 0</span></div>\n</div><span ng-hide="legend.currentSpin === 5">{{legend.resultTables.Fourth[6]}}</span></div></div></td></tr><tr><td>G3\n</td><td><div layout="row" class="padding-4"><div flex="50" layout="row" layout-align="center"><div class="spin" \nng-show="legend.currentSpin === 4"><div><span class="animate d1">1 2 3 4 5 6 7 8 9 0</span></div><div><span \nclass="animate d2">1 2 3 4 5 6 7 8 9 0</span></div><div><span class="animate d3">1 2 3 4 5 6 7 8 9 0</span></div><div>\n<span class="animate d4">1 2 3 4 5 6 7 8 9 0</span></div><div><span class="animate d5">1 2 3 4 5 6 7 8 9 0</span></div>\n</div><span ng-hide="legend.currentSpin === 4">{{legend.resultTables.Third[0]}}</span></div><div flex="50" layout="row" \nlayout-align="center"><div class="spin" ng-show="legend.currentSpin === 3"><div><span class="animate d1">\n1 2 3 4 5 6 7 8 9 0</span></div><div><span class="animate d2">1 2 3 4 5 6 7 8 9 0</span></div><div><span \nclass="animate d3">1 2 3 4 5 6 7 8 9 0</span></div><div><span class="animate d4">1 2 3 4 5 6 7 8 9 0</span></div><div>\n<span class="animate d5">1 2 3 4 5 6 7 8 9 0</span></div></div><span ng-hide="legend.currentSpin === 3">\n{{legend.resultTables.Third[1]}}</span></div></div></td></tr><tr><td>G2</td><td><div class="padding-4" layout="row" \nlayout-align="center"><div class="spin" ng-show="legend.currentSpin === 2"><div><span class="animate d1">\n1 2 3 4 5 6 7 8 9 0</span></div><div><span class="animate d2">1 2 3 4 5 6 7 8 9 0</span></div><div><span \nclass="animate d3">1 2 3 4 5 6 7 8 9 0</span></div><div><span class="animate d4">1 2 3 4 5 6 7 8 9 0</span></div><div>\n<span class="animate d5">1 2 3 4 5 6 7 8 9 0</span></div></div><span ng-hide="legend.currentSpin === 2">\n{{legend.resultTables.Second}}</span></div></td></tr><tr><td>G1</td><td><div class="padding-4" layout="row" \nlayout-align="center"><div class="spin" ng-show="legend.currentSpin === 1"><div><span class="animate d1">\n1 2 3 4 5 6 7 8 9 0</span></div><div><span class="animate d2">1 2 3 4 5 6 7 8 9 0</span></div><div><span \nclass="animate d3">1 2 3 4 5 6 7 8 9 0</span></div><div><span class="animate d4">1 2 3 4 5 6 7 8 9 0</span></div><div>\n<span class="animate d5">1 2 3 4 5 6 7 8 9 0</span></div></div><span ng-hide="legend.currentSpin === 1">\n{{legend.resultTables.First}}</span></div></td></tr><tr class="jackpot"><td>\u0110B</td><td><div class="padding-4" \nlayout="row" layout-align="center"><div class="spin" ng-show="legend.currentSpin === 0"><div><span class="animate d1">\n1 2 3 4 5 6 7 8 9 0</span></div><div><span class="animate d2">1 2 3 4 5 6 7 8 9 0</span></div><div><span \nclass="animate d3">1 2 3 4 5 6 7 8 9 0</span></div><div><span class="animate d4">1 2 3 4 5 6 7 8 9 0</span></div><div>\n<span class="animate d5">1 2 3 4 5 6 7 8 9 0</span></div><div><span class="animate d3">1 2 3 4 5 6 7 8 9 0</span></div>\n</div><span ng-hide="legend.currentSpin === 0">{{legend.resultTables.Jackpot}}</span></div></td></tr></tbody></table>');
$templateCache.put('app/main/legendary/menu/menu.html','<ms-lottery class="scrollable" folded="vm.folded" ms-scroll="vm.msScrollOptions"></ms-lottery><div id="recent-betting" \nng-show="legend.legendLatestTicketsArr.length"><md-list class="recent-tickets"><md-subheader class="md-no-sticky"><div \nlayout="row" layout-align="space-between center"><a ui-sref="app.account.bet-list.legendary">M\xE3 c\u01B0\u1EE3c g\u1EA7n \u0111\xE2y</a>\n<md-button class="md-icon-button" ng-click="legend.legendUpdateRecentTickets()"><md-icon md-font-icon="icon-refresh" \nclass="s20" ng-class="{\'rotating\' : legend.legendUpdatingTickets }"></md-icon></md-button></div></md-subheader><div \nng-repeat="ticket in legend.legendLatestTicketsArr | limitTo: 5 track by $index" \nng-class="{\'show\' : vm.showItem === $index}"><md-list-item class="ticket md-2-line" ng-click="vm.showItem = $index" \nmd-no-ink><md-icon md-font-icon="icon-plus" class="s16 status" ng-if="vm.showItem !== $index"></md-icon><md-icon \nmd-font-icon="icon-minus" class="s16 status" ng-if="vm.showItem === $index"></md-icon><div class="md-list-item-text">\n<h4>{{ticket.TicketNumber}}</h4></div><div class="amount">{{ ticket.Amount | currency : \'\' : 0 }}</div></md-list-item>\n<div ng-hide="vm.showItem !== $index" class="ticket-content"><div layout="column" class="padding-8"><div layout="row" \nclass="padding-top-8"><div flex class="sub-title sub-header">\n{{ticket.BetType | bet : false : ticket.GameType }} - {{ticket.GameType | legendGame }}</div></div><div layout="row" \nclass="padding-top-16"><div flex class="sub-title">Danh s\xE1ch: <span>{{ ticket.Numbers | joinArr }}</span></div></div>\n<div layout="row" class="padding-top-16"><div flex="40" class="sub-title">T\u1ED5ng \u0111i\u1EC3m</div><div flex="60" \nclass="text-right">{{ticket.Point | currency : \'\' : 0}}</div></div><div layout="row" class="padding-top-16"><div \nflex="40" class="sub-title">Th\xE0nh ti\u1EC1n</div><div flex="60" class="text-right">{{ticket.Amount | currency : \'\' : 0}}\n</div></div><div layout="row" class="padding-top-16" \nng-if="ticket.BetType === 20 || ticket.BetType === 26 || ticket.BetType === 27 || ticket.BetType === 28"><div flex="40" \nclass="sub-title">S\u1ED1 gi\u1EA3i c\xF2n l\u1EA1i</div><div flex="60" class="text-right text-red" ng-if="ticket.BetType !== 26">\n{{ticket.PrizeNr}}</div><div flex="60" class="text-right text-red" ng-if="ticket.BetType === 26">{{ticket.PrizeNr-4}}\n</div></div></div></div></div></md-list></div>');
$templateCache.put('app/quick-panel/tabs/activity/activity-tab.html','<md-list class="friends"><md-subheader class="md-no-sticky"><span translate="QUICKPANEL.FRIENDS">Friends</span>\n</md-subheader><md-list-item class="friend md-3-line" ng-repeat="friend in vm.activities.friends"><img \nng-src="{{friend.avatar}}" class="md-avatar" alt="{{friend.name}}"><div class="status {{friend.status}}"></div><div \nng-if="contact.unread" class="md-accent-bg unread-message-count">{{contact.unread}}</div><div class="md-list-item-text">\n<h3 class="message">{{friend.message}}</h3><p class="time">{{friend.time}}</p></div></md-list-item></md-list>\n<md-divider></md-divider><md-list class="servers"><md-subheader class="md-no-sticky"><span \ntranslate="QUICKPANEL.APP_SERVERS">Application Servers</span></md-subheader><md-list-item class="server md-3-line" \nng-repeat="server in vm.activities.servers"><md-icon md-font-icon="icon-checkbox-blank-circle" class="s16 status" \nng-class="server.status"></md-icon><div class="md-list-item-text"><h3>{{server.location}}</h3><p>{{server.detail}}</p>\n</div></md-list-item></md-list><md-divider></md-divider><md-list class="stats"><md-subheader class="md-no-sticky"><span \ntranslate="QUICKPANEL.USER_STATS">User Stats</span></md-subheader><md-list-item class="stat md-2-line" \nng-repeat="stat in vm.activities.stats"><div class="md-list-item-text"><span>\n{{stat.title}} ({{stat.current}} / {{stat.total}})</span><md-progress-linear ng-class="stat.status" \nmd-mode="determinate" value="{{stat.percent}}"></md-progress-linear></div></md-list-item></md-list>');
$templateCache.put('app/quick-panel/tabs/chat/chat-tab.html','<div class="main animate-slide-left" ng-hide="vm.chatActive"><md-list class="recent"><md-subheader class="md-no-sticky">\n<span translate="QUICKPANEL.RECENT">Recent</span></md-subheader><md-list-item class="contact md-3-line" \nng-repeat="contact in vm.contacts.recent" ng-click="vm.toggleChat(contact)"><img ng-src="{{contact.avatar}}" \nclass="md-avatar" alt="{{contact.name}}"><div class="status {{contact.status}}"></div><div ng-if="contact.unread" \nclass="md-accent-bg unread-message-count">{{contact.unread}}</div><div class="md-list-item-text"><h3>{{contact.name}}\n</h3><p class="last-message">{{contact.lastMessage}}</p></div></md-list-item></md-list><md-divider></md-divider><md-list\n class="all"><md-subheader class="md-no-sticky"><span translate="QUICKPANEL.START_NEW_CHAT">Start New Chat</span>\n</md-subheader><md-list-item class="contact" ng-repeat="contact in vm.contacts.all" ng-click="vm.toggleChat(contact)">\n<img ng-src="{{contact.avatar}}" class="md-avatar" alt="{{contact.name}}"><div class="status {{contact.status}}"></div>\n<div class="md-list-item-text"><h3>{{contact.name}}</h3></div></md-list-item></md-list><md-divider></md-divider></div>\n<div class="chat animate-slide-right" ng-show="vm.chatActive" layout="column"><md-toolbar class="md-accent"><div \nclass="md-toolbar-tools" layout="row" layout-align="space-between center"><div layout="row" layout-align="start center">\n<md-button class="md-icon-button" ng-click="vm.toggleChat()" aria-label="Back" translate \ntranslate-attr-aria-label="QUICKPANEL.BACK"><md-icon md-font-icon="icon-keyboard-backspace"></md-icon></md-button><h4>\n<span>{{vm.chat.contact.name}}</span></h4></div><div layout="row" layout-align="end center"><md-button \nclass="md-icon-button" aria-label="Call" translate translate-attr-aria-label="QUICKPANEL.CALL"><md-icon \nmd-font-icon="icon-phone"></md-icon></md-button><md-button class="md-icon-button" aria-label="More" translate \ntranslate-attr-aria-label="QUICKPANEL.MORE"><md-icon md-font-icon="icon-dots-vertical"></md-icon></md-button></div>\n</div></md-toolbar><md-content flex layout-paddings ms-scroll id="chat-dialog"><div layout="row" \nng-repeat="dialog in vm.chat.contact.dialog" class="md-padding message-row" ng-class="dialog.who"><img \nng-if="dialog.who ===\'contact\'" ng-src="{{vm.chat.contact.avatar}}" class="avatar" alt="{{vm.chat.contact.name}}"> <img \nng-if="dialog.who ===\'user\'" class="avatar" src="assets/images/avatars/profile.jpg"><div class="bubble" flex><div \nclass="message">{{dialog.message}}</div><div class="time secondary-text">{{dialog.time}}</div></div></div></md-content>\n<form ng-submit="vm.reply()" layout="row" class="reply" layout-align="start center"><textarea \nng-keyup="$event.keyCode == 13 ? vm.reply() : null" flex ng-model="vm.replyMessage" \nplaceholder="Type and hit enter to send message" translate translate-attr-placeholder="QUICKPANEL.REPLY_PLACEHOLDER">\n</textarea><md-button class="md-fab md-mini" type="submit" aria-label="Send message" translate \ntranslate-attr-aria-label="QUICKPANEL.SEND_MESSAGE"><md-icon md-font-icon="icon-send" class="s16"></md-icon></md-button>\n</form></div>');
$templateCache.put('app/quick-panel/tabs/today/today-tab.html','<md-list class="date"><md-subheader class="md-no-sticky"><span translate="QUICKPANEL.TODAY">Today</span></md-subheader>\n<md-list-item class="md-display-1 md-2-line"><div class="secondary-text"><div>{{vm.date | date:\'EEEE\'}}</div><div \nlayout="row" layout-align="start start"><span>{{vm.date | date:\'d\'}}</span> <span class="md-subhead">th</span> <span>\n{{vm.date | date:\'MMMM\'}}</span></div></div></md-list-item></md-list><md-divider></md-divider><md-list><md-subheader \nclass="md-no-sticky"><span translate="QUICKPANEL.EVENTS">Events</span></md-subheader><md-list-item class="md-2-line" \nng-repeat="event in vm.events" ng-click="dummyFunction()"><div class="md-list-item-text"><h3>{{event.title}}</h3><p>\n{{event.detail}}</p></div></md-list-item></md-list><md-divider></md-divider><md-list><md-subheader class="md-no-sticky">\n<span translate="QUICKPANEL.NOTES">Notes</span></md-subheader><md-list-item class="md-2-line" \nng-repeat="note in vm.notes" ng-click="dummyFunction()"><div class="md-list-item-text"><h3>{{note.title}}</h3><p>\n{{note.detail}}</p></div></md-list-item></md-list><md-divider></md-divider><md-list><md-subheader class="md-no-sticky">\n<span translate="QUICKPANEL.QUICK_SETTINGS">Quick Settings</span></md-subheader><md-list-item><h3 \ntranslate="QUICKPANEL.NOTIFICATIONS">Notifications</h3><md-switch class="md-secondary" ng-model="vm.settings.notify" \naria-label="Notifications" translate translate-attr-aria-label="QUICKPANEL.NOTIFICATIONS"></md-switch></md-list-item>\n<md-list-item><h3 translate="QUICKPANEL.CLOUD_SYNC">Cloud Sync</h3><md-switch class="md-secondary" \nng-model="vm.settings.cloud" aria-label="Cloud Sync" translate translate-attr-aria-label="QUICKPANEL.CLOUD_SYNC">\n</md-switch></md-list-item><md-list-item><h3 translate="QUICKPANEL.RETRO_THRUSTERS">Retro Thrusters</h3><md-switch \nclass="md-secondary md-warn" ng-model="vm.settings.retro" aria-label="Retro Thrusters" translate \ntranslate-attr-aria-label="QUICKPANEL.RETRO_THRUSTERS"></md-switch></md-list-item></md-list>');
$templateCache.put('app/main/results/legendary/legendary.result.html','<div id="results" class="page-layout simple fullwidth" layout="row"><div class="calendar" \nng-hide="$mdMedia(\'max-width: 768px\')"><div class="md-whiteframe-4dp"><md-calendar ng-model="vm.date" \nng-change="vm.changeDate()"></md-calendar><div class="not-ready" layout="row" layout-align="center center" \nng-hide="vm.resultReady"><md-progress-circular class="md-accent" md-diameter="40"></md-progress-circular></div></div>\n</div><div class="content-wrap" layout="column" flex><div ng-show="$mdMedia(\'max-width: 768px\')" \nclass="inline-calendar" layout="row" layout-align="space-between center"><h2>Ch\u1ECDn ng\xE0y</h2><md-datepicker \nng-model="vm.date" ng-change="vm.changeDate()"></md-datepicker></div><md-tabs md-dynamic-height md-border-bottom \nmd-selected="0"><md-tab label="Mi\u1EC1n B\u1EAFc" md-on-select="vm.onTabSelected(0)" ng-disabled="!vm.resultReady"><md-content>\n<div ng-show="vm.results.length === 0" layout-align="start center" class="message"><div class="message-content" \nlayout="column" layout-align="center center"><md-progress-circular ng-show="!vm.resultReady" class="md-accent" \nmd-diameter="48"></md-progress-circular><h2 ng-show="vm.resultReady">Ch\u01B0a c\xF3 k\u1EBFt qu\u1EA3 ng\xE0y <span>\n{{ vm.date | amDateFormat : \'DD/MM/YYYY\' }}</span></h2></div></div><div layout-gt-md="row" layout-wrap layout="column" \nng-show="vm.results.length && vm.resultReady" class="result-wrap"><div class="results-body" flex-gt-md="50" \nng-include="\'app/main/results/legendary/templates/northern.html\'" ng-repeat="item in vm.results"></div></div>\n</md-content></md-tab></md-tabs></div></div>');
$templateCache.put('app/main/results/legendary/watch.video.html','<md-dialog aria-label="One Dialog" class="watch-dialog"><md-toolbar><div class="md-toolbar-tools"><h2>\n\u0110\xE0i {{info.GameType | legendGame}} k\u1EF3 {{ info.Term }}</h2><span flex></span><md-button class="md-icon-button" \nng-click="cancel()"><md-icon md-font-icon="icon-close"></md-icon></md-button></div></md-toolbar><md-dialog-content><div \nclass="md-dialog-content"><video controls autoplay="autoplay" muted="muted">Your browser does not support the video tag.\n</video></div></md-dialog-content></md-dialog>');
$templateCache.put('app/main/results/traditional/traditional.results.html','<div id="results" class="page-layout simple fullwidth" layout="row"><div class="calendar" \nng-hide="$mdMedia(\'max-width: 768px\')"><div class="md-whiteframe-4dp"><md-calendar ng-model="vm.date" \nng-change="vm.changeDate()"></md-calendar><div class="not-ready" layout="row" layout-align="center center" \nng-hide="vm.resultReady"><md-progress-circular class="md-accent" md-diameter="40"></md-progress-circular></div></div>\n</div><div class="content-wrap" layout-gt-md="row" layout="column" flex><div ng-show="$mdMedia(\'max-width: 768px\')" \nclass="inline-calendar" layout="row" layout-align="space-between center"><h2>Ch\u1ECDn ng\xE0y</h2><md-datepicker \nng-model="vm.date" ng-change="vm.changeDate()"></md-datepicker></div><div ng-show="vm.results.length === 0" flex="100" \nlayout="column" layout-align="start center" class="message"><div \nclass="message-content md-whiteframe-1dp md-primary-bg" layout="column" layout-align="center center">\n<md-progress-circular ng-show="!vm.resultReady" class="md-accent" md-diameter="48"></md-progress-circular><h2 \nng-show="vm.resultReady">Ch\u01B0a c\xF3 k\u1EBFt qu\u1EA3 ng\xE0y <span>{{ vm.date | amDateFormat : \'DD/MM/YYYY\' }}</span></h2></div></div>\n<div class="results-body" flex-gt-md="50" ng-if="vm.results.length"><div \nclass="results-table md-whiteframe-1dp md-primary-bg" layout="column"><div class="text-label">\nK\u1EBFt qu\u1EA3 x\u1ED5 s\u1ED1 Mi\u1EC1n B\u1EAFc ng\xE0y {{ vm.date | amDateFormat : \'DD/MM/YYYY\' }}</div><div layout="row"><div flex="70"><table \nclass="table" cellspacing="0"><tbody><tr><td>TT</td><td><div class="padding-8">{{vm.caishen.Result}}</div></td></tr><tr \nclass="jackpot"><td>\u0110B</td><td><div class="padding-8">{{vm.north.Jackpot}}</div></td></tr><tr><td>G1</td><td><div \nclass="padding-8">{{vm.north.First}}</div></td></tr><tr><td>G2</td><td><div layout="row"><div flex="50" \nclass="padding-8">{{vm.north.Second[0]}}</div><div flex="50" class="padding-8">{{vm.north.Second[1]}}</div></div></td>\n</tr><tr><td>G3</td><td><div layout="column" class="double"><div layout="row" flex="100"><div flex="33" \nclass="padding-8">{{vm.north.Third[0]}}</div><div flex="33" class="padding-8">{{vm.north.Third[1]}}</div><div flex="33" \nclass="padding-8">{{vm.north.Third[2]}}</div></div><div layout="row" flex="100"><div flex="33" class="padding-8">\n{{vm.north.Third[3]}}</div><div flex="33" class="padding-8">{{vm.north.Third[4]}}</div><div flex="33" class="padding-8">\n{{vm.north.Third[5]}}</div></div></div></td></tr><tr><td>G4</td><td><div layout="row"><div flex="25" class="padding-8">\n{{vm.north.Fourth[0]}}</div><div flex="25" class="padding-8">{{vm.north.Fourth[1]}}</div><div flex="25" \nclass="padding-8">{{vm.north.Fourth[2]}}</div><div flex="25" class="padding-8">{{vm.north.Fourth[3]}}</div></div></td>\n</tr><tr><td>G5</td><td><div layout="column" class="double"><div layout="row" flex="100"><div flex="33" \nclass="padding-8">{{vm.north.Fifth[0]}}</div><div flex="33" class="padding-8">{{vm.north.Fifth[1]}}</div><div flex="33" \nclass="padding-8">{{vm.north.Fifth[2]}}</div></div><div layout="row" flex="100"><div flex="33" class="padding-8">\n{{vm.north.Fifth[3]}}</div><div flex="33" class="padding-8">{{vm.north.Fifth[4]}}</div><div flex="33" class="padding-8">\n{{vm.north.Fifth[5]}}</div></div></div></td></tr><tr><td>G6</td><td><div layout="row"><div flex="33" class="padding-8">\n{{vm.north.Sixth[0]}}</div><div flex="33" class="padding-8">{{vm.north.Sixth[1]}}</div><div flex="33" class="padding-8">\n{{vm.north.Sixth[2]}}</div></div></td></tr><tr><td>G7</td><td><div layout="row"><div flex="25" class="padding-8">\n{{vm.north.Seventh[0]}}</div><div flex="25" class="padding-8">{{vm.north.Seventh[1]}}</div><div flex="25" \nclass="padding-8">{{vm.north.Seventh[2]}}</div><div flex="25" class="padding-8">{{vm.north.Seventh[3]}}</div></div></td>\n</tr></tbody></table></div><div flex="30"><table class="table matrix" cellspacing="0"><tbody><tr><td class="p9">\u0110\u1EA7u</td>\n<td>\u0110u\xF4i</td></tr><tr ng-repeat="(key, arr) in vm.matrix"><td><div>{{key}}</div></td><td><span ng-repeat="item in arr" \nng-class="{\'jack\': item.jack}">{{item.value}}</span></td></tr></tbody></table></div></div><div class="choose-range">\n</div></div></div><div class="results-body" flex-gt-md="50" ng-if="vm.results.length"><div \nclass="results-table md-whiteframe-1dp md-primary-bg"><div class="text-label">\nK\u1EBFt qu\u1EA3 x\u1ED5 s\u1ED1 Mi\u1EC1n Nam ng\xE0y {{ vm.date | amDateFormat : \'DD/MM/YYYY\' }}</div><table class="table southward" \ncellspacing="0"><thead><tr><th></th><th>{{vm.southA.CityName}}</th><th>{{vm.southB.CityName}}</th><th>\n{{vm.southC.CityName}}</th></tr></thead><tbody><tr><td>G8</td><td class="padding-8">{{vm.southA.Eighth}}</td><td \nclass="padding-8">{{vm.southB.Eighth}}</td><td class="padding-8">{{vm.southC.Eighth}}</td></tr><tr><td>G7</td><td \nclass="padding-8">{{vm.southA.Seventh}}</td><td class="padding-8">{{vm.southB.Seventh}}</td><td class="padding-8">\n{{vm.southC.Seventh}}</td></tr><tr><td>G6</td><td class="padding-8"><div layout="column"><div>{{vm.southA.Sixth[0]}}\n</div><div>{{vm.southA.Sixth[1]}}</div><div>{{vm.southA.Sixth[2]}}</div></div></td><td class="padding-8"><div \nlayout="column"><div>{{vm.southB.Sixth[0]}}</div><div>{{vm.southB.Sixth[1]}}</div><div>{{vm.southB.Sixth[2]}}</div>\n</div></td><td class="padding-8"><div layout="column"><div>{{vm.southC.Sixth[0]}}</div><div>{{vm.southC.Sixth[1]}}</div>\n<div>{{vm.southC.Sixth[2]}}</div></div></td></tr><tr><td>G5</td><td class="padding-8">{{vm.southA.Fifth}}</td><td \nclass="padding-8">{{vm.southB.Fifth}}</td><td class="padding-8">{{vm.southC.Fifth}}</td></tr><tr><td>G4</td><td \nclass="padding-8"><div layout="column"><div>{{vm.southA.Fourth[0]}}</div><div>{{vm.southA.Fourth[1]}}</div><div>\n{{vm.southA.Fourth[2]}}</div><div>{{vm.southA.Fourth[3]}}</div><div>{{vm.southA.Fourth[4]}}</div><div>\n{{vm.southA.Fourth[5]}}</div><div>{{vm.southA.Fourth[6]}}</div></div></td><td class="padding-8"><div layout="column">\n<div>{{vm.southB.Fourth[0]}}</div><div>{{vm.southB.Fourth[1]}}</div><div>{{vm.southB.Fourth[2]}}</div><div>\n{{vm.southB.Fourth[3]}}</div><div>{{vm.southB.Fourth[4]}}</div><div>{{vm.southB.Fourth[5]}}</div><div>\n{{vm.southB.Fourth[6]}}</div></div></td><td class="padding-8"><div layout="column"><div>{{vm.southC.Fourth[0]}}</div>\n<div>{{vm.southC.Fourth[1]}}</div><div>{{vm.southC.Fourth[2]}}</div><div>{{vm.southC.Fourth[3]}}</div><div>\n{{vm.southC.Fourth[4]}}</div><div>{{vm.southC.Fourth[5]}}</div><div>{{vm.southC.Fourth[6]}}</div></div></td></tr><tr>\n<td>G3</td><td class="padding-8"><div layout="column"><div>{{vm.southA.Third[0]}}</div><div>{{vm.southA.Third[1]}}</div>\n</div></td><td class="padding-8"><div layout="column"><div>{{vm.southB.Third[0]}}</div><div>{{vm.southB.Third[1]}}</div>\n</div></td><td class="padding-8"><div layout="column"><div>{{vm.southC.Third[0]}}</div><div>{{vm.southC.Third[1]}}</div>\n</div></td></tr><tr><td>G2</td><td class="padding-8">{{vm.southA.Second}}</td><td class="padding-8">{{vm.southB.Second}}\n</td><td class="padding-8">{{vm.southC.Second}}</td></tr><tr><td>G1</td><td class="padding-8">{{vm.southA.First}}</td>\n<td class="padding-8">{{vm.southB.First}}</td><td class="padding-8">{{vm.southC.First}}</td></tr><tr class="jackpot">\n<td>\u0110B</td><td class="padding-8">{{vm.southA.Jackpot}}</td><td class="padding-8">{{vm.southB.Jackpot}}</td><td \nclass="padding-8">{{vm.southC.Jackpot}}</td></tr></tbody></table><table class="table southward south-matrix" \ncellspacing="0"><thead><tr><th>\u0110\u1EA7u</th><th>{{vm.southA.CityName}}</th><th>{{vm.southB.CityName}}</th><th>\n{{vm.southC.CityName}}</th></tr></thead><tbody><tr ng-repeat="(key, arr) in vm.southMatrix"><td><div>{{key}}</div></td>\n<td class="padding-8"><span ng-repeat="item in arr[1]" ng-class="{\'jack\': item.jack}">{{item.value}}</span></td><td \nclass="padding-8"><span ng-repeat="item in arr[2]" ng-class="{\'jack\': item.jack}">{{item.value}}</span></td><td \nclass="padding-8"><span ng-repeat="item in arr[3]" ng-class="{\'jack\': item.jack}">{{item.value}}</span></td></tr>\n</tbody></table></div></div></div></div>');
$templateCache.put('app/toolbar/layouts/content-with-toolbar/toolbar.html','<div layout="row" layout-align="space-between center"><div layout="row" layout-align="start center"><div class="logo" \nlayout="row" layout-align="start center"><span class="logo-image">F</span> <span class="logo-text">FUSE</span></div><div\n class="toolbar-separator"></div><ms-shortcuts></ms-shortcuts><div class="toolbar-separator"></div></div><div \nlayout="row" layout-align="start center"><md-progress-circular id="toolbar-progress" ng-if="$root.loadingProgress" \nclass="md-accent" md-mode="indeterminate" md-diameter="32"></md-progress-circular><div class="toolbar-separator"></div>\n<md-menu-bar id="user-menu"><md-menu md-position-mode="left bottom"><md-button class="user-button" \nng-click="$mdOpenMenu()" aria-label="User settings" translate translate-attr-aria-label="TOOLBAR.USER_SETTINGS"><div \nlayout="row" layout-align="space-between center"><div class="avatar-wrapper"><img md-menu-align-target class="avatar" \nsrc="assets/images/avatars/profile.jpg"><md-icon md-font-icon ng-class="vm.userStatus.icon" \nng-style="{\'color\': vm.userStatus.color }" class="icon status s16"></md-icon></div><span class="username" hide-sm>\nJohn Doe</span><md-icon md-font-icon="icon-chevron-down" class="icon s16" hide-sm></md-icon></div></md-button>\n<md-menu-content width="3"><md-menu-item class="md-indent" ui-sref="app.pages_profile"><md-icon \nmd-font-icon="icon-account" class="icon"></md-icon><md-button>My Profile</md-button></md-menu-item><md-menu-item \nclass="md-indent" ui-sref="app.mail"><md-icon md-font-icon="icon-email" class="icon"></md-icon><md-button>Inbox\n</md-button></md-menu-item><md-menu-item class="md-indent"><md-icon md-font-icon ng-class="vm.userStatus.icon" \nng-style="{\'color\': vm.userStatus.color }" class="icon"></md-icon><md-menu id="user-status-menu"><md-button \nng-click="$mdOpenMenu()" class="status" ng-class="vm.userStatus.class">{{vm.userStatus.title}}</md-button>\n<md-menu-content width="2"><md-menu-item class="status md-indent" ng-class="{\'selected\': status === vm.userStatus}" \nng-repeat="status in vm.userStatusOptions"><md-icon md-font-icon="{{status.icon}}" ng-style="{\'color\': status.color }" \nclass="icon"></md-icon><md-button ng-click="vm.setUserStatus(status)">{{status.title}}</md-button></md-menu-item>\n</md-menu-content></md-menu></md-menu-item><md-menu-divider></md-menu-divider><md-menu-item class="md-indent"><md-icon \nmd-font-icon="icon-logout" class="icon"></md-icon><md-button ng-click="vm.logout()">Logout</md-button></md-menu-item>\n</md-menu-content></md-menu></md-menu-bar><div class="toolbar-separator"></div><ms-search-bar \non-search="vm.search(query)" on-result-click="vm.searchResultClick(item)" debounce="300"></ms-search-bar><div \nclass="toolbar-separator"></div><md-menu id="language-menu" md-offset="0 72" md-position-mode="target-right target">\n<md-button class="language-button" ng-click="$mdOpenMenu()" aria-label="Language" md-menu-origin md-menu-align-target>\n<div layout="row" layout-align="center center"><img class="flag" \nng-src="assets/images/flags/{{vm.selectedLanguage.flag}}.png"> <span class="iso">{{vm.selectedLanguage.code}}</span>\n</div></md-button><md-menu-content width="3" id="language-menu-content"><md-menu-item \nng-repeat="(iso, lang) in vm.languages"><md-button ng-click="vm.changeLanguage(lang)" aria-label="{{lang.title}}" \ntranslate translate-attr-aria-label="{{lang.title}}"><span layout="row" layout-align="start center"><img class="flag" \nng-src="assets/images/flags/{{lang.flag}}.png"> <span translate="{{lang.translation}}">{{lang.title}}</span></span>\n</md-button></md-menu-item></md-menu-content></md-menu><div class="toolbar-separator"></div><md-button \nid="quick-panel-toggle" class="md-icon-button" ng-click="vm.toggleSidenav(\'quick-panel\')" \naria-label="Toggle quick panel" translate translate-attr-aria-label="TOOLBAR.TOGGLE_QUICK_PANEL"><md-icon \nmd-font-icon="icon-format-list-bulleted" class="icon"></md-icon></md-button></div></div>');
$templateCache.put('app/toolbar/layouts/game-play/game-play-toolbar.html','<div class="odUsmTFG"><div class="UnwufdaL" layout="row" layout-align="space-between center"><div class="sZgWNYqK" \nlayout="row" layout-align="start center"><div class="nLtIastX" ng-show="$mdMedia(\'gt-sm\')">\n{{vm.clock | date:\'h:mm:ss a\'}}</div><div class="separator" ng-show="$mdMedia(\'gt-sm\')"></div><div class="nLtIastX">\n<md-menu md-position-mode="left bottom" md-offset="0 14"><md-button aria-label="Open menu" ng-click="$mdMenu.open(ev);">\n{{$root.gameName}}<md-icon md-font-icon="icon-menu-down"></md-icon></md-button><md-menu-content width="4" \nclass="wm-game-select"><md-menu-item><md-button ui-sref="app.home"><md-icon md-font-icon="icon-home"></md-icon>Trang ch\u1EE7\n</md-button></md-menu-item><md-menu-divider></md-menu-divider><md-menu-item><md-button \nui-sref="app.traditional.northern.jackpot"><md-icon md-font-icon="icon-menu-right"></md-icon>X\u1ED5 s\u1ED1 truy\u1EC1n th\u1ED1ng\n</md-button></md-menu-item><md-menu-item><md-button ui-sref="app.saba"><md-icon md-font-icon="icon-menu-right">\n</md-icon>Bong88</md-button></md-menu-item><md-menu-divider></md-menu-divider><md-menu-item><md-button \nui-sref="app.casino"><md-icon md-font-icon="icon-menu-right"></md-icon>789 CASINO</md-button></md-menu-item>\n<md-menu-divider></md-menu-divider><md-menu-item ng-repeat="item in vm.gameData"><md-button \nui-sref="app.game({id: item.interName})"><md-icon md-font-icon="icon-menu-right"></md-icon>{{ item.name }}</md-button>\n</md-menu-item></md-menu-content></md-menu></div></div><div class="EiVkigGR" ng-hide="$mdMedia(\'xs\')"><a \nui-sref="app.home"><img src="/assets/images/logos/one-logo.png" alt=""></a></div><div class="mRHenkcs" layout="row" \nlayout-align="end center"><md-button class="zRYBFUNt" ng-click="$root.popupLogin()" \nng-if="!$root.isAuthenticated && $mdMedia(\'max-width: 959px\')">\u0110\u0103ng nh\u1EADp</md-button><div layout="row" \nng-if="!$root.isAuthenticated && $mdMedia(\'min-width: 960px\')" class="header-login"><form layout="row" \nlayout-align="center center" ng-submit="$root.quickLogin()"><div class="form-group"><input type="text" name="username" \nng-model="$root.quick.username" autocomplete="off" placeholder="T\xE0i kho\u1EA3n"><div class="line"></div></div><div \nclass="form-group"><input type="password" name="password" ng-model="$root.quick.password" autocomplete="off" \nplaceholder="M\u1EADt kh\u1EA9u"><div class="line"></div></div><md-button class="md-icon-button md-raised" type="submit" \nng-disabled="$root.submitting"><md-icon md-font-icon="icon-menu-right"></md-icon></md-button></form></div><md-button \nclass="md-icon-button" ng-click="vm.isFullscreen()" ng-show="!$mdMedia(\'gt-sm\')"><md-icon \nmd-font-icon="icon-fullscreen"></md-icon></md-button><md-button class="md-icon-button" class="exit" ui-sref="app.home" \nng-hide="!$mdMedia(\'gt-sm\')" hide><md-icon md-font-icon="icon-close"></md-icon></md-button><md-menu-bar id="user-menu" \nng-if="$root.isAuthenticated && $mdMedia(\'min-width: 960px\')"><md-menu md-position-mode="right bottom"><md-button \nclass="user-button" ng-click="$mdMenu.open()" aria-label="User settings"><div layout="row" \nlayout-align="space-between center"><span class="username">{{ $root.User.Username }}</span><md-icon \nmd-font-icon="icon-chevron-down" class="icon s16" hide-xs></md-icon></div></md-button><md-menu-content width="3" \nclass="member-header-menu"><md-menu-item class="md-indent" ui-sref="app.account.my"><md-icon \nmd-font-icon="icon-account" class="s20"></md-icon><md-button>Th\xF4ng tin t\xE0i kho\u1EA3n</md-button></md-menu-item><md-menu-item\n class="md-indent" ui-sref="app.account.change-password"><md-icon md-font-icon="icon-key" class="s20"></md-icon>\n<md-button>Thay \u0111\u1ED5i m\u1EADt kh\u1EA9u</md-button></md-menu-item><md-menu-item class="md-indent" ui-sref="app.account.otp">\n<md-icon md-font-icon="icon-security" class="s20"></md-icon><md-button>C\xE0i \u0111\u1EB7t OTP</md-button></md-menu-item>\n<md-menu-divider></md-menu-divider><md-menu-item class="md-indent" ui-sref="app.account.bet-list"><md-icon \nmd-font-icon="icon-calendar-today" class="s20"></md-icon><md-button>B\u1EA3ng c\u01B0\u1EE3c</md-button></md-menu-item><md-menu-item \nclass="md-indent" ui-sref="app.account.statement"><md-icon md-font-icon="icon-bulletin-board" class="s20"></md-icon>\n<md-button>Sao k\xEA</md-button></md-menu-item><md-menu-divider></md-menu-divider><md-menu-item class="md-indent"><md-icon \nmd-font-icon="icon-logout" class="s20"></md-icon><md-button ng-click="$root.signOut()">Tho\xE1t</md-button></md-menu-item>\n</md-menu-content></md-menu></md-menu-bar><div class="separator" ng-show="!$mdMedia(\'gt-sm\')"></div><md-button \nid="account-panel-toggle" class="md-icon-button" ng-click="vm.toggleSidenav(\'account-panel\')" \naria-label="Toggle account panel" ng-if="$root.isAuthenticated && $mdMedia(\'max-width: 959px\')"><md-icon \nmd-font-icon="icon-account" class="s24"></md-icon></md-button></div></div></div><div class="oyFk51Ar" layout="row" \nlayout-align="center center" flex><div class="console" layout="row" layout-align="center center"><div id="cta" \nng-click="vm.showToolbar()"><span class="arrow primera next"></span> <span class="arrow segunda next"></span></div>\n</div></div>');
$templateCache.put('app/toolbar/layouts/vertical-navigation/toolbar.html','<div id="one-toolbar" class="" ng-class="{\'sticked\': $root.stickVideo}"><div class="one-container"><div \nclass="nav-menu" layout="row" layout-align="space-between center"><div class="navigation-button-toggle" hide-gt-sm>\n<md-button id="navigation-toggle" class="md-icon-button" ng-click="vm.toggleSidenav(\'navigation\')" \naria-label="Toggle navigation"><md-icon md-font-icon="icon-menu" class="icon"></md-icon></md-button></div><a \nclass="logo" ui-sref="app.home"><img src="/assets/images/logos/one-logo.png" class="" alt="One 789"></a><div hide \nshow-gt-sm class="menu" ng-include="\'app/main/home/nav.menu.template.html\'"></div><div layout="row" \nlayout-align="end center"><md-menu-bar class="change-theme" ng-if="$mdMedia(\'min-width: 960px\')"><md-menu \nmd-position-mode="left bottom"><md-button class="md-icon-button" ng-click="$mdOpenMenu()"><md-icon \nng-if="$root.setupTheme === \'default\'" md-font-icon="icon-theme-light-dark"></md-icon><md-icon \nng-if="$root.setupTheme === \'tealTheme\'" md-font-icon="icon-white-balance-sunny" class="icon"></md-icon><md-icon \nng-if="$root.setupTheme === \'auto\'" md-font-icon="icon-brightness-auto" class="icon"></md-icon></md-button>\n<md-menu-content width="3" class="change-theme md-primary-bg"><md-menu-item class="md-indent"><md-icon \nmd-font-icon="icon-theme-light-dark" class="icon"></md-icon><md-button ng-click="$root.setTheme(\'default\')">T\u1ED1i\n</md-button></md-menu-item><md-menu-item class="md-indent"><md-icon md-font-icon="icon-white-balance-sunny" \nclass="icon"></md-icon><md-button ng-click="$root.setTheme(\'tealTheme\')">S\xE1ng</md-button></md-menu-item>\n<md-menu-divider></md-menu-divider><md-menu-item class="md-indent"><md-icon md-font-icon="icon-brightness-auto" \nclass="icon"></md-icon><md-button ng-click="$root.setTheme(\'auto\')">T\u1EF1 \u0111\u1ED9ng</md-button></md-menu-item></md-menu-content>\n</md-menu></md-menu-bar><div class="login" layout="row" layout-align="start center" ng-if="!$root.isAuthenticated"><div \nlayout="row" ng-if="$mdMedia(\'max-width: 959px\')"><md-button class="md-raised auth md-accent" ui-sref="app.auth">\n\u0110\u0103ng nh\u1EADp</md-button></div><div layout="row" ng-if="$mdMedia(\'min-width: 960px\')" class="header-login"><form \nlayout="row" layout-align="center center" ng-submit="$root.quickLogin()" class="header-form-login"><div \nclass="form-group"><input type="text" name="username" ng-model="$root.quick.username" autocomplete="off" \nplaceholder="T\xE0i kho\u1EA3n" class="header-username md-one-input"></div><div class="form-group"><input \nng-attr-type="{{ vm.show ? \'text\' : \'password\' }}" name="password" ng-model="$root.quick.password" autocomplete="off" \nplaceholder="M\u1EADt kh\u1EA9u" class="header-password md-one-input"><md-icon md-font-icon="icon-eye" class="s16" \nng-click="vm.show = !vm.show" ng-if="vm.show"></md-icon><md-icon md-font-icon="icon-eye-off" class="s16" \nng-click="vm.show = !vm.show" ng-if="!vm.show"></md-icon></div><md-button \nclass="md-icon-button md-raised header-login-button md-accent" type="submit" ng-disabled="$root.submitting"><md-icon \nmd-font-icon="icon-menu-right"></md-icon></md-button></form></div></div><div layout="row" layout-align="start center" \nng-if="$root.isAuthenticated"><md-menu id="notification-menu" md-position-mode="right bottom" \nng-if="!$root.isSaba && !$root.isCasino" hide show-gt-xs><md-button id="quick-panel-toggle" ng-click="$mdMenu.open()" \nclass="md-icon-button" aria-label="Notify"><md-icon md-font-icon="icon-bell" class="s28"></md-icon><label \nng-if="$root.bellUnRead !== 0"></label></md-button><md-menu-content width="6" id="notification-content" \nclass="scrollable md-primary-bg" ms-scroll><md-menu-item ng-repeat="item in $root.bellNotifications | limitTo : 10"><div\n layout="row" layout-align="start center" class="button" ng-click="vm.viewNotification(item)"><div layout="column" \nclass="notification"><div class="text" ng-class="{\'un-read\' : !item.Read}">{{ item.Message | htmlToPlaintext }}</div>\n<div class="date">{{ item.PublishedAt | amDateFormat: \'DD/MM/YYYY HH:mm\' }}</div></div></div></md-menu-item>\n<md-menu-item ng-if="$root.bellNotifications.length === 0"><div layout="row" layout-align="center center"><div \nlayout="column" class="notification"><div class="text">Qu\xFD kh\xE1ch kh\xF4ng c\xF3 th\xF4ng b\xE1o n\xE0o</div></div></div></md-menu-item>\n</md-menu-content></md-menu><md-button class="md-icon-button" ng-click="vm.isFullscreen()" ng-show="$root.isCasino" \nhide-gt-xs><md-icon md-font-icon="icon-fullscreen"></md-icon></md-button><div class="saba-balance" hide show-gt-sm \nng-if="$root.isSaba"><md-button class="balance" ng-click="$root.transferBalance(1, $event)" \nng-class="{\'low\': $root.User.SabaBalance < 100000}" aria-label="Balance settings"><md-icon \nmd-font-icon="icon-money-exchange"></md-icon>{{ $root.User.SabaBalance | currency : \'\' : 0 }}</md-button></div><div \nclass="toolbar-separator"></div><md-menu-bar id="user-menu" hide show-gt-sm><md-menu md-position-mode="right bottom">\n<md-button class="user-button" ng-click="$mdMenu.open()" aria-label="User settings"><div layout="row" \nlayout-align="space-between center"><span class="username">{{ $root.User.Username }}</span><md-icon \nmd-font-icon="icon-chevron-down" class="icon s16" hide-xs></md-icon></div></md-button><md-menu-content width="3" \nclass="member-header-menu md-primary-bg"><md-menu-item class="md-indent" ng-if="$root.isSaba"><md-icon \nmd-font-icon="icon-format-text" class="s20"></md-icon><md-menu><md-button ng-click="$mdOpenMenu()">Ng\xF4n ng\u1EEF</md-button>\n<md-menu-content width="3" class="member-header-menu saba"><md-menu-item ui-sref="app.saba({lang: \'vn\'})"><md-button>\n<span layout="row" layout-align="start center"><img class="flag" src="/assets/images/flags/vn.png" alt=""> <span>\nTi\u1EBFng Vi\u1EC7t</span></span></md-button></md-menu-item><md-menu-item ui-sref="app.saba({lang: \'en\'})"><md-button><span \nlayout="row" layout-align="start center"><img class="flag" src="/assets/images/flags/us.png" alt=""> <span>Ti\u1EBFng Anh\n</span></span></md-button></md-menu-item></md-menu-content></md-menu></md-menu-item><md-menu-divider \nng-if="$root.isSaba"></md-menu-divider><md-menu-item class="md-indent" ui-sref="app.account.my"><md-icon \nmd-font-icon="icon-account" class="s20"></md-icon><md-button>Th\xF4ng tin t\xE0i kho\u1EA3n</md-button></md-menu-item><md-menu-item\n class="md-indent" ui-sref="app.account.change-password"><md-icon md-font-icon="icon-key" class="s20"></md-icon>\n<md-button>Thay \u0111\u1ED5i m\u1EADt kh\u1EA9u</md-button></md-menu-item><md-menu-item class="md-indent" ui-sref="app.account.otp">\n<md-icon md-font-icon="icon-security" class="s20"></md-icon><md-button>C\xE0i \u0111\u1EB7t OTP</md-button></md-menu-item>\n<md-menu-item class="md-indent" ui-sref="app.account.telegram"><md-icon md-font-icon="icon-telegram" class="s20">\n</md-icon><md-button>Li\xEAn k\u1EBFt Telegram</md-button></md-menu-item><md-menu-divider></md-menu-divider><md-menu-item \nclass="md-indent" ui-sref="app.account.rules"><md-icon md-font-icon="icon-ruler" class="s20"></md-icon><md-button>\nQuy t\u1EAFc</md-button></md-menu-item><md-menu-item class="md-indent" ui-sref="app.account.limit"><md-icon \nmd-font-icon="icon-code-less-than-or-equal" class="s20"></md-icon><md-button>Th\xF4ng s\u1ED1</md-button></md-menu-item>\n<md-menu-divider></md-menu-divider><md-menu-item class="md-indent"><md-icon md-font-icon="icon-calendar-today" \nclass="s20"></md-icon><md-menu><md-button ng-click="$mdOpenMenu()">B\u1EA3ng c\u01B0\u1EE3c</md-button><md-menu-content width="3" \nclass="member-header-menu md-primary-bg"><md-menu-item ui-sref="app.account.bet-list.traditional"><md-button>\nX\u1ED5 s\u1ED1 truy\u1EC1n th\u1ED1ng</md-button></md-menu-item></md-menu-content></md-menu></md-menu-item><md-menu-item class="md-indent" \nui-sref="app.account.statement"><md-icon md-font-icon="icon-bulletin-board" class="s20"></md-icon><md-button>Sao k\xEA\n</md-button></md-menu-item><md-menu-item class="md-indent"><md-icon md-font-icon="icon-cancel" class="s20"></md-icon>\n<md-menu><md-button ng-click="$mdOpenMenu()">Phi\u1EBFu \u0111\xE3 h\u1EE7y</md-button><md-menu-content width="3" \nclass="member-header-menu md-primary-bg"><md-menu-item ui-sref="app.account.cancelled.traditional"><md-button>\nX\u1ED5 s\u1ED1 truy\u1EC1n th\u1ED1ng</md-button></md-menu-item></md-menu-content></md-menu></md-menu-item><md-menu-divider>\n</md-menu-divider><md-menu-item class="md-indent"><md-icon md-font-icon="icon-logout" class="s20"></md-icon><md-button \nng-click="$root.signOut()">Tho\xE1t</md-button></md-menu-item></md-menu-content></md-menu></md-menu-bar><md-button \nid="account-panel-toggle" class="md-icon-button" ng-click="vm.toggleSidenav(\'account-panel\')" \naria-label="Toggle account panel" hide-gt-sm><md-icon md-font-icon="icon-account" class="s28"></md-icon></md-button>\n</div></div></div></div></div><div class="oyFk51Ar" layout="row" layout-align="center center" flex><div class="console" \nlayout="row" layout-align="center center"><div id="cta" ng-click="vm.showToolbar()"><span class="arrow primera next">\n</span> <span class="arrow segunda next"></span></div></div></div>');
$templateCache.put('app/core/directives/ms-navigation/templates/horizontal.html','<div class="navigation-toggle" hide-gt-sm><md-button class="md-icon-button" ng-click="vm.toggleHorizontalMobileMenu()" \naria-label="Toggle Mobile Navigation"><md-icon md-font-icon="icon-menu"></md-icon></md-button></div><ul \nclass="horizontal"><li ng-repeat="node in vm.navigation" ms-navigation-horizontal-node="node" \nng-class="{\'has-children\': vm.hasChildren}" ng-include="\'navigation-horizontal-nested.html\'"></li></ul><script \ntype="text/ng-template" id="navigation-horizontal-nested.html">\n<div ms-navigation-horizontal-item layout="row" ng-if="!vm.isHidden()">\n        <div class="ms-navigation-horizontal-button" ng-if="!node.uisref && node.title"\n             ng-class="{\'active md-accent-bg md-accent-fg\': vm.isActive}">\n            <i class="icon s18 {{node.icon}}" ng-if="node.icon"></i>\n            <span class="title" translate="{{node.translate}}" flex>{{node.title}}</span>\n            <span class="badge white-fg" style="background: {{node.badge.color}}" ng-if="node.badge">{{node.badge.content}}</span>\n            <i class="icon-chevron-right s18 arrow" ng-if="vm.hasChildren"></i>\n        </div>\n\n        <a class="ms-navigation-horizontal-button" ui-sref="{{node.uisref}}" ui-sref-active="active md-accent-bg"\n           ng-class="{\'active md-accent-bg md-accent-fg\': vm.isActive}"\n           ng-if="node.uisref && node.title">\n            <i class="icon s18 {{node.icon}}" ng-if="node.icon"></i>\n            <span class="title" translate="{{node.translate}}" flex>{{node.title}}</span>\n            <span class="badge white-fg" style="background: {{node.badge.color}}" ng-if="node.badge">{{node.badge.content}}</span>\n            <i class="icon-chevron-right s18 arrow" ng-if="vm.hasChildren"></i>\n        </a>\n\n    </div>\n\n    <ul ng-if="vm.hasChildren && !vm.isHidden()">\n        <li ng-repeat="node in node.children" ms-navigation-horizontal-node="node"\n            ng-class="{\'has-children\': vm.hasChildren}"\n            ng-include="\'navigation-horizontal-nested.html\'"></li>\n    </ul></script>');
$templateCache.put('app/core/directives/ms-navigation/templates/vertical.html','<ul><li ng-repeat="node in vm.navigation" ms-navigation-node="node" \nng-class="{\'collapsed\': vm.collapsed, \'has-children\': vm.hasChildren}" ng-include="\'navigation-nested.html\'"></li></ul>\n<script type="text/ng-template" id="navigation-nested.html"><div ms-navigation-item layout="row" ng-if="!vm.isHidden()">\n        <div class="ms-navigation-button" ng-if="!node.uisref && node.title">\n            <i class="icon s16 {{node.icon}}" ng-if="node.icon"></i>\n            <span class="title" translate="{{node.translate}}" flex>{{node.title}}</span>\n            <span class="badge white-fg" ng-style="{\'background\': node.badge.color}" ng-if="node.badge">{{node.badge.content}}</span>\n            <i class="icon-chevron-right s16 arrow" ng-if="vm.collapsable && vm.hasChildren"></i>\n        </div>\n        <a class="ms-navigation-button" ui-sref="{{node.uisref}}" ui-sref-active="active md-accent-bg"\n           ng-if="node.uisref && node.title">\n            <i class="icon s16 {{node.icon}}" ng-if="node.icon"></i>\n            <span class="title" translate="{{node.translate}}" flex>{{node.title}}</span>\n            <span class="badge white-fg" ng-style="{\'background\': node.badge.color}" ng-if="node.badge">{{node.badge.content}}</span>\n            <i class="icon-chevron-right s16 arrow" ng-if="vm.collapsable && vm.hasChildren"></i>\n        </a>\n    </div>\n    <ul ng-if="vm.hasChildren && !vm.isHidden()">\n        <li ng-repeat="node in node.children" ms-navigation-node="node"\n            ng-class="{\'collapsed\': vm.collapsed, \'has-children\': vm.hasChildren}"\n            ng-include="\'navigation-nested.html\'"></li>\n    </ul></script>');
$templateCache.put('app/main/account/bet-list/traditional/traditional.bet-list.html','<div id="statement" class="page-layout simple fullwidth bet-list" layout="column"><div class="bet-list-title" \nlayout="row" layout-align="space-between center"><span></span><h2 class="primary">B\u1EA3ng c\u01B0\u1EE3c</h2><md-button class="" \nui-sref="app.account.bet-list.traditional.all">Xem t\u1EA5t c\u1EA3</md-button></div><div class="bet-list-table" \nng-if="vm.betListFull.length"><table class="table one-table md-primary-bg" ms-responsive-table print-table="table">\n<thead><tr><th>M\xE3 c\u01B0\u1EE3c</th><th>Th\u1EDDi gian</th><th class="width-160">\u0110\xE0i</th><th class="width-160">Th\u1EC3 lo\u1EA1i</th><th>\nT\u1ED5ng \u0111i\u1EC3m</th><th>Th\xE0nh ti\u1EC1n</th><th print-remove>Chi ti\u1EBFt</th></tr></thead><tbody \nng-repeat="betLists in vm.betListFull"><tr ng-repeat="bet in betLists" \nng-class="{\'canceled\': bet.Status === 9, \'company\' : bet.CancelType === 1 }"><td>{{bet.TicketNumber}}</td><td>\n{{bet.CreatedAt | amDateFormat : \'H:mm:ss\' }}</td><td>{{bet.GameType | blGame }}</td><td>{{bet | blBet }}</td><td>\n{{bet.Point | currency : \'\' : 0 }}</td><td>{{bet.Amount | currency : \'\' : 0}}</td><td print-remove \nrowspan="{{betLists.length}}" ng-hide="$index > 0"><a ng-click="vm.viewBatch(bet)">Chi ti\u1EBFt</a></td></tr></tbody><tfoot \nng-if="vm.hasMoreTickets"><tr><td colspan="8" class="hasMoreTickets" ng-class="{\'disabled\': vm.loading}"><a \nng-click="vm.betList(vm.OriginalTick[vm.OriginalTick.length - 1].Id)">Xem ti\u1EBFp</a><md-icon md-font-icon="icon-refresh" \nclass="s16 rotating" ng-show="vm.loading"></md-icon></td></tr></tfoot><tfoot ng-if="!vm.hasMoreTickets"><tr><td \ncolspan="5">T\u1ED5ng ti\u1EC1n \u0111\xE3 c\u01B0\u1EE3c</td><td>{{vm.sumMoney | currency : \'\' : 0}}</td><td colspan="2"></td></tr></tfoot></table>\n</div><div layout="row" class="margin-top-64" layout-align="center center" ng-if="vm.loading"><md-progress-circular \nclass="md-hue-2" md-diameter="48px"></md-progress-circular></div><div ng-if="!vm.betListFull.length && !vm.loading"><h3 \nclass="text-center padding-top-24 primary">Kh\xF4ng c\xF3 phi\u1EBFu c\u01B0\u1EE3c n\xE0o trong ng\xE0y h\xF4m nay</h3></div></div>');
$templateCache.put('app/main/account/cancelled/traditional/traditional.cancelled.html','<div id="cancelled" class="page-layout simple fullwidth" layout="column"><div class="title" layout="row" \nlayout-align="center center"><h2 class="primary">Phi\u1EBFu c\u01B0\u1EE3c \u0111\xE3 h\u1EE7y</h2></div><div class="navigation" layout="column" \nlayout-gt-sm="row"><div class="node" layout="column"><div class="title primary">Ch\u1ECDn ng\xE0y:</div><md-select \nng-model="vm.date" aria-label="Ch\u1ECDn k\u1EF3 m\u1EDF th\u01B0\u1EDFng" class="primary"><md-option ng-repeat="item in vm.terms" \nng-value="item" ng-selected="$index === 0">{{item}}</md-option></md-select></div><div class="node" layout="column"><div \nclass="title primary">\u0110\xE0i m\u1EDF th\u01B0\u1EDFng:</div><md-select ng-model="vm.GameType" aria-label="Ch\u1ECDn \u0111\xE0i m\u1EDF th\u01B0\u1EDFng" \nclass="primary" ng-change="vm.changeGame()"><md-option ng-repeat="item in vm.games" ng-value="item.id" \nng-selected="$index === 0">{{item.name}}</md-option></md-select></div><div class="node" layout="column"><div \nclass="title primary">Ki\u1EC3u c\u01B0\u1EE3c:</div><md-select ng-model="vm.BetType" aria-label="Ch\u1ECDn ki\u1EC3u c\u01B0\u1EE3c" class="primary" \nng-change="vm.changeBetType()"><md-option ng-repeat="item in vm.BetTypes" ng-value="item.id" ng-selected="$index === 0">\n{{item.name}}</md-option></md-select></div><div class="node submit-button" layout="column" \nlayout="space-between center"><span flex></span><md-button class="md-raised md-accent" ng-click="vm.getTicketItems()">\nT\xECm phi\u1EBFu</md-button></div></div><div class="bet-list-table" ng-if="vm.ticketsCancelled.length"><table \nclass="table one-table md-primary-bg" ms-responsive-table><thead><tr><th>S\u1ED1 phi\u1EBFu</th><th>S\u1ED1</th><th>Th\u1EDDi gian c\u01B0\u1EE3c</th>\n<th>Th\u1EDDi gian h\u1EE7y</th><th>Gi\xE1 b\xE1n</th><th>T\u1ED5ng \u0111i\u1EC3m</th><th>Th\xE0nh ti\u1EC1n</th></tr></thead><tbody><tr \nng-repeat="ticket in vm.ticketsCancelled"><td class="text-center">{{ticket.Term}}-{{ticket.TicketNumber}}</td><td>\n{{ticket.Numbers.toString()}} <sub class="prizeNr" ng-if="ticket.PrizeNr">[{{ticket.PrizeNr}}]</sub></td><td>\n{{ticket.CreatedAt | amDateFormat : \'DD/MM - H:mm:ss\' }}</td><td>\n{{ticket.CancelledAt | amDateFormat : \'DD/MM - H:mm:ss\' }}</td><td>{{ticket.Price | currency : \'\' : 0 }}</td><td>\n{{ticket.Point | currency : \'\' : 0 }}</td><td>{{ticket.Amount | currency : \'\' : 0 }}</td></tr></tbody><tfoot \nng-if="vm.hasMoreTickets"><tr><td colspan="8" class="hasMoreTickets" ng-class="{\'disabled\': vm.loading}"><a \nng-click="vm.getTicketItems(vm.ticketsCancelled[vm.ticketsCancelled.length - 1].Id)">Xem ti\u1EBFp</a><md-icon \nmd-font-icon="icon-refresh" class="s16 rotating" ng-show="vm.loading"></md-icon></td></tr></tfoot><tfoot><tr><td \ncolspan="6">T\u1ED5ng ti\u1EC1n <span ng-if="vm.hasMoreTickets">(t\u1EA1m t\xEDnh)</span></td><td>{{ vm.sumMoney | currency : \'\' : 0}}\n</td></tr></tfoot></table></div><div layout="row" class="margin-top-64" layout-align="center center" ng-if="vm.loading">\n<md-progress-circular class="md-hue-2" md-diameter="48px"></md-progress-circular></div><div \nng-if="!vm.ticketsCancelled.length && !vm.loading" class="primary"><h3 class="padding-top-24">\nKh\xF4ng c\xF3 phi\u1EBFu c\u01B0\u1EE3c n\xE0o trong ng\xE0y {{vm.date}}</h3></div></div>');
$templateCache.put('app/main/account/bet-list/legendary/legendary.bet-list.html','<div id="statement" class="page-layout simple fullwidth bet-list" layout="column"><div class="bet-list-title" \nlayout="row" layout-align="space-between center"><span></span><h2>B\u1EA3ng c\u01B0\u1EE3c</h2><md-button class="" \nui-sref="app.account.bet-list.legendary.all">Xem t\u1EA5t c\u1EA3</md-button></div><div class="bet-list-table" \nng-if="vm.betListFull.length"><table class="table one-table" ms-responsive-table print-table="table"><thead><tr><th>\nM\xE3 c\u01B0\u1EE3c</th><th>Th\u1EDDi gian</th><th class="width-160">\u0110\xE0i</th><th class="width-160">Th\u1EC3 lo\u1EA1i</th><th>T\u1ED5ng \u0111i\u1EC3m</th><th>\nTh\xE0nh ti\u1EC1n</th><th print-remove>Chi ti\u1EBFt</th></tr></thead><tbody ng-repeat="betLists in vm.betListFull"><tr \nng-repeat="bet in betLists" ng-class="{\'canceled\': bet.Status === 9, \'company\' : bet.CancelType === 1 }"><td>\n{{bet.TicketNumber}}</td><td>{{bet.CreatedAt | amDateFormat : \'H:mm:ss\' }}</td><td>{{bet.GameType | legendGame }}</td>\n<td>{{bet | legendBlBet : bet.GameType }}</td><td>{{bet.Point | currency : \'\' : 0 }}</td><td>\n{{bet.Amount | currency : \'\' : 0}}</td><td print-remove rowspan="{{betLists.length}}" ng-hide="$index > 0"><a \nng-click="vm.viewBatch(bet)">Chi ti\u1EBFt</a></td></tr></tbody><tfoot ng-if="vm.hasMoreTickets"><tr><td colspan="8" \nclass="hasMoreTickets" ng-class="{\'disabled\': vm.loading}"><a \nng-click="vm.betList(vm.OriginalTick[vm.OriginalTick.length - 1].Id)">Xem ti\u1EBFp</a><md-icon md-font-icon="icon-refresh" \nclass="s16 rotating" ng-show="vm.loading"></md-icon></td></tr></tfoot><tfoot ng-if="!vm.hasMoreTickets"><tr><td \ncolspan="5">T\u1ED5ng ti\u1EC1n \u0111\xE3 c\u01B0\u1EE3c</td><td>{{vm.sumMoney | currency : \'\' : 0}}</td><td></td></tr></tfoot></table></div><div \nlayout="row" class="margin-top-64" layout-align="center center" ng-if="vm.loading"><md-progress-circular \nclass="md-hue-2" md-diameter="48px"></md-progress-circular></div><div ng-if="!vm.betListFull.length && !vm.loading"><h3 \nclass="text-center padding-top-24">Kh\xF4ng c\xF3 phi\u1EBFu c\u01B0\u1EE3c n\xE0o trong ng\xE0y h\xF4m nay</h3></div></div>');
$templateCache.put('app/main/account/rules/tab/mienbac1.html','<div class="rules-content"><h4>\u0110\u1EC0</h4><p>L\xE0 h\xECnh th\u1EE9c c\u01B0\u1EE3c 1 s\u1ED1 t\u1EEB 00 \u0111\u1EBFn 99, l\u1EA5y 2 s\u1ED1 cu\u1ED1i gi\u1EA3i \u0110\u1EB7c Bi\u1EC7t l\xE0m k\u1EBFt qu\u1EA3.\n</p><h4>\u0110\u1EC0 \u0110\u1EA6U</h4><p>L\xE0 h\xECnh th\u1EE9c c\u01B0\u1EE3c 1 s\u1ED1 t\u1EEB 00 \u0111\u1EBFn 99, l\u1EA5y 2 s\u1ED1 \u0111\u1EA7u gi\u1EA3i \u0110\u1EB7c Bi\u1EC7t l\xE0m k\u1EBFt qu\u1EA3.</p><h4>\u0110\u1EC0 GI\u1EA2I NH\u1EA4T\n</h4><p>L\xE0 h\xECnh th\u1EE9c c\u01B0\u1EE3c 1 con s\u1ED1 t\u1EEB 00 \u0111\u1EBFn 99 , l\u1EA5y 2 s\u1ED1 cu\u1ED1i Gi\u1EA3i Nh\u1EA5t l\xE0m k\u1EBFt qu\u1EA3.</p><h4>\u0110\u1EC0 \u0110\u1EA6U GI\u1EA2I NH\u1EA4T</h4><p>\nL\xE0 h\xECnh th\u1EE9c c\u01B0\u1EE3c 1 con s\u1ED1 t\u1EEB 00 \u0111\u1EBFn 99 , l\u1EA5y 2 s\u1ED1 \u0111\u1EA7u Gi\u1EA3i Nh\u1EA5t l\xE0m k\u1EBFt qu\u1EA3.</p><h4>\u0110\u1EC0 TH\u1EA6N T\xC0I</h4><p>\nL\xE0 h\xECnh th\u1EE9c c\u01B0\u1EE3c 1 con s\u1ED1 t\u1EEB 00 \u0111\u1EBFn 99 , l\u1EA5y 2 s\u1ED1 cu\u1ED1i X\u1ED5 s\u1ED1 Th\u1EA7n T\xE0i l\xE0m k\u1EBFt qu\u1EA3</p><h4>\u0110\u1EC0 \u0110\u1EA6U TH\u1EA6N T\xC0I</h4><p>\nL\xE0 h\xECnh th\u1EE9c c\u01B0\u1EE3c 1 con s\u1ED1 t\u1EEB 00 \u0111\u1EBFn 99 , l\u1EA5y 2 s\u1ED1 \u0111\u1EA7u X\u1ED5 s\u1ED1 Th\u1EA7n T\xE0i l\xE0m k\u1EBFt qu\u1EA3</p><h4>L\xD4</h4><p>\nL\xE0 h\xECnh th\u1EE9c c\u01B0\u1EE3c 1 s\u1ED1 t\u1EEB 00 \u0111\u1EBFn 99, l\u1EA5y 2 s\u1ED1 cu\u1ED1i t\u1EA5t c\u1EA3 c\xE1c Gi\u1EA3i l\xE0m k\u1EBFt qu\u1EA3.</p><h4>L\xD4 \u0110\u1EA6U</h4><p>\nL\xE0 h\xECnh th\u1EE9c c\u01B0\u1EE3c 1 s\u1ED1 t\u1EEB 00 \u0111\u1EBFn 99 , l\u1EA5y 2 s\u1ED1 \u0111\u1EA7u c\u1EE7a t\u1EA5t c\u1EA3 c\xE1c Gi\u1EA3i l\xE0m k\u1EBFt qu\u1EA3.</p><h4>L\xD4 XI\xCAN</h4><p>\nL\xE0 c\xE1ch c\u01B0\u1EE3c \u0111\u1ED3ng th\u1EDDi 2, 3 ho\u1EB7c 4 con s\u1ED1.</p><p>\n\u0110i\u1EC1u ki\u1EC7n tr\xFAng l\xE0 k\u1EBFt qu\u1EA3 (27 gi\u1EA3i) \u0111\u1ED3ng th\u1EDDi ph\u1EA3i c\xF3 2, 3 ho\u1EB7c 4 con s\u1ED1 \u0111\xE3 ch\u1ECDn.</p><h4>L\xD4 TR\u01AF\u1EE2T</h4><p>\nL\xE0 h\xECnh th\u1EE9c c\u01B0\u1EE3c b\u1EA1n ch\u1ECDn \xEDt nh\u1EA5t 4 con s\u1ED1 v\xE0 4 s\u1ED1 \u0111\xF3 \u0111\u1EC1u kh\xF4ng c\xF3 trong k\u1EBFt qu\u1EA3 (27 gi\u1EA3i).</p><h4>\u0110\u1EC0 TR\u01AF\u1EE2T</h4><p>\nL\xE0 h\xECnh th\u1EE9c c\u01B0\u1EE3c b\u1EA1n ch\u1ECDn \xEDt nh\u1EA5t 10 con s\u1ED1 v\xE0 c\u1EA3 10 con s\u1ED1 \u0111\xF3 \u0111\u1EC1u kh\xF4ng c\xF3 trong k\u1EBFt qu\u1EA3 gi\u1EA3i \u0110\u1EB7c bi\u1EC7t.</p><div \nclass="table-container md-whiteframe-1dp md-primary-bg"><table class="table payouts" cellspacing="0" width="100%">\n<thead><tr><th colspan="3">T\u1EC9 l\u1EC7 tr\u1EA3 th\u01B0\u1EDFng x\u1ED5 s\u1ED1 Mi\u1EC1n B\u1EAFc 1</th></tr></thead><tbody><tr><td class="title">Th\u1EC3 lo\u1EA1i c\u01B0\u1EE3c\n</td><td class="title">Tr\u1EA3 th\u01B0\u1EDFng</td><td class="title">Nh\xE1y</td></tr><tr><td class="title">\u0110\u1EC1</td><td>1:70</td><td>\nKh\xF4ng</td></tr><tr><td class="title">\u0110\u1EC1 \u0110\u1EA7u</td><td>1:70</td><td>Kh\xF4ng</td></tr><tr><td class="title">\u0110\u1EC1 gi\u1EA3i nh\u1EA5t</td>\n<td>1:70</td><td>Kh\xF4ng</td></tr><tr><td class="title">\u0110\u1EC1 \u0111\u1EA7u gi\u1EA3i nh\u1EA5t</td><td>1:70</td><td>Kh\xF4ng</td></tr><tr><td \nclass="title">\u0110\u1EC1 th\u1EA7n t\xE0i</td><td>1:70</td><td>Kh\xF4ng</td></tr><tr><td class="title">\u0110\u1EC1 \u0111\u1EA7u th\u1EA7n t\xE0i</td><td>1:70</td>\n<td>Kh\xF4ng</td></tr><tr><td class="title">L\xF4</td><td>1:80</td><td>C\xF3</td></tr><tr><td class="title">L\xF4 \u0111\u1EA7u</td><td>1:80\n</td><td>C\xF3</td></tr><tr><td class="title">Xi\xEAn 2</td><td>1:10</td><td>Kh\xF4ng</td></tr><tr><td class="title">Xi\xEAn 3</td>\n<td>1:40</td><td>Kh\xF4ng</td></tr><tr><td class="title">Xi\xEAn 4</td><td>1:100</td><td>Kh\xF4ng</td></tr><tr><td class="title">\n\u0110\u1EC1 tr\u01B0\u1EE3t</td><td>1:0.65</td><td>Kh\xF4ng</td></tr><tr><td class="title">L\xF4 tr\u01B0\u1EE3t</td><td>1:21</td><td>C\xF3</td></tr></tbody>\n</table></div></div>');
$templateCache.put('app/main/account/rules/tab/mienbac2.html','<div class="rules-content"><h4>2D - \u0110\u1EA7u</h4><p>L\xE0 h\xECnh th\u1EE9c c\u01B0\u1EE3c 1 s\u1ED1 t\u1EEB 00 \u0111\u1EBFn 99. L\u1EA5y Gi\u1EA3i B\u1EA3y l\xE0m k\u1EBFt qu\u1EA3.</p><p>\nS\u1ED1 ti\u1EC1n thanh to\xE1n = Ti\u1EC1n c\u01B0\u1EE3c x 4 l\u1EA7n</p><h4>3D - \u0110\u1EA7u</h4><p>\nL\xE0 h\xECnh th\u1EE9c c\u01B0\u1EE3c 1 s\u1ED1 t\u1EEB 000 \u0111\u1EBFn 999, l\u1EA5y Gi\u1EA3i S\xE1u l\xE0m k\u1EBFt qu\u1EA3.</p><p>S\u1ED1 ti\u1EC1n thanh to\xE1n = Ti\u1EC1n c\u01B0\u1EE3c x 3 l\u1EA7n</p><h4>\n3D - \u0110u\xF4i</h4><p>L\xE0 h\xECnh th\u1EE9c c\u01B0\u1EE3c 1 s\u1ED1 t\u1EEB 000 \u0111\u1EBFn 999, l\u1EA5y 3 s\u1ED1 cu\u1ED1i Gi\u1EA3i \u0110\u1EB7c Bi\u1EC7t l\xE0m k\u1EBFt qu\u1EA3</p><h4>3D - 23 l\xF4</h4>\n<p>L\xE0 h\xECnh th\u1EE9c c\u01B0\u1EE3c 1 s\u1ED1 t\u1EEB 000 \u0111\u1EBFn 999, l\u1EA5y 3 s\u1ED1 cu\u1ED1i t\u1EA5t c\u1EA3 c\xE1c gi\u1EA3i (tr\u1EEB Gi\u1EA3i B\u1EA3y) l\xE0m k\u1EBFt qu\u1EA3</p><p>\nS\u1ED1 ti\u1EC1n thanh to\xE1n = Ti\u1EC1n c\u01B0\u1EE3c x 23 l\u1EA7n</p><h4>4D - \u0110u\xF4i</h4><p>\nL\xE0 h\xECnh th\u1EE9c c\u01B0\u1EE3c 1 s\u1ED1 t\u1EEB 0000 \u0111\u1EBFn 9999, l\u1EA5y 4 s\u1ED1 cu\u1ED1i Gi\u1EA3i \u0110\u1EB7c Bi\u1EC7t l\xE0m k\u1EBFt qu\u1EA3.</p><h4>4D - 20 L\xF4 (Bao L\xF4)</h4><p>\nL\xE0 h\xECnh th\u1EE9c c\u01B0\u1EE3c 1 s\u1ED1 t\u1EEB 0000 \u0111\u1EBFn 9999, l\u1EA5y 4 s\u1ED1 cu\u1ED1i t\u1EA5t c\u1EA3 c\xE1c Gi\u1EA3i (tr\u1EEB Gi\u1EA3i S\xE1u, Gi\u1EA3i B\u1EA3y) l\xE0m k\u1EBFt qu\u1EA3.</p><p>\nS\u1ED1 ti\u1EC1n thanh to\xE1n = Ti\u1EC1n c\u01B0\u1EE3c x 20 l\u1EA7n.</p><div class="table-container md-whiteframe-1dp md-primary-bg"><table \nclass="table payouts" cellspacing="0" width="100%"><thead><tr><th colspan="3">T\u1EC9 l\u1EC7 tr\u1EA3 th\u01B0\u1EDFng x\u1ED5 s\u1ED1 Mi\u1EC1n B\u1EAFc 2</th>\n</tr></thead><tbody><tr><td class="title">Th\u1EC3 lo\u1EA1i c\u01B0\u1EE3c</td><td class="title">Tr\u1EA3 th\u01B0\u1EDFng</td><td class="title">Nh\xE1y</td>\n</tr><tr><td class="title">2D \u2013 \u0110\u1EA7u</td><td>1 : 75</td><td>C\xF3</td></tr><tr><td class="title">3D \u2013 \u0110\u1EA7u</td><td>1 : 650\n</td><td>C\xF3</td></tr><tr><td class="title">3D \u2013 \u0110u\xF4i</td><td>1 : 650</td><td>Kh\xF4ng</td></tr><tr><td class="title">\n3D \u2013 23 L\xF4</td><td>1 : 650</td><td>C\xF3</td></tr><tr><td class="title">4D \u2013 \u0110u\xF4i</td><td>1 : 6000</td><td>Kh\xF4ng</td></tr>\n<tr><td class="title">4D \u2013 20 L\xF4</td><td>1 : 6000</td><td>C\xF3</td></tr></tbody></table></div></div>');
$templateCache.put('app/main/account/rules/tab/miennam.html','<div class="rules-content"><h4>2D - \u0110\u1EA7u</h4><p>L\xE0 h\xECnh th\u1EE9c c\u01B0\u1EE3c 1 s\u1ED1 t\u1EEB 00 \u0111\u1EBFn 99, l\u1EA5y Gi\u1EA3i T\xE1m l\xE0m k\u1EBFt qu\u1EA3.</p><h4>\n2D - \u0110u\xF4i</h4><p>L\xE0 h\xECnh th\u1EE9c c\u01B0\u1EE3c 1 s\u1ED1 t\u1EEB 00 \u0111\u1EBFn 99, l\u1EA5y 2 s\u1ED1 cu\u1ED1i gi\u1EA3i \u0110\u1EB7c Bi\u1EC7t l\xE0m k\u1EBFt qu\u1EA3.</p><h4>2D - 18 L\xD4</h4><p>\nL\xE0 h\xECnh th\u1EE9c c\u01B0\u1EE3c 1 s\u1ED1 t\u1EEB 00 \u0111\u1EBFn 99, l\u1EA5y 2 s\u1ED1 cu\u1ED1i t\u1EA5t c\u1EA3 c\xE1c Gi\u1EA3i l\xE0m k\u1EBFt qu\u1EA3.</p><p>\nS\u1ED1 ti\u1EC1n thanh to\xE1n = Ti\u1EC1n c\u01B0\u1EE3c x 18 l\u1EA7n</p><h4>L\xF4 XI\xCAN</h4><div class="pair"><span>Xi\xEAn 2:</span>\n L\xE0 h\xECnh th\u1EE9c c\u01B0\u1EE3c \u0111\u1ED3ng th\u1EDDi 2 con s\u1ED1 t\u1EEB 00 \u0111\u1EBFn 99. To\xE0n b\u1ED9 18 gi\u1EA3i \u0111\u1ED3ng th\u1EDDi c\xF3 c\u1EA3 2 con s\u1ED1 \u0111\u1EB7t c\u01B0\u1EE3c th\xEC tr\xFAng. (S\u1ED1 ti\u1EC1n thanh to\xE1n = Ti\u1EC1n c\u01B0\u1EE3c x 36 l\u1EA7n)\n</div><div class="pair"><span>Xi\xEAn 3:</span>\n L\xE0 h\xECnh th\u1EE9c c\u01B0\u1EE3c \u0111\u1ED3ng th\u1EDDi 3 con s\u1ED1 t\u1EEB 00 \u0111\u1EBFn 99. To\xE0n b\u1ED9 18 gi\u1EA3i \u0111\u1ED3ng th\u1EDDi c\xF3 c\u1EA3 3 con s\u1ED1 \u0111\u1EB7t c\u01B0\u1EE3c th\xEC tr\xFAng. (S\u1ED1 ti\u1EC1n thanh to\xE1n = Ti\u1EC1n c\u01B0\u1EE3c x 54 l\u1EA7n)\n</div><div class="pair"><span>Xi\xEAn 4:</span>\n L\xE0 h\xECnh th\u1EE9c c\u01B0\u1EE3c \u0111\u1ED3ng th\u1EDDi 4 con s\u1ED1 t\u1EEB 00 \u0111\u1EBFn 99. To\xE0n b\u1ED9 18 gi\u1EA3i \u0111\u1ED3ng th\u1EDDi c\xF3 c\u1EA3 4 con s\u1ED1 \u0111\u1EB7t c\u01B0\u1EE3c th\xEC tr\xFAng. (S\u1ED1 ti\u1EC1n thanh to\xE1n = Ti\u1EC1n c\u01B0\u1EE3c x 72 l\u1EA7n)\n</div><p><em>L\u01B0u \xFD : </em>\nn\u1EBFu c\u1EB7p xi\xEAn \u0111\u1EB7t c\u01B0\u1EE3c \u0111\u1EC1u xu\u1EA5t hi\u1EC7n 2, 3 ho\u1EB7c 4 l\u1EA7n trong t\u1EA5t c\u1EA3 c\xE1c gi\u1EA3i th\xEC ti\u1EC1n th\u1EAFng c\u01B0\u1EE3c \u0111\u01B0\u1EE3c t\xEDnh nh\xE2n 2, 3 ho\u1EB7c 4 l\u1EA7n t\xF9y theo s\u1ED1 l\u1EA7n xu\u1EA5t hi\u1EC7n.\n</p><h4>2D 7 L\xF4</h4><p>\nL\xE0 h\xECnh th\u1EE9c c\u01B0\u1EE3c m\u1ED9t s\u1ED1 t\u1EEB 00 \u0111\u1EBFn 99. L\u1EA5y 2 s\u1ED1 cu\u1ED1i c\xE1c gi\u1EA3i N\u0103m, S\xE1u, B\u1EA3y, T\xE1m v\xE0 gi\u1EA3i \u0110\u1EB7c Bi\u1EC7t l\xE0m k\u1EBFt qu\u1EA3.</p><p>\nS\u1ED1 ti\u1EC1n thanh to\xE1n = Ti\u1EC1n c\u01B0\u1EE3c x 7 l\u1EA7n</p><h4>3D - \u0110\u1EA7u</h4><p>\nL\xE0 h\xECnh th\u1EE9c c\u01B0\u1EE3c 1 s\u1ED1 t\u1EEB 000 \u0111\u1EBFn 999, l\u1EA5y Gi\u1EA3i B\u1EA3y l\xE0m k\u1EBFt qu\u1EA3.</p><h4>3D - \u0110u\xF4i</h4><p>\nL\xE0 h\xECnh th\u1EE9c c\u01B0\u1EE3c 1 s\u1ED1 t\u1EEB 000 \u0111\u1EBFn 999, l\u1EA5y 3 s\u1ED1 cu\u1ED1i Gi\u1EA3i \u0110\u1EB7c Bi\u1EC7t l\xE0m k\u1EBFt qu\u1EA3.</p><h4>3D \u2013 \u0110\u1EA7u \u0110u\xF4i (X\u1EC9u Ch\u1EE7)</h4><p>\nL\xE0 h\xECnh th\u1EE9c c\u01B0\u1EE3c 1 s\u1ED1 t\u1EEB 000 \u0111\u1EBFn 999, l\u1EA5y Gi\u1EA3i B\u1EA3y v\xE0 3 s\u1ED1 cu\u1ED1i Gi\u1EA3i \u0110\u1EB7c Bi\u1EC7t l\xE0m k\u1EBFt qu\u1EA3.</p><p>\nS\u1ED1 ti\u1EC1n thanh to\xE1n = Ti\u1EC1n c\u01B0\u1EE3c x 2 l\u1EA7n</p><h4>3D - 17 L\xD4</h4><p>\nL\xE0 h\xECnh th\u1EE9c c\u01B0\u1EE3c 1 s\u1ED1 t\u1EEB 000 \u0111\u1EBFn 999, l\u1EA5y 3 s\u1ED1 cu\u1ED1i t\u1EA5t c\u1EA3 c\xE1c gi\u1EA3i (tr\u1EEB Gi\u1EA3i T\xE1m) l\xE0m k\u1EBFt qu\u1EA3.</p><p>\nS\u1ED1 ti\u1EC1n thanh to\xE1n = Ti\u1EC1n c\u01B0\u1EE3c x 17 l\u1EA7n</p><h4>3D - 7 L\xF4</h4><p>\nL\xE0 h\xECnh th\u1EE9c c\u01B0\u1EE3c m\u1ED9t s\u1ED1 t\u1EEB 000 \u0111\u1EBFn 999. L\u1EA5y 3 s\u1ED1 cu\u1ED1i c\xE1c gi\u1EA3i N\u0103m, S\xE1u, B\u1EA3y, \u0110\u1EB7c Bi\u1EC7t v\xE0 gi\u1EA3i \u0111\u1EA7u ti\xEAn c\u1EE7a Gi\u1EA3i T\u01B0 l\xE0m k\u1EBFt qu\u1EA3.\n</p><p>S\u1ED1 ti\u1EC1n thanh to\xE1n = Ti\u1EC1n c\u01B0\u1EE3c x 7 l\u1EA7n</p><h4>4D - \u0110u\xF4i</h4><p>\nL\xE0 h\xECnh th\u1EE9c c\u01B0\u1EE3c 1 s\u1ED1 t\u1EEB 0000 \u0111\u1EBFn 9999, l\u1EA5y 4 s\u1ED1 cu\u1ED1i gi\u1EA3i \u0110\u1EB7c Bi\u1EC7t l\xE0m k\u1EBFt qu\u1EA3.</p><h4>4D - 16 L\xD4</h4><p>\nL\xE0 h\xECnh th\u1EE9c c\u01B0\u1EE3c 1 s\u1ED1 t\u1EEB 0000 \u0111\u1EBFn 9999, l\u1EA5y 4 s\u1ED1 cu\u1ED1i t\u1EA5t c\u1EA3 c\xE1c Gi\u1EA3i (tr\u1EEB gi\u1EA3i B\u1EA3y, T\xE1m) l\xE0m k\u1EBFt qu\u1EA3.</p><h4>\nXi\xEAn 18A + 18B</h4><div class="pair"><span>Xi\xEAn 2</span>\n L\xE0 h\xECnh th\u1EE9c c\u01B0\u1EE3c \u0111\u1ED3ng th\u1EDDi 2 con s\u1ED1 t\u1EEB 00 \u0111\u1EBFn 99. To\xE0n b\u1ED9 18 gi\u1EA3i c\u1EE7a \u0111\xE0i A v\xE0 18 gi\u1EA3i c\u1EE7a \u0111\xE0i B \u0111\u1ED3ng th\u1EDDi c\xF3 c\u1EA3 2 con s\u1ED1 \u0111\u1EB7t c\u01B0\u1EE3c th\xEC tr\xFAng (S\u1ED1 ti\u1EC1n thanh to\xE1n = Ti\u1EC1n c\u01B0\u1EE3c x 72 l\u1EA7n)\n</div><div class="pair"><span>Xi\xEAn 3</span>\n L\xE0 h\xECnh th\u1EE9c c\u01B0\u1EE3c \u0111\u1ED3ng th\u1EDDi 2 con s\u1ED1 t\u1EEB 00 \u0111\u1EBFn 99. To\xE0n b\u1ED9 18 gi\u1EA3i c\u1EE7a \u0111\xE0i A v\xE0 18 gi\u1EA3i c\u1EE7a \u0111\xE0i B \u0111\u1ED3ng th\u1EDDi c\xF3 c\u1EA3 3 con s\u1ED1 \u0111\u1EB7t c\u01B0\u1EE3c th\xEC tr\xFAng (S\u1ED1 ti\u1EC1n thanh to\xE1n = Ti\u1EC1n c\u01B0\u1EE3c x 108 l\u1EA7n)\n</div><div class="pair"><span>Xi\xEAn 4</span>\n L\xE0 h\xECnh th\u1EE9c c\u01B0\u1EE3c \u0111\u1ED3ng th\u1EDDi 2 con s\u1ED1 t\u1EEB 00 \u0111\u1EBFn 99. To\xE0n b\u1ED9 18 gi\u1EA3i c\u1EE7a \u0111\xE0i A v\xE0 18 gi\u1EA3i c\u1EE7a \u0111\xE0i B \u0111\u1ED3ng th\u1EDDi c\xF3 c\u1EA3 4 con s\u1ED1 \u0111\u1EB7t c\u01B0\u1EE3c th\xEC tr\xFAng (S\u1ED1 ti\u1EC1n thanh to\xE1n = Ti\u1EC1n c\u01B0\u1EE3c x 144 l\u1EA7n)\n</div><div class="table-container md-whiteframe-1dp md-primary-bg"><table class="table payouts" cellspacing="0" \nwidth="100%"><thead><tr><th colspan="3">T\u1EC9 l\u1EC7 tr\u1EA3 th\u01B0\u1EDFng x\u1ED5 s\u1ED1 Mi\u1EC1n Nam</th></tr></thead><tbody><tr><td class="title">\nTh\u1EC3 lo\u1EA1i c\u01B0\u1EE3c</td><td class="title">Tr\u1EA3 th\u01B0\u1EDFng</td><td class="title">Nh\xE1y</td></tr><tr><td class="title">2D \u2013 \u0110\u1EA7u</td>\n<td>1 : 75</td><td>Kh\xF4ng</td></tr><tr><td class="title">2D \u2013 \u0110u\xF4i</td><td>1 : 75</td><td>Kh\xF4ng</td></tr><tr><td \nclass="title">2D \u2013 18 L\xF4</td><td>1 : 75</td><td>C\xF3</td></tr><tr><td class="title">2D \u2013 7 L\xF4</td><td>1 : 75</td><td>C\xF3\n</td></tr><tr><td class="title">3D \u2013 \u0110\u1EA7u</td><td>1 : 650</td><td>Kh\xF4ng</td></tr><tr><td class="title">3D \u2013 \u0110u\xF4i</td><td>\n1 : 650</td><td>Kh\xF4ng</td></tr><tr><td class="title">3D \u2013 18 L\xF4</td><td>1 : 650</td><td>C\xF3</td></tr><tr><td \nclass="title">3D \u2013 7 L\xF4</td><td>1 : 650</td><td>C\xF3</td></tr><tr><td class="title">4D \u2013 \u0110u\xF4i</td><td>1 : 6000</td><td>\nKh\xF4ng</td></tr><tr><td class="title">4D \u2013 16 L\xF4</td><td>1 : 6000</td><td>C\xF3</td></tr><tr><td class="title">2D \u2013 Xi\xEAn 2\n</td><td>1 : 800</td><td>C\xF3</td></tr><tr><td class="title">2D \u2013 Xi\xEAn 3</td><td>1 : 5000</td><td>C\xF3</td></tr><tr><td \nclass="title">2D \u2013 Xi\xEAn 4</td><td>1 : 20000</td><td>C\xF3</td></tr><tr><td class="title">Xi\xEAn 2 (18A + 18B)</td><td>1 : 560\n</td><td>C\xF3</td></tr><tr><td class="title">Xi\xEAn 3 (18A + 18B)</td><td>1 : 2.800</td><td>C\xF3</td></tr><tr><th \nclass="title">Xi\xEAn 4 (18A + 18B)</th><td>1 : 11.000</td><td>C\xF3</td></tr></tbody></table></div></div>');
$templateCache.put('app/main/account/rules/tab/noiquy.html','<div class="rules-content"><h3>M\xF4 t\u1EA3 c\xE1ch ch\u01A1i</h3><ul class="content"><li>\nC\xF3 th\u1EC3 lu\u1EADt c\u1EE7a n\u01A1i b\u1EA1n \u0111ang s\u1ED1ng c\xF3 quy \u0111\u1ECBnh r\u1EB1ng c\xE1 c\u01B0\u1EE3c tr\xEAn m\u1EA1ng l\xE0 b\u1EA5t h\u1EE3p ph\xE1p. N\u1EBFu th\u1EADt s\u1EF1 x\u1EA3y ra t\xECnh tr\u1EA1ng n\xE0y, C\xF4ng ty ch\xFAng t\xF4i s\u1EBD kh\xF4ng ch\u1ECBu tr\xE1ch nhi\u1EC7m v\u1EC1 nh\u1EEFng s\u1EF1 c\u1ED1 m\xE0 kh\xE1ch h\xE0ng g\u1EB7p ph\u1EA3i.\n</li><li>\nN\u1EBFu kh\xE1ch h\xE0ng nghi ng\u1EDD r\u1EB1ng d\u1EEF li\u1EC7u c\xF9a m\xECnh b\u1ECB \u0111\xE1nh c\u1EAFp, n\xEAn th\xF4ng b\xE1o ngay cho \u0110\u1EA1i l\xFD c\u1EA5p tr\xEAn ho\u1EB7c V\u0103n ph\xF2ng C\xF4ng ty \u0111\u1EC3 \u0111\u01B0\u1EE3c h\u1ED7 tr\u1EE3 k\u1ECBp th\u1EDDi tr\xE1nh nh\u1EEFng thi\u1EC7t h\u1EA1i \u0111\xE1ng ti\u1EBFc.\n</li><li>\nKh\xE1ch h\xE0ng c\xF3 tr\xE1ch nhi\u1EC7m b\u1EA3o m\u1EADt v\u1EC1 t\xE0i kho\u1EA3n v\xE0 th\xF4ng tin \u0111\u0103ng nh\u1EADp c\u1EE7a m\xECnh. \u0110\u1ED1i v\u1EDBi nh\u1EEFng c\xE1 c\u01B0\u1EE3c tr\u1EF1c tuy\u1EBFn b\u1EB1ng t\xEAn ng\u01B0\u1EDDi s\u1EED d\u1EE5ng v\xE0 m\u1EADt kh\u1EA9u h\u1EE3p l\u1EC7, th\xEC C\xF4ng ty s\u1EBD coi l\xE0 c\xF3 hi\u1EC7u l\u1EF1c.\n</li><li>\nKhi ph\xE1t h\xE0nh t\u1EF7 l\u1EC7 c\u01B0\u1EE3c m\xE0 x\u1EA3y ra b\u1EA5t k\u1EF3 l\u1ED7i \u0111\xE1nh m\xE1y ho\u1EB7c l\u1ED7i kh\xF4ng ch\u1EE7 \xFD c\u1EE7a con ng\u01B0\u1EDDi, b\u1EA5t k\u1EC3 tr\u01B0\u1EDBc ho\u1EB7c sau khi c\xF3 k\u1EBFt qu\u1EA3 m\u1EDF th\u01B0\u1EDFng, C\xF4ng ty c\xF3 quy\u1EC1n xo\xE1 ho\u1EB7c hu\u1EF7 b\u1ECF nh\u1EEFng m\xE3 c\u01B0\u1EE3c b\u1ECB l\u1ED7i \u1EDF b\u1EA5t c\u1EE9 l\xFAc n\xE0o v\xE0 th\xF4ng b\xE1o qua Th\xF4ng b\xE1o \u0111i\u1EC7n t\u1EED (C\xF4ng ty s\u1EBD kh\xF4ng th\xF4ng b\xE1o cho t\u1EEBng c\xE1 nh\xE2n).\n</li><li>\nM\u1ED7i l\u1EA7n \u0111\u0103ng nh\u1EADp kh\xE1ch h\xE0ng n\xEAn ki\u1EC3m tra s\u1ED1 d\u01B0 t\xE0i kho\u1EA3n c\u1EE7a m\xECnh. N\u1EBFu c\xF3 b\u1EA5t k\u1EF3 v\u1EA5n \u0111\u1EC1 v\u1EC1 s\u1ED1 d\u01B0 t\xE0i kho\u1EA3n, xin h\xE3y th\xF4ng b\xE1o cho \u0110\u1EA1i l\xFD c\u1EA5p tr\xEAn ho\u1EB7c V\u0103n ph\xF2ng C\xF4ng ty ngay l\u1EADp t\u1EE9c.\n</li><li>\nM\u1ED9t khi \u0111\u1EB7t c\u01B0\u1EE3c \u0111\u01B0\u1EE3c ch\u1EA5p nh\u1EADn (\u0111\xE3 qua th\u1EDDi gian h\u1EE7y \u0111\u1EB7t c\u01B0\u1EE3c), ng\u01B0\u1EDDi ch\u01A1i s\u1EBD kh\xF4ng th\u1EC3 s\u1EEDa hay h\u1EE7y b\u1ECF c\xE1c m\xE3 \u0111\u1EB7t c\u01B0\u1EE3c.\n</li><li>\nT\u1EF7 l\u1EC7 c\u01B0\u1EE3c c\u1EE7a c\xE1c con s\u1ED1 s\u1EBD \u0111\u01B0\u1EE3c bi\u1EBFn \u0111\u1ED5i th\u01B0\u1EDDng xuy\xEAn, Khi ph\xE1t th\u01B0\u1EDFng s\u1EBD \xE1p d\u1EE5ng theo t\u1EF7 l\u1EC7 c\u01B0\u1EE3c m\xE0 ban \u0111\u1EA7u b\u1EA1n \u0111\xE3 \u0111\u1EB7t c\u01B0\u1EE3c.\n</li><li>\nT\u1EA5t c\u1EA3 c\xE1c c\xE1 c\u01B0\u1EE3c \u0111\u1EC1u ph\u1EA3i ti\u1EBFn h\xE0nh tr\u01B0\u1EDBc th\u1EDDi gian m\u1EDF th\u01B0\u1EDFng X\u1ED5 S\u1ED1 n\u1EBFu kh\xF4ng c\xE1c m\xE3 c\u01B0\u1EE3c \u0111\xF3 s\u1EBD \u0111\u01B0\u1EE3c xem l\xE0 kh\xF4ng h\u1EE3p l\u1EC7.\n</li><li>C\xF4ng ty c\xF3 quy\u1EC1n t\u1EEB ch\u1ED1i, h\u1EE7y nh\u1EEFng m\xE3 \u0111\u1EB7t c\u01B0\u1EE3c b\u1EA5t th\u01B0\u1EDDng ho\u1EB7c gian l\u1EADn. <b>Xin l\u01B0u \xFD!</b></li></ul><h3>\nC\xE1c kh\xE1i ni\u1EC7m</h3><ul class="content"><li><em>Ti\u1EC1n \u0111\u1EA7u : </em>l\xE0 \u0111\u01A1n v\u1ECB thu c\u1EE7a nh\xE0 c\xE1i t\xF9y t\u1EEBng h\xECnh th\u1EE9c ch\u01A1i.</li>\n<li><em>Ti\u1EC1n g\u1ED1c : </em>l\xE0 ti\u1EC1n ph\u1EA3i tr\u1EEB \u0111i khi b\u1EA1n th\u1EAFng c\u01B0\u1EE3c</li><li><em>T\u1EC9 l\u1EC7 tr\u1EA3 th\u01B0\u1EDFng : </em>\nl\xE0 t\u1EC9 l\u1EC7 nh\xE2n khi kh\xE1ch th\u1EAFng c\u01B0\u1EE3c (1:70 l\xE0 b\u1ECF 1 \u0103n 70 hay c\xF2n g\u1ECDi l\xE0 x70 l\u1EA7n).</li><li><em>Nh\xE1y : </em>\nl\xE0 s\u1ED1 l\u1EA7n xu\u1EA5t hi\u1EC7n c\u1EE7a s\u1ED1 ho\u1EB7c c\u1EB7p s\u1ED1 \u0111\u1EB7t c\u01B0\u1EE3c. T\xF9y t\u1EEBng h\xECnh th\u1EE9c, ng\u01B0\u1EDDi ch\u01A1i \u0111\u01B0\u1EE3c tr\u1EA3 th\u01B0\u1EDFng nh\xE2n 2, 3 ho\u1EB7c 4 l\u1EA7n d\u1EF1a v\xE0o s\u1ED1 l\u1EA7n xu\u1EA5t hi\u1EC7n.\n</li></ul><div class="table-container md-whiteframe-1dp md-primary-bg"><table class="table" cellspacing="0" \nwidth="100%"><thead><tr><th colspan="8">TH\u1EDCI GIAN \u0110\xD3NG C\u01AF\u1EE2C MI\u1EC0N B\u1EAEC</th></tr></thead><tbody><tr><td rowspan="4">\n<strong>Mi\u1EC1n B\u1EAFc 1</strong></td><td rowspan="4">T\u1EA5t c\u1EA3 c\xE1c ng\xE0y trong tu\u1EA7n</td><td colspan="3" class="gradient"><strong>\n\u0110\u1EC1</strong></td><td colspan="3" class="gradient"><strong>L\xF4</strong></td></tr><tr><td colspan="3">18:30<br><span>\n(v\xE0 theo th\u1EF1c t\u1EBF t\u1EA1i tr\u01B0\u1EDDng quay)</span></td><td colspan="3">18:15<br><span>(v\xE0 theo th\u1EF1c t\u1EBF t\u1EA1i tr\u01B0\u1EDDng quay)</span>\n</td></tr><tr><td colspan="3" class="gradient"><strong>\u0110\u1EC1 Gi\u1EA3i nh\u1EA5t</strong></td><td colspan="3" class="gradient">\n<strong>\u0110\u1EC1 Th\u1EA7n T\xE0i</strong></td></tr><tr><td colspan="3">18:15<br><span>(v\xE0 theo th\u1EF1c t\u1EBF t\u1EA1i tr\u01B0\u1EDDng quay)</span></td>\n<td colspan="3">18:08<br><span>(v\xE0 theo th\u1EF1c t\u1EBF t\u1EA1i tr\u01B0\u1EDDng quay)</span></td></tr><tr><td rowspan="2"><strong>Mi\u1EC1n B\u1EAFc 2\n</strong></td><td rowspan="2">T\u1EA5t c\u1EA3 c\xE1c ng\xE0y trong tu\u1EA7n</td><td colspan="" class="gradient"><strong>2D \u0110\u1EA7u</strong>\n</td><td colspan="" class="gradient"><strong>3D \u0110\u1EA7u</strong></td><td colspan="" class="gradient"><strong>3D 23L\xF4\n</strong></td><td colspan="" class="gradient"><strong>3D \u0110u\xF4i</strong></td><td colspan="" class="gradient"><strong>\n4D 20L\xF4</strong></td><td colspan="" class="gradient"><strong>4D \u0110u\xF4i</strong></td></tr><tr><td colspan="">18:15</td><td \ncolspan="">18:10</td><td colspan="">18:10</td><td colspan="">18:25</td><td colspan="">18:10</td><td colspan="">18:25\n</td></tr></tbody></table></div><div class="table-container md-whiteframe-1dp md-primary-bg"><table class="table" \ncellspacing="0" width="100%"><thead><tr><th colspan="6">TH\u1EDCI GIAN \u0110\xD3NG C\u01AF\u1EE2C MI\u1EC0N NAM</th></tr></thead><tbody><tr><td \nrowspan="16" class="none-bottom"><strong>Mi\u1EC1n Nam</strong></td><td rowspan="2">&nbsp;</td><td colspan="3" \nclass="gradient"><strong>18A</strong></td><td colspan="3" class="gradient"><strong>18B</strong></td></tr><tr><td>\n<strong>2D \u0110u\xF4i</strong></td><td><strong>2D \u0110\u1EA7u</strong></td><td><strong>2D \u0110u\xF4i</strong></td><td><strong>2D \u0110\u1EA7u\n</strong></td></tr><tr><td rowspan="2"><strong>Th\u1EE9 Hai</strong></td><td colspan="2" class="gradient"><strong>\nTP. H\u1ED3 Ch\xED Minh</strong></td><td colspan="2" class="gradient"><strong>\u0110\u1ED3ng Th\xE1p</strong></td></tr><tr><td>15:59</td><td>\n15:59</td><td>15:59</td><td>15:59</td></tr><tr><td rowspan="2"><strong>Th\u1EE9 Ba</strong></td><td colspan="2" \nclass="gradient"><strong>B\u1EBFn Tre</strong></td><td colspan="2" class="gradient"><strong>V\u0169ng T\xE0u</strong></td></tr><tr>\n<td>15:59</td><td>15:59</td><td>15:59</td><td>15:59</td></tr><tr><td rowspan="2"><strong>Th\u1EE9 T\u01B0</strong></td><td \ncolspan="2" class="gradient"><strong>\u0110\u1ED3ng Nai</strong></td><td colspan="2" class="gradient"><strong>C\u1EA7n Th\u01A1</strong>\n</td></tr><tr><td>15:59</td><td>15:59</td><td>15:59</td><td>15:59</td></tr><tr><td rowspan="2"><strong>Th\u1EE9 N\u0103m</strong>\n</td><td colspan="2" class="gradient"><strong>T\xE2y Ninh</strong></td><td colspan="2" class="gradient"><strong>An Giang\n</strong></td></tr><tr><td>15:59</td><td>15:59</td><td>15:59</td><td>15:59</td></tr><tr><td rowspan="2"><strong>Th\u1EE9 S\xE1u\n</strong></td><td colspan="2" class="gradient"><strong>V\u0129nh Long</strong></td><td colspan="2" class="gradient"><strong>\nB\xECnh D\u01B0\u01A1ng</strong></td></tr><tr><td>15:59</td><td>15:59</td><td>15:59</td><td>15:59</td></tr><tr><td rowspan="2">\n<strong>Th\u1EE9 B\u1EA3y</strong></td><td colspan="2" class="gradient"><strong>TP. H\u1ED3 Ch\xED Minh</strong></td><td colspan="2" \nclass="gradient"><strong>Long An</strong></td></tr><tr><td>15:59</td><td>15:59</td><td>15:59</td><td>15:59</td></tr><tr>\n<td rowspan="2" class="none-bottom"><strong>Ch\u1EE7 Nh\u1EADt</strong></td><td colspan="2" class="gradient"><strong>Ti\u1EC1n Giang\n</strong></td><td colspan="2" class="gradient"><strong>Ki\xEAn Giang</strong></td></tr><tr><td>15:59</td><td>15:59</td><td>\n15:59</td><td>15:59</td></tr></tbody></table></div><div class="table-container md-whiteframe-1dp md-primary-bg"><table \nclass="table payouts" cellspacing="0" width="100%"><thead><tr class="subtitle"><th>Th\u1EC3 lo\u1EA1i c\u01B0\u1EE3c</th><th>Tr\u1EA3 th\u01B0\u1EDFng</th>\n<th>Nh\xE1y</th></tr></thead><tbody><tr><td colspan="3" class="title">X\u1ED5 S\u1ED1 Mi\u1EC1n B\u1EAFc 1</td></tr><tr><td class="title">\u0110\u1EC1\n</td><td>1:70</td><td>Kh\xF4ng</td></tr><tr><td class="title">\u0110\u1EC1 \u0110\u1EA7u</td><td>1:70</td><td>Kh\xF4ng</td></tr><tr><td \nclass="title">\u0110\u1EC1 Gi\u1EA3i Nh\u1EA5t</td><td>1:70</td><td>Kh\xF4ng</td></tr><tr><td class="title">\u0110\u1EC1 \u0110\u1EA7u Gi\u1EA3i Nh\u1EA5t</td><td>1:70</td>\n<td>Kh\xF4ng</td></tr><tr><td class="title">\u0110\u1EC1 Th\u1EA7n T\xE0i</td><td>1:70</td><td>Kh\xF4ng</td></tr><tr><td class="title">\n\u0110\u1EC1 \u0110\u1EA7u Th\u1EA7n T\xE0i</td><td>1:70</td><td>Kh\xF4ng</td></tr><tr><td class="title">L\xF4</td><td>1:80</td><td>C\xF3</td></tr><tr><td \nclass="title">L\xF4 \u0110\u1EA7u</td><td>1:80</td><td>C\xF3</td></tr><tr><td class="title">Xi\xEAn 2</td><td>1:10</td><td>Kh\xF4ng</td></tr>\n<tr><td class="title">Xi\xEAn 3</td><td>1:40</td><td>Kh\xF4ng</td></tr><tr><td class="title">Xi\xEAn 4</td><td>1:100</td><td>\nKh\xF4ng</td></tr><tr><td class="title">\u0110\u1EC1 tr\u01B0\u1EE3t</td><td>1:0.65</td><td>Kh\xF4ng</td></tr><tr><td class="title">L\xF4 tr\u01B0\u1EE3t</td>\n<td>1:21.1</td><td>C\xF3</td></tr><tr><td colspan="3" class="title">X\u1ED5 S\u1ED1 Mi\u1EC1n B\u1EAFc 2</td></tr><tr><td class="title">\n2D \u2013 \u0110\u1EA7u</td><td>1 : 75</td><td>C\xF3</td></tr><tr><td class="title">2D \u2013 \u0110u\xF4i</td><td>1 : 75</td><td>Kh\xF4ng</td></tr><tr>\n<td class="title">2D \u2013 27 L\xF4</td><td>1 : 75</td><td>C\xF3</td></tr><tr><td class="title">3D \u2013 \u0110\u1EA7u</td><td>1 : 650</td><td>\nC\xF3</td></tr><tr><td class="title">3D \u2013 \u0110u\xF4i</td><td>1 : 650</td><td>Kh\xF4ng</td></tr><tr><td class="title">3D \u2013 23 L\xF4</td>\n<td>1 : 650</td><td>C\xF3</td></tr><tr><td class="title">4D \u2013 \u0110u\xF4i</td><td>1 : 6000</td><td>Kh\xF4ng</td></tr><tr><td \nclass="title">4D \u2013 20 L\xF4</td><td>1 : 6000</td><td>C\xF3</td></tr><tr><td class="title">2D \u2013 Xi\xEAn 2</td><td>1 : 680</td><td>\nC\xF3</td></tr><tr><td class="title">2D \u2013 Xi\xEAn 3</td><td>1 : 4000</td><td>C\xF3</td></tr><tr><td class="title">2D \u2013 Xi\xEAn 4\n</td><td>1 : 15000</td><td>C\xF3</td></tr><tr><td colspan="3" class="title">X\u1ED5 S\u1ED1 Mi\u1EC1n Nam</td></tr><tr><td class="title">\n2D \u2013 \u0110\u1EA7u</td><td>1 : 75</td><td>C\xF3</td></tr><tr><td class="title">2D \u2013 \u0110u\xF4i</td><td>1 : 75</td><td>Kh\xF4ng</td></tr><tr>\n<td class="title">2D \u2013 18 L\xF4</td><td>1 : 75</td><td class="title">C\xF3</td></tr><tr><td class="title">2D \u2013 7 L\xF4</td><td>\n1 : 75</td><td>C\xF3</td></tr><tr><td class="title">3D \u2013 \u0110\u1EA7u</td><td>1 : 650</td><td>C\xF3</td></tr><tr><td class="title">\n3D \u2013 \u0110u\xF4i</td><td>1 : 650</td><td>Kh\xF4ng</td></tr><tr><td class="title">3D \u2013 18 L\xF4</td><td>1 : 650</td><td>C\xF3</td></tr>\n<tr><td class="title">3D \u2013 7 L\xF4</td><td>1 : 650</td><td>C\xF3</td></tr><tr><td class="title">4D \u2013 \u0110u\xF4i</td><td>1 : 6000\n</td><td>Kh\xF4ng</td></tr><tr><td class="title">4D \u2013 16 L\xF4</td><td>1 : 6000</td><td>C\xF3</td></tr><tr><td class="title">\n2D \u2013 Xi\xEAn 2</td><td>1 : 800</td><td>C\xF3</td></tr><tr><td class="title">2D \u2013 Xi\xEAn 3</td><td>1 : 5000</td><td>C\xF3</td></tr>\n<tr><td class="title">2D \u2013 Xi\xEAn 4</td><td>1 : 20000</td><td>C\xF3</td></tr></tbody></table></div></div>');
$templateCache.put('app/main/announcements/views/detail/detail.html','<div class="thread-content"><div ng-bind-html="vm.currentThread.Message"></div></div>');
$templateCache.put('app/main/announcements/views/list/list.html','<div class="no-threads" ng-if="vm.threads.length === 0 && !vm.loadingThreads">\nKh\xF4ng c\xF3 th\xF4ng b\xE1o n\xE0o trong \'{{vm.currentFilter.filter | announcements}}\'!</div><div class="loading-threads" \nlayout="column" layout-align="center center" ng-if="vm.loadingThreads"><md-progress-circular class="md-accent" \nmd-mode="indeterminate" md-diameter="64"></md-progress-circular><div>Loading ...</div></div><div \nclass="thread {{thread.status}}" md-ink-ripple ng-if="!vm.loadingThreads" ng-repeat="thread in vm.threads" \nng-click="vm.openThread(thread)" \nng-class="{\'unread\': !thread.Read, \'current-thread\': vm.currentThread === thread, \'selected\': vm.isSelected(thread)}">\n<div layout="row" layout-align="start center"><div class="info" flex layout="column"><div class="name" layout="row" \nlayout-align="start center"><div class="time">{{ thread.PublishedAt | amDateFormat : \'DD/MM/YYYY HH:mm\' }}</div><div \nclass="code">{{ thread.Code }}</div></div><div class="subject text-truncate">{{thread.Message | htmlToPlaintext }}</div>\n</div></div></div>');
$templateCache.put('app/main/traditional/betting/inline-betting/inline-betting.html','<div class="inline-betting-container" ng-show="$root.Tickets.length"><div class="inline-betting-header" layout="row" \nlayout-align="space-between center"><md-switch ng-model="$root.hideSuccessTicket" aria-label="closePanel">\nT\u1EF1 \u1EA9n phi\u1EBFu c\u01B0\u1EE3c th\xE0nh c\xF4ng</md-switch></div><div class="table-wrap"><table class="table"><thead><tr><th>#</th><th>\u0110\xE0i\n</th><th>Th\u1EC3 lo\u1EA1i</th><th>T\u1ED5ng \u0111i\u1EC3m</th><th>Th\xE0nh ti\u1EC1n</th><th>Tr\u1EA1ng th\xE1i</th></tr></thead><tbody \nng-repeat="item in $root.Tickets track by $index"><tr \nng-class="{\'with-error\': item.status === \'rejected\', \'processing\': item.status === \'processing\' }"><td>{{ $index+1}}\n</td><td>{{ item.GameType | gameByTerm }}</td><td>{{ item.BetType | bet }}</td><td>\n{{ item.Items | sumPointTicket | currency : \'\' : 0 }}</td><td ng-class="{\'blank\': (item | sumMoneyCost) <= 0}">\n{{ item | sumMoneyCost | currency : \'\' : 0 }}</td><td><md-icon md-font-icon="icon-check" class="s20 approved" \nng-show="item.status === \'approved\'"></md-icon><md-icon md-font-icon="icon-alert" class="s20 md-warn" \nng-show="item.status === \'rejected\'"></md-icon><md-icon md-font-icon="icon-play" class="s20" \nng-class="{\'blink\': item.status === \'processing\'}" ng-show="item.status === \'processing\' && !item.notAnswer"></md-icon>\n<md-icon md-font-icon="icon-stop" class="s20 icon-stop" ng-show="item.status === \'processing\' && item.notAnswer ">\n</md-icon></td></tr><tr class="error-message" ng-if="item.status === \'rejected\'"><td colspan="6"><div layout="row" \nlayout-align="space-between center"><div>{{item.errorMessage}}</div><div ng-if="item.reBetAvailable"><a \nng-click="$root.reBetting(item)">C\u01B0\u1EE3c l\u1EA1i</a></div></div></td></tr></tbody></table></div></div>');
$templateCache.put('app/main/traditional/northern/except/except.html','<div class="main-game" layout-gt-sm="row" layout="column"><div flex-gt-sm="70" flex="100" class="content-number-wrap">\n<div layout="column" class="content-number md-whiteframe-1dp md-primary-bg"><div class="row-input-numbers"><form \nclass="md-inline-form" ng-submit="vm.submitKeyNumber()" novalidate layout="row"><input type="tel" autocomplete="off" \nclass="input-numbers-array md-one-input" placeholder="D\xE3y s\u1ED1" ng-model="vm.keynumber" \nng-keyup="vm.inputKeyNumber($event)" ng-focus="vm.betPoint = 0" tabindex="1" ng-disabled="!$root.allowBetting">\n<md-button class="md-raised key-number" type="button" ng-click="vm.submitKeyNumber(true)" \nng-disabled="!vm.keynumber.length">Th\xEAm v\xE0o</md-button><md-button hide show-gt-xs class="md-raised md-accent" \nng-disabled="!$root.allowBetting" ng-click="vm.quickShow = !vm.quickShow">Ch\u1ECDn nhanh<md-icon \nmd-font-icon="icon-menu-down" ng-if="!vm.quickShow"></md-icon><md-icon md-font-icon="icon-menu-up" ng-if="vm.quickShow">\n</md-icon></md-button><md-button hide-gt-xs class="md-raised md-icon-button md-accent" aria-label="Favorite" \nng-disabled="!$root.allowBetting" ng-click="vm.quickShow = !vm.quickShow"><md-icon md-font-icon="icon-menu-down" \nng-if="!vm.quickShow"></md-icon><md-icon md-font-icon="icon-menu-up" ng-if="vm.quickShow"></md-icon></md-button></form>\n</div><div class="collapsing" ng-show="vm.quickShow"><md-content><md-tabs md-dynamic-height md-border-bottom><md-tab \nng-repeat="item in vm.quickChoices" label="{{item.name}}" ng-if="$index > 0"><md-content class=""><div class="content" \nng-repeat="content in item.collect"><md-checkbox ng-checked="vm.exists($parent.$index, $index)" \nng-click="vm.groupNumbers($parent.$index, $index)" aria-label="Quick Choices" ng-disabled="!$root.allowBetting">\n{{ content.name }}</md-checkbox></div></md-content></md-tab></md-tabs></md-content></div><table><tbody><tr hide \nshow-gt-xs><td><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(3, 1)" \nng-click="vm.groupNumbers(3, 1)" ng-disabled="!$root.allowBetting"></md-checkbox></td><td colspan="10" layout="row" \nclass="row-check"><div layout="row" layout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" \nng-checked="vm.exists(0, 10)" ng-click="vm.groupNumbers(0, 10)" ng-disabled="!$root.allowBetting"></md-checkbox></div>\n<div layout="row" layout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(0, 11)" \nng-click="vm.groupNumbers(0, 11)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(0, 12)" \nng-click="vm.groupNumbers(0, 12)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(0, 13)" \nng-click="vm.groupNumbers(0, 13)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(0, 14)" \nng-click="vm.groupNumbers(0, 14)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(0, 15)" \nng-click="vm.groupNumbers(0, 15)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(0, 16)" \nng-click="vm.groupNumbers(0, 16)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(0, 17)" \nng-click="vm.groupNumbers(0, 17)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(0, 18)" \nng-click="vm.groupNumbers(0, 18)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(0, 19)" \nng-click="vm.groupNumbers(0, 19)" ng-disabled="!$root.allowBetting"></md-checkbox></div></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(0, 0)" \nng-click="vm.groupNumbers(0, 0)" ng-disabled="!$root.allowBetting"></md-checkbox></td><td colspan="10" rowspan="10" \nclass="main-number"><div class="repeater-number" ng-repeat="n in vm.numbers"><div class="inner-number md-one-number" \nlayout="column" ng-click="vm.selectNumber(n)" \nng-class="{\'active\' : n.selected,  \'changed-price\': n.priceChanged && $root.allowBetting, \'stop\': n.disabled || !$root.allowBetting}">\n<div class="number">{{n.number}}</div><div class="price except md-accent-fg md-hue-1" hide show-gt-xs><span \nng-class="{\'price-up\' : n.price > vm.basePrice, \'zero\' : n.price === 0}">{{n.price | currency : \'\' : 0 }}</span></div>\n</div></div></td></tr><tr><td layout="row" layout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" \nng-checked="vm.exists(0, 1)" ng-click="vm.groupNumbers(0, 1)" ng-disabled="!$root.allowBetting"></md-checkbox></td></tr>\n<tr><td layout="row" layout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(0, 2)" \nng-click="vm.groupNumbers(0, 2)" ng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(0, 3)" \nng-click="vm.groupNumbers(0, 3)" ng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(0, 4)" \nng-click="vm.groupNumbers(0, 4)" ng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(0, 5)" \nng-click="vm.groupNumbers(0, 5)" ng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(0, 6)" \nng-click="vm.groupNumbers(0, 6)" ng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(0, 7)" \nng-click="vm.groupNumbers(0, 7)" ng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(0, 8)" \nng-click="vm.groupNumbers(0, 8)" ng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(0, 9)" \nng-click="vm.groupNumbers(0, 9)" ng-disabled="!$root.allowBetting"></md-checkbox></td></tr></tbody></table></div></div>\n<div flex-gt-sm="30" flex="100" layout="column" class="main-right-betting-form"><div layout="column" \nclass="betting-form-wrap"><div class="betting-form md-whiteframe-1dp md-primary-bg" layout="column"><div \nclass="betting-form-header"><div layout="row"><div flex="30">\u0110\u1EB7t c\u01B0\u1EE3c</div><div flex="70" class="text-right">\n{{vm.betId | bet}} - Mi\u1EC1n B\u1EAFc 1</div></div></div><div class="betting-form-content"><form name="basicForm" \nclass="md-inline-form" ng-submit="vm.submitBetting()" novalidate><div layout="row"><div \nclass="sub-title padding-right-8" flex="30"><span class="text-boxed-one">S\u1ED1 \u0111i\u1EC3m</span></div><div flex="70"><input \ntype="tel" id="bet-input" class="bet-input md-one-input" ng-model="vm.betPoint" maxlength="5" ng-currency \nselect-on-click numeric-only ng-change="vm.changeBettingPoint()" ng-blur="vm.clearTemporary()" \nng-disabled="(vm.numbers | filter : {selected : true}).length < vm.param.minbet" autocomplete="off" tabindex="2"></div>\n</div><div layout="row" class="padding-top-16"><div flex="30" class="padding-right-8"><md-button \nclass="betting-button cancel-button md-warn md-raised" ng-disabled="!(vm.numbers | filter : {selected : true}).length" \nng-click="vm.resetBetting()"><md-icon md-font-icon="icon-close"></md-icon></md-button></div><div flex="70"><md-button \nclass="betting-button md-raised md-accent" type="submit" ng-disabled="vm.totalMoney === 0">\u0110\u1EB7t c\u01B0\u1EE3c</md-button></div>\n</div><div class="ignore-price"><md-checkbox ng-model="vm.ignorePrice" aria-label="Ignore Price">\nKh\xF4ng h\u1ECFi l\u1EA1i khi c\xF3 gi\xE1 thay \u0111\u1ED5i</md-checkbox></div></form><div layout="row" class="padding-top-16"><div \nclass="sub-title" flex="30">T\u1ED5ng \u0111i\u1EC3m</div><div flex="70" class="text-bold">{{vm.totalPoint() | currency : \'\' : 0 }}\n</div></div><div layout="row" class="padding-top-16"><div class="sub-title" flex="30">Th\xE0nh ti\u1EC1n</div><div flex="70" \nclass="text-bold">{{vm.totalMoney | currency : \'\' : 0 }}</div></div><div layout="row" class="padding-top-8" \nng-show="(vm.numbers | filter : {selected : true}).length" ng-click="vm.showFull = !vm.showFull"><div \nclass="sub-title number" ng-class="{\'full\' : vm.showFull}"><div>Danh s\xE1ch</div><span class="md-accent-fg md-hue-1" \nng-repeat="n in vm.numbers | filter : {selected : true}">{{n.number}}<span ng-if="!$last">,&nbsp;</span></span></div>\n</div><div layout="row" class="padding-top-8" ng-if="$root.isAuthenticated"><div class="sub-title secondary" flex="30">\nT\u1ED1i \u0111a</div><div flex="70" class="text-bold sub-title secondary">{{vm.purchaseLimit | currency : \'\' : 0 }} \u0110i\u1EC3m</div>\n</div><div layout="row" class="balance" ng-if="$root.isAuthenticated"><div class="sub-title secondary" flex="30">S\u1ED1 d\u01B0\n</div><div flex="70" class="text-bold sub-title secondary" layout="row" layout-align="space-between center">\n{{ $root.User.Balance | currency : \'\' : 0 }}<md-button class="md-icon-button" ng-click="$root.updateBalance()" \nng-disabled="$root.User.updating"><md-icon md-font-icon="icon-refresh" class="s16" \nng-class="{\'rotating\' : $root.User.updating }"></md-icon></md-button></div></div></div></div></div><div layout="column" \nclass="recent-betting-list" ng-include="\'app/main/traditional/betting/recent-ticket.html\'" \nng-show="$root.latestTicket.length"></div></div></div>');
$templateCache.put('app/main/traditional/northern/general/general.html','<div class="main-game" layout-gt-sm="row" layout="column"><div flex-gt-sm="70" flex="100" class="content-number-wrap">\n<div layout="column" class="content-number md-whiteframe-1dp md-primary-bg"><div class="row-input-numbers has-star">\n<form class="md-inline-form" ng-submit="vm.submitKeyNumber()" novalidate layout="row"><input type="tel" \nautocomplete="off" go-focus="vm.focusVar" class="input-numbers-array md-one-input" placeholder="D\xE3y s\u1ED1" \nng-model="vm.keynumber" ng-keyup="vm.inputKeyNumber($event)" ng-focus="vm.betPoint = 0" tabindex="1" \nng-disabled="!$root.allowBetting"><md-button class="md-raised key-number" type="button" \nng-click="vm.submitKeyNumber(true)" ng-disabled="!vm.keynumber.length">Th\xEAm v\xE0o</md-button><md-button hide show-gt-xs \nclass="md-raised md-accent" ng-disabled="!$root.allowBetting" ng-click="vm.quickShow = !vm.quickShow">Ch\u1ECDn nhanh<md-icon\n md-font-icon="icon-menu-down" ng-if="!vm.quickShow"></md-icon><md-icon md-font-icon="icon-menu-up" \nng-if="vm.quickShow"></md-icon></md-button><md-button hide-gt-xs class="md-raised md-icon-button md-accent" \naria-label="Favorite" ng-disabled="!$root.allowBetting" ng-click="vm.quickShow = !vm.quickShow"><md-icon \nmd-font-icon="icon-menu-down" ng-if="!vm.quickShow"></md-icon><md-icon md-font-icon="icon-menu-up" ng-if="vm.quickShow">\n</md-icon></md-button><md-button class="md-raised md-icon-button md-accent" \nng-class="{ \'highlight\' : vm.highlight.enabled }" ng-disabled="!$root.allowBetting" \nng-click="vm.setupHighlight($event)" ng-if="$root.isAuthenticated"><md-icon md-font-icon="icon-star" class="s20">\n</md-icon></md-button></form></div><div class="collapsing md-primary-bg" ng-show="vm.quickShow"><md-content><md-tabs \nmd-dynamic-height md-border-bottom><md-tab ng-repeat="item in vm.quickChoices" label="{{item.name}}" ng-if="$index > 0" \nmd-on-select="vm.onTabSelected($index)"><md-content class=""><div class="content" ng-repeat="content in item.collect">\n<md-checkbox ng-checked="vm.exists($parent.$index, $index)" ng-click="vm.groupNumbers($parent.$index, $index)" \naria-label="Quick Choices" ng-disabled="!$root.allowBetting">{{ content.name }}</md-checkbox></div><div \nclass="content md-accent-fg md-hue-1" ng-show="vm.activeTab === 8">B\u1ECF tr\xF9ng</div></md-content></md-tab></md-tabs>\n</md-content></div><table><tbody><tr hide show-gt-xs><td><md-checkbox md-no-ink aria-label="Checkbox" \nng-checked="vm.exists(3, 1)" ng-click="vm.groupNumbers(3, 1)" ng-disabled="!$root.allowBetting"></md-checkbox></td><td \ncolspan="10" layout="row" class="row-check"><div layout="row" layout-align="center"><md-checkbox md-no-ink \naria-label="Checkbox" ng-checked="vm.exists(0, 10)" ng-click="vm.groupNumbers(0, 10)" ng-disabled="!$root.allowBetting">\n</md-checkbox></div><div layout="row" layout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" \nng-checked="vm.exists(0, 11)" ng-click="vm.groupNumbers(0, 11)" ng-disabled="!$root.allowBetting"></md-checkbox></div>\n<div layout="row" layout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(0, 12)" \nng-click="vm.groupNumbers(0, 12)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(0, 13)" \nng-click="vm.groupNumbers(0, 13)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(0, 14)" \nng-click="vm.groupNumbers(0, 14)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(0, 15)" \nng-click="vm.groupNumbers(0, 15)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(0, 16)" \nng-click="vm.groupNumbers(0, 16)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(0, 17)" \nng-click="vm.groupNumbers(0, 17)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(0, 18)" \nng-click="vm.groupNumbers(0, 18)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(0, 19)" \nng-click="vm.groupNumbers(0, 19)" ng-disabled="!$root.allowBetting"></md-checkbox></div></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(0, 0)" \nng-click="vm.groupNumbers(0, 0)" ng-disabled="!$root.allowBetting"></md-checkbox></td><td colspan="10" rowspan="10" \nclass="main-number"><div class="repeater-number" ng-repeat="n in vm.numbers"><div class="inner-number md-one-number" \nlayout="column" ng-click="vm.selectNumber(n)" \nng-class="{\'active\' : n.selected,  \'changed-price\': n.priceChanged && $root.allowBetting, \'stop\': n.disabled || !$root.allowBetting}">\n<div class="number">{{n.number}}</div><div class="price md-accent-fg md-hue-1"><span \nng-class="{\'price-up\' : n.price > vm.highlight.atPrice && vm.highlight.enabled, \'zero\' : n.price === 0}">\n{{n.price | currency : \'\' : 0 }}</span></div><div class="input-point" hide show-gt-xs><input type="text" \nng-model="n.point" class="md-one-input" ng-currency numeric-only \nng-click="vm.singlePointClick($event);$event.stopPropagation()"></div></div></div></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(0, 1)" \nng-click="vm.groupNumbers(0, 1)" ng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(0, 2)" \nng-click="vm.groupNumbers(0, 2)" ng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(0, 3)" \nng-click="vm.groupNumbers(0, 3)" ng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(0, 4)" \nng-click="vm.groupNumbers(0, 4)" ng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(0, 5)" \nng-click="vm.groupNumbers(0, 5)" ng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(0, 6)" \nng-click="vm.groupNumbers(0, 6)" ng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(0, 7)" \nng-click="vm.groupNumbers(0, 7)" ng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(0, 8)" \nng-click="vm.groupNumbers(0, 8)" ng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(0, 9)" \nng-click="vm.groupNumbers(0, 9)" ng-disabled="!$root.allowBetting"></md-checkbox></td></tr></tbody></table></div></div>\n<div flex-gt-sm="30" flex="100" layout="column" class="main-right-betting-form"><div layout="column" \nclass="betting-form-wrap"><div class="betting-form md-whiteframe-1dp md-primary-bg" layout="column"><div \nclass="betting-form-header"><div layout="row"><div flex="30">\u0110\u1EB7t c\u01B0\u1EE3c</div><div flex="70" class="text-right">\n{{vm.betId | bet}} - Mi\u1EC1n B\u1EAFc 1</div></div></div><div class="betting-form-content"><form name="basicForm" \nclass="md-inline-form" ng-submit="vm.submitBetting()" novalidate><div layout="row"><div \nclass="sub-title padding-right-8" flex="30"><span class="text-boxed-one">S\u1ED1 \u0111i\u1EC3m</span></div><div flex="70"><input \ntype="tel" id="bet-input" class="bet-input md-one-input" ng-model="vm.betPoint" maxlength="5" ng-currency \nselect-on-click numeric-only ng-change="vm.changeBettingPoint()" ng-blur="vm.clearTemporary()" \nng-disabled="!(vm.numbers | filter : {selected : true}).length" autocomplete="off" tabindex="2"></div></div><div \nlayout="row" class="padding-top-16"><div flex="30" class="padding-right-8"><md-button \nclass="betting-button cancel-button md-warn md-raised" ng-disabled="!(vm.numbers | filter : {selected : true}).length" \nng-click="vm.resetBetting()"><md-icon md-font-icon="icon-close" class="s20"></md-icon></md-button></div><div flex="70">\n<md-button class="betting-button md-raised md-accent" type="submit" ng-disabled="vm.totalMoney === 0">\u0110\u1EB7t c\u01B0\u1EE3c\n</md-button></div></div><div class="ignore-price"><md-checkbox ng-model="vm.ignorePrice" aria-label="Ignore Price">\nKh\xF4ng h\u1ECFi l\u1EA1i khi c\xF3 gi\xE1 thay \u0111\u1ED5i</md-checkbox></div></form><div layout="row" class="padding-top-16"><div \nclass="sub-title" flex="30">T\u1ED5ng \u0111i\u1EC3m</div><div flex="70" class="text-bold">{{vm.totalPoint() | currency : \'\' : 0 }}\n</div></div><div layout="row" class="padding-top-8"><div class="sub-title" flex="30">Th\xE0nh ti\u1EC1n</div><div flex="70" \nclass="text-bold">{{vm.totalMoney | currency : \'\' : 0 }}</div></div><div layout="row" class="padding-top-8" \nng-show="(vm.numbers | filter : {selected : true}).length" ng-click="vm.showFull = !vm.showFull"><div \nclass="sub-title number" ng-class="{\'full\' : vm.showFull}"><div>Danh s\xE1ch</div><span class="md-accent-fg md-hue-1" \nng-repeat="n in vm.numbers | filter : {selected : true}">{{n.number}}<span ng-if="!$last">,&nbsp;</span></span></div>\n</div><div layout="row" class="padding-top-8" ng-if="$root.isAuthenticated"><div class="sub-title secondary" flex="30">\nT\u1ED1i \u0111a</div><div flex="70" class="text-bold sub-title secondary">{{vm.purchaseLimit() | currency : \'\' : 0 }} \u0110i\u1EC3m</div>\n</div><div layout="row" class="balance" ng-if="$root.isAuthenticated"><div class="sub-title secondary" flex="30">S\u1ED1 d\u01B0\n</div><div flex="70" class="text-bold sub-title secondary" layout="row" layout-align="space-between center">\n{{ $root.User.Balance | currency : \'\' : 0 }}<md-button class="md-icon-button" ng-click="$root.updateBalance()" \nng-disabled="$root.User.updating"><md-icon md-font-icon="icon-refresh" class="s16" \nng-class="{\'rotating\' : $root.User.updating }"></md-icon></md-button></div></div></div></div></div><div layout="column" \nclass="recent-betting-list" ng-include="\'app/main/traditional/betting/recent-ticket.html\'" \nng-show="$root.latestTicket.length"></div><div layout="column" class="side-ads" \nng-include="\'app/main/traditional/ads.html\'"></div></div></div>');
$templateCache.put('app/main/traditional/northern/general/setup.html','<md-dialog aria-label="Setup" class="dialog-setup-highlight md-primary-bg"><md-dialog-content><div \nclass="md-dialog-content" layout="column"><div flex layout="row" layout-align="start center"><div flex="70">\nHighlight gi\xE1</div><div flex="30"><md-switch ng-model="highlight.enabled" aria-label="Highlight" class="md-warn">\n</md-switch></div></div><div flex layout="row" layout-align="start center"><div flex="70">\xC1p d\u1EE5ng khi gi\xE1 l\u1EDBn h\u01A1n</div>\n<div flex="30"><input type="tel" maxlength="5" ng-model="highlight.atPrice" class="md-one-input" ng-currency \nselect-on-click numeric-only></div></div></div></md-dialog-content><md-dialog-actions layout="row"><md-button \nclass="md-accent" ng-click="done()">OK</md-button></md-dialog-actions></md-dialog>');
$templateCache.put('app/main/traditional/northern/live/live.html','<div class="main-game" layout-gt-sm="row" layout="column"><div flex-gt-sm="70" flex="100" class="content-number-wrap">\n<div layout="column" class="content-number md-whiteframe-1dp md-primary-bg"><div class="row-input-numbers"><form \nclass="md-inline-form" ng-submit="vm.submitKeyNumber()" novalidate layout="row"><input type="tel" autocomplete="off" \nclass="input-numbers-array md-one-input" placeholder="D\xE3y s\u1ED1" ng-model="vm.keynumber" \nng-keyup="vm.inputKeyNumber($event)" ng-focus="vm.betPoint = 0" tabindex="1" ng-disabled="!vm.allowBetting"><md-button \nclass="md-raised key-number" type="button" ng-click="vm.submitKeyNumber(true)" ng-disabled="!vm.keynumber.length">\nTh\xEAm v\xE0o</md-button><md-button hide show-gt-xs class="md-raised md-accent" ng-disabled="!vm.allowBetting" \nng-click="vm.quickShow = !vm.quickShow">Ch\u1ECDn nhanh<md-icon md-font-icon="icon-menu-down" ng-if="!vm.quickShow">\n</md-icon><md-icon md-font-icon="icon-menu-up" ng-if="vm.quickShow"></md-icon></md-button><md-button hide-gt-xs \nclass="md-raised md-icon-button md-accent" aria-label="Favorite" ng-disabled="!vm.allowBetting" \nng-click="vm.quickShow = !vm.quickShow"><md-icon md-font-icon="icon-menu-down" ng-if="!vm.quickShow"></md-icon><md-icon \nmd-font-icon="icon-menu-up" ng-if="vm.quickShow"></md-icon></md-button></form></div><div class="collapsing" \nng-show="vm.quickShow"><md-content><md-tabs md-dynamic-height md-border-bottom><md-tab \nng-repeat="item in vm.quickChoices" label="{{item.name}}" ng-if="$index > 0"><md-content class=""><div class="content" \nng-repeat="content in item.collect"><md-checkbox ng-checked="vm.exists($parent.$index, $index)" \nng-click="vm.groupNumbers($parent.$index, $index)" aria-label="Quick Choices" ng-disabled="!vm.allowBetting">\n{{ content.name }}</md-checkbox></div></md-content></md-tab></md-tabs></md-content></div><table><tbody><tr hide \nshow-gt-xs><td><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(3, 1)" \nng-click="vm.groupNumbers(3, 1)" ng-disabled="!vm.allowBetting"></md-checkbox></td><td colspan="10" layout="row" \nclass="row-check"><div layout="row" layout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" \nng-checked="vm.exists(0, 10)" ng-click="vm.groupNumbers(0, 10)" ng-disabled="!vm.allowBetting"></md-checkbox></div><div \nlayout="row" layout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(0, 11)" \nng-click="vm.groupNumbers(0, 11)" ng-disabled="!vm.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(0, 12)" \nng-click="vm.groupNumbers(0, 12)" ng-disabled="!vm.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(0, 13)" \nng-click="vm.groupNumbers(0, 13)" ng-disabled="!vm.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(0, 14)" \nng-click="vm.groupNumbers(0, 14)" ng-disabled="!vm.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(0, 15)" \nng-click="vm.groupNumbers(0, 15)" ng-disabled="!vm.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(0, 16)" \nng-click="vm.groupNumbers(0, 16)" ng-disabled="!vm.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(0, 17)" \nng-click="vm.groupNumbers(0, 17)" ng-disabled="!vm.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(0, 18)" \nng-click="vm.groupNumbers(0, 18)" ng-disabled="!vm.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(0, 19)" \nng-click="vm.groupNumbers(0, 19)" ng-disabled="!vm.allowBetting"></md-checkbox></div></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(0, 0)" \nng-click="vm.groupNumbers(0, 0)" ng-disabled="!vm.allowBetting"></md-checkbox></td><td colspan="10" rowspan="10" \nclass="main-number"><div class="repeater-number" ng-repeat="n in vm.numbers"><div \nclass="inner-number md-one-number live" layout="column" ng-click="vm.selectNumber(n)" \nng-class="{\'active\' : n.selected,  \'changed-price\': n.priceChanged && vm.allowBetting, \'stop\': n.Stop || !vm.allowBetting}">\n<div class="number">{{n.number}}</div><div class="price md-accent-fg md-hue-1"><span \nng-class="{\'price-up\' : n.price > vm.basePrice, \'zero\' : n.price === 0}">{{n.price | currency : \'\' : 0 }}</span></div>\n<div class="input-point"><input type="text" ng-model="n.point" class="md-one-input" ng-currency numeric-only \nng-click="vm.singlePointClick($event);$event.stopPropagation()"></div></div></div></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(0, 1)" \nng-click="vm.groupNumbers(0, 1)" ng-disabled="!vm.allowBetting"></md-checkbox></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(0, 2)" \nng-click="vm.groupNumbers(0, 2)" ng-disabled="!vm.allowBetting"></md-checkbox></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(0, 3)" \nng-click="vm.groupNumbers(0, 3)" ng-disabled="!vm.allowBetting"></md-checkbox></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(0, 4)" \nng-click="vm.groupNumbers(0, 4)" ng-disabled="!vm.allowBetting"></md-checkbox></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(0, 5)" \nng-click="vm.groupNumbers(0, 5)" ng-disabled="!vm.allowBetting"></md-checkbox></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(0, 6)" \nng-click="vm.groupNumbers(0, 6)" ng-disabled="!vm.allowBetting"></md-checkbox></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(0, 7)" \nng-click="vm.groupNumbers(0, 7)" ng-disabled="!vm.allowBetting"></md-checkbox></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(0, 8)" \nng-click="vm.groupNumbers(0, 8)" ng-disabled="!vm.allowBetting"></md-checkbox></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(0, 9)" \nng-click="vm.groupNumbers(0, 9)" ng-disabled="!vm.allowBetting"></md-checkbox></td></tr></tbody></table><div \nclass="live-info" layout="row" layout-xs="column" layout-align="space-between center" ng-if="vm.odds.PrizeNr"><h4 \nclass="warn" ng-if="vm.allowBetting"><md-icon md-font-icon="icon-flickr-after"></md-icon>\nTr\u1EF1c ti\u1EBFp - {{vm.betId | bet}} - Mi\u1EC1n B\u1EAFc 1</h4><div flex></div><h4 class="text-right">S\u1ED1 gi\u1EA3i ch\u01B0a quay: <span>\n{{ vm.odds.PrizeNr }}</span></h4></div></div></div><div flex-gt-sm="30" flex="100" layout="column" \nclass="main-right-betting-form"><div layout="column" class="betting-form-wrap"><div \nclass="betting-form md-whiteframe-1dp md-primary-bg" layout="column"><div class="betting-form-header"><div layout="row">\n<div flex="30">\u0110\u1EB7t c\u01B0\u1EE3c</div><div flex="70" class="text-right">{{vm.betId | bet}} - Mi\u1EC1n B\u1EAFc 1</div></div></div><div \nclass="betting-form-content"><form name="basicForm" class="md-inline-form" ng-submit="vm.submitBetting()" novalidate>\n<div layout="row"><div class="sub-title padding-right-8" flex="30"><span class="text-boxed-one">S\u1ED1 \u0111i\u1EC3m</span></div><div\n flex="70"><input type="tel" id="bet-input" class="bet-input md-one-input" ng-model="vm.betPoint" maxlength="5" \nng-currency numeric-only ng-focus="vm.fnFocus()" ng-change="vm.changeBettingPoint()" ng-blur="vm.clearTemporary()" \nng-disabled="!(vm.numbers | filter : {selected : true}).length" autocomplete="off" tabindex="2"></div></div><div \nlayout="row" class="padding-top-16"><div flex="30" class="padding-right-8"><md-button \nclass="betting-button cancel-button md-warn md-raised" ng-disabled="!(vm.numbers | filter : {selected : true}).length" \nng-click="vm.resetBetting()"><md-icon md-font-icon="icon-close" class="s20"></md-icon></md-button></div><div flex="70">\n<md-button class="betting-button md-raised md-accent" type="submit" ng-disabled="vm.totalMoney === 0">\u0110\u1EB7t c\u01B0\u1EE3c\n</md-button></div></div></form><div layout="row" class="padding-top-16"><div class="sub-title" flex="30">T\u1ED5ng \u0111i\u1EC3m</div>\n<div flex="70" class="text-bold">{{vm.totalPoint() | currency : \'\' : 0 }}</div></div><div layout="row" \nclass="padding-top-8"><div class="sub-title" flex="30">Th\xE0nh ti\u1EC1n</div><div flex="70" class="text-bold">\n{{vm.totalMoney | currency : \'\' : 0 }}</div></div><div layout="row" class="padding-top-8" \nng-show="(vm.numbers | filter : {selected : true}).length" ng-click="vm.showFull = !vm.showFull"><div \nclass="sub-title number" ng-class="{\'full\' : vm.showFull}"><div>Danh s\xE1ch</div><span \nng-repeat="n in vm.numbers | filter : {selected : true}">{{n.number}}<span ng-if="!$last">,&nbsp;</span></span></div>\n</div><div layout="row" class="padding-top-8" ng-if="$root.isAuthenticated"><div class="sub-title secondary" flex="30">\nT\u1ED1i \u0111a</div><div flex="70" class="text-bold sub-title secondary">{{vm.purchaseLimit | currency : \'\' : 0 }} \u0110i\u1EC3m</div>\n</div><div layout="row" class="balance" ng-if="$root.isAuthenticated"><div class="sub-title secondary" flex="30">S\u1ED1 d\u01B0\n</div><div flex="70" class="text-bold sub-title secondary" layout="row" layout-align="space-between center">\n{{ $root.User.Balance | currency : \'\' : 0 }}<md-button class="md-icon-button" ng-click="$root.updateBalance()" \nng-disabled="$root.User.updating"><md-icon md-font-icon="icon-refresh" class="s16" \nng-class="{\'rotating\' : $root.User.updating }"></md-icon></md-button></div></div></div></div></div><div \nclass="live-info" layout="column" hide><div layout="column" class="live-content"><div class="title">\nTh\xF4ng tin L\xF4 tr\u1EF1c ti\u1EBFp</div><div layout="row" class="content"><div flex="70" class="name">S\u1ED1 gi\u1EA3i ch\u01B0a quay</div><div \nflex="30" class="timer">{{ vm.odds.PrizeNr }}</div></div><div layout="row" class="content"><div flex="70" class="name">\nT\u1EF7 l\u1EC7 tr\u1EA3 th\u01B0\u1EDFng</div><div flex="30" class="timer">80</div></div></div></div><div layout="column" \nclass="recent-betting-list" ng-include="\'app/main/traditional/betting/recent-ticket.html\'" \nng-show="$root.latestTicket.length"></div></div></div>');
$templateCache.put('app/main/traditional/northern/live/promenade.dialog.html','<md-dialog aria-label="dialog" class="missing-promenade-dialog"><md-toolbar class="md-accent"><div \nclass="md-toolbar-tools"><h2>Ti\u1EBFp t\u1EE5c \u0111\u1EB7t c\u01B0\u1EE3c</h2><span flex></span><md-button class="md-icon-button" \nng-click="cancel()"><md-icon md-font-icon="icon-close" aria-label="Close dialog"></md-icon></md-button></div>\n</md-toolbar><md-dialog-content><div class="md-dialog-content"><div class="content" layout="column"><div>\nL\xF4 live \u0111\xE3 \u0111\xF3ng,</div><div>Qu\xFD kh\xE1ch chuy\u1EC3n qua \u0110\u1EC1 \u0111\u1EC3 ti\u1EBFp t\u1EE5c \u0111\u1EB7t c\u01B0\u1EE3c</div></div></div></md-dialog-content>\n<md-dialog-actions layout="row" align="end"><span flex></span><md-button class="md-raised md-accent" type="button" \nng-click="doPromenade()">Ti\u1EBFp t\u1EE5c</md-button></md-dialog-actions></md-dialog>');
$templateCache.put('app/main/traditional/northern/parlay/parlay.html','<div class="main-game" layout-gt-sm="row" layout="column"><div flex-gt-sm="70" flex="100" class="content-number-wrap">\n<div layout="column" class="content-number md-whiteframe-1dp md-primary-bg"><div class="row-input-numbers"><form \nclass="md-inline-form" ng-submit="vm.submitKeyNumber()" novalidate layout="row"><input type="tel" autocomplete="off" \nclass="input-numbers-array md-one-input" placeholder="D\xE3y s\u1ED1" ng-model="vm.keynumber" \nng-keyup="vm.inputKeyNumber($event)" tabindex="1" ng-disabled="!$root.allowBetting"><md-button \nclass="md-raised key-number" type="button" ng-click="vm.submitKeyNumber(true)" ng-disabled="!vm.keynumber.length">\nTh\xEAm v\xE0o</md-button></form></div><table><tbody><tr hide show-gt-xs><td><md-checkbox md-no-ink aria-label="Checkbox" \nng-checked="vm.exists(3, 1)" ng-click="vm.groupNumbers(3, 1)" ng-disabled="!$root.allowBetting"></md-checkbox></td><td \ncolspan="10" layout="row" class="row-check"><div layout="row" layout-align="center"><md-checkbox md-no-ink \naria-label="Checkbox" ng-checked="vm.exists(0, 10)" ng-click="vm.groupNumbers(0, 10)" ng-disabled="!$root.allowBetting">\n</md-checkbox></div><div layout="row" layout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" \nng-checked="vm.exists(0, 11)" ng-click="vm.groupNumbers(0, 11)" ng-disabled="!$root.allowBetting"></md-checkbox></div>\n<div layout="row" layout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(0, 12)" \nng-click="vm.groupNumbers(0, 12)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(0, 13)" \nng-click="vm.groupNumbers(0, 13)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(0, 14)" \nng-click="vm.groupNumbers(0, 14)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(0, 15)" \nng-click="vm.groupNumbers(0, 15)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(0, 16)" \nng-click="vm.groupNumbers(0, 16)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(0, 17)" \nng-click="vm.groupNumbers(0, 17)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(0, 18)" \nng-click="vm.groupNumbers(0, 18)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(0, 19)" \nng-click="vm.groupNumbers(0, 19)" ng-disabled="!$root.allowBetting"></md-checkbox></div></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(0, 0)" \nng-click="vm.groupNumbers(0, 0)" ng-disabled="!$root.allowBetting"></md-checkbox></td><td colspan="10" rowspan="10" \nclass="main-number"><div class="repeater-number" ng-repeat="n in vm.numbers | limitTo:100"><div \nclass="inner-number parlay miennam md-one-number" layout="row" ng-click="vm.selectNumber(n)" \nng-class="{\'active\' : n.selected, \'changed-price\': n.priceChanged && $root.allowBetting, \'stop\': !$root.allowBetting }">\n<div flex="50" class="price md-accent-fg md-hue-1" layout="column" hide show-gt-xs><div><span \nng-class="{\'price-up\': n.price[2] > n.base[2], \'stop\' : n.disabled[2], \'zero\' : n.price[2] === 0}">{{n.price[2]}}</span>\n</div><div><span ng-class="{\'price-up\': n.price[3] > n.base[3], \'stop\' : n.disabled[3], \'zero\' : n.price[3] === 0}">\n{{n.price[3]}}</span></div><div><span \nng-class="{\'price-up\': n.price[4] > n.base[4], \'stop\' : n.disabled[4], \'zero\' : n.price[4] === 0}">{{n.price[4]}}</span>\n</div></div><div flex="50" flex-xs="100" class="number">{{n.number}}</div></div></div></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(0, 1)" \nng-click="vm.groupNumbers(0, 1)" ng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(0, 2)" \nng-click="vm.groupNumbers(0, 2)" ng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(0, 3)" \nng-click="vm.groupNumbers(0, 3)" ng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(0, 4)" \nng-click="vm.groupNumbers(0, 4)" ng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(0, 5)" \nng-click="vm.groupNumbers(0, 5)" ng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(0, 6)" \nng-click="vm.groupNumbers(0, 6)" ng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(0, 7)" \nng-click="vm.groupNumbers(0, 7)" ng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(0, 8)" \nng-click="vm.groupNumbers(0, 8)" ng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(0, 9)" \nng-click="vm.groupNumbers(0, 9)" ng-disabled="!$root.allowBetting"></md-checkbox></td></tr></tbody></table></div></div>\n<div flex-gt-sm="30" flex="100" layout="column" class="main-right-betting-form"><div layout="column" \nclass="betting-form-wrap"><div class="betting-form md-whiteframe-1dp md-primary-bg" layout="column"><div \nclass="betting-form-header"><div layout="row"><div flex="30">\u0110\u1EB7t c\u01B0\u1EE3c</div><div flex="70" class="text-right">\nL\xF4 Xi\xEAn - Mi\u1EC1n B\u1EAFc 1</div></div></div><div class="betting-form-content"><form name="basicForm" class="md-inline-form" \nng-submit="vm.submitBetting()" novalidate><div layout="row" class="padding-top-8" flex="70" flex-offset="30"><div \nflex="33" class="text-center">Xi\xEAn 2</div><div flex="33" class="text-center">Xi\xEAn 3</div><div flex="33" \nclass="text-center">Xi\xEAn 4</div></div><div layout="row" class="padding-top-8"><div class="sub-title padding-right-8" \nflex="30"><span class="text-boxed-one">S\u1ED1 Xi\xEAn</span></div><div flex="70" layout="row"><div flex="33" \nclass="sub-title text-center">{{ vm.pair.count[2] }}</div><div flex="33" class="sub-title text-center">\n{{ vm.pair.count[3] }}</div><div flex="33" class="sub-title text-center">{{ vm.pair.count[4] }}</div></div></div><div \nlayout="row" class="padding-top-8"><div class="sub-title padding-right-8" flex="30"><span class="text-boxed-one">S\u1ED1 \u0111i\u1EC3m\n</span></div><div flex="70" layout="row"><div flex="33" class="bet-input-1"><input type="tel" \nclass="bet-input md-one-input" ng-model="vm.inputPoint[2]" maxlength="5" ng-currency numeric-only select-on-click \nng-disabled="vm.pair.count[2] === 0 || vm.pair.count[2] > 128" autocomplete="off" tabindex="2"></div><div flex="33" \nclass="bet-input-2"><input type="tel" class="bet-input md-one-input" ng-model="vm.inputPoint[3]" maxlength="5" \nng-currency numeric-only select-on-click ng-disabled="vm.pair.count[3] === 0 || vm.pair.count[3] > 128" \nautocomplete="off" tabindex="2"></div><div flex="33" class="bet-input-3"><input type="tel" \nclass="bet-input md-one-input" ng-model="vm.inputPoint[4]" maxlength="5" ng-currency numeric-only select-on-click \nng-disabled="vm.pair.count[4] === 0 || vm.pair.count[4] > 128" autocomplete="off" tabindex="2"></div></div></div><div \nlayout="row" class="padding-top-8"><div flex="30" class="padding-right-8"><md-button \nclass="betting-button cancel-button md-warn md-raised" ng-disabled="!(vm.numbers | filter : {selected : true}).length" \nng-click="vm.resetBetting()"><md-icon md-font-icon="icon-close" class="s20"></md-icon></md-button></div><div flex="70">\n<md-button class="betting-button md-raised md-accent" type="submit" ng-disabled="vm.costMoney() === 0">\u0110\u1EB7t c\u01B0\u1EE3c\n</md-button></div></div><div class="ignore-price"><md-checkbox ng-model="vm.ignorePrice" aria-label="Ignore Price">\nKh\xF4ng h\u1ECFi l\u1EA1i khi c\xF3 gi\xE1 thay \u0111\u1ED5i</md-checkbox></div></form><div layout="row" class="padding-top-16" \nng-show="(vm.numbers | filter : {selected : true}).length" ng-click="vm.showFull = !vm.showFull"><div \nclass="sub-title number" ng-class="{\'full\' : vm.showFull}"><div>Danh s\xE1ch</div><span class="md-accent-fg md-hue-1" \nng-repeat="n in vm.numbers | filter : {selected : true}">{{n.number}}<span ng-if="!$last">,&nbsp;</span></span></div>\n</div><div layout="column" class="padding-top-8"><div class="sub-title">Th\xE0nh ti\u1EC1n</div><div layout="row" \nclass="padding-top-8"><div class="sub-title" flex="30">Xi\xEAn 2</div><div flex="70" class="text-bold">\n{{vm.pair.money[2] | currency : \'\' : 0 }}</div></div><div layout="row" class="padding-top-8"><div class="sub-title" \nflex="30">Xi\xEAn 3</div><div flex="70" class="text-bold">{{ vm.pair.money[3] | currency : \'\' : 0 }}</div></div><div \nlayout="row" class="padding-top-8"><div class="sub-title" flex="30">Xi\xEAn 4</div><div flex="70" class="text-bold">\n{{ vm.pair.money[4] | currency : \'\' : 0 }}</div></div></div><div layout="row" class="padding-top-16" \nng-if="$root.isAuthenticated"><div class="sub-title secondary" flex="30">T\u1ED1i \u0111a</div><div flex="70" \nclass="sub-title secondary">Xi\xEAn 2: {{ vm.pair.limit[2] | currency : \'\' : 0 }} \u0110i\u1EC3m</div></div><div layout="row" \nclass="padding-top-8" ng-if="$root.isAuthenticated"><div flex="70" flex-offset="30" class="sub-title secondary">\nXi\xEAn 3: {{ vm.pair.limit[3] | currency : \'\' : 0 }} \u0110i\u1EC3m</div></div><div layout="row" class="padding-top-8" \nng-if="$root.isAuthenticated"><div flex="70" flex-offset="30" class="sub-title secondary">\nXi\xEAn 4: {{ vm.pair.limit[4] | currency : \'\' : 0 }} \u0110i\u1EC3m</div></div><div layout="row" class="balance" \nng-if="$root.isAuthenticated"><div class="sub-title secondary" flex="30">S\u1ED1 d\u01B0</div><div flex="70" \nclass="text-bold sub-title secondary" layout="row" layout-align="space-between center">\n{{ $root.User.Balance | currency : \'\' : 0 }}<md-button class="md-icon-button" ng-click="$root.updateBalance()" \nng-disabled="$root.User.updating"><md-icon md-font-icon="icon-refresh" class="s16" \nng-class="{\'rotating\' : $root.User.updating }"></md-icon></md-button></div></div></div></div></div><div layout="column" \nclass="recent-betting-list" ng-include="\'app/main/traditional/betting/recent-ticket.html\'" \nng-show="$root.latestTicket.length"></div></div></div>');
$templateCache.put('app/main/casino/lobby/dialog/bet-list.html','<md-dialog aria-label="chip-settings" class="casino-dialog bet-list-dialog"><md-toolbar><div class="md-toolbar-tools">\n<h2>B\u1EA3ng c\u01B0\u1EE3c</h2><span flex></span><md-button class="md-icon-button" ng-click="cancel()"><md-icon \nmd-font-icon="icon-close" aria-label="Close dialog"></md-icon></md-button></div></md-toolbar><md-dialog-content><div \nclass="md-dialog-content"><div class="simple-table-container"><table class="table simple" ms-responsive-table><thead>\n<tr><th>V\xE1n</th><th>Ki\u1EC3u c\u01B0\u1EE3c</th><th>Ti\u1EC1n c\u01B0\u1EE3c</th><th>Hoa h\u1ED3ng</th><th>Th\u1EAFng thua</th><th>K\u1EBFt qu\u1EA3</th><th>Video</th>\n</tr></thead><tbody><tr ng-repeat="item in a_betLists" ng-class="{\'canceled\': item.Status === -1 }"><td>\n{{ item.AreaNumber }}.{{ item.GameNumber }}.{{ item.GameRound }}</td><td>{{ item.BetType.formatBetType() }}</td><td>\n{{ item.Amount | currency : \'\' : 0 }}</td><td>{{ item.Commission | currency : \'\' : 0 }}</td><td \nng-class="{\'warn\' : item.WinLose < 0}">{{ item.WinLose | currency : \'\' : 0 }}</td><td><img \nng-src="assets/images/results/{{ item.GameResult }}.png"></td><td><span class="md-accent cursor-pointer" \nng-click="playVid(item)"><md-icon md-font-icon="icon-play-circle"></md-icon></span></td></tr></tbody></table></div>\n</div></md-dialog-content><md-dialog-actions layout="row" ng-show="viewMore"><md-button \nng-click="getBetItems(a_betLists[a_betLists.length - 1].Id)" class="md-accent" ng-disabled="submitting">Xem ti\u1EBFp\n</md-button></md-dialog-actions><md-progress-linear md-mode="indeterminate" class="md-warn" ng-show="submitting">\n</md-progress-linear></md-dialog>');
$templateCache.put('app/main/casino/lobby/dialog/chip-settings.html','<md-dialog aria-label="chip-settings" class="casino-dialog chip-settings-dialog"><md-toolbar><div \nclass="md-toolbar-tools"><h2>C\xE0i \u0111\u1EB7t m\u1EE9c c\u01B0\u1EE3c</h2><span flex></span><md-button class="md-icon-button" \nng-click="cancel()"><md-icon md-font-icon="icon-close" aria-label="Close dialog"></md-icon></md-button></div>\n</md-toolbar><md-dialog-content><div class="md-dialog-content"><div class="a-bet-limit" layout="row" \nlayout-align="center" layout-wrap><div class="rank" ng-repeat="item in o_playerProperty.BetLimits"><md-button \nclass="md-accent" ng-class="{\'md-raised\': o_playerProperty.DefaultBetLimit === item }" ng-click="setRank(item)">\n{{ a_configToken[item].label }}</md-button></div></div><div class="token-rank" layout="row" layout-align="center" \nlayout-wrap><div class="token" flex-gt-sm="10" flex-sm="10" flex="20" ng-repeat="token in _aToken"><div \nclass="img-wrapper" layout="row" layout-align="center" ng-class="{\'un-checked\': !token.checked}" \nng-click="f_selectToken(token)"><img ng-src="/assets/images/casino/chips/{{token.name}}.png"></div></div></div></div>\n</md-dialog-content><md-dialog-actions layout="row"><div class="message" ng-show="maxTokenReached">\nQu\xFD kh\xE1ch vui l\xF2ng ch\u1ECDn t\u1EEB 1 \u0111\u1EBFn 5 chip</div><span flex></span><md-button ng-click="update()" \nclass="md-raised md-accent" ng-disabled="maxTokenReached || submitting">\u0110\u1ED3ng \xFD</md-button></md-dialog-actions>\n<md-progress-linear md-mode="indeterminate" class="md-warn" ng-show="submitting"></md-progress-linear></md-dialog>');
$templateCache.put('app/main/casino/lobby/dialog/play-vid.html','<md-dialog aria-label="chip-settings" class="casino-dialog play-vid"><md-toolbar><div class="md-toolbar-tools"><h2>\nXem l\u1EA1i</h2><span flex></span><md-button class="md-icon-button" ng-click="cancel()"><md-icon md-font-icon="icon-close" \naria-label="Close dialog"></md-icon></md-button></div></md-toolbar><md-dialog-content><div class="md-dialog-content">\n<div class="message" layout="row" layout-align="center center"><video controls="controls" autoplay="autoplay" \nng-src="{{vidSrc}}" vid-dir onended="angular.element(this).scope().vidEnded()"></video></div></div></md-dialog-content>\n</md-dialog>');
$templateCache.put('app/main/casino/lobby/dialog/table.html','<md-dialog aria-label="chip-settings" class="casino-dialog table-dialog"><md-toolbar><div class="md-toolbar-tools"><h2>\n{{ table.name }}</h2><span flex></span><md-button class="md-icon-button" ng-click="cancel()"><md-icon \nmd-font-icon="icon-close" aria-label="Close dialog"></md-icon></md-button></div></md-toolbar><md-dialog-content><div \nclass="md-dialog-content"><div class="message" layout="column"><div layout="row" layout-align="space-between center">\n<div>Dealer</div><div>{{ table.Dealer }}</div></div><div layout="row" layout-align="space-between center"><div>V\xE1n</div>\n<div>{{ table.Round }}</div></div><div class="bet-limit">Gi\u1EDBi h\u1EA1n \u0111\u1EB7t c\u01B0\u1EE3c</div><div layout="row" \nlayout-align="space-between center"><div>Ch\u1EB5n - l\u1EBB</div><div>{{ table._betLimit.evenOdd | currency : \'\' : 0 }}</div>\n</div><div layout="row" layout-align="space-between center"><div>S\u1EA5p 0-4</div><div>\n{{ table._betLimit.zeroFour | currency : \'\' : 0 }}</div></div><div layout="row" layout-align="space-between center">\n<div>S\u1EA5p 1-3</div><div>{{ table._betLimit.oneThree | currency : \'\' : 0 }}</div></div></div></div></md-dialog-content>\n</md-dialog>');
$templateCache.put('app/main/casino/lobby/dialog/warning.html','<md-dialog aria-label="chip-settings" class="casino-dialog warning-dialog"><md-toolbar><div class="md-toolbar-tools">\n<h2>Th\xF4ng b\xE1o</h2><span flex></span><md-button class="md-icon-button" ng-click="cancel()"><md-icon \nmd-font-icon="icon-close" aria-label="Close dialog"></md-icon></md-button></div></md-toolbar><md-dialog-content><div \nclass="md-dialog-content"><div class="message" layout="row" layout-align="center center"><span ng-bind-html="message">\n</span></div></div></md-dialog-content><md-dialog-actions layout="row"><md-button ng-click="cancel()" \nclass="md-raised md-accent" ng-disabled="maxTokenReached || submitting">\u0110\u1ED3ng \xFD</md-button></md-dialog-actions>\n</md-dialog>');
$templateCache.put('app/main/traditional/northern-2nd/live/live.html','<div class="main-game" layout-gt-sm="row" layout="column"><div flex-gt-sm="70" flex="100" class="content-number-wrap">\n<div layout="column" class="content-number md-whiteframe-1dp md-primary-bg"><div class="row-input-numbers"><form \nclass="md-inline-form" ng-submit="vm.submitKeyNumber()" novalidate layout="row"><input type="tel" autocomplete="off" \ngo-focus="vm.focusVar" class="input-numbers-array md-one-input" placeholder="D\xE3y s\u1ED1" ng-model="vm.keynumber" \nng-keyup="vm.inputKeyNumber($event)" ng-focus="vm.betPoint = 0" tabindex="1" ng-disabled="!vm.allowBetting"><md-button \nclass="md-raised" type="submit" ng-disabled="!vm.keynumber.length">Th\xEAm v\xE0o</md-button></form></div><table><tbody><tr \nhide show-gt-xs><td><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(3, 1)" \nng-click="vm.groupNumbers(3, 1)" ng-disabled="!vm.allowBetting"></md-checkbox></td><td colspan="10" layout="row" \nclass="row-check"><div layout="row" layout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" \nng-checked="vm.exists(0, 10)" ng-click="vm.groupNumbers(0, 10)" ng-disabled="!vm.allowBetting"></md-checkbox></div><div \nlayout="row" layout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(0, 11)" \nng-click="vm.groupNumbers(0, 11)" ng-disabled="!vm.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(0, 12)" \nng-click="vm.groupNumbers(0, 12)" ng-disabled="!vm.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(0, 13)" \nng-click="vm.groupNumbers(0, 13)" ng-disabled="!vm.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(0, 14)" \nng-click="vm.groupNumbers(0, 14)" ng-disabled="!vm.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(0, 15)" \nng-click="vm.groupNumbers(0, 15)" ng-disabled="!vm.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(0, 16)" \nng-click="vm.groupNumbers(0, 16)" ng-disabled="!vm.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(0, 17)" \nng-click="vm.groupNumbers(0, 17)" ng-disabled="!vm.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(0, 18)" \nng-click="vm.groupNumbers(0, 18)" ng-disabled="!vm.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(0, 19)" \nng-click="vm.groupNumbers(0, 19)" ng-disabled="!vm.allowBetting"></md-checkbox></div></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(0, 0)" \nng-click="vm.groupNumbers(0, 0)" ng-disabled="!vm.allowBetting"></md-checkbox></td><td colspan="10" rowspan="10" \nclass="main-number"><div class="repeater-number" ng-repeat="n in vm.numbers"><div \nclass="inner-number live md-one-number" layout="column" ng-click="vm.selectNumber(n)" \nng-class="{\'active\' : n.selected,  \'changed-price\': n.priceChanged && vm.allowBetting, \'stop\': n.disabled || !vm.allowBetting}">\n<div class="number">{{n.number}}</div><div class="price md-accent-fg md-hue-1" hide show-gt-xs><span \nng-class="{\'price-up\' : n.price > vm.basePrice}">{{n.price | currency : \'\' : 0 }}</span></div><div class="input-point">\n<input type="text" ng-model="n.point" class="md-one-input" ng-currency numeric-only \nng-click="vm.singlePointClick($event);$event.stopPropagation()"></div></div></div></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(0, 1)" \nng-click="vm.groupNumbers(0, 1)" ng-disabled="!vm.allowBetting"></md-checkbox></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(0, 2)" \nng-click="vm.groupNumbers(0, 2)" ng-disabled="!vm.allowBetting"></md-checkbox></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(0, 3)" \nng-click="vm.groupNumbers(0, 3)" ng-disabled="!vm.allowBetting"></md-checkbox></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(0, 4)" \nng-click="vm.groupNumbers(0, 4)" ng-disabled="!vm.allowBetting"></md-checkbox></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(0, 5)" \nng-click="vm.groupNumbers(0, 5)" ng-disabled="!vm.allowBetting"></md-checkbox></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(0, 6)" \nng-click="vm.groupNumbers(0, 6)" ng-disabled="!vm.allowBetting"></md-checkbox></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(0, 7)" \nng-click="vm.groupNumbers(0, 7)" ng-disabled="!vm.allowBetting"></md-checkbox></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(0, 8)" \nng-click="vm.groupNumbers(0, 8)" ng-disabled="!vm.allowBetting"></md-checkbox></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(0, 9)" \nng-click="vm.groupNumbers(0, 9)" ng-disabled="!vm.allowBetting"></md-checkbox></td></tr></tbody></table><div \nclass="live-info" layout="row" layout-xs="column" layout-align="space-between center" ng-if="vm.odds.PrizeNr"><h4 \nclass="warn" ng-if="vm.allowBetting"><md-icon md-font-icon="icon-flickr-after"></md-icon>\nTr\u1EF1c ti\u1EBFp - {{vm.betId | bet}} - Mi\u1EC1n B\u1EAFc 2</h4><div flex></div><h4 class="text-right">S\u1ED1 gi\u1EA3i ch\u01B0a quay: <span>\n{{ vm.odds.PrizeNr }}</span></h4></div></div></div><div flex-gt-sm="30" flex="100" layout="column" \nclass="main-right-betting-form"><div layout="column" class="betting-form-wrap"><div \nclass="betting-form md-whiteframe-1dp md-primary-bg" layout="column"><div class="betting-form-header"><div layout="row">\n<div flex="30">\u0110\u1EB7t c\u01B0\u1EE3c</div><div flex="70" class="text-right">{{vm.betId | bet}} - Mi\u1EC1n B\u1EAFc 2</div></div></div><div \nclass="betting-form-content"><form name="basicForm" class="md-inline-form" ng-submit="vm.submitBetting()" novalidate>\n<div layout="row"><div class="sub-title padding-right-8" flex="30"><span class="text-boxed-one">S\u1ED1 \u0111i\u1EC3m</span></div><div\n flex="70"><input type="tel" id="bet-input" class="bet-input md-one-input" ng-model="vm.betPoint" maxlength="5" \nng-currency numeric-only ng-change="vm.changeBettingPoint()" ng-blur="vm.clearTemporary()" \nng-disabled="!(vm.numbers | filter : {selected : true}).length" autocomplete="off" tabindex="2"></div></div><div \nlayout="row" class="padding-top-16"><div flex="30" class="padding-right-8"><md-button \nclass="betting-button cancel-button md-warn md-raised" ng-disabled="!(vm.numbers | filter : {selected : true}).length" \nng-click="vm.resetBetting()"><md-icon md-font-icon="icon-close" class="s20"></md-icon></md-button></div><div flex="70">\n<md-button class="betting-button md-raised md-accent" type="submit" ng-disabled="vm.totalMoney === 0">\u0110\u1EB7t c\u01B0\u1EE3c\n</md-button></div></div></form><div layout="row" class="padding-top-16"><div class="sub-title" flex="30">T\u1ED5ng \u0111i\u1EC3m</div>\n<div flex="70" class="text-bold">{{vm.totalPoint() | currency : \'\' : 0 }}</div></div><div layout="row" \nclass="padding-top-8"><div class="sub-title" flex="30">Th\xE0nh ti\u1EC1n</div><div flex="70" class="text-bold">\n{{vm.totalMoney | currency : \'\' : 0 }}</div></div><div layout="row" class="padding-top-8" \nng-show="(vm.numbers | filter : {selected : true}).length" ng-click="vm.showFull = !vm.showFull"><div \nclass="sub-title number" ng-class="{\'full\' : vm.showFull}"><div>Danh s\xE1ch</div><span class="md-accent-fg md-hue-1" \nng-repeat="n in vm.numbers | filter : {selected : true}">{{n.number}}<span ng-if="!$last">,&nbsp;</span></span></div>\n</div><div layout="row" class="padding-top-8" ng-if="$root.isAuthenticated"><div class="sub-title secondary" flex="30">\nT\u1ED1i \u0111a</div><div flex="70" class="sub-title secondary">{{vm.purchaseLimit | currency : \'\' : 0 }} \u0110i\u1EC3m</div></div><div \nlayout="row" class="balance" ng-if="$root.isAuthenticated"><div class="sub-title secondary" flex="30">S\u1ED1 d\u01B0</div><div \nflex="70" class="text-bold sub-title secondary" layout="row" layout-align="space-between center">\n{{ $root.User.Balance | currency : \'\' : 0 }}<md-button class="md-icon-button" ng-click="$root.updateBalance()" \nng-disabled="$root.User.updating"><md-icon md-font-icon="icon-refresh" class="s16" \nng-class="{\'rotating\' : $root.User.updating }"></md-icon></md-button></div></div></div></div></div><div \nclass="live-info" layout="column" hide><div layout="column" class="live-content"><div class="title">\nTh\xF4ng tin L\xF4 tr\u1EF1c ti\u1EBFp</div><div layout="row" class="content"><div flex="70" class="name">S\u1ED1 gi\u1EA3i ch\u01B0a quay</div><div \nflex="30" class="timer">{{ vm.odds.PrizeNr }}</div></div><div layout="row" class="content"><div flex="70" class="name">\nT\u1EF7 l\u1EC7 tr\u1EA3 th\u01B0\u1EDFng</div><div flex="30" class="timer">75</div></div></div></div><div layout="column" \nclass="recent-betting-list" ng-include="\'app/main/traditional/betting/recent-ticket.html\'" \nng-show="$root.latestTicket.length"></div></div></div>');
$templateCache.put('app/main/traditional/northern-2nd/parlay/parlay.html','<div class="main-game" layout-gt-sm="row" layout="column"><div flex-gt-sm="70" flex="100" class="content-number-wrap">\n<div layout="column" class="content-number md-whiteframe-1dp md-primary-bg"><div class="row-input-numbers"><form \nclass="md-inline-form" ng-submit="vm.submitKeyNumber()" novalidate layout="row"><input type="tel" autocomplete="off" \ngo-focus="vm.focusVar" class="input-numbers-array md-one-input" placeholder="D\xE3y s\u1ED1" ng-model="vm.keynumber" \nng-keyup="vm.inputKeyNumber($event)" tabindex="1" ng-disabled="!$root.allowBetting"><md-button \nclass="md-raised key-number" type="button" ng-click="vm.submitKeyNumber(true)" ng-disabled="!vm.keynumber.length">\nTh\xEAm v\xE0o</md-button></form></div><table><tbody><tr hide show-gt-xs><td><md-checkbox md-no-ink aria-label="Checkbox" \nng-checked="vm.exists(20)" ng-click="vm.groupNumbers(20)" ng-disabled="!$root.allowBetting"></md-checkbox></td><td \ncolspan="10" layout="row" class="row-check"><div layout="row" layout-align="center"><md-checkbox md-no-ink \naria-label="Checkbox" ng-checked="vm.exists(10)" ng-click="vm.groupNumbers(10)" ng-disabled="!$root.allowBetting">\n</md-checkbox></div><div layout="row" layout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" \nng-checked="vm.exists(11)" ng-click="vm.groupNumbers(11)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div \nlayout="row" layout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(12)" \nng-click="vm.groupNumbers(12)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(13)" \nng-click="vm.groupNumbers(13)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(14)" \nng-click="vm.groupNumbers(14)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(15)" \nng-click="vm.groupNumbers(15)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(16)" \nng-click="vm.groupNumbers(16)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(17)" \nng-click="vm.groupNumbers(17)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(18)" \nng-click="vm.groupNumbers(18)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(19)" \nng-click="vm.groupNumbers(19)" ng-disabled="!$root.allowBetting"></md-checkbox></div></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(0)" \nng-click="vm.groupNumbers(0)" ng-disabled="!$root.allowBetting"></md-checkbox></td><td colspan="10" rowspan="10" \nclass="main-number"><div class="repeater-number" ng-repeat="n in vm.numbers | limitTo:100"><div \nclass="inner-number miennam md-one-number" layout="row" ng-click="vm.selectNumber(n)" \nng-class="{\'active\' : n.selected, \'changed-price\': n.priceChanged && $root.allowBetting, \'stop\': !$root.allowBetting}">\n<div flex="50" class="price md-accent-fg md-hue-1" layout="column" hide show-gt-xs><div><span \nng-class="{\'price-up\': n.price[2] > n.base[2], \'stop\' : n.disabled[2]}">{{n.price[2]}}</span></div><div><span \nng-class="{\'price-up\': n.price[3] > n.base[3], \'stop\' : n.disabled[3]}">{{n.price[3]}}</span></div><div><span \nng-class="{\'price-up\': n.price[4] > n.base[4], \'stop\' : n.disabled[4]}">{{n.price[4]}}</span></div></div><div flex="50" \nflex-xs="100" class="number">{{n.number}}</div></div></div></td></tr><tr><td layout="row" layout-align="center">\n<md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(1)" ng-click="vm.groupNumbers(1)" \nng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" layout-align="center"><md-checkbox \nmd-no-ink aria-label="Checkbox" ng-checked="vm.exists(2)" ng-click="vm.groupNumbers(2)" \nng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" layout-align="center"><md-checkbox \nmd-no-ink aria-label="Checkbox" ng-checked="vm.exists(3)" ng-click="vm.groupNumbers(3)" \nng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" layout-align="center"><md-checkbox \nmd-no-ink aria-label="Checkbox" ng-checked="vm.exists(4)" ng-click="vm.groupNumbers(4)" \nng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" layout-align="center"><md-checkbox \nmd-no-ink aria-label="Checkbox" ng-checked="vm.exists(5)" ng-click="vm.groupNumbers(5)" \nng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" layout-align="center"><md-checkbox \nmd-no-ink aria-label="Checkbox" ng-checked="vm.exists(6)" ng-click="vm.groupNumbers(6)" \nng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" layout-align="center"><md-checkbox \nmd-no-ink aria-label="Checkbox" ng-checked="vm.exists(7)" ng-click="vm.groupNumbers(7)" \nng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" layout-align="center"><md-checkbox \nmd-no-ink aria-label="Checkbox" ng-checked="vm.exists(8)" ng-click="vm.groupNumbers(8)" \nng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" layout-align="center"><md-checkbox \nmd-no-ink aria-label="Checkbox" ng-checked="vm.exists(9)" ng-click="vm.groupNumbers(9)" \nng-disabled="!$root.allowBetting"></md-checkbox></td></tr></tbody></table></div></div><div flex-gt-sm="30" flex="100" \nlayout="column" class="main-right-betting-form"><div layout="column" class="betting-form-wrap"><div \nclass="betting-form md-whiteframe-1dp md-primary-bg" layout="column"><div class="betting-form-header"><div layout="row">\n<div flex="30">\u0110\u1EB7t c\u01B0\u1EE3c</div><div flex="70" class="text-right">L\xF4 Xi\xEAn - Mi\u1EC1n B\u1EAFc 2</div></div></div><div \nclass="betting-form-content"><form name="basicForm" class="md-inline-form" ng-submit="vm.submitBetting()" novalidate>\n<div layout="row" class="padding-top-8" flex="70" flex-offset="30"><div flex="33" class="text-center">Xi\xEAn 2</div><div \nflex="33" class="text-center">Xi\xEAn 3</div><div flex="33" class="text-center">Xi\xEAn 4</div></div><div layout="row" \nclass="padding-top-8"><div class="sub-title padding-right-8" flex="30"><span class="text-boxed-one">S\u1ED1 xi\xEAn</span></div>\n<div flex="70" layout="row"><div flex="33" class="sub-title text-center">{{ vm.pair.count[2] }}</div><div flex="33" \nclass="sub-title text-center">{{ vm.pair.count[3] }}</div><div flex="33" class="sub-title text-center">\n{{ vm.pair.count[4] }}</div></div></div><div layout="row" class="padding-top-8"><div class="sub-title padding-right-8" \nflex="30"><span class="text-boxed-one">S\u1ED1 \u0111i\u1EC3m</span></div><div flex="70" layout="row"><div flex="33" \nclass="bet-input-1"><input type="tel" class="bet-input md-one-input" maxlength="5" ng-model="vm.inputPoint[2]" \nng-currency numeric-only select-on-click ng-disabled="vm.pair.count[2] === 0 || vm.pair.count[2] > 128" \nautocomplete="off" tabindex="2"></div><div flex="33" class="bet-input-2"><input type="tel" \nclass="bet-input md-one-input" maxlength="5" ng-model="vm.inputPoint[3]" ng-currency numeric-only select-on-click \nng-disabled="vm.pair.count[3] === 0 || vm.pair.count[3] > 128" autocomplete="off" tabindex="2"></div><div flex="33" \nclass="bet-input-3"><input type="tel" class="bet-input md-one-input" maxlength="5" ng-model="vm.inputPoint[4]" \nng-currency numeric-only select-on-click ng-disabled="vm.pair.count[4] === 0 || vm.pair.count[4] > 128" \nautocomplete="off" tabindex="2"></div></div></div><div layout="row" class="padding-top-8"><div flex="30" \nclass="padding-right-8"><md-button class="betting-button cancel-button md-warn md-raised" \nng-disabled="!(vm.numbers | filter : {selected : true}).length" ng-click="vm.resetBetting()"><md-icon \nmd-font-icon="icon-close" class="s20"></md-icon></md-button></div><div flex="70"><md-button \nclass="betting-button md-raised md-accent" type="submit" ng-disabled="vm.costMoney() === 0">\u0110\u1EB7t c\u01B0\u1EE3c</md-button></div>\n</div><div class="ignore-price"><md-checkbox ng-model="vm.ignorePrice" aria-label="Ignore Price">\nKh\xF4ng h\u1ECFi l\u1EA1i khi c\xF3 gi\xE1 thay \u0111\u1ED5i</md-checkbox></div></form><div layout="row" class="padding-top-16" \nng-show="(vm.numbers | filter : {selected : true}).length" ng-click="vm.showFull = !vm.showFull"><div \nclass="sub-title number" ng-class="{\'full\' : vm.showFull}"><div>Danh s\xE1ch</div><span class="md-accent-fg md-hue-1" \nng-repeat="n in vm.numbers | filter : {selected : true}">{{n.number}}<span ng-if="!$last">,&nbsp;</span></span></div>\n</div><div layout="column" class="padding-top-8"><div class="sub-title">Th\xE0nh ti\u1EC1n</div><div layout="row" \nclass="padding-top-8"><div class="sub-title" flex="30">Xi\xEAn 2</div><div flex="70" class="text-bold">\n{{vm.pair.money[2] | currency : \'\' : 0 }}</div></div><div layout="row" class="padding-top-8"><div class="sub-title" \nflex="30">Xi\xEAn 3</div><div flex="70" class="text-bold">{{ vm.pair.money[3] | currency : \'\' : 0 }}</div></div><div \nlayout="row" class="padding-top-8"><div class="sub-title" flex="30">Xi\xEAn 4</div><div flex="70" class="text-bold">\n{{ vm.pair.money[4] | currency : \'\' : 0 }}</div></div></div><div layout="row" class="padding-top-8" \nng-if="$root.isAuthenticated"><div class="sub-title secondary" flex="30">T\u1ED1i \u0111a</div><div flex="70" \nclass="sub-title secondary">Xi\xEAn 2: {{ vm.pair.limit[2] | currency : \'\' : 0 }} \u0110i\u1EC3m</div></div><div layout="row" \nclass="padding-top-8" ng-if="$root.isAuthenticated"><div flex="70" flex-offset="30" class="sub-title secondary">\nXi\xEAn 3: {{ vm.pair.limit[3] | currency : \'\' : 0 }} \u0110i\u1EC3m</div></div><div layout="row" class="padding-top-8" \nng-if="$root.isAuthenticated"><div flex="70" flex-offset="30" class="sub-title secondary">\nXi\xEAn 4: {{ vm.pair.limit[4] | currency : \'\' : 0 }} \u0110i\u1EC3m</div></div><div layout="row" class="balance" \nng-if="$root.isAuthenticated"><div class="sub-title secondary" flex="30">S\u1ED1 d\u01B0</div><div flex="70" \nclass="text-bold sub-title secondary" layout="row" layout-align="space-between center">\n{{ $root.User.Balance | currency : \'\' : 0 }}<md-button class="md-icon-button" ng-click="$root.updateBalance()" \nng-disabled="$root.User.updating"><md-icon md-font-icon="icon-refresh" class="s16" \nng-class="{\'rotating\' : $root.User.updating }"></md-icon></md-button></div></div></div></div></div><div layout="column" \nclass="recent-betting-list" ng-include="\'app/main/traditional/betting/recent-ticket.html\'" \nng-show="$root.latestTicket.length"></div></div></div>');
$templateCache.put('app/main/traditional/northern-2nd/quick-bet/quick-bet.html','<div class="main-game" layout="column" flex><div layout="column" class="quick-bet md-whiteframe-1dp md-primary-bg"><form\n ng-submit="vm.submitBetting()"><div flex-xs="100" flex-sm="50" flex="30" flex-offset-sm="50" flex-offset="70" \nflex-offset-xs="0" class="betting-form" layout="column"><div hide><md-checkbox ng-model="vm.ignorePrice" \naria-label="Ignore Price">Kh\xF4ng h\u1ECFi l\u1EA1i khi c\xF3 gi\xE1 thay \u0111\u1ED5i</md-checkbox></div><div layout="row"><div flex="30" \nclass="padding-right-8"><md-button class="betting-button cancel-button md-warn md-raised" \nng-disabled="vm.checkDisabledReset()" ng-click="vm.declareRow()"><md-icon md-font-icon="icon-close" class="s20">\n</md-icon></md-button></div><div flex="70"><md-button class="betting-button md-raised md-accent" type="submit" \nng-disabled="vm.totalMoney() === 0">\u0110\u1EB7t c\u01B0\u1EE3c</md-button></div></div></div><div class="table-wrap"><table class="table">\n<thead><tr><th rowspan="2">S\u1ED1</th><th rowspan="2">\u0110\u1EA3o</th><th colspan="1">2D</th><th colspan="4">3D</th><th colspan="2">\n4D</th><th rowspan="2">Th\xE0nh ti\u1EC1n</th></tr><tr><th>\u0110\u1EA7u</th><th>\u0110\u1EA7u</th><th>\u0110u\xF4i</th><th>\u0110\u1EA7u/\u0110u\xF4i</th><th>23 L\xF4</th><th>\n\u0110u\xF4i</th><th>20 L\xF4</th></tr></thead><tbody><tr ng-repeat="row in vm.rows"><td><input type="text" class="md-one-input" \nmaxlength="4" ng-model="row.number"></td><td><md-checkbox ng-model="row.reverse" aria-label="R2" \nng-disabled="vm.checkRe(row.number)"></md-checkbox></td><td><input type="text" class="md-one-input" maxlength="5" \nng-model="row.D2.dau" ng-currency numeric-only select-on-click ng-disabled="row.number.length !== 2"></td><td \nclass="d3"><input type="text" class="md-one-input" maxlength="5" ng-model="row.D3.dau" ng-currency numeric-only \nselect-on-click ng-disabled="row.number.length !== 3"></td><td class="d3"><input type="text" class="md-one-input" \nmaxlength="5" ng-model="row.D3.duoi" ng-currency numeric-only select-on-click ng-disabled="row.number.length !== 3">\n</td><td class="d3"><input type="text" class="md-one-input" maxlength="5" ng-model="row.D3.dd" ng-currency numeric-only \nselect-on-click ng-disabled="row.number.length !== 3"></td><td class="d3"><input type="text" class="md-one-input" \nmaxlength="5" ng-model="row.D3.lo23" ng-currency numeric-only select-on-click ng-disabled="row.number.length !== 3">\n</td><td><input type="text" class="md-one-input" maxlength="5" ng-model="row.D4.duoi" ng-currency numeric-only \nselect-on-click ng-disabled="row.number.length !== 4"></td><td><input type="text" class="md-one-input" maxlength="5" \nng-model="row.D4.lo20" ng-currency numeric-only select-on-click ng-disabled="row.number.length !== 4"></td><td \nng-class="{\'transparent\': row.money === 0 }">{{row.money | currency : \'\' : 0 }}</td></tr></tbody><tfoot><tr><td \ncolspan="9">T\u1ED5ng ti\u1EC1n</td><td>{{ vm.sumMoney | currency : \'\' : 0 }}</td></tr></tfoot></table></div></form></div></div>');
$templateCache.put('app/main/traditional/southern/live/live.html','<div class="main-game" layout-gt-sm="row" layout="column"><div flex-gt-sm="70" flex="100" class="content-number-wrap">\n<div layout="column" class="content-number md-whiteframe-1dp md-primary-bg"><div class="row-input-numbers"><form \nclass="md-inline-form" ng-submit="vm.submitKeyNumber()" novalidate layout="row"><input type="tel" autocomplete="off" \nclass="input-numbers-array md-one-input" placeholder="D\xE3y s\u1ED1" ng-model="vm.keynumber" \nng-keyup="vm.inputKeyNumber($event)" ng-focus="vm.betPoint = 0" tabindex="1" ng-disabled="!vm.allowBetting"><md-button \nclass="md-raised key-number" type="button" ng-click="vm.submitKeyNumber(true)" ng-disabled="!vm.keynumber.length">\nTh\xEAm v\xE0o</md-button></form></div><table><tbody><tr hide show-gt-xs><td><md-checkbox md-no-ink aria-label="Checkbox" \nng-checked="vm.exists(3, 1)" ng-click="vm.groupNumbers(3, 1)" ng-disabled="!vm.allowBetting"></md-checkbox></td><td \ncolspan="10" layout="row" class="row-check"><div layout="row" layout-align="center"><md-checkbox md-no-ink \naria-label="Checkbox" ng-checked="vm.exists(0, 10)" ng-click="vm.groupNumbers(0, 10)" ng-disabled="!vm.allowBetting">\n</md-checkbox></div><div layout="row" layout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" \nng-checked="vm.exists(0, 11)" ng-click="vm.groupNumbers(0, 11)" ng-disabled="!vm.allowBetting"></md-checkbox></div><div \nlayout="row" layout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(0, 12)" \nng-click="vm.groupNumbers(0, 12)" ng-disabled="!vm.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(0, 13)" \nng-click="vm.groupNumbers(0, 13)" ng-disabled="!vm.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(0, 14)" \nng-click="vm.groupNumbers(0, 14)" ng-disabled="!vm.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(0, 15)" \nng-click="vm.groupNumbers(0, 15)" ng-disabled="!vm.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(0, 16)" \nng-click="vm.groupNumbers(0, 16)" ng-disabled="!vm.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(0, 17)" \nng-click="vm.groupNumbers(0, 17)" ng-disabled="!vm.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(0, 18)" \nng-click="vm.groupNumbers(0, 18)" ng-disabled="!vm.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(0, 19)" \nng-click="vm.groupNumbers(0, 19)" ng-disabled="!vm.allowBetting"></md-checkbox></div></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(0, 0)" \nng-click="vm.groupNumbers(0, 0)" ng-disabled="!vm.allowBetting"></md-checkbox></td><td colspan="10" rowspan="10" \nclass="main-number"><div class="repeater-number" ng-repeat="n in vm.numbers"><div \nclass="inner-number md-one-number live" layout="column" ng-click="vm.selectNumber(n)" \nng-class="{\'active\' : n.selected,  \'changed-price\': n.priceChanged && vm.allowBetting, \'stop\': n.Stop || !vm.allowBetting}">\n<div class="number">{{n.number}}</div><div class="price md-accent-fg md-hue-1" hide show-gt-xs><span \nng-class="{\'price-up\' : n.price > vm.basePrice, \'zero\' : n.price === 0}">{{n.price | currency : \'\' : 0 }}</span></div>\n<div class="input-point"><input type="text" class="md-one-input" ng-model="n.point" ng-currency numeric-only \nng-click="vm.singlePointClick($event);$event.stopPropagation()"></div></div></div></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(0, 1)" \nng-click="vm.groupNumbers(0, 1)" ng-disabled="!vm.allowBetting"></md-checkbox></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(0, 2)" \nng-click="vm.groupNumbers(0, 2)" ng-disabled="!vm.allowBetting"></md-checkbox></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(0, 3)" \nng-click="vm.groupNumbers(0, 3)" ng-disabled="!vm.allowBetting"></md-checkbox></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(0, 4)" \nng-click="vm.groupNumbers(0, 4)" ng-disabled="!vm.allowBetting"></md-checkbox></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(0, 5)" \nng-click="vm.groupNumbers(0, 5)" ng-disabled="!vm.allowBetting"></md-checkbox></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(0, 6)" \nng-click="vm.groupNumbers(0, 6)" ng-disabled="!vm.allowBetting"></md-checkbox></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(0, 7)" \nng-click="vm.groupNumbers(0, 7)" ng-disabled="!vm.allowBetting"></md-checkbox></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(0, 8)" \nng-click="vm.groupNumbers(0, 8)" ng-disabled="!vm.allowBetting"></md-checkbox></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(0, 9)" \nng-click="vm.groupNumbers(0, 9)" ng-disabled="!vm.allowBetting"></md-checkbox></td></tr></tbody></table><div \nclass="live-info" layout="row" layout-xs="column" layout-align="space-between center" ng-if="vm.odds.PrizeNr"><h4 \nclass="warn" ng-if="vm.allowBetting"><md-icon md-font-icon="icon-flickr-after"></md-icon><span class="upper">\nTr\u1EF1c ti\u1EBFp - 2D 18 L\xF4 - {{ one.regirons[0].CityName }}</span></h4><div flex></div><h4 class="text-right">\nS\u1ED1 gi\u1EA3i ch\u01B0a quay: <span>{{ vm.odds.PrizeNr }}</span></h4></div></div></div><div flex-gt-sm="30" flex="100" \nlayout="column" class="main-right-betting-form"><div layout="column" class="betting-form-wrap"><div \nclass="betting-form md-whiteframe-1dp md-primary-bg" layout="column"><div class="betting-form-header"><div layout="row">\n<div flex="30">\u0110\u1EB7t c\u01B0\u1EE3c</div><div flex="70" class="text-right">{{vm.betId | bet}} - {{ one.regirons[0].CityName }}</div>\n</div></div><div class="betting-form-content"><form name="basicForm" class="md-inline-form" \nng-submit="vm.submitBetting()" novalidate><div layout="row"><div class="sub-title padding-right-8" flex="30"><span \nclass="text-boxed-one">S\u1ED1 \u0111i\u1EC3m</span></div><div flex="70"><input type="tel" id="bet-input" \nclass="bet-input md-one-input" ng-model="vm.betPoint" maxlength="5" ng-currency select-on-click numeric-only \nng-focus="vm.fnFocus()" ng-change="vm.changeBettingPoint()" ng-blur="vm.clearTemporary()" \nng-disabled="!(vm.numbers | filter : {selected : true}).length" autocomplete="off" tabindex="2"></div></div><div \nlayout="row" class="padding-top-16"><div flex="30" class="padding-right-8"><md-button \nclass="betting-button cancel-button md-warn md-raised" ng-disabled="!(vm.numbers | filter : {selected : true}).length" \nng-click="vm.resetBetting()"><md-icon md-font-icon="icon-close"></md-icon></md-button></div><div flex="70"><md-button \nclass="betting-button md-raised md-accent" type="submit" ng-disabled="vm.totalMoney === 0">\u0110\u1EB7t c\u01B0\u1EE3c</md-button></div>\n</div><div class="ignore-price" hide show-gt-xs><md-checkbox ng-model="vm.ignorePrice" aria-label="Ignore Price" \ndisabled="disabled">Kh\xF4ng h\u1ECFi l\u1EA1i khi c\xF3 gi\xE1 thay \u0111\u1ED5i</md-checkbox></div></form><div layout="row" \nclass="padding-top-16"><div class="sub-title" flex="30">T\u1ED5ng \u0111i\u1EC3m</div><div flex="70" class="text-bold">\n{{vm.totalPoint() | currency : \'\' : 0 }}</div></div><div layout="row" class="padding-top-8"><div class="sub-title" \nflex="30">Th\xE0nh ti\u1EC1n</div><div flex="70" class="text-bold">{{vm.totalMoney | currency : \'\' : 0 }}</div></div><div \nlayout="row" class="padding-top-8" ng-show="(vm.numbers | filter : {selected : true}).length" \nng-click="vm.showFull = !vm.showFull"><div class="sub-title number" ng-class="{\'full\' : vm.showFull}"><div>Danh s\xE1ch\n</div><span class="md-accent-fg md-hue-1" ng-repeat="n in vm.numbers | filter : {selected : true}">{{n.number}}<span \nng-if="!$last">,&nbsp;</span></span></div></div><div layout="row" class="padding-top-8" ng-if="$root.isAuthenticated">\n<div class="sub-title secondary" flex="30">T\u1ED1i \u0111a</div><div flex="70" class="text-bold sub-title secondary">\n{{vm.purchaseLimit | currency : \'\' : 0 }} \u0110i\u1EC3m</div></div><div layout="row" class="balance" \nng-if="$root.isAuthenticated"><div class="sub-title secondary" flex="30">S\u1ED1 d\u01B0</div><div flex="70" \nclass="text-bold sub-title secondary" layout="row" layout-align="space-between center">\n{{ $root.User.Balance | currency : \'\' : 0 }}<md-button class="md-icon-button" ng-click="$root.updateBalance()" \nng-disabled="$root.User.updating"><md-icon md-font-icon="icon-refresh" class="s16" \nng-class="{\'rotating\' : $root.User.updating }"></md-icon></md-button></div></div></div></div></div><div \nclass="live-info" layout="column" hide><div layout="column" class="live-content"><div class="title">\nTh\xF4ng tin L\xF4 tr\u1EF1c ti\u1EBFp</div><div layout="row" class="content"><div flex="70" class="name">S\u1ED1 gi\u1EA3i ch\u01B0a quay</div><div \nflex="30" class="timer">{{ vm.odds.PrizeNr }}</div></div><div layout="row" class="content"><div flex="70" class="name">\nT\u1EF7 l\u1EC7 tr\u1EA3 th\u01B0\u1EDFng</div><div flex="30" class="timer">80</div></div></div></div><div layout="column" \nclass="recent-betting-list" ng-include="\'app/main/traditional/betting/recent-ticket.html\'" \nng-show="$root.latestTicket.length"></div></div></div>');
$templateCache.put('app/main/traditional/southern/parlay/pair-2.html','<div class="main-game" layout-gt-sm="row" layout="column"><div flex-gt-sm="70" flex="100" class="content-number-wrap">\n<div layout="column" class="content-number md-whiteframe-1dp md-primary-bg"><div class="row-input-numbers"><form \nclass="md-inline-form" ng-submit="vm.submitKeyNumber()" novalidate layout="row"><input type="tel" autocomplete="off" \ngo-focus="vm.focusVar" class="input-numbers-array md-one-input" placeholder="D\xE3y s\u1ED1" ng-model="vm.keynumber" \nng-keyup="vm.inputKeyNumber($event)" tabindex="1" ng-disabled="!$root.allowBetting"><md-button \nclass="md-raised key-number" type="button" ng-click="vm.submitKeyNumber(true)" ng-disabled="!vm.keynumber.length">\nTh\xEAm v\xE0o</md-button></form></div><table><tbody><tr hide show-gt-xs><td><md-checkbox md-no-ink aria-label="Checkbox" \nng-checked="vm.exists(20)" ng-click="vm.groupNumbers(20)" ng-disabled="!$root.allowBetting"></md-checkbox></td><td \ncolspan="10" layout="row" class="row-check"><div layout="row" layout-align="center"><md-checkbox md-no-ink \naria-label="Checkbox" ng-checked="vm.exists(10)" ng-click="vm.groupNumbers(10)" ng-disabled="!$root.allowBetting">\n</md-checkbox></div><div layout="row" layout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" \nng-checked="vm.exists(11)" ng-click="vm.groupNumbers(11)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div \nlayout="row" layout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(12)" \nng-click="vm.groupNumbers(12)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(13)" \nng-click="vm.groupNumbers(13)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(14)" \nng-click="vm.groupNumbers(14)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(15)" \nng-click="vm.groupNumbers(15)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(16)" \nng-click="vm.groupNumbers(16)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(17)" \nng-click="vm.groupNumbers(17)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(18)" \nng-click="vm.groupNumbers(18)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(19)" \nng-click="vm.groupNumbers(19)" ng-disabled="!$root.allowBetting"></md-checkbox></div></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(0)" \nng-click="vm.groupNumbers(0)" ng-disabled="!$root.allowBetting"></md-checkbox></td><td colspan="10" rowspan="10" \nclass="main-number"><div class="repeater-number" ng-repeat="n in vm.numbers | limitTo:100"><div \nclass="inner-number miennam md-one-number" layout="row" ng-click="vm.selectNumber(n)" \nng-class="{\'active\' : n.selected, \'changed-price\': n.priceChanged, \'stop\' : !$root.allowBetting }"><div flex="50" \nclass="price md-accent-fg md-hue-1" layout="column" hide show-gt-xs><div><span \nng-class="{\'price-up\': n.price[2][2] > n.basePrice, \'stop\' : n.disabled[2][2], \'zero\' : n.price[2][2] === 0}">\n{{n.price[2][2]}}</span></div><div><span \nng-class="{\'price-up\': n.price[2][3] > n.basePrice, \'stop\' : n.disabled[2][3], \'zero\' : n.price[2][3] === 0}">\n{{n.price[2][3]}}</span></div><div><span \nng-class="{\'price-up\': n.price[2][4] > n.basePrice, \'stop\' : n.disabled[2][4], \'zero\' : n.price[2][4] === 0}">\n{{n.price[2][4]}}</span></div></div><div flex="50" flex-xs="100" class="number">{{n.number}}</div></div></div></td></tr>\n<tr><td layout="row" layout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(1)" \nng-click="vm.groupNumbers(1)" ng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(2)" \nng-click="vm.groupNumbers(2)" ng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(3)" \nng-click="vm.groupNumbers(3)" ng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(4)" \nng-click="vm.groupNumbers(4)" ng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(5)" \nng-click="vm.groupNumbers(5)" ng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(6)" \nng-click="vm.groupNumbers(6)" ng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(7)" \nng-click="vm.groupNumbers(7)" ng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(8)" \nng-click="vm.groupNumbers(8)" ng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(9)" \nng-click="vm.groupNumbers(9)" ng-disabled="!$root.allowBetting"></md-checkbox></td></tr></tbody></table></div></div><div\n flex-gt-sm="30" flex="100" layout="column" class="main-right-betting-form"><div layout="column" \nclass="betting-form-wrap"><div class="betting-form md-whiteframe-1dp md-primary-bg" layout="column"><div \nclass="betting-form-header"><div layout="row"><div flex="30">\u0110\u1EB7t c\u01B0\u1EE3c</div><div flex="70" class="text-right">\nL\xF4 Xi\xEAn - Mi\u1EC1n Nam</div></div></div><div class="betting-form-content"><form name="basicForm" class="md-inline-form" \nng-submit="vm.submitBetting()" novalidate><div layout="row" class="padding-top-8" flex="70" flex-offset="30"><div \nflex="33" class="text-center">Xi\xEAn 2</div><div flex="33" class="text-center">Xi\xEAn 3</div><div flex="33" \nclass="text-center">Xi\xEAn 4</div></div><div layout="row" class="padding-top-8"><div class="sub-title padding-right-8" \nflex="30"><span class="text-boxed-one">S\u1ED1 xi\xEAn</span></div><div flex="70" layout="row"><div flex="33" \nclass="sub-title text-center">{{ vm.pair.count[2] }}</div><div flex="33" class="sub-title text-center">\n{{ vm.pair.count[3] }}</div><div flex="33" class="sub-title text-center">{{ vm.pair.count[4] }}</div></div></div><div \nlayout="row" class="padding-top-8"><div class="sub-title padding-right-8" flex="30"><span class="text-boxed-one">S\u1ED1 \u0111i\u1EC3m\n</span></div><div flex="70" layout="row"><div flex="33" class="bet-input-1"><input type="tel" \nclass="bet-input md-one-input" maxlength="5" ng-model="vm.inputPoint[2]" ng-currency numeric-only select-on-click \nng-disabled="vm.pair.count[2] === 0 || vm.pair.count[2]/$root.regironSelected.length > 128" autocomplete="off" \ntabindex="2"></div><div flex="33" class="bet-input-2"><input type="tel" class="bet-input md-one-input" maxlength="5" \nng-model="vm.inputPoint[3]" ng-currency numeric-only select-on-click \nng-disabled="vm.pair.count[3] === 0 || vm.pair.count[3]/$root.regironSelected.length > 128" autocomplete="off" \ntabindex="2"></div><div flex="33" class="bet-input-3"><input type="tel" class="bet-input md-one-input" maxlength="5" \nng-model="vm.inputPoint[4]" ng-currency numeric-only select-on-click \nng-disabled="vm.pair.count[4] === 0 || vm.pair.count[4]/$root.regironSelected.length > 128" autocomplete="off" \ntabindex="2"></div></div></div><div layout="row" class="regirons"><div class="sub-title padding-right-8" flex="30"><span\n class="text-boxed-one">Ch\u1ECDn \u0111\xE0i</span></div><div flex="70" layout="column"><div ng-repeat="regiron in one.regirons">\n<md-checkbox aria-label="Checkbox" ng-checked="one.exists(regiron.GameType)" \nng-disabled="one.checkAllowBetting(regiron.GameType)" ng-click="one.toggle(regiron.GameType)">{{regiron.CityName}}\n</md-checkbox></div></div></div><div layout="row" class="padding-top-8"><div flex="30" class="padding-right-8">\n<md-button class="betting-button cancel-button md-warn md-raised" \nng-disabled="!(vm.numbers | filter : {selected : true}).length" ng-click="vm.resetBetting()"><md-icon \nmd-font-icon="icon-close" class="s20"></md-icon></md-button></div><div flex="70"><md-button \nclass="betting-button md-raised md-accent" type="submit" \nng-disabled="vm.pair.money[2] + vm.pair.money[3] + vm.pair.money[4] === 0">\u0110\u1EB7t c\u01B0\u1EE3c</md-button></div></div><div \nclass="ignore-price"><md-checkbox ng-model="vm.ignorePrice" aria-label="Ignore Price">Kh\xF4ng h\u1ECFi l\u1EA1i khi c\xF3 gi\xE1 thay \u0111\u1ED5i\n</md-checkbox></div></form><div layout="column" class="padding-top-16"><div class="sub-title">Th\xE0nh ti\u1EC1n</div><div \nlayout="row" class="padding-top-8"><div class="sub-title" flex="30">Xi\xEAn 2</div><div flex="70" class="text-bold">\n{{vm.costMoney(2) | currency : \'\' : 0 }}</div></div><div layout="row" class="padding-top-8"><div class="sub-title" \nflex="30">Xi\xEAn 3</div><div flex="70" class="text-bold">{{vm.costMoney(3) | currency : \'\' : 0 }}</div></div><div \nlayout="row" class="padding-top-8"><div class="sub-title" flex="30">Xi\xEAn 4</div><div flex="70" class="text-bold">\n{{vm.costMoney(4) | currency : \'\' : 0 }}</div></div></div><div layout="row" class="padding-top-16" \nng-if="$root.isAuthenticated"><div class="sub-title secondary" flex="30">T\u1ED1i \u0111a</div><div flex="70" \nclass="text-bold sub-title secondary">{{vm.purchaseLimit(2,2) | currency : \'\' : 0 }} \u0110i\u1EC3m</div></div><div layout="row" \nclass="balance" ng-if="$root.isAuthenticated"><div class="sub-title secondary" flex="30">S\u1ED1 d\u01B0</div><div flex="70" \nclass="text-bold sub-title secondary" layout="row" layout-align="space-between center">\n{{ $root.User.Balance | currency : \'\' : 0 }}<md-button class="md-icon-button" ng-click="$root.updateBalance()" \nng-disabled="$root.User.updating"><md-icon md-font-icon="icon-refresh" class="s16" \nng-class="{\'rotating\' : $root.User.updating }"></md-icon></md-button></div></div></div></div></div><div layout="column" \nclass="recent-betting-list" ng-include="\'app/main/traditional/betting/recent-ticket.html\'" \nng-show="$root.latestTicket.length"></div></div></div>');
$templateCache.put('app/main/traditional/southern/parlay/pair-3.html','<div class="main-game" layout-gt-sm="row" layout="column"><div flex-gt-sm="70" flex="100" class="content-number-wrap">\n<div layout="column" class="content-number md-whiteframe-1dp md-primary-bg"><div class="row-input-numbers"><form \nclass="md-inline-form" ng-submit="vm.submitKeyNumber()" novalidate layout="row"><input type="tel" autocomplete="off" \ngo-focus="vm.focusVar" class="input-numbers-array md-one-input" placeholder="D\xE3y s\u1ED1" ng-model="vm.keynumber" \nng-keyup="vm.inputKeyNumber($event)" tabindex="1" ng-disabled="!$root.allowBetting"><md-button \nclass="md-raised key-number" type="button" ng-click="vm.submitKeyNumber(true)" ng-disabled="!vm.keynumber.length">\nTh\xEAm v\xE0o</md-button></form></div><table><tbody><tr hide show-gt-xs><td><md-checkbox md-no-ink aria-label="Checkbox" \nng-checked="vm.exists(20)" ng-click="vm.groupNumbers(20)" ng-disabled="!$root.allowBetting"></md-checkbox></td><td \ncolspan="10" layout="row" class="row-check"><div layout="row" layout-align="center"><md-checkbox md-no-ink \naria-label="Checkbox" ng-checked="vm.exists(10)" ng-click="vm.groupNumbers(10)" ng-disabled="!$root.allowBetting">\n</md-checkbox></div><div layout="row" layout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" \nng-checked="vm.exists(11)" ng-click="vm.groupNumbers(11)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div \nlayout="row" layout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(12)" \nng-click="vm.groupNumbers(12)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(13)" \nng-click="vm.groupNumbers(13)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(14)" \nng-click="vm.groupNumbers(14)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(15)" \nng-click="vm.groupNumbers(15)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(16)" \nng-click="vm.groupNumbers(16)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(17)" \nng-click="vm.groupNumbers(17)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(18)" \nng-click="vm.groupNumbers(18)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(19)" \nng-click="vm.groupNumbers(19)" ng-disabled="!$root.allowBetting"></md-checkbox></div></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(0)" \nng-click="vm.groupNumbers(0)" ng-disabled="!$root.allowBetting"></md-checkbox></td><td colspan="10" rowspan="10" \nclass="main-number"><div class="repeater-number" ng-repeat="n in vm.numbers | limitTo:100"><div \nclass="inner-number miennam md-one-number" layout="row" ng-click="vm.selectNumber(n)" \nng-class="{\'active\' : n.selected, \'changed-price\': n.priceChanged, \'stop\' : !$root.allowBetting }"><div flex="50" \nclass="price md-accent-fg md-hue-1" layout="column" hide show-gt-xs><div><span \nng-class="{\'price-up\': n.price[3][2] > n.basePrice, \'stop\' : n.disabled[3][2], \'zero\' : n.price[3][2] === 0}">\n{{n.price[3][2]}}</span></div><div><span \nng-class="{\'price-up\': n.price[3][3] > n.basePrice, \'stop\' : n.disabled[3][3], \'zero\' : n.price[3][3] === 0}">\n{{n.price[3][3]}}</span></div><div><span \nng-class="{\'price-up\': n.price[3][4] > n.basePrice, \'stop\' : n.disabled[3][4], \'zero\' : n.price[3][4] === 0}">\n{{n.price[3][4]}}</span></div></div><div flex="50" flex-xs="100" class="number">{{n.number}}</div></div></div></td></tr>\n<tr><td layout="row" layout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(1)" \nng-click="vm.groupNumbers(1)" ng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(2)" \nng-click="vm.groupNumbers(2)" ng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(3)" \nng-click="vm.groupNumbers(3)" ng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(4)" \nng-click="vm.groupNumbers(4)" ng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(5)" \nng-click="vm.groupNumbers(5)" ng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(6)" \nng-click="vm.groupNumbers(6)" ng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(7)" \nng-click="vm.groupNumbers(7)" ng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(8)" \nng-click="vm.groupNumbers(8)" ng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(9)" \nng-click="vm.groupNumbers(9)" ng-disabled="!$root.allowBetting"></md-checkbox></td></tr></tbody></table></div></div><div\n flex-gt-sm="30" flex="100" layout="column" class="main-right-betting-form"><div layout="column" \nclass="betting-form-wrap"><div class="betting-form md-whiteframe-1dp md-primary-bg" layout="column"><div \nclass="betting-form-header"><div layout="row"><div flex="30">\u0110\u1EB7t c\u01B0\u1EE3c</div><div flex="70" class="text-right">\nL\xF4 Xi\xEAn - Mi\u1EC1n Nam</div></div></div><div class="betting-form-content"><form name="basicForm" class="md-inline-form" \nng-submit="vm.submitBetting()" novalidate><div layout="row" class="padding-top-8" flex="70" flex-offset="30"><div \nflex="33" class="text-center">Xi\xEAn 2</div><div flex="33" class="text-center">Xi\xEAn 3</div><div flex="33" \nclass="text-center">Xi\xEAn 4</div></div><div layout="row" class="padding-top-8"><div class="sub-title padding-right-8" \nflex="30"><span class="text-boxed-one">S\u1ED1 xi\xEAn</span></div><div flex="70" layout="row"><div flex="33" \nclass="sub-title text-center">{{ vm.pair.count[2] }}</div><div flex="33" class="sub-title text-center">\n{{ vm.pair.count[3] }}</div><div flex="33" class="sub-title text-center">{{ vm.pair.count[4] }}</div></div></div><div \nlayout="row" class="padding-top-8"><div class="sub-title padding-right-8" flex="30"><span class="text-boxed-one">S\u1ED1 \u0111i\u1EC3m\n</span></div><div flex="70" layout="row"><div flex="33" class="bet-input-1"><input type="tel" \nclass="bet-input md-one-input" maxlength="5" ng-model="vm.inputPoint[2]" ng-currency numeric-only select-on-click \nng-disabled="vm.pair.count[2] === 0 || vm.pair.count[2]/$root.regironSelected.length > 128" autocomplete="off" \ntabindex="2"></div><div flex="33" class="bet-input-2"><input type="tel" class="bet-input md-one-input" maxlength="5" \nng-model="vm.inputPoint[3]" ng-currency numeric-only select-on-click \nng-disabled="vm.pair.count[3] === 0 || vm.pair.count[3]/$root.regironSelected.length > 128" autocomplete="off" \ntabindex="2"></div><div flex="33" class="bet-input-3"><input type="tel" class="bet-input md-one-input" maxlength="5" \nng-model="vm.inputPoint[4]" ng-currency numeric-only select-on-click \nng-disabled="vm.pair.count[4] === 0 || vm.pair.count[4]/$root.regironSelected.length > 128" autocomplete="off" \ntabindex="2"></div></div></div><div layout="row" class="regirons"><div class="sub-title padding-right-8" flex="30"><span\n class="text-boxed-one">Ch\u1ECDn \u0111\xE0i</span></div><div flex="70" layout="column"><div ng-repeat="regiron in one.regirons">\n<md-checkbox aria-label="Checkbox" ng-checked="one.exists(regiron.GameType)" \nng-disabled="one.checkAllowBetting(regiron.GameType)" ng-click="one.toggle(regiron.GameType)">{{regiron.CityName}}\n</md-checkbox></div></div></div><div layout="row" class="padding-top-8"><div flex="30" class="padding-right-8">\n<md-button class="betting-button cancel-button md-warn md-raised" \nng-disabled="!(vm.numbers | filter : {selected : true}).length" ng-click="vm.resetBetting()"><md-icon \nmd-font-icon="icon-close" class="s20"></md-icon></md-button></div><div flex="70"><md-button \nclass="betting-button md-raised md-accent" type="submit" \nng-disabled="vm.pair.money[2] + vm.pair.money[3] + vm.pair.money[4] === 0">\u0110\u1EB7t c\u01B0\u1EE3c</md-button></div></div><div \nclass="ignore-price"><md-checkbox ng-model="vm.ignorePrice" aria-label="Ignore Price">Kh\xF4ng h\u1ECFi l\u1EA1i khi c\xF3 gi\xE1 thay \u0111\u1ED5i\n</md-checkbox></div></form><div layout="column" class="padding-top-16"><div class="sub-title">Th\xE0nh ti\u1EC1n</div><div \nlayout="row" class="padding-top-8"><div class="sub-title" flex="30">Xi\xEAn 2</div><div flex="70" class="text-bold">\n{{vm.costMoney(2) | currency : \'\' : 0 }}</div></div><div layout="row" class="padding-top-8"><div class="sub-title" \nflex="30">Xi\xEAn 3</div><div flex="70" class="text-bold">{{vm.costMoney(3) | currency : \'\' : 0 }}</div></div><div \nlayout="row" class="padding-top-8"><div class="sub-title" flex="30">Xi\xEAn 4</div><div flex="70" class="text-bold">\n{{vm.costMoney(4) | currency : \'\' : 0 }}</div></div></div><div layout="row" class="padding-top-16" \nng-if="$root.isAuthenticated"><div class="sub-title secondary" flex="30">T\u1ED1i \u0111a</div><div flex="70" \nclass="text-bold sub-title secondary">{{vm.purchaseLimit(2,3) | currency : \'\' : 0 }} \u0110i\u1EC3m</div></div><div layout="row" \nclass="balance" ng-if="$root.isAuthenticated"><div class="sub-title secondary" flex="30">S\u1ED1 d\u01B0</div><div flex="70" \nclass="text-bold sub-title secondary" layout="row" layout-align="space-between center">\n{{ $root.User.Balance | currency : \'\' : 0 }}<md-button class="md-icon-button" ng-click="$root.updateBalance()" \nng-disabled="$root.User.updating"><md-icon md-font-icon="icon-refresh" class="s16" \nng-class="{\'rotating\' : $root.User.updating }"></md-icon></md-button></div></div></div></div></div><div layout="column" \nclass="recent-betting-list" ng-include="\'app/main/traditional/betting/recent-ticket.html\'" \nng-show="$root.latestTicket.length"></div></div></div>');
$templateCache.put('app/main/traditional/southern/parlay/pair-4.html','<div class="main-game" layout-gt-sm="row" layout="column"><div flex-gt-sm="70" flex="100" class="content-number-wrap">\n<div layout="column" class="content-number md-whiteframe-1dp md-primary-bg"><div class="row-input-numbers"><form \nclass="md-inline-form" ng-submit="vm.submitKeyNumber()" novalidate layout="row"><input type="tel" autocomplete="off" \ngo-focus="vm.focusVar" class="input-numbers-array md-one-input" placeholder="D\xE3y s\u1ED1" ng-model="vm.keynumber" \nng-keyup="vm.inputKeyNumber($event)" tabindex="1" ng-disabled="!$root.allowBetting"><md-button \nclass="md-raised key-number" type="button" ng-click="vm.submitKeyNumber(true)" ng-disabled="!vm.keynumber.length">\nTh\xEAm v\xE0o</md-button></form></div><table><tbody><tr hide show-gt-xs><td><md-checkbox md-no-ink aria-label="Checkbox" \nng-checked="vm.exists(20)" ng-click="vm.groupNumbers(20)" ng-disabled="!$root.allowBetting"></md-checkbox></td><td \ncolspan="10" layout="row" class="row-check"><div layout="row" layout-align="center"><md-checkbox md-no-ink \naria-label="Checkbox" ng-checked="vm.exists(10)" ng-click="vm.groupNumbers(10)" ng-disabled="!$root.allowBetting">\n</md-checkbox></div><div layout="row" layout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" \nng-checked="vm.exists(11)" ng-click="vm.groupNumbers(11)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div \nlayout="row" layout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(12)" \nng-click="vm.groupNumbers(12)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(13)" \nng-click="vm.groupNumbers(13)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(14)" \nng-click="vm.groupNumbers(14)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(15)" \nng-click="vm.groupNumbers(15)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(16)" \nng-click="vm.groupNumbers(16)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(17)" \nng-click="vm.groupNumbers(17)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(18)" \nng-click="vm.groupNumbers(18)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(19)" \nng-click="vm.groupNumbers(19)" ng-disabled="!$root.allowBetting"></md-checkbox></div></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(0)" \nng-click="vm.groupNumbers(0)" ng-disabled="!$root.allowBetting"></md-checkbox></td><td colspan="10" rowspan="10" \nclass="main-number"><div class="repeater-number" ng-repeat="n in vm.numbers | limitTo:100"><div \nclass="inner-number miennam md-one-number" layout="row" ng-click="vm.selectNumber(n)" \nng-class="{\'active\' : n.selected, \'changed-price\': n.priceChanged, \'stop\' : !$root.allowBetting }"><div flex="50" \nclass="price md-accent-fg md-hue-1" layout="column" hide show-gt-xs><div><span \nng-class="{\'price-up\': n.price[4][2] > n.basePrice, \'stop\' : n.disabled[4][2], \'zero\' : n.price[4][2] === 0}">\n{{n.price[4][2]}}</span></div><div><span \nng-class="{\'price-up\': n.price[4][3] > n.basePrice, \'stop\' : n.disabled[4][3], \'zero\' : n.price[4][3] === 0}">\n{{n.price[4][3]}}</span></div><div><span \nng-class="{\'price-up\': n.price[4][4] > n.basePrice, \'stop\' : n.disabled[4][4], \'zero\' : n.price[4][4] === 0}">\n{{n.price[4][4]}}</span></div></div><div flex="50" flex-xs="100" class="number">{{n.number}}</div></div></div></td></tr>\n<tr><td layout="row" layout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(1)" \nng-click="vm.groupNumbers(1)" ng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(2)" \nng-click="vm.groupNumbers(2)" ng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(3)" \nng-click="vm.groupNumbers(3)" ng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(4)" \nng-click="vm.groupNumbers(4)" ng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(5)" \nng-click="vm.groupNumbers(5)" ng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(6)" \nng-click="vm.groupNumbers(6)" ng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(7)" \nng-click="vm.groupNumbers(7)" ng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(8)" \nng-click="vm.groupNumbers(8)" ng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(9)" \nng-click="vm.groupNumbers(9)" ng-disabled="!$root.allowBetting"></md-checkbox></td></tr></tbody></table></div></div><div\n flex-gt-sm="30" flex="100" layout="column" class="main-right-betting-form"><div layout="column" \nclass="betting-form-wrap"><div class="betting-form md-whiteframe-1dp md-primary-bg" layout="column"><div \nclass="betting-form-header"><div layout="row"><div flex="30">\u0110\u1EB7t c\u01B0\u1EE3c</div><div flex="70" class="text-right">\nL\xF4 Xi\xEAn - Mi\u1EC1n Nam</div></div></div><div class="betting-form-content"><form name="basicForm" class="md-inline-form" \nng-submit="vm.submitBetting()" novalidate><div layout="row" class="padding-top-8" flex="70" flex-offset="30"><div \nflex="33" class="text-center">Xi\xEAn 2</div><div flex="33" class="text-center">Xi\xEAn 3</div><div flex="33" \nclass="text-center">Xi\xEAn 4</div></div><div layout="row" class="padding-top-8"><div class="sub-title padding-right-8" \nflex="30"><span class="text-boxed-one">S\u1ED1 xi\xEAn</span></div><div flex="70" layout="row"><div flex="33" \nclass="sub-title text-center">{{ vm.pair.count[2] }}</div><div flex="33" class="sub-title text-center">\n{{ vm.pair.count[3] }}</div><div flex="33" class="sub-title text-center">{{ vm.pair.count[4] }}</div></div></div><div \nlayout="row" class="padding-top-8"><div class="sub-title padding-right-8" flex="30"><span class="text-boxed-one">S\u1ED1 \u0111i\u1EC3m\n</span></div><div flex="70" layout="row"><div flex="33" class="bet-input-1"><input type="tel" \nclass="bet-input md-one-input" maxlength="5" ng-model="vm.inputPoint[2]" ng-currency numeric-only select-on-click \nng-disabled="vm.pair.count[2] === 0 || vm.pair.count[2]/$root.regironSelected.length > 128" autocomplete="off" \ntabindex="2"></div><div flex="33" class="bet-input-2"><input type="tel" class="bet-input md-one-input" maxlength="5" \nng-model="vm.inputPoint[3]" ng-currency numeric-only select-on-click \nng-disabled="vm.pair.count[3] === 0 || vm.pair.count[3]/$root.regironSelected.length > 128" autocomplete="off" \ntabindex="2"></div><div flex="33" class="bet-input-3"><input type="tel" class="bet-input md-one-input" maxlength="5" \nng-model="vm.inputPoint[4]" ng-currency numeric-only select-on-click \nng-disabled="vm.pair.count[4] === 0 || vm.pair.count[4]/$root.regironSelected.length > 128" autocomplete="off" \ntabindex="2"></div></div></div><div layout="row" class="regirons"><div class="sub-title padding-right-8" flex="30"><span\n class="text-boxed-one">Ch\u1ECDn \u0111\xE0i</span></div><div flex="70" layout="column"><div ng-repeat="regiron in one.regirons">\n<md-checkbox aria-label="Checkbox" ng-checked="one.exists(regiron.GameType)" \nng-disabled="one.checkAllowBetting(regiron.GameType)" ng-click="one.toggle(regiron.GameType)">{{regiron.CityName}}\n</md-checkbox></div></div></div><div layout="row" class="padding-top-8"><div flex="30" class="padding-right-8">\n<md-button class="betting-button cancel-button md-warn" ng-disabled="!(vm.numbers | filter : {selected : true}).length" \nng-click="vm.resetBetting()"><md-icon md-font-icon="icon-close" class="s20"></md-icon></md-button></div><div flex="70">\n<md-button class="betting-button md-raised md-accent" type="submit" \nng-disabled="vm.pair.money[2] + vm.pair.money[3] + vm.pair.money[4] === 0">\u0110\u1EB7t c\u01B0\u1EE3c</md-button></div></div><div \nclass="ignore-price"><md-checkbox ng-model="vm.ignorePrice" aria-label="Ignore Price">Kh\xF4ng h\u1ECFi l\u1EA1i khi c\xF3 gi\xE1 thay \u0111\u1ED5i\n</md-checkbox></div></form><div layout="column" class="padding-top-16"><div class="sub-title">Th\xE0nh ti\u1EC1n</div><div \nlayout="row" class="padding-top-8"><div class="sub-title" flex="30">Xi\xEAn 2</div><div flex="70" class="text-bold">\n{{vm.costMoney(2) | currency : \'\' : 0 }}</div></div><div layout="row" class="padding-top-8"><div class="sub-title" \nflex="30">Xi\xEAn 3</div><div flex="70" class="text-bold">{{vm.costMoney(3) | currency : \'\' : 0 }}</div></div><div \nlayout="row" class="padding-top-8"><div class="sub-title" flex="30">Xi\xEAn 4</div><div flex="70" class="text-bold">\n{{vm.costMoney(4) | currency : \'\' : 0 }}</div></div></div><div layout="row" class="padding-top-16" \nng-if="$root.isAuthenticated"><div class="sub-title secondary" flex="30">T\u1ED1i \u0111a</div><div flex="70" \nclass="text-bold sub-title secondary">{{vm.purchaseLimit(2,4) | currency : \'\' : 0 }} \u0110i\u1EC3m</div></div><div layout="row" \nclass="balance" ng-if="$root.isAuthenticated"><div class="sub-title secondary" flex="30">S\u1ED1 d\u01B0</div><div flex="70" \nclass="text-bold sub-title secondary" layout="row" layout-align="space-between center">\n{{ $root.User.Balance | currency : \'\' : 0 }}<md-button class="md-icon-button" ng-click="$root.updateBalance()" \nng-disabled="$root.User.updating"><md-icon md-font-icon="icon-refresh" class="s16" \nng-class="{\'rotating\' : $root.User.updating }"></md-icon></md-button></div></div></div></div></div><div layout="column" \nclass="recent-betting-list" ng-include="\'app/main/traditional/betting/recent-ticket.html\'" \nng-show="$root.latestTicket.length"></div></div></div>');
$templateCache.put('app/main/traditional/southern/7lo/7lo.html','<div class="main-game" layout="row"><div layout="column" class="lo7 md-whiteframe-1dp md-primary-bg" flex="70"><div \nclass="table-wrap"><table class="table"><thead><tr><th rowspan="2">S\u1ED1</th><th rowspan="2"><div layout="column" \nlayout-align="space-between center"><div>18A</div><div><md-checkbox aria-label="Select All" \nng-checked="vm.checkedAll(2)" md-indeterminate="vm.isIndeterminate(2)" ng-click="vm.toggleAll(2)"></md-checkbox></div>\n</div></th><th rowspan="2"><div layout="column" layout-align="space-between center"><div>18B</div><div><md-checkbox \naria-label="Select All" ng-checked="vm.checkedAll(3)" md-indeterminate="vm.isIndeterminate(3)" \nng-click="vm.toggleAll(3)"></md-checkbox></div></div></th><th rowspan="2"><div layout="column" \nlayout-align="space-between center"><div>18C</div><div><md-checkbox aria-label="Select All" \nng-checked="vm.checkedAll(4)" md-indeterminate="vm.isIndeterminate(4)" ng-click="vm.toggleAll(4)"></md-checkbox></div>\n</div></th><th colspan="4">7 L\xF4</th><th rowspan="2">Th\xE0nh ti\u1EC1n</th></tr><tr><th>2D</th><th>\u0110\u1EA3o</th><th>3D</th><th>\u0110\u1EA3o\n</th></tr></thead><tbody><tr ng-repeat="row in vm.rowsBets"><td><input type="text" class="md-one-input" maxlength="3" \nng-model="row.number" numeric-only select-on-click></td><td><md-checkbox ng-model="row.regirons[2]" aria-label="A" \nng-disabled="!row.number.length"></md-checkbox></td><td><md-checkbox ng-model="row.regirons[3]" aria-label="B" \nng-disabled="!row.number.length"></md-checkbox></td><td><md-checkbox ng-model="row.regirons[4]" aria-label="C" \nng-disabled="!row.number.length"></md-checkbox></td><td><input type="text" class="md-one-input" maxlength="5" \nng-model="row.lo[16].point" ng-currency numeric-only select-on-click \nng-disabled="row.number.length !== 1 && row.number.length !== 2" ng-class="{\'transparent\': row.lo[16].point === 0 }">\n</td><td><md-checkbox ng-model="row.lo[16].reverse" aria-label="C" ng-disabled="row.lo[16].disabledReverse">\n</md-checkbox></td><td><input type="text" class="md-one-input" maxlength="5" ng-model="row.lo[18].point" ng-currency \nnumeric-only select-on-click ng-disabled="row.number.length !== 3" ng-class="{\'transparent\': row.lo[18].point === 0 }">\n</td><td><md-checkbox ng-model="row.lo[18].reverse" aria-label="C" ng-disabled="row.lo[18].disabledReverse">\n</md-checkbox></td><td ng-class="{\'transparent\': row.money === 0 }">{{ row.money | currency : \'\' : 0 }}</td></tr>\n</tbody><tfoot><tr><td colspan="8">T\u1ED5ng ti\u1EC1n</td><td>{{ vm.totalMoney() | currency : \'\' : 0 }}</td></tr></tfoot></table>\n</div></div><div flex="30" class="row-bet main-right-betting-form" layout="column"><div layout="column" \nclass="betting-form-wrap"><div class="betting-form"><div class="betting-form-content" layout="row"><div flex="30" \nclass="padding-right-8"><md-button class="betting-button cancel-button md-warn md-raised" \nng-disabled="vm.checkDisabledReset()" ng-click="vm.declareRow()"><md-icon md-font-icon="icon-close" class="s20">\n</md-icon></md-button></div><div flex="70"><md-button class="betting-button md-raised md-accent" \nng-click="vm.submitBetting()" ng-disabled="vm.totalMoney() === 0">\u0110\u1EB7t c\u01B0\u1EE3c</md-button></div></div></div></div><div \nlayout="column" class="recent-betting-list" ng-include="\'app/main/traditional/betting/recent-ticket.html\'" \nng-show="$root.latestTicket.length"></div></div></div>');
$templateCache.put('app/main/traditional/southern/quick-bet/quick-bet.html','<div class="main-game" layout="column"><div layout="column" class="quick-bet md-whiteframe-1dp md-primary-bg"><form \nng-submit="vm.submitBetting()"><div flex-xs="100" flex-sm="50" flex="30" flex-offset-sm="50" flex-offset="70" \nflex-offset-xs="0" class="betting-form" layout="column"><div hide><md-checkbox ng-model="vm.ignorePrice" \naria-label="Ignore Price">Kh\xF4ng h\u1ECFi l\u1EA1i khi c\xF3 gi\xE1 thay \u0111\u1ED5i</md-checkbox></div><div layout="row"><div flex="30" \nclass="padding-right-8"><md-button class="betting-button cancel-button md-warn md-raised" \nng-disabled="vm.checkDisabledReset()" ng-click="vm.declareRow()"><md-icon md-font-icon="icon-close" class="s20">\n</md-icon></md-button></div><div flex="70"><md-button class="betting-button md-raised md-accent" type="submit" \nng-disabled="vm.totalMoney() === 0">\u0110\u1EB7t c\u01B0\u1EE3c</md-button></div></div></div><div class="table-wrap"><table class="table">\n<thead><tr><th rowspan="2">S\u1ED1</th><th rowspan="2">\u0110\u1EA3o</th><th rowspan="2"><div layout="column" \nlayout-align="space-between center"><div>18A</div><div><md-checkbox aria-label="Select All" \nng-checked="vm.checkedAll(2)" md-indeterminate="vm.isIndeterminate(2)" ng-click="vm.toggleAll(2)"></md-checkbox></div>\n</div></th><th rowspan="2"><div layout="column" layout-align="space-between center"><div>18B</div><div><md-checkbox \naria-label="Select All" ng-checked="vm.checkedAll(3)" md-indeterminate="vm.isIndeterminate(3)" \nng-click="vm.toggleAll(3)"></md-checkbox></div></div></th><th rowspan="2" class="border-right"><div layout="column" \nlayout-align="space-between center"><div>18C</div><div><md-checkbox aria-label="Select All" \nng-checked="vm.checkedAll(4)" md-indeterminate="vm.isIndeterminate(4)" ng-click="vm.toggleAll(4)"></md-checkbox></div>\n</div></th><th colspan="4" class="border-bottom border-right">2D</th><th colspan="4" class="border-bottom border-right">\n3D</th><th colspan="2" class="border-bottom">4D</th><th rowspan="2" class="border-left">Th\xE0nh ti\u1EC1n</th></tr><tr><th>\u0110\u1EA7u\n</th><th>\u0110u\xF4i</th><th>\u0110\u1EA7u<br>\u0110u\xF4i</th><th class="border-right">18 L\xF4</th><th>\u0110\u1EA7u</th><th>\u0110u\xF4i</th><th>\u0110\u1EA7u<br>\u0110u\xF4i</th>\n<th class="border-right">17 L\xF4</th><th>\u0110u\xF4i</th><th>16 L\xF4</th></tr></thead><tbody><tr ng-repeat="row in vm.rows"><td>\n<input type="text" maxlength="4" ng-model="row.number" class="md-one-input"></td><td><md-checkbox \nng-model="row.reverse" aria-label="R2" ng-disabled="vm.checkRe(row.number)"></md-checkbox></td><td><md-checkbox \nng-model="row.regirons[2]" aria-label="A" ng-disabled="!row.number.length"></md-checkbox></td><td><md-checkbox \nng-model="row.regirons[3]" aria-label="B" ng-disabled="!row.number.length"></md-checkbox></td><td><md-checkbox \nng-model="row.regirons[4]" aria-label="C" ng-disabled="!row.number.length"></md-checkbox></td><td><input type="text" \nclass="md-one-input" maxlength="5" ng-model="row.D2.dau" ng-currency numeric-only select-on-click \nng-disabled="row.number.length !== 1 && row.number.length !== 2"></td><td><input type="text" class="md-one-input" \nmaxlength="5" ng-model="row.D2.duoi" ng-currency numeric-only select-on-click \nng-disabled="row.number.length !== 1 && row.number.length !== 2"></td><td><input type="text" class="md-one-input" \nmaxlength="5" ng-model="row.D2.dd" ng-currency numeric-only select-on-click \nng-disabled="row.number.length !== 1 && row.number.length !== 2"></td><td><input type="text" class="md-one-input" \nmaxlength="5" ng-model="row.D2.lo18" ng-currency numeric-only select-on-click \nng-disabled="row.number.length !== 1 && row.number.length !== 2"></td><td class="d3"><input type="text" \nclass="md-one-input" maxlength="5" ng-model="row.D3.dau" ng-currency numeric-only select-on-click \nng-disabled="row.number.length !== 3"></td><td class="d3"><input type="text" class="md-one-input" maxlength="5" \nng-model="row.D3.duoi" ng-currency numeric-only select-on-click ng-disabled="row.number.length !== 3"></td><td \nclass="d3"><input type="text" class="md-one-input" maxlength="5" ng-model="row.D3.dd" ng-currency numeric-only \nselect-on-click ng-disabled="row.number.length !== 3"></td><td class="d3"><input type="text" class="md-one-input" \nmaxlength="5" ng-model="row.D3.lo17" ng-currency numeric-only select-on-click ng-disabled="row.number.length !== 3">\n</td><td><input type="text" class="md-one-input" maxlength="5" ng-model="row.D4.duoi" ng-currency numeric-only \nselect-on-click ng-disabled="row.number.length !== 4"></td><td><input type="text" class="md-one-input" maxlength="5" \nng-model="row.D4.lo16" ng-currency numeric-only select-on-click ng-disabled="row.number.length !== 4"></td><td>\n{{vm.sumRowMoney(row, $index) | currency : \'\' : 0 }}</td></tr></tbody><tfoot><tr><td colspan="15">T\u1ED5ng ti\u1EC1n</td><td>\n{{ vm.totalMoney() | currency : \'\' : 0 }}</td></tr></tfoot></table></div></form></div></div>');
$templateCache.put('app/main/legendary/northern/4d/legendary.4d.html','<div class="main-game" layout-gt-sm="row" layout="column"><div flex-gt-sm="60" flex="100" class="content-number-wrap">\n<div layout="column" class="content-number"><div class="navi-button margin-bottom-8" layout="row" \nlayout-align="center center"><div class="number-filter-4d" layout="row"><div ng-repeat="label in vm.labels"><md-button \nng-click="vm.dialogLabel(label)">{{ label }}</md-button></div></div></div><div class="table-number-wrap"><table><tbody>\n<tr hide show-gt-xs><td></td><td colspan="10" layout="row" class="row-check"><div flex="10"><md-checkbox md-no-ink \naria-label="Checkbox" ng-checked="vm.number.checkbox.exists(10)" ng-click="vm.number.checkbox.group(10)" \nng-disabled="!legend.allowBetting"></md-checkbox></div><div flex="10"><md-checkbox md-no-ink aria-label="Checkbox" \nng-checked="vm.number.checkbox.exists(11)" ng-click="vm.number.checkbox.group(11)" ng-disabled="!legend.allowBetting">\n</md-checkbox></div><div flex="10"><md-checkbox md-no-ink aria-label="Checkbox" \nng-checked="vm.number.checkbox.exists(12)" ng-click="vm.number.checkbox.group(12)" ng-disabled="!legend.allowBetting">\n</md-checkbox></div><div flex="10"><md-checkbox md-no-ink aria-label="Checkbox" \nng-checked="vm.number.checkbox.exists(13)" ng-click="vm.number.checkbox.group(13)" ng-disabled="!legend.allowBetting">\n</md-checkbox></div><div flex="10"><md-checkbox md-no-ink aria-label="Checkbox" \nng-checked="vm.number.checkbox.exists(14)" ng-click="vm.number.checkbox.group(14)" ng-disabled="!legend.allowBetting">\n</md-checkbox></div><div flex="10"><md-checkbox md-no-ink aria-label="Checkbox" \nng-checked="vm.number.checkbox.exists(15)" ng-click="vm.number.checkbox.group(15)" ng-disabled="!legend.allowBetting">\n</md-checkbox></div><div flex="10"><md-checkbox md-no-ink aria-label="Checkbox" \nng-checked="vm.number.checkbox.exists(16)" ng-click="vm.number.checkbox.group(16)" ng-disabled="!legend.allowBetting">\n</md-checkbox></div><div flex="10"><md-checkbox md-no-ink aria-label="Checkbox" \nng-checked="vm.number.checkbox.exists(17)" ng-click="vm.number.checkbox.group(17)" ng-disabled="!legend.allowBetting">\n</md-checkbox></div><div flex="10"><md-checkbox md-no-ink aria-label="Checkbox" \nng-checked="vm.number.checkbox.exists(18)" ng-click="vm.number.checkbox.group(18)" ng-disabled="!legend.allowBetting">\n</md-checkbox></div><div flex="10"><md-checkbox md-no-ink aria-label="Checkbox" \nng-checked="vm.number.checkbox.exists(19)" ng-click="vm.number.checkbox.group(19)" ng-disabled="!legend.allowBetting">\n</md-checkbox></div></td></tr><tr><td><md-checkbox md-no-ink aria-label="Checkbox" \nng-checked="vm.number.checkbox.exists(0)" ng-click="vm.number.checkbox.group(0)" ng-disabled="!legend.allowBetting">\n</md-checkbox></td><td colspan="10" rowspan="10"><div class="main-number d4" layout="row" layout-wrap><div flex="10" \nclass="repeater-number" ng-repeat="n in vm.numbers"><div class="inner-number" layout="column" \nlayout-align="space-around center" ng-click="vm.number.select(n)" \nng-class="{\'active\' : n.selected, \'changed-price\': n.priceChanged && legend.allowBetting, \'disabled\': n.disabled || !legend.allowBetting}">\n<div class="number">{{n.number}}</div><div class="price" hide><span \nng-class="{\'price-up\' : n.price > vm.basePrice, \'zero\' : n.price === 0}">{{n.price | currency : \'\' : 0 }}</span></div>\n</div></div></div></td></tr><tr><td><md-checkbox md-no-ink aria-label="Checkbox" \nng-checked="vm.number.checkbox.exists(1)" ng-click="vm.number.checkbox.group(1)" ng-disabled="!legend.allowBetting">\n</md-checkbox></td></tr><tr><td><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.number.checkbox.exists(2)" \nng-click="vm.number.checkbox.group(2)" ng-disabled="!legend.allowBetting"></md-checkbox></td></tr><tr><td><md-checkbox \nmd-no-ink aria-label="Checkbox" ng-checked="vm.number.checkbox.exists(3)" ng-click="vm.number.checkbox.group(3)" \nng-disabled="!legend.allowBetting"></md-checkbox></td></tr><tr><td><md-checkbox md-no-ink aria-label="Checkbox" \nng-checked="vm.number.checkbox.exists(4)" ng-click="vm.number.checkbox.group(4)" ng-disabled="!legend.allowBetting">\n</md-checkbox></td></tr><tr><td><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.number.checkbox.exists(5)" \nng-click="vm.number.checkbox.group(5)" ng-disabled="!legend.allowBetting"></md-checkbox></td></tr><tr><td><md-checkbox \nmd-no-ink aria-label="Checkbox" ng-checked="vm.number.checkbox.exists(6)" ng-click="vm.number.checkbox.group(6)" \nng-disabled="!legend.allowBetting"></md-checkbox></td></tr><tr><td><md-checkbox md-no-ink aria-label="Checkbox" \nng-checked="vm.number.checkbox.exists(7)" ng-click="vm.number.checkbox.group(7)" ng-disabled="!legend.allowBetting">\n</md-checkbox></td></tr><tr><td><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.number.checkbox.exists(8)" \nng-click="vm.number.checkbox.group(8)" ng-disabled="!legend.allowBetting"></md-checkbox></td></tr><tr><td><md-checkbox \nmd-no-ink aria-label="Checkbox" ng-checked="vm.number.checkbox.exists(9)" ng-click="vm.number.checkbox.group(9)" \nng-disabled="!legend.allowBetting"></md-checkbox></td></tr></tbody></table></div></div></div><div flex-gt-sm="40" \nflex="100" layout="column" class="main-right-betting-form"><div layout="column" class="betting-form-wrap"><div \nclass="betting-form" layout="column"><div class="betting-form-header"><div layout="row"><div flex="30">\u0110\u1EB7t c\u01B0\u1EE3c</div>\n<div flex="70" class="text-right">\n{{vm.config.BetType | bet : false : vm.config.GameType }} - {{ vm.config.GameType | legendGame }}</div></div></div><div \nclass="betting-form-content"><form name="basicForm" class="md-inline-form" ng-submit="vm.submitBetting()" novalidate>\n<div layout="row" class="padding-top-8"><div class="sub-title" flex="30">S\u1ED1 \u0111i\u1EC3m</div><div flex="70" class="form-group">\n<input type="tel" id="bet-input" class="bet-input" ng-model="vm.betPoint" maxlength="5" ng-currency select-on-click \nnumeric-only ng-change="vm.stepper.update()" ng-disabled="!(vm.numbers | filter : {selected : true}).length" \nautocomplete="off" tabindex="2"><div class="line"></div></div></div><div layout="row" layout-wrap \nlayout-align="space-between center" class="padding-top-16 bet-stepper-wrap" \nng-class="{\'has-individual\' : vm.betStepper.length === 10 }"><div class="bet-stepper" \nng-repeat="item in vm.betStepper track by $index" ng-class="{\'individual\' : item.individual}"><md-button \nng-class="{\'active\': item.active}" ng-click="vm.stepper.select(item)">{{ item.value | currency : \'\' : 0 }}</md-button>\n</div></div><div layout="row" class="padding-top-8"><div flex="30" class="padding-right-8"><md-button \nclass="betting-button cancel-button" ng-disabled="!(vm.numbers | filter : {selected : true}).length" \nng-click="vm.resetBetting()"><md-icon md-font-icon="icon-close"></md-icon></md-button></div><div flex="70"><md-button \nclass="betting-button" type="submit" ng-disabled="vm.totalMoney() === 0">\u0110\u1EB7t c\u01B0\u1EE3c</md-button></div></div><div \nclass="ignore-price" hide><md-checkbox ng-model="vm.ignorePrice" aria-label="Ignore Price">\nKh\xF4ng h\u1ECFi l\u1EA1i khi c\xF3 gi\xE1 thay \u0111\u1ED5i</md-checkbox></div></form><div layout="row" class="padding-top-8" \nng-if="$root.termInfo !== undefined"><div class="sub-title" flex="35">Phi\xEAn m\u1EDF th\u01B0\u1EDFng</div><div flex="65" \nclass="text-bold">{{ $root.termInfo.Term | term }} <em>({{ $root.termInfo.DrawResultAt | amDateFormat : \'HH:mm\' }})</em>\n</div></div><div layout="row"><div class="sub-title" flex="35">Gi\xE1 b\xE1n</div><div flex="65" class="text-bold">\n{{ vm.basePrice | currency : \'\' : 0 }}</div></div><div layout="row"><div class="sub-title" flex="35">T\u1ED5ng \u0111i\u1EC3m</div><div\n flex="65" class="text-bold">{{vm.sumPoint | currency : \'\' : 0 }}</div></div><div layout="row"><div class="sub-title" \nflex="35">Th\xE0nh ti\u1EC1n</div><div flex="65" class="text-bold">{{vm.sumMoney | currency : \'\' : 0 }}</div></div><div \nlayout="row" ng-show="(vm.numbers | filter : {selected : true}).length" ng-click="vm.showFull = !vm.showFull"><div flex \nclass="sub-title number" ng-class="{\'full\' : vm.showFull}"><div><span>Danh s\xE1ch:</span> <span class="n">\n{{ vm.number.selected() }}</span></div></div></div><div layout="row" ng-if="$root.isAuthenticated"><div \nclass="sub-title secondary" flex="35">Tr\u1EA3 th\u01B0\u1EDFng</div><div flex="65" class="text-bold sub-title secondary">\n{{vm.payouts | currency : \'\' : 0 }}</div></div><div layout="row" class="balance" ng-if="$root.isAuthenticated"><div \nclass="sub-title secondary" flex="35">S\u1ED1 d\u01B0</div><div flex="65" class="text-bold sub-title secondary" layout="row" \nlayout-align="space-between center">{{ $root.User.Balance | currency : \'\' : 0 }}<md-button class="md-icon-button" \nng-click="$root.updateBalance()" ng-disabled="$root.User.updating"><md-icon md-font-icon="icon-refresh" class="s16" \nng-class="{\'rotating\' : $root.User.updating }"></md-icon></md-button></div></div></div></div></div></div></div>');
$templateCache.put('app/main/legendary/northern/3d/legendary.3d.html','<div class="main-game" layout-gt-sm="row" layout="column"><div flex-gt-sm="60" flex="100" class="content-number-wrap">\n<div layout="column" class="content-number"><md-tabs md-dynamic-height md-border-bottom md-autoselect md-swipe-content \nmd-selected="0"><md-tab label="B\u1EA3ng s\u1ED1" md-on-select="vm.TabSelected(0)"><md-content><div class="number-filter" \nlayout="column" layout-align="space-between center"><div layout="row" class="hundreds"><span class="label">\u0110\u1EA7u</span> \n<span ng-click="vm.changeLabel(0)" ng-class="{\'active\': vm.label === 0}">0</span> <span ng-click="vm.changeLabel(1)" \nng-class="{\'active\': vm.label === 1}">1</span> <span ng-click="vm.changeLabel(2)" ng-class="{\'active\': vm.label === 2}">\n2</span> <span ng-click="vm.changeLabel(3)" ng-class="{\'active\': vm.label === 3}">3</span> <span \nng-click="vm.changeLabel(4)" ng-class="{\'active\': vm.label === 4}">4</span> <span ng-click="vm.changeLabel(5)" \nng-class="{\'active\': vm.label === 5}">5</span> <span ng-click="vm.changeLabel(6)" ng-class="{\'active\': vm.label === 6}">\n6</span> <span ng-click="vm.changeLabel(7)" ng-class="{\'active\': vm.label === 7}">7</span> <span \nng-click="vm.changeLabel(8)" ng-class="{\'active\': vm.label === 8}">8</span> <span ng-click="vm.changeLabel(9)" \nng-class="{\'active\': vm.label === 9}">9</span></div><div layout="row" class="hundreds"><span class="label">Gi\u1EEFa</span> \n<span ng-click="vm.changeLabel(10)" ng-class="{\'active\': vm.label === 10}">0</span> <span ng-click="vm.changeLabel(11)" \nng-class="{\'active\': vm.label === 11}">1</span> <span ng-click="vm.changeLabel(12)" \nng-class="{\'active\': vm.label === 12}">2</span> <span ng-click="vm.changeLabel(13)" \nng-class="{\'active\': vm.label === 13}">3</span> <span ng-click="vm.changeLabel(14)" \nng-class="{\'active\': vm.label === 14}">4</span> <span ng-click="vm.changeLabel(15)" \nng-class="{\'active\': vm.label === 15}">5</span> <span ng-click="vm.changeLabel(16)" \nng-class="{\'active\': vm.label === 16}">6</span> <span ng-click="vm.changeLabel(17)" \nng-class="{\'active\': vm.label === 17}">7</span> <span ng-click="vm.changeLabel(18)" \nng-class="{\'active\': vm.label === 18}">8</span> <span ng-click="vm.changeLabel(19)" \nng-class="{\'active\': vm.label === 19}">9</span></div></div><div class="table-number-wrap"><table><tbody><tr hide \nshow-gt-xs><td></td><td colspan="10" layout="row" class="row-check"><div flex="10"><md-checkbox md-no-ink \naria-label="Checkbox" ng-checked="vm.number.checkbox.exists(10)" ng-click="vm.number.checkbox.group(10)" \nng-disabled="!legend.allowBetting"></md-checkbox></div><div flex="10"><md-checkbox md-no-ink aria-label="Checkbox" \nng-checked="vm.number.checkbox.exists(11)" ng-click="vm.number.checkbox.group(11)" ng-disabled="!legend.allowBetting">\n</md-checkbox></div><div flex="10"><md-checkbox md-no-ink aria-label="Checkbox" \nng-checked="vm.number.checkbox.exists(12)" ng-click="vm.number.checkbox.group(12)" ng-disabled="!legend.allowBetting">\n</md-checkbox></div><div flex="10"><md-checkbox md-no-ink aria-label="Checkbox" \nng-checked="vm.number.checkbox.exists(13)" ng-click="vm.number.checkbox.group(13)" ng-disabled="!legend.allowBetting">\n</md-checkbox></div><div flex="10"><md-checkbox md-no-ink aria-label="Checkbox" \nng-checked="vm.number.checkbox.exists(14)" ng-click="vm.number.checkbox.group(14)" ng-disabled="!legend.allowBetting">\n</md-checkbox></div><div flex="10"><md-checkbox md-no-ink aria-label="Checkbox" \nng-checked="vm.number.checkbox.exists(15)" ng-click="vm.number.checkbox.group(15)" ng-disabled="!legend.allowBetting">\n</md-checkbox></div><div flex="10"><md-checkbox md-no-ink aria-label="Checkbox" \nng-checked="vm.number.checkbox.exists(16)" ng-click="vm.number.checkbox.group(16)" ng-disabled="!legend.allowBetting">\n</md-checkbox></div><div flex="10"><md-checkbox md-no-ink aria-label="Checkbox" \nng-checked="vm.number.checkbox.exists(17)" ng-click="vm.number.checkbox.group(17)" ng-disabled="!legend.allowBetting">\n</md-checkbox></div><div flex="10"><md-checkbox md-no-ink aria-label="Checkbox" \nng-checked="vm.number.checkbox.exists(18)" ng-click="vm.number.checkbox.group(18)" ng-disabled="!legend.allowBetting">\n</md-checkbox></div><div flex="10"><md-checkbox md-no-ink aria-label="Checkbox" \nng-checked="vm.number.checkbox.exists(19)" ng-click="vm.number.checkbox.group(19)" ng-disabled="!legend.allowBetting">\n</md-checkbox></div></td></tr><tr><td><md-checkbox md-no-ink aria-label="Checkbox" \nng-checked="vm.number.checkbox.exists(0)" ng-click="vm.number.checkbox.group(0)" ng-disabled="!legend.allowBetting">\n</md-checkbox></td><td colspan="10" rowspan="10"><div class="main-number" layout="row" layout-wrap><div flex="10" \nclass="repeater-number" ng-repeat="n in vm.numbers"><div class="inner-number" layout="column" \nlayout-align="space-around center" ng-click="vm.number.select(n)" \nng-class="{\'active\' : n.selected, \'changed-price\': n.priceChanged && legend.allowBetting, \'disabled\': n.disabled || !legend.allowBetting}">\n<div class="number d3">{{n.number}}</div><div class="price except" hide><span \nng-class="{\'price-up\' : n.price > vm.basePrice, \'zero\' : n.price === 0}">{{n.price | currency : \'\' : 0 }}</span></div>\n</div></div></div></td></tr><tr><td><md-checkbox md-no-ink aria-label="Checkbox" \nng-checked="vm.number.checkbox.exists(1)" ng-click="vm.number.checkbox.group(1)" ng-disabled="!legend.allowBetting">\n</md-checkbox></td></tr><tr><td><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.number.checkbox.exists(2)" \nng-click="vm.number.checkbox.group(2)" ng-disabled="!legend.allowBetting"></md-checkbox></td></tr><tr><td><md-checkbox \nmd-no-ink aria-label="Checkbox" ng-checked="vm.number.checkbox.exists(3)" ng-click="vm.number.checkbox.group(3)" \nng-disabled="!legend.allowBetting"></md-checkbox></td></tr><tr><td><md-checkbox md-no-ink aria-label="Checkbox" \nng-checked="vm.number.checkbox.exists(4)" ng-click="vm.number.checkbox.group(4)" ng-disabled="!legend.allowBetting">\n</md-checkbox></td></tr><tr><td><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.number.checkbox.exists(5)" \nng-click="vm.number.checkbox.group(5)" ng-disabled="!legend.allowBetting"></md-checkbox></td></tr><tr><td><md-checkbox \nmd-no-ink aria-label="Checkbox" ng-checked="vm.number.checkbox.exists(6)" ng-click="vm.number.checkbox.group(6)" \nng-disabled="!legend.allowBetting"></md-checkbox></td></tr><tr><td><md-checkbox md-no-ink aria-label="Checkbox" \nng-checked="vm.number.checkbox.exists(7)" ng-click="vm.number.checkbox.group(7)" ng-disabled="!legend.allowBetting">\n</md-checkbox></td></tr><tr><td><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.number.checkbox.exists(8)" \nng-click="vm.number.checkbox.group(8)" ng-disabled="!legend.allowBetting"></md-checkbox></td></tr><tr><td><md-checkbox \nmd-no-ink aria-label="Checkbox" ng-checked="vm.number.checkbox.exists(9)" ng-click="vm.number.checkbox.group(9)" \nng-disabled="!legend.allowBetting"></md-checkbox></td></tr></tbody></table></div></md-content></md-tab><md-tab \nlabel="Nh\u1EADp tay" md-on-select="vm.TabSelected(1)"><md-content><div class="row-input-numbers"><form \nclass="md-inline-form" ng-submit="vm.number.submit3D()" novalidate layout="row"><div class="form-group" layout="column">\n<input type="tel" autocomplete="off" class="input-numbers-array" placeholder="Nh\u1EADp d\xE3y s\u1ED1 mu\u1ED1n \u0111\u1EB7t c\u01B0\u1EE3c" \nng-model="vm.keyNumber3D" ng-keyup="vm.number.typing3d($event)" tabindex="1" ng-disabled="!legend.allowBetting"><div \nclass="line"></div></div><md-button class="md-raised" type="button" ng-click="vm.number.submit3D(true)" \nng-disabled="!vm.keyNumber3D.length || vm.disabled3D">Th\xEAm v\xE0o</md-button></form></div><div class="table-number-wrap">\n<div class="main-number" layout="row" layout-wrap><div flex="10" class="repeater-number" ng-repeat="n in vm.number3Ds">\n<div class="inner-number live active" layout="column" layout-align="space-around center" \nng-class="{\'disabled\': n.disabled || !legend.allowBetting}"><div class="number">{{n.number}}</div></div></div></div>\n</div></md-content></md-tab></md-tabs></div></div><div flex-gt-sm="40" flex="100" layout="column" \nclass="main-right-betting-form"><div layout="column" class="betting-form-wrap"><div class="betting-form" \nlayout="column"><div class="betting-form-header"><div layout="row"><div flex="30">\u0110\u1EB7t c\u01B0\u1EE3c</div><div flex="70" \nclass="text-right">{{ vm.config.BetType | bet : false : vm.config.GameType }} - {{ vm.config.GameType | legendGame }}\n</div></div></div><div class="betting-form-content"><form name="basicForm" class="md-inline-form" \nng-submit="vm.submitBetting()" novalidate><div layout="row" class="padding-top-8"><div class="sub-title" flex="30">\nS\u1ED1 \u0111i\u1EC3m</div><div flex="70" class="form-group"><input type="tel" id="bet-input" class="bet-input" \nng-model="vm.betPoint" maxlength="5" ng-currency select-on-click numeric-only ng-change="vm.stepper.update()" \nng-disabled="vm.checkPointDisabled()" autocomplete="off" tabindex="2"><div class="line"></div></div></div><div \nlayout="row" layout-wrap layout-align="space-between center" class="padding-top-16 bet-stepper-wrap" \nng-class="{\'has-individual\' : vm.betStepper.length === 10 }"><div class="bet-stepper" \nng-repeat="item in vm.betStepper track by $index" ng-class="{\'individual\' : item.individual}"><md-button \nng-class="{\'active\': item.active}" ng-click="vm.stepper.select(item)">{{ item.value | currency : \'\' : 0 }}</md-button>\n</div></div><div layout="row" class="padding-top-8"><div flex="30" class="padding-right-8"><md-button \nclass="betting-button cancel-button" ng-disabled="vm.checkPointDisabled()" ng-click="vm.resetBetting()"><md-icon \nmd-font-icon="icon-close"></md-icon></md-button></div><div flex="70"><md-button class="betting-button" type="submit" \nng-disabled="vm.totalMoney() === 0">\u0110\u1EB7t c\u01B0\u1EE3c</md-button></div></div><div class="ignore-price" hide><md-checkbox \nng-model="vm.ignorePrice" aria-label="Ignore Price">Kh\xF4ng h\u1ECFi l\u1EA1i khi c\xF3 gi\xE1 thay \u0111\u1ED5i</md-checkbox></div></form><div \nlayout="row" class="padding-top-8" ng-if="$root.termInfo !== undefined"><div class="sub-title" flex="35">Phi\xEAn m\u1EDF th\u01B0\u1EDFng\n</div><div flex="65" class="text-bold">{{ $root.termInfo.Term | term }} <em>\n({{ $root.termInfo.DrawResultAt | amDateFormat : \'HH:mm\' }})</em></div></div><div layout="row"><div class="sub-title" \nflex="35">Gi\xE1 b\xE1n</div><div flex="65" class="text-bold">{{ vm.basePrice | currency : \'\' : 0 }}</div></div><div \nlayout="row"><div class="sub-title" flex="35">T\u1ED5ng \u0111i\u1EC3m</div><div flex="65" class="text-bold">\n{{vm.sumPoint | currency : \'\' : 0 }}</div></div><div layout="row"><div class="sub-title" flex="35">Th\xE0nh ti\u1EC1n</div><div \nflex="65" class="text-bold">{{vm.sumMoney | currency : \'\' : 0 }}</div></div><div layout="row" \nng-show="(vm.numbers | filter : {selected : true}).length" ng-click="vm.showFull = !vm.showFull"><div \nclass="sub-title number" ng-class="{\'full\' : vm.showFull}"><div><span>Danh s\xE1ch:</span> <span class="n">\n{{ vm.number.selected() }}</span></div></div></div><div layout="row" ng-if="$root.isAuthenticated"><div \nclass="sub-title secondary" flex="35">Tr\u1EA3 th\u01B0\u1EDFng</div><div flex="65" class="text-bold sub-title secondary">\n{{ vm.payouts | currency : \'\' : 0 }}</div></div><div layout="row" class="balance" ng-if="$root.isAuthenticated"><div \nclass="sub-title secondary" flex="35">S\u1ED1 d\u01B0</div><div flex="65" class="text-bold sub-title secondary" layout="row" \nlayout-align="space-between center">{{ $root.User.Balance | currency : \'\' : 0 }}<md-button class="md-icon-button" \nng-click="$root.updateBalance()" ng-disabled="$root.User.updating"><md-icon md-font-icon="icon-refresh" class="s16" \nng-class="{\'rotating\' : $root.User.updating }"></md-icon></md-button></div></div></div></div></div></div></div>');
$templateCache.put('app/main/legendary/northern/parlay/legendary.lotto-pair.html','<div class="main-game" layout-gt-sm="row" layout="column"><div flex-gt-sm="60" flex="100" class="content-number-wrap">\n<div layout="column" class="content-number"><div class="row-input-numbers"><form class="md-inline-form" \nng-submit="vm.number.submit()" novalidate layout="row"><div class="form-group" layout="column"><input type="tel" \nautocomplete="off" class="input-numbers-array" placeholder="D\xE3y s\u1ED1" ng-model="vm.keyNumber" \nng-keyup="vm.number.typing($event)" tabindex="1" ng-disabled="!legend.allowBetting"><div class="line"></div></div>\n<md-button class="md-raised" type="button" ng-click="vm.number.submit(true)" ng-disabled="!vm.keyNumber.length">Th\xEAm v\xE0o\n</md-button></form></div><div class="table-number-wrap"><table><tbody><tr hide show-gt-xs><td><md-checkbox md-no-ink \naria-label="Checkbox" ng-checked="vm.number.checkbox.exists(20)" ng-click="vm.number.checkbox.group(20)" \nng-disabled="!legend.allowBetting"></md-checkbox></td><td colspan="10" layout="row" class="row-check"><div flex="10">\n<md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.number.checkbox.exists(10)" \nng-click="vm.number.checkbox.group(10)" ng-disabled="!legend.allowBetting"></md-checkbox></div><div flex="10">\n<md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.number.checkbox.exists(11)" \nng-click="vm.number.checkbox.group(11)" ng-disabled="!legend.allowBetting"></md-checkbox></div><div flex="10">\n<md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.number.checkbox.exists(12)" \nng-click="vm.number.checkbox.group(12)" ng-disabled="!legend.allowBetting"></md-checkbox></div><div flex="10">\n<md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.number.checkbox.exists(13)" \nng-click="vm.number.checkbox.group(13)" ng-disabled="!legend.allowBetting"></md-checkbox></div><div flex="10">\n<md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.number.checkbox.exists(14)" \nng-click="vm.number.checkbox.group(14)" ng-disabled="!legend.allowBetting"></md-checkbox></div><div flex="10">\n<md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.number.checkbox.exists(15)" \nng-click="vm.number.checkbox.group(15)" ng-disabled="!legend.allowBetting"></md-checkbox></div><div flex="10">\n<md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.number.checkbox.exists(16)" \nng-click="vm.number.checkbox.group(16)" ng-disabled="!legend.allowBetting"></md-checkbox></div><div flex="10">\n<md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.number.checkbox.exists(17)" \nng-click="vm.number.checkbox.group(17)" ng-disabled="!legend.allowBetting"></md-checkbox></div><div flex="10">\n<md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.number.checkbox.exists(18)" \nng-click="vm.number.checkbox.group(18)" ng-disabled="!legend.allowBetting"></md-checkbox></div><div flex="10">\n<md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.number.checkbox.exists(19)" \nng-click="vm.number.checkbox.group(19)" ng-disabled="!legend.allowBetting"></md-checkbox></div></td></tr><tr><td>\n<md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.number.checkbox.exists(0)" \nng-click="vm.number.checkbox.group(0)" ng-disabled="!legend.allowBetting"></md-checkbox></td><td colspan="10" \nrowspan="10"><div class="main-number" layout="row" layout-wrap><div flex="10" class="repeater-number" \nng-repeat="n in vm.numbers | limitTo:100"><div class="inner-number" layout="row" layout-align="center center" \nng-click="vm.number.select(n)" \nng-class="{\'active\' : n.selected, \'changed-price\': n.priceChanged && legend.allowBetting, \'disabled\': !legend.allowBetting }">\n<div flex="50" class="price" layout="column" layout-align="space-between center" hide><div><span \nng-class="{\'price-up\': n.price[2] > n.base[2], \'stop\' : n.disabled[2], \'zero\' : n.price[2] === 0}">{{n.price[2]}}</span>\n</div><div><span ng-class="{\'price-up\': n.price[3] > n.base[3], \'stop\' : n.disabled[3], \'zero\' : n.price[3] === 0}">\n{{n.price[3]}}</span></div><div><span \nng-class="{\'price-up\': n.price[4] > n.base[4], \'stop\' : n.disabled[4], \'zero\' : n.price[4] === 0}">{{n.price[4]}}</span>\n</div></div><div flex="100" flex-xs="100" class="number">{{n.number}}</div></div></div></div></td></tr><tr><td>\n<md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.number.checkbox.exists(1)" \nng-click="vm.number.checkbox.group(1)" ng-disabled="!legend.allowBetting"></md-checkbox></td></tr><tr><td><md-checkbox \nmd-no-ink aria-label="Checkbox" ng-checked="vm.number.checkbox.exists(2)" ng-click="vm.number.checkbox.group(2)" \nng-disabled="!legend.allowBetting"></md-checkbox></td></tr><tr><td><md-checkbox md-no-ink aria-label="Checkbox" \nng-checked="vm.number.checkbox.exists(3)" ng-click="vm.number.checkbox.group(3)" ng-disabled="!legend.allowBetting">\n</md-checkbox></td></tr><tr><td><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.number.checkbox.exists(4)" \nng-click="vm.number.checkbox.group(4)" ng-disabled="!legend.allowBetting"></md-checkbox></td></tr><tr><td><md-checkbox \nmd-no-ink aria-label="Checkbox" ng-checked="vm.number.checkbox.exists(5)" ng-click="vm.number.checkbox.group(5)" \nng-disabled="!legend.allowBetting"></md-checkbox></td></tr><tr><td><md-checkbox md-no-ink aria-label="Checkbox" \nng-checked="vm.number.checkbox.exists(6)" ng-click="vm.number.checkbox.group(6)" ng-disabled="!legend.allowBetting">\n</md-checkbox></td></tr><tr><td><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.number.checkbox.exists(7)" \nng-click="vm.number.checkbox.group(7)" ng-disabled="!legend.allowBetting"></md-checkbox></td></tr><tr><td><md-checkbox \nmd-no-ink aria-label="Checkbox" ng-checked="vm.number.checkbox.exists(8)" ng-click="vm.number.checkbox.group(8)" \nng-disabled="!legend.allowBetting"></md-checkbox></td></tr><tr><td><md-checkbox md-no-ink aria-label="Checkbox" \nng-checked="vm.number.checkbox.exists(9)" ng-click="vm.number.checkbox.group(9)" ng-disabled="!legend.allowBetting">\n</md-checkbox></td></tr></tbody></table></div></div></div><div flex-gt-sm="40" flex="100" layout="column" \nclass="main-right-betting-form"><div layout="column" class="betting-form-wrap"><div class="betting-form" \nlayout="column"><div class="betting-form-header"><div layout="row"><div flex="30">\u0110\u1EB7t c\u01B0\u1EE3c</div><div flex="70" \nclass="text-right">L\xF4 Xi\xEAn - {{ vm.GameType | legendGame }}</div></div></div><div class="betting-form-content"><form \nname="basicForm" class="md-inline-form" ng-submit="vm.submitBetting()" novalidate><div layout="row" flex="70" \nflex-offset="30"><div flex="33" class="sub-title text-center">Xi\xEAn 2</div><div flex="33" class="sub-title text-center">\nXi\xEAn 3</div><div flex="33" class="sub-title text-center">Xi\xEAn 4</div></div><div layout="row"><div \nclass="main-color sub-title" flex="30">S\u1ED1 Xi\xEAn</div><div flex="70" layout="row"><div flex="33" \nclass="sub-title text-center">{{ vm.pair.count[2] }}</div><div flex="33" class="sub-title text-center">\n{{ vm.pair.count[3] }}</div><div flex="33" class="sub-title text-center">{{ vm.pair.count[4] }}</div></div></div><div \nlayout="row"><div class="main-color sub-title" flex="30">S\u1ED1 \u0111i\u1EC3m</div><div flex="70" layout="row"><div flex="33" \nclass="form-group"><input type="tel" class="bet-input" ng-model="vm.inputPoint[2]" ng-change="vm.stepper.update(2)" \nmaxlength="5" ng-currency numeric-only select-on-click ng-disabled="vm.pair.count[2] === 0 || vm.pair.count[2] > 128" \nautocomplete="off" tabindex="2"><div class="line"></div></div><div flex="33" class="form-group"><input type="tel" \nclass="bet-input" ng-model="vm.inputPoint[3]" ng-change="vm.stepper.update(3)" maxlength="5" ng-currency numeric-only \nselect-on-click ng-disabled="vm.pair.count[3] === 0 || vm.pair.count[3] > 128" autocomplete="off" tabindex="3"><div \nclass="line"></div></div><div flex="33" class="form-group"><input type="tel" class="bet-input" \nng-model="vm.inputPoint[4]" ng-change="vm.stepper.update(4)" maxlength="5" ng-currency numeric-only select-on-click \nng-disabled="vm.pair.count[4] === 0 || vm.pair.count[4] > 128" autocomplete="off" tabindex="4"><div class="line"></div>\n</div></div></div><div layout="row" layout-wrap layout-align="space-between center" \nclass="padding-top-16 bet-stepper-wrap" ng-class="{\'has-individual\' : vm.betStepper.length === 10 }"><div \nclass="bet-stepper" ng-repeat="item in vm.betStepper track by $index" ng-class="{\'individual\' : item.individual}">\n<md-button ng-class="{\'active\': item.active}" ng-click="vm.stepper.select(item)">{{ item.value | currency : \'\' : 0 }}\n</md-button></div></div><div layout="row"><div flex="30" class="padding-right-8"><md-button \nclass="betting-button cancel-button" ng-disabled="!(vm.numbers | filter : {selected : true}).length" \nng-click="vm.resetBetting()"><md-icon md-font-icon="icon-close"></md-icon></md-button></div><div flex="70"><md-button \nclass="betting-button" type="submit" ng-disabled="vm.costMoney() === 0">\u0110\u1EB7t c\u01B0\u1EE3c</md-button></div></div><div \nclass="ignore-price" hide><md-checkbox ng-model="vm.ignorePrice" aria-label="Ignore Price">\nKh\xF4ng h\u1ECFi l\u1EA1i khi c\xF3 gi\xE1 thay \u0111\u1ED5i</md-checkbox></div></form><div layout="row" class="padding-top-16" \nng-if="$root.termInfo !== undefined"><div class="sub-title" flex="35">Phi\xEAn m\u1EDF th\u01B0\u1EDFng</div><div flex="65" \nclass="text-bold">{{ $root.termInfo.Term | term }} <em>({{ $root.termInfo.DrawResultAt | amDateFormat : \'HH:mm\' }})</em>\n</div></div><div layout="row"><div class="sub-title" flex="35">Gi\xE1 b\xE1n</div><div flex="65" class="text-bold">\n{{ vm.base[2] | currency : \'\' : 0 }}/{{ vm.base[3] | currency : \'\' : 0 }}/{{ vm.base[4] | currency : \'\' : 0 }}</div>\n</div><div layout="column" class="padding-top-4"><div class="sub-title">Th\xE0nh ti\u1EC1n</div><div layout="row"><div \nclass="sub-title" flex="35">Xi\xEAn 2</div><div flex="65" class="text-bold">{{vm.pair.money[2] | currency : \'\' : 0 }}</div>\n</div><div layout="row"><div class="sub-title" flex="35">Xi\xEAn 3</div><div flex="65" class="text-bold">\n{{ vm.pair.money[3] | currency : \'\' : 0 }}</div></div><div layout="row"><div class="sub-title" flex="35">Xi\xEAn 4</div>\n<div flex="65" class="text-bold">{{ vm.pair.money[4] | currency : \'\' : 0 }}</div></div></div><div layout="row" \nng-show="(vm.numbers | filter : {selected : true}).length" ng-click="vm.showFull = !vm.showFull"><div flex \nclass="sub-title number" ng-class="{\'full\' : vm.showFull}"><div><span>Danh s\xE1ch:</span> <span class="n">\n{{ vm.number.selected() }}</span></div></div></div><div layout="row" ng-if="$root.isAuthenticated"><div \nclass="sub-title secondary" flex="35">Tr\u1EA3 th\u01B0\u1EDFng</div><div flex="65" class="sub-title secondary">\nXi\xEAn 2: {{ vm.pair.payout[2] | currency : \'\' : 0 }}</div></div><div layout="row" ng-if="$root.isAuthenticated"><div \nflex="65" flex-offset="35" class="sub-title secondary">Xi\xEAn 3: {{ vm.pair.payout[3] | currency : \'\' : 0 }}</div></div>\n<div layout="row" ng-if="$root.isAuthenticated"><div flex="65" flex-offset="35" class="sub-title secondary">\nXi\xEAn 4: {{ vm.pair.payout[4] | currency : \'\' : 0 }}</div></div><div layout="row" class="balance" \nng-if="$root.isAuthenticated"><div class="sub-title secondary" flex="35">S\u1ED1 d\u01B0</div><div flex="65" \nclass="text-bold sub-title secondary" layout="row" layout-align="space-between center">\n{{ $root.User.Balance | currency : \'\' : 0 }}<md-button class="md-icon-button" ng-click="$root.updateBalance()" \nng-disabled="$root.User.updating"><md-icon md-font-icon="icon-refresh" class="s16" \nng-class="{\'rotating\' : $root.User.updating }"></md-icon></md-button></div></div></div></div></div></div></div>');
$templateCache.put('app/main/legendary/northern/lotto-live/legend.lotto-live.html','<div class="main-game" layout-gt-sm="row" layout="column"><div flex-gt-sm="65" flex="100" class="content-number-wrap">\n<div layout="column" class="content-number"><md-tabs md-dynamic-height md-border-bottom md-autoselect md-swipe-content \nmd-selected="vm.defaultTab"><md-tab label="Live 2 C\xE0ng" md-on-select="vm.TabSelected(0)"><md-content><div \nclass="row-input-numbers"><form class="md-inline-form" ng-submit="vm.number.submit()" novalidate layout="row"><div \nclass="form-group" layout="column"><input type="tel" autocomplete="off" class="input-numbers-array" \nplaceholder="D\xE3y s\u1ED1" ng-model="vm.keyNumber" ng-keyup="vm.number.typing($event)" tabindex="1" \nng-disabled="!vm.allowBetting"><div class="line"></div></div><md-button class="md-raised" type="button" \nng-click="vm.number.submit(true)" ng-disabled="!vm.keyNumber.length">Th\xEAm v\xE0o</md-button><md-button hide show-gt-xs \nclass="md-raised md-accent" ng-disabled="!vm.allowBetting" ng-click="vm.quickShow = !vm.quickShow">Ch\u1ECDn nhanh<md-icon \nmd-font-icon="icon-menu-down" ng-if="!vm.quickShow"></md-icon><md-icon md-font-icon="icon-menu-up" ng-if="vm.quickShow">\n</md-icon></md-button><md-button hide-gt-xs class="md-raised md-icon-button md-accent" aria-label="Favorite" \nng-disabled="!vm.allowBetting" ng-click="vm.quickShow = !vm.quickShow"><md-icon md-font-icon="icon-menu-down" \nng-if="!vm.quickShow"></md-icon><md-icon md-font-icon="icon-menu-up" ng-if="vm.quickShow"></md-icon></md-button></form>\n</div><div class="collapsing" ng-show="vm.quickShow"><md-content><md-tabs md-dynamic-height md-border-bottom \nmd-swipe-content><md-tab ng-repeat="item in vm.quickChoices" label="{{item.name}}" ng-if="$index > 0"><md-content \nlayout="row" layout-wrap><div class="content" ng-repeat="content in item.collect"><md-checkbox \nng-checked="vm.number.checkbox.exists($parent.$index, $index)" \nng-click="vm.number.checkbox.group($parent.$index, $index)" aria-label="Quick Choices" ng-disabled="!vm.allowBetting">\n{{ content.name }}</md-checkbox></div></md-content></md-tab></md-tabs></md-content></div><div class="table-number-wrap">\n<div layout="row" layout-xs="column" layout-align="space-between center" class="chose-filter"><div class="margin-0" \nlayout="row"><md-button class="md-raised" ng-class="{\'active\' : vm.sortType === 0}" type="button" \nng-click="vm.sortNumbers(0)" ng-disabled="!vm.sortReady">Th\u1EE9 t\u1EF1</md-button><md-button class="md-raised" \nng-class="{\'active\' : vm.sortType === 1}" type="button" ng-click="vm.sortNumbers(1)" ng-disabled="!vm.sortReady">Khan\n</md-button><md-button class="md-raised" ng-class="{\'active\' : vm.sortType === 2}" type="button" \nng-click="vm.sortNumbers(2)" ng-disabled="!vm.sortReady">T\u1EA7n su\u1EA5t (%)</md-button><md-button class="md-raised seamless" \ntype="button" ng-click="vm.Seamless($event)" ng-disabled="$root.theResults === undefined" layout="row" \nlayout-align="center center"><span ng-if="!vm.updatingResult">Soi c\u1EA7u</span><md-progress-circular class="md-warn" \nmd-diameter="14px" ng-if="vm.updatingResult"></md-progress-circular></md-button></div><div class="live-info" \nng-class="{\'changed-price\': vm.priceChanged}" layout="row" layout-align="space-between center" \nng-if="vm.PrizeNr && vm.allowBetting && vm.onTabSelected === 0"><div flex></div><h4 class="text-right">S\u1ED1 gi\u1EA3i: <span>\n{{ vm.PrizeNr }}</span></h4><h4 class="text-right">Tr\u1EA3 th\u01B0\u1EDFng: <span>{{ vm.currentPayouts | currency : \'\' : 0 }}</span>\n</h4></div></div><table><tbody><tr hide show-gt-xs><td><md-checkbox md-no-ink aria-label="Checkbox" \nng-checked="vm.number.checkbox.exists(0, 20)" ng-click="vm.number.checkbox.group(0, 20)" ng-disabled="!vm.allowBetting" \nng-show="vm.sortType === 0"></md-checkbox></td><td colspan="10" layout="row" class="row-check"><div flex="10">\n<md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.number.interface.exists(10)" \nng-click="vm.number.interface.group(10)" ng-disabled="!vm.allowBetting"></md-checkbox></div><div flex="10"><md-checkbox \nmd-no-ink aria-label="Checkbox" ng-checked="vm.number.interface.exists(11)" ng-click="vm.number.interface.group(11)" \nng-disabled="!vm.allowBetting"></md-checkbox></div><div flex="10"><md-checkbox md-no-ink aria-label="Checkbox" \nng-checked="vm.number.interface.exists(12)" ng-click="vm.number.interface.group(12)" ng-disabled="!vm.allowBetting">\n</md-checkbox></div><div flex="10"><md-checkbox md-no-ink aria-label="Checkbox" \nng-checked="vm.number.interface.exists(13)" ng-click="vm.number.interface.group(13)" ng-disabled="!vm.allowBetting">\n</md-checkbox></div><div flex="10"><md-checkbox md-no-ink aria-label="Checkbox" \nng-checked="vm.number.interface.exists(14)" ng-click="vm.number.interface.group(14)" ng-disabled="!vm.allowBetting">\n</md-checkbox></div><div flex="10"><md-checkbox md-no-ink aria-label="Checkbox" \nng-checked="vm.number.interface.exists(15)" ng-click="vm.number.interface.group(15)" ng-disabled="!vm.allowBetting">\n</md-checkbox></div><div flex="10"><md-checkbox md-no-ink aria-label="Checkbox" \nng-checked="vm.number.interface.exists(16)" ng-click="vm.number.interface.group(16)" ng-disabled="!vm.allowBetting">\n</md-checkbox></div><div flex="10"><md-checkbox md-no-ink aria-label="Checkbox" \nng-checked="vm.number.interface.exists(17)" ng-click="vm.number.interface.group(17)" ng-disabled="!vm.allowBetting">\n</md-checkbox></div><div flex="10"><md-checkbox md-no-ink aria-label="Checkbox" \nng-checked="vm.number.interface.exists(18)" ng-click="vm.number.interface.group(18)" ng-disabled="!vm.allowBetting">\n</md-checkbox></div><div flex="10"><md-checkbox md-no-ink aria-label="Checkbox" \nng-checked="vm.number.interface.exists(19)" ng-click="vm.number.interface.group(19)" ng-disabled="!vm.allowBetting">\n</md-checkbox></div></td></tr><tr><td><md-checkbox md-no-ink aria-label="Checkbox" \nng-checked="vm.number.interface.exists(0)" ng-click="vm.number.interface.group(0)" ng-disabled="!vm.allowBetting">\n</md-checkbox></td><td colspan="10" rowspan="10"><div class="main-number" layout="row" layout-wrap><div flex="10" \nclass="repeater-number" ng-repeat="n in vm.numbers"><div class="inner-number live" layout="column" \nlayout-align="space-around center" ng-click="vm.number.select(n)" \nng-class="{\'active\' : n.selected,  \'changed-price\': (vm.priceChanged || n.priceChanged) && vm.allowBetting, \'disabled\': n.disabled || !vm.allowBetting}">\n<div class="missing" layout="row" layout-align="space-between"><div class="times" ng-class="{\'high\': n.high}">\n{{n.TimesMissing}}</div><div class="max-missing">{{n.LastTimesMissing}}</div></div><div class="number">{{n.number}}\n</div><div class="frequency">{{n.Frequency}}</div></div></div></div></td></tr><tr><td><md-checkbox md-no-ink \naria-label="Checkbox" ng-checked="vm.number.interface.exists(1)" ng-click="vm.number.interface.group(1)" \nng-disabled="!vm.allowBetting"></md-checkbox></td></tr><tr><td><md-checkbox md-no-ink aria-label="Checkbox" \nng-checked="vm.number.interface.exists(2)" ng-click="vm.number.interface.group(2)" ng-disabled="!vm.allowBetting">\n</md-checkbox></td></tr><tr><td><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.number.interface.exists(3)" \nng-click="vm.number.interface.group(3)" ng-disabled="!vm.allowBetting"></md-checkbox></td></tr><tr><td><md-checkbox \nmd-no-ink aria-label="Checkbox" ng-checked="vm.number.interface.exists(4)" ng-click="vm.number.interface.group(4)" \nng-disabled="!vm.allowBetting"></md-checkbox></td></tr><tr><td><md-checkbox md-no-ink aria-label="Checkbox" \nng-checked="vm.number.interface.exists(5)" ng-click="vm.number.interface.group(5)" ng-disabled="!vm.allowBetting">\n</md-checkbox></td></tr><tr><td><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.number.interface.exists(6)" \nng-click="vm.number.interface.group(6)" ng-disabled="!vm.allowBetting"></md-checkbox></td></tr><tr><td><md-checkbox \nmd-no-ink aria-label="Checkbox" ng-checked="vm.number.interface.exists(7)" ng-click="vm.number.interface.group(7)" \nng-disabled="!vm.allowBetting"></md-checkbox></td></tr><tr><td><md-checkbox md-no-ink aria-label="Checkbox" \nng-checked="vm.number.interface.exists(8)" ng-click="vm.number.interface.group(8)" ng-disabled="!vm.allowBetting">\n</md-checkbox></td></tr><tr><td><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.number.interface.exists(9)" \nng-click="vm.number.interface.group(9)" ng-disabled="!vm.allowBetting"></md-checkbox></td></tr></tbody></table></div>\n</md-content></md-tab><md-tab label="{{ vm.label3D }}" md-on-select="vm.TabSelected(1)"><md-content><div \nclass="row-input-numbers"><form class="md-inline-form" ng-submit="vm.number.submit3D()" novalidate layout="row"><div \nclass="form-group" layout="column"><input type="tel" autocomplete="off" class="input-numbers-array" \nplaceholder="Nh\u1EADp d\xE3y s\u1ED1 mu\u1ED1n \u0111\u1EB7t c\u01B0\u1EE3c" ng-model="vm.keyNumber3D" ng-keyup="vm.number.typing3d($event)" tabindex="1" \nng-disabled="!vm.allowBetting || vm.disabled3D"><div class="line"></div></div><md-button class="md-raised" \ntype="button" ng-click="vm.number.submit3D(true)" ng-disabled="!vm.keyNumber3D.length || vm.disabled3D">Th\xEAm v\xE0o\n</md-button></form></div><div class="table-number-wrap"><div class="main-number" layout="row" layout-wrap><div \nflex="10" class="repeater-number" ng-repeat="n in vm.number3Ds"><div class="inner-number live active" layout="column" \nlayout-align="space-around center" ng-click="vm.number.select(n)" \nng-class="{\'disabled\': n.disabled || !vm.allowBetting}"><div class="number">{{n.number}}</div></div></div></div></div>\n</md-content></md-tab></md-tabs><div class="live-info" ng-class="{\'changed-price\': vm.priceChanged}" layout="row" \nlayout-align="space-between center" ng-if="vm.PrizeNr && vm.allowBetting && vm.onTabSelected === 1"><div flex></div><h4 \nclass="text-right">S\u1ED1 gi\u1EA3i c\xF2n l\u1EA1i: <span>{{ vm.PrizeNr }}</span></h4><h4 class="text-right">Tr\u1EA3 th\u01B0\u1EDFng: <span>\n{{ vm.currentPayouts | currency : \'\' : 0 }}</span></h4></div></div></div><div flex-gt-sm="35" flex="100" \nlayout="column" class="main-right-betting-form"><div layout="column" class="betting-form-wrap"><div \nclass="betting-form" layout="column"><div class="betting-form-header"><div layout="row"><div flex="30">\u0110\u1EB7t c\u01B0\u1EE3c</div>\n<div flex="70" class="text-right">L\xF4 Live - {{ vm.GameType | legendGame }}</div></div></div><div \nclass="betting-form-content"><form name="basicForm" class="md-inline-form" ng-submit="vm.submitBetting()" novalidate>\n<div layout="row"><div class="sub-title" flex="30">S\u1ED1 \u0111i\u1EC3m</div><div flex="70" class="form-group"><input type="tel" \nid="bet-input" class="bet-input" ng-model="vm.betPoint" maxlength="5" ng-currency select-on-click numeric-only \nng-change="vm.stepper.update()" ng-disabled="vm.checkPointDisabled()" autocomplete="off" tabindex="2"><div class="line">\n</div></div></div><div layout="row" layout-wrap layout-align="space-between center" \nclass="padding-top-16 bet-stepper-wrap" ng-class="{\'has-individual\' : vm.betStepper.length === 10 }"><div \nclass="bet-stepper" ng-repeat="item in vm.betStepper track by $index" ng-class="{\'individual\' : item.individual}">\n<md-button ng-class="{\'active\': item.active}" ng-click="vm.stepper.select(item)">{{ item.value | currency : \'\' : 0 }}\n</md-button></div></div><div layout="row" class="padding-top-16"><div flex="30" class="padding-right-8"><md-button \nclass="betting-button cancel-button" ng-disabled="vm.checkPointDisabled()" ng-click="vm.resetBetting()"><md-icon \nmd-font-icon="icon-close"></md-icon></md-button></div><div flex="70"><md-button class="betting-button" type="submit" \nng-disabled="vm.totalMoney === 0">\u0110\u1EB7t c\u01B0\u1EE3c</md-button></div></div><div class="ignore-price" hide><md-checkbox \nng-model="vm.ignorePrice" aria-label="Ignore Price" disabled="disabled">Kh\xF4ng h\u1ECFi l\u1EA1i khi c\xF3 gi\xE1 thay \u0111\u1ED5i</md-checkbox>\n</div></form><div layout="row" class="padding-top-16" ng-if="$root.termInfo !== undefined"><div class="sub-title" \nflex="40">Phi\xEAn m\u1EDF th\u01B0\u1EDFng</div><div flex="60" class="text-bold">{{ $root.termInfo.Term | term }} <em>\n({{ $root.termInfo.DrawResultAt | amDateFormat : \'HH:mm\' }})</em></div></div><div layout="row"><div class="sub-title" \nflex="40">Gi\xE1 b\xE1n</div><div flex="60" class="text-bold">{{ vm.basePrice | currency : \'\' : 0 }}</div></div><div \nlayout="row"><div class="sub-title" flex="40">T\u1ED5ng \u0111i\u1EC3m</div><div flex="60" class="text-bold">\n{{vm.totalPoint() | currency : \'\' : 0 }}</div></div><div layout="row"><div class="sub-title" flex="40">Th\xE0nh ti\u1EC1n</div>\n<div flex="60" class="text-bold">{{vm.totalMoney | currency : \'\' : 0 }}</div></div><div layout="row" \nng-show="(vm.numbers | filter : {selected : true}).length" ng-click="vm.showFull = !vm.showFull"><div flex \nclass="sub-title number" ng-class="{\'full\' : vm.showFull}"><div><span>Danh s\xE1ch:</span> <span class="n">\n{{ vm.number.selected() }}</span></div></div></div><div layout="row" ng-if="$root.isAuthenticated"><div \nclass="sub-title" flex="40">Tr\u1EA3 th\u01B0\u1EDFng</div><div flex="60" class="sub-title">{{ vm.currentPayouts | currency : \'\' : 0 }}\n</div></div><div layout="row" class="balance" ng-if="$root.isAuthenticated"><div class="sub-title" flex="40">S\u1ED1 d\u01B0</div>\n<div flex="60" class="sub-title" layout="row" layout-align="space-between center">\n{{ $root.User.Balance | currency : \'\' : 0 }}<md-button class="md-icon-button" ng-click="$root.updateBalance()" \nng-disabled="$root.User.updating"><md-icon md-font-icon="icon-refresh" class="s16" \nng-class="{\'rotating\' : $root.User.updating }"></md-icon></md-button></div></div></div></div></div></div></div>');
$templateCache.put('app/main/legendary/northern/general/legendary.general.html','<div class="main-game" layout-gt-sm="row" layout="column"><div flex-gt-sm="65" flex="100" class="content-number-wrap">\n<div layout="column" class="content-number"><div class="row-input-numbers"><form class="md-inline-form" \nng-submit="vm.number.submit()" novalidate layout="row"><div class="form-group" layout="column"><input type="tel" \nautocomplete="off" class="input-numbers-array" placeholder="D\xE3y s\u1ED1" ng-model="vm.keyNumber" \nng-keyup="vm.number.typing($event)" tabindex="1" ng-disabled="!legend.allowBetting"><div class="line"></div></div>\n<md-button class="md-raised" type="button" ng-click="vm.number.submit(true)" ng-disabled="!vm.keyNumber.length">Th\xEAm v\xE0o\n</md-button><md-button hide show-gt-xs class="md-raised md-accent" ng-disabled="!legend.allowBetting" \nng-click="vm.quickShow = !vm.quickShow">Ch\u1ECDn nhanh<md-icon md-font-icon="icon-menu-down" ng-if="!vm.quickShow">\n</md-icon><md-icon md-font-icon="icon-menu-up" ng-if="vm.quickShow"></md-icon></md-button><md-button hide-gt-xs \nclass="md-raised md-icon-button md-accent" aria-label="Favorite" ng-disabled="!legend.allowBetting" \nng-click="vm.quickShow = !vm.quickShow"><md-icon md-font-icon="icon-menu-down" ng-if="!vm.quickShow"></md-icon><md-icon \nmd-font-icon="icon-menu-up" ng-if="vm.quickShow"></md-icon></md-button></form></div><div class="collapsing" \nng-show="vm.quickShow"><md-content><md-tabs md-dynamic-height md-border-bottom md-swipe-content><md-tab \nng-repeat="item in vm.quickChoices" label="{{item.name}}" ng-if="$index > 0"><md-content layout="row" layout-wrap><div \nclass="content" ng-repeat="content in item.collect"><md-checkbox \nng-checked="vm.number.checkbox.exists($parent.$index, $index)" \nng-click="vm.number.checkbox.group($parent.$index, $index)" aria-label="Quick Choices" \nng-disabled="!legend.allowBetting">{{ content.name }}</md-checkbox></div></md-content></md-tab></md-tabs></md-content>\n</div><div class="table-number-wrap" layout="column"><div layout="row" layout-align="space-between center" \nclass="chose-filter" ng-if="vm.sortReady"><div class="margin-0" layout="row"><md-button class="md-raised" \nng-class="{\'active\' : vm.sortType === 0}" type="button" ng-click="vm.sortNumbers(0)" ng-disabled="!vm.sortReady">Th\u1EE9 t\u1EF1\n</md-button><md-button class="md-raised" ng-class="{\'active\' : vm.sortType === 1}" type="button" \nng-click="vm.sortNumbers(1)" ng-disabled="!vm.sortReady">Khan</md-button><md-button class="md-raised" \nng-class="{\'active\' : vm.sortType === 2}" type="button" ng-click="vm.sortNumbers(2)" ng-disabled="!vm.sortReady">\nT\u1EA7n su\u1EA5t (%)</md-button><md-button class="md-raised seamless" type="button" ng-click="vm.Seamless($event)" \nng-disabled="$root.theResults === undefined" ng-if="vm.config.BetType === 1 || vm.config.BetType === 29" layout="row" \nlayout-align="center center"><span ng-if="!vm.updatingResult">Soi c\u1EA7u</span><md-progress-circular class="md-warn" \nmd-diameter="14px" ng-if="vm.updatingResult"></md-progress-circular></md-button></div><div><a class="cursor-pointer" \nng-click="vm.showHelp($event)">H\u01B0\u1EDBng d\u1EABn</a></div></div><table><tbody><tr hide show-gt-xs><td><md-checkbox md-no-ink \naria-label="Checkbox" ng-checked="vm.number.checkbox.exists(0, 20)" ng-click="vm.number.checkbox.group(0, 20)" \nng-disabled="!legend.allowBetting || vm.sortType !== 0" ng-show="vm.sortType === 0"></md-checkbox></td><td colspan="10" \nlayout="row" class="row-check"><div flex="10"><md-checkbox md-no-ink aria-label="Checkbox" \nng-checked="vm.number.interface.exists(10)" ng-click="vm.number.interface.group(10)" ng-disabled="!legend.allowBetting">\n</md-checkbox></div><div flex="10"><md-checkbox md-no-ink aria-label="Checkbox" \nng-checked="vm.number.interface.exists(11)" ng-click="vm.number.interface.group(11)" ng-disabled="!legend.allowBetting">\n</md-checkbox></div><div flex="10"><md-checkbox md-no-ink aria-label="Checkbox" \nng-checked="vm.number.interface.exists(12)" ng-click="vm.number.interface.group(12)" ng-disabled="!legend.allowBetting">\n</md-checkbox></div><div flex="10"><md-checkbox md-no-ink aria-label="Checkbox" \nng-checked="vm.number.interface.exists(13)" ng-click="vm.number.interface.group(13)" ng-disabled="!legend.allowBetting">\n</md-checkbox></div><div flex="10"><md-checkbox md-no-ink aria-label="Checkbox" \nng-checked="vm.number.interface.exists(14)" ng-click="vm.number.interface.group(14)" ng-disabled="!legend.allowBetting">\n</md-checkbox></div><div flex="10"><md-checkbox md-no-ink aria-label="Checkbox" \nng-checked="vm.number.interface.exists(15)" ng-click="vm.number.interface.group(15)" ng-disabled="!legend.allowBetting">\n</md-checkbox></div><div flex="10"><md-checkbox md-no-ink aria-label="Checkbox" \nng-checked="vm.number.interface.exists(16)" ng-click="vm.number.interface.group(16)" ng-disabled="!legend.allowBetting">\n</md-checkbox></div><div flex="10"><md-checkbox md-no-ink aria-label="Checkbox" \nng-checked="vm.number.interface.exists(17)" ng-click="vm.number.interface.group(17)" ng-disabled="!legend.allowBetting">\n</md-checkbox></div><div flex="10"><md-checkbox md-no-ink aria-label="Checkbox" \nng-checked="vm.number.interface.exists(18)" ng-click="vm.number.interface.group(18)" ng-disabled="!legend.allowBetting">\n</md-checkbox></div><div flex="10"><md-checkbox md-no-ink aria-label="Checkbox" \nng-checked="vm.number.interface.exists(19)" ng-click="vm.number.interface.group(19)" ng-disabled="!legend.allowBetting">\n</md-checkbox></div></td></tr><tr><td><md-checkbox md-no-ink aria-label="Checkbox" \nng-checked="vm.number.interface.exists(0)" ng-click="vm.number.interface.group(0)" ng-disabled="!legend.allowBetting">\n</md-checkbox></td><td colspan="10" rowspan="10"><div class="main-number" layout="row" layout-wrap><div flex="10" \nclass="repeater-number" ng-repeat="n in vm.numbers"><div class="inner-number" layout="column" \nlayout-align="space-around center" ng-click="vm.number.select(n)" \nng-class="{\'active\' : n.selected,  \'changed-price\': n.priceChanged && legend.allowBetting, \'disabled\': n.disabled || !legend.allowBetting}">\n<div class="missing" layout="row" layout-align="space-between"><div class="times" ng-class="{\'high\': n.high}">\n{{n.TimesMissing}}</div><div class="max-missing">{{n.LastTimesMissing}}</div></div><div class="number">{{n.number}}\n</div><div class="frequency">{{n.Frequency}}</div></div></div></div></td></tr><tr><td><md-checkbox md-no-ink \naria-label="Checkbox" ng-checked="vm.number.interface.exists(1)" ng-click="vm.number.interface.group(1)" \nng-disabled="!legend.allowBetting"></md-checkbox></td></tr><tr><td><md-checkbox md-no-ink aria-label="Checkbox" \nng-checked="vm.number.interface.exists(2)" ng-click="vm.number.interface.group(2)" ng-disabled="!legend.allowBetting">\n</md-checkbox></td></tr><tr><td><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.number.interface.exists(3)" \nng-click="vm.number.interface.group(3)" ng-disabled="!legend.allowBetting"></md-checkbox></td></tr><tr><td><md-checkbox \nmd-no-ink aria-label="Checkbox" ng-checked="vm.number.interface.exists(4)" ng-click="vm.number.interface.group(4)" \nng-disabled="!legend.allowBetting"></md-checkbox></td></tr><tr><td><md-checkbox md-no-ink aria-label="Checkbox" \nng-checked="vm.number.interface.exists(5)" ng-click="vm.number.interface.group(5)" ng-disabled="!legend.allowBetting">\n</md-checkbox></td></tr><tr><td><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.number.interface.exists(6)" \nng-click="vm.number.interface.group(6)" ng-disabled="!legend.allowBetting"></md-checkbox></td></tr><tr><td><md-checkbox \nmd-no-ink aria-label="Checkbox" ng-checked="vm.number.interface.exists(7)" ng-click="vm.number.interface.group(7)" \nng-disabled="!legend.allowBetting"></md-checkbox></td></tr><tr><td><md-checkbox md-no-ink aria-label="Checkbox" \nng-checked="vm.number.interface.exists(8)" ng-click="vm.number.interface.group(8)" ng-disabled="!legend.allowBetting">\n</md-checkbox></td></tr><tr><td><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.number.interface.exists(9)" \nng-click="vm.number.interface.group(9)" ng-disabled="!legend.allowBetting"></md-checkbox></td></tr></tbody></table>\n</div></div></div><div flex-gt-sm="35" flex="100" layout="column" class="main-right-betting-form"><div layout="column" \nclass="betting-form-wrap"><div class="betting-form" layout="column"><div class="betting-form-header"><div layout="row">\n<div flex="30">\u0110\u1EB7t c\u01B0\u1EE3c</div><div flex="70" class="text-right">\n{{vm.config.BetType | bet}} - {{vm.config.GameType | legendGame }}</div></div></div><div class="betting-form-content">\n<form name="form" class="md-inline-form" layout="column" ng-submit="vm.submitBetting()" novalidate><div layout="row">\n<div class="sub-title" flex="30">S\u1ED1 \u0111i\u1EC3m</div><div flex="70" class="form-group"><input type="tel" id="bet-input" \nclass="bet-input" ng-model="vm.betPoint" maxlength="5" ng-currency select-on-click numeric-only \nng-change="vm.stepper.update()" ng-disabled="!(vm.numbers | filter : {selected : true}).length" autocomplete="off" \ntabindex="2"><div class="line"></div></div></div><div layout="row" layout-wrap layout-align="space-between center" \nclass="padding-top-16 bet-stepper-wrap" ng-class="{\'has-individual\' : vm.betStepper.length === 10 }"><div \nclass="bet-stepper" ng-repeat="item in vm.betStepper track by $index" ng-class="{\'individual\' : item.individual}">\n<md-button ng-class="{\'active\': item.active}" ng-click="vm.stepper.select(item)">{{ item.value | currency : \'\' : 0 }}\n</md-button></div></div><div layout="row" class="padding-top-16"><div flex="30" class="padding-right-8"><md-button \nclass="betting-button cancel-button" ng-disabled="!(vm.numbers | filter : {selected : true}).length" \nng-click="vm.resetBetting()"><md-icon md-font-icon="icon-close"></md-icon></md-button></div><div flex="70"><md-button \nclass="betting-button" type="submit" ng-disabled="vm.totalMoney === 0">\u0110\u1EB7t c\u01B0\u1EE3c</md-button></div></div><div \nclass="ignore-price" layout="row" hide><md-checkbox ng-model="vm.ignorePrice" aria-label="Ignore Price">\nKh\xF4ng h\u1ECFi l\u1EA1i khi c\xF3 gi\xE1 thay \u0111\u1ED5i</md-checkbox></div></form><div layout="row" class="padding-top-16" \nng-if="$root.termInfo !== undefined"><div class="sub-title" flex="40">Phi\xEAn m\u1EDF th\u01B0\u1EDFng</div><div flex="60" \nclass="text-bold">{{ $root.termInfo.Term | term }} <em>({{ $root.termInfo.DrawResultAt | amDateFormat : \'HH:mm\' }})</em>\n</div></div><div layout="row"><div class="sub-title" flex="40">Gi\xE1 b\xE1n</div><div flex="60" class="text-bold">\n{{ vm.basePrice | currency : \'\' : 0 }}</div></div><div layout="row"><div class="sub-title" flex="40">T\u1ED5ng \u0111i\u1EC3m</div><div\n flex="60" class="text-bold">{{ vm.totalPoint() | currency : \'\' : 0 }}</div></div><div layout="row"><div \nclass="sub-title" flex="40">Th\xE0nh ti\u1EC1n</div><div flex="60" class="text-bold">{{ vm.totalMoney | currency : \'\' : 0 }}\n</div></div><div layout="row" ng-show="(vm.numbers | filter : {selected : true}).length" \nng-click="vm.showFull = !vm.showFull"><div flex class="sub-title number" ng-class="{\'full\' : vm.showFull}"><div><span>\nDanh s\xE1ch:</span> <span class="n">{{ vm.number.selected() }}</span></div></div></div><div layout="row" \nng-if="$root.isAuthenticated"><div class="sub-title secondary" flex="40">Tr\u1EA3 th\u01B0\u1EDFng</div><div flex="60" \nclass="text-bold sub-title secondary">{{vm.Payouts | currency : \'\' : 0 }}</div></div><div layout="row" class="balance" \nng-if="$root.isAuthenticated"><div class="sub-title secondary" flex="40">S\u1ED1 d\u01B0</div><div flex="60" \nclass="text-bold sub-title secondary" layout="row" layout-align="space-between center">\n{{ $root.User.Balance | currency : \'\' : 0 }}<md-button class="md-icon-button" ng-click="$root.updateBalance()" \nng-disabled="$root.User.updating"><md-icon md-font-icon="icon-refresh" class="s16" \nng-class="{\'rotating\' : $root.User.updating }"></md-icon></md-button></div></div></div></div></div></div></div>');
$templateCache.put('app/main/legendary/northern/except/legendary.except.html','<div class="main-game" layout-gt-sm="row" layout="column"><div flex-gt-sm="60" flex="100" class="content-number-wrap">\n<div layout="column" class="content-number"><div class="row-input-numbers"><form class="md-inline-form" \nng-submit="vm.number.submit()" novalidate layout="row"><div class="form-group" layout="column"><input type="tel" \nautocomplete="off" class="input-numbers-array" placeholder="D\xE3y s\u1ED1" ng-model="vm.keyNumber" \nng-keyup="vm.number.typing($event)" tabindex="1" ng-disabled="!legend.allowBetting"><div class="line"></div></div>\n<md-button class="md-raised" type="button" ng-click="vm.number.submit(true)" ng-disabled="!vm.keyNumber.length">Th\xEAm v\xE0o\n</md-button></form></div><div class="table-number-wrap"><table><tbody><tr hide show-gt-xs><td><md-checkbox md-no-ink \naria-label="Checkbox" ng-checked="vm.number.checkbox.exists(20)" ng-click="vm.number.checkbox.group(20)" \nng-disabled="!legend.allowBetting"></md-checkbox></td><td colspan="10" layout="row" class="row-check"><div flex="10">\n<md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.number.checkbox.exists(10)" \nng-click="vm.number.checkbox.group(10)" ng-disabled="!legend.allowBetting"></md-checkbox></div><div flex="10">\n<md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.number.checkbox.exists(11)" \nng-click="vm.number.checkbox.group(11)" ng-disabled="!legend.allowBetting"></md-checkbox></div><div flex="10">\n<md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.number.checkbox.exists(12)" \nng-click="vm.number.checkbox.group(12)" ng-disabled="!legend.allowBetting"></md-checkbox></div><div flex="10">\n<md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.number.checkbox.exists(13)" \nng-click="vm.number.checkbox.group(13)" ng-disabled="!legend.allowBetting"></md-checkbox></div><div flex="10">\n<md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.number.checkbox.exists(14)" \nng-click="vm.number.checkbox.group(14)" ng-disabled="!legend.allowBetting"></md-checkbox></div><div flex="10">\n<md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.number.checkbox.exists(15)" \nng-click="vm.number.checkbox.group(15)" ng-disabled="!legend.allowBetting"></md-checkbox></div><div flex="10">\n<md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.number.checkbox.exists(16)" \nng-click="vm.number.checkbox.group(16)" ng-disabled="!legend.allowBetting"></md-checkbox></div><div flex="10">\n<md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.number.checkbox.exists(17)" \nng-click="vm.number.checkbox.group(17)" ng-disabled="!legend.allowBetting"></md-checkbox></div><div flex="10">\n<md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.number.checkbox.exists(18)" \nng-click="vm.number.checkbox.group(18)" ng-disabled="!legend.allowBetting"></md-checkbox></div><div flex="10">\n<md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.number.checkbox.exists(19)" \nng-click="vm.number.checkbox.group(19)" ng-disabled="!legend.allowBetting"></md-checkbox></div></td></tr><tr><td>\n<md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.number.checkbox.exists(0)" \nng-click="vm.number.checkbox.group(0)" ng-disabled="!legend.allowBetting"></md-checkbox></td><td colspan="10" \nrowspan="10"><div class="main-number" layout="row" layout-wrap><div flex="10" class="repeater-number" \nng-repeat="n in vm.numbers"><div class="inner-number" layout="column" layout-align="space-around center" \nng-click="vm.number.select(n)" \nng-class="{\'active\' : n.selected,  \'changed-price\': n.priceChanged && legend.allowBetting, \'disabled\': n.disabled || !legend.allowBetting}">\n<div class="number">{{n.number}}</div><div class="price" hide><span \nng-class="{\'price-up\' : n.price > vm.basePrice, \'zero\' : n.price === 0}">{{n.price | currency : \'\' : 0 }}</span></div>\n</div></div></div></td></tr><tr><td><md-checkbox md-no-ink aria-label="Checkbox" \nng-checked="vm.number.checkbox.exists(1)" ng-click="vm.number.checkbox.group(1)" ng-disabled="!legend.allowBetting">\n</md-checkbox></td></tr><tr><td><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.number.checkbox.exists(2)" \nng-click="vm.number.checkbox.group(2)" ng-disabled="!legend.allowBetting"></md-checkbox></td></tr><tr><td><md-checkbox \nmd-no-ink aria-label="Checkbox" ng-checked="vm.number.checkbox.exists(3)" ng-click="vm.number.checkbox.group(3)" \nng-disabled="!legend.allowBetting"></md-checkbox></td></tr><tr><td><md-checkbox md-no-ink aria-label="Checkbox" \nng-checked="vm.number.checkbox.exists(4)" ng-click="vm.number.checkbox.group(4)" ng-disabled="!legend.allowBetting">\n</md-checkbox></td></tr><tr><td><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.number.checkbox.exists(5)" \nng-click="vm.number.checkbox.group(5)" ng-disabled="!legend.allowBetting"></md-checkbox></td></tr><tr><td><md-checkbox \nmd-no-ink aria-label="Checkbox" ng-checked="vm.number.checkbox.exists(6)" ng-click="vm.number.checkbox.group(6)" \nng-disabled="!legend.allowBetting"></md-checkbox></td></tr><tr><td><md-checkbox md-no-ink aria-label="Checkbox" \nng-checked="vm.number.checkbox.exists(7)" ng-click="vm.number.checkbox.group(7)" ng-disabled="!legend.allowBetting">\n</md-checkbox></td></tr><tr><td><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.number.checkbox.exists(8)" \nng-click="vm.number.checkbox.group(8)" ng-disabled="!legend.allowBetting"></md-checkbox></td></tr><tr><td><md-checkbox \nmd-no-ink aria-label="Checkbox" ng-checked="vm.number.checkbox.exists(9)" ng-click="vm.number.checkbox.group(9)" \nng-disabled="!legend.allowBetting"></md-checkbox></td></tr></tbody></table></div></div></div><div flex-gt-sm="40" \nflex="100" layout="column" class="main-right-betting-form"><div layout="column" class="betting-form-wrap"><div \nclass="betting-form" layout="column"><div class="betting-form-header"><div layout="row"><div flex="30">\u0110\u1EB7t c\u01B0\u1EE3c</div>\n<div flex="70" class="text-right">{{vm.betId | bet}} - Mi\u1EC1n B\u1EAFc</div></div></div><div class="betting-form-content"><form\n name="basicForm" class="md-inline-form" ng-submit="vm.submitBetting()" novalidate><div layout="row"><div \nclass="sub-title" flex="30">S\u1ED1 \u0111i\u1EC3m</div><div flex="70" class="form-group"><input type="tel" id="bet-input" \nclass="bet-input" ng-model="vm.betPoint" maxlength="5" ng-currency select-on-click numeric-only \nng-change="vm.stepper.update()" ng-disabled="(vm.numbers | filter : {selected : true}).length < vm.param.minBet" \nautocomplete="off" tabindex="2"><div class="line"></div></div></div><div layout="row" layout-wrap \nlayout-align="space-between center" class="padding-top-16 bet-stepper-wrap" \nng-class="{\'has-individual\' : vm.betStepper.length === 10 }"><div class="bet-stepper" \nng-repeat="item in vm.betStepper track by $index" ng-class="{\'individual\' : item.individual}"><md-button \nng-class="{\'active\': item.active}" ng-click="vm.stepper.select(item)">{{ item.value | currency : \'\' : 0 }}</md-button>\n</div></div><div layout="row" class="padding-top-16"><div flex="30" class="padding-right-8"><md-button \nclass="betting-button cancel-button" ng-disabled="!(vm.numbers | filter : {selected : true}).length" \nng-click="vm.resetBetting()"><md-icon md-font-icon="icon-close"></md-icon></md-button></div><div flex="70"><md-button \nclass="betting-button" type="submit" ng-disabled="vm.totalMoney === 0">\u0110\u1EB7t c\u01B0\u1EE3c</md-button></div></div><div \nclass="ignore-price" hide><md-checkbox ng-model="vm.ignorePrice" aria-label="Ignore Price">\nKh\xF4ng h\u1ECFi l\u1EA1i khi c\xF3 gi\xE1 thay \u0111\u1ED5i</md-checkbox></div></form><div layout="row" class="padding-top-16" \nng-if="$root.termInfo !== undefined"><div class="sub-title" flex="35">Phi\xEAn m\u1EDF th\u01B0\u1EDFng</div><div flex="65" \nclass="text-bold">{{ $root.termInfo.Term | term }} <em>({{ $root.termInfo.DrawResultAt | amDateFormat : \'HH:mm\' }})</em>\n</div></div><div layout="row"><div class="sub-title" flex="35">Gi\xE1 b\xE1n</div><div flex="65" class="text-bold">\n{{ vm.basePrice | currency : \'\' : 0 }}</div></div><div layout="row"><div class="sub-title" flex="35">T\u1ED5ng \u0111i\u1EC3m</div><div\n flex="65" class="text-bold">{{vm.totalPoint() | currency : \'\' : 0 }}</div></div><div layout="row"><div \nclass="sub-title" flex="35">Th\xE0nh ti\u1EC1n</div><div flex="65" class="text-bold">{{vm.totalMoney | currency : \'\' : 0 }}\n</div></div><div layout="row" ng-show="(vm.numbers | filter : {selected : true}).length" \nng-click="vm.showFull = !vm.showFull"><div class="sub-title number" ng-class="{\'full\' : vm.showFull}"><div><span>\nDanh s\xE1ch:</span> <span class="n">{{ vm.number.selected() }}</span></div></div></div><div layout="row" \nng-if="$root.isAuthenticated"><div class="sub-title secondary" flex="35">Tr\u1EA3 th\u01B0\u1EDFng</div><div flex="65" \nclass="text-bold sub-title secondary">{{vm.payouts | currency : \'\' : 0 }}</div></div><div layout="row" class="balance" \nng-if="$root.isAuthenticated"><div class="sub-title secondary" flex="35">S\u1ED1 d\u01B0</div><div flex="65" \nclass="text-bold sub-title secondary" layout="row" layout-align="space-between center">\n{{ $root.User.Balance | currency : \'\' : 0 }}<md-button class="md-icon-button" ng-click="$root.updateBalance()" \nng-disabled="$root.User.updating"><md-icon md-font-icon="icon-refresh" class="s16" \nng-class="{\'rotating\' : $root.User.updating }"></md-icon></md-button></div></div></div></div></div></div></div>');
$templateCache.put('app/main/legendary/northern/quick/quick.html','<div class="main-game" layout="column"><div class="quick-wrap" layout="row" layout-wrap><div class="quick-content" \nlayout="row" flex-gt-sm="25" flex-sm="50"><div class="element" layout="column" flex><div class="element-header" \nlayout="row" layout-align="space-between center"><div>H\xE0ng ngh\xECn</div><div ng-show="vm.Thousands.length"><a \nng-click="vm.clear(vm.Thousands)">x\xF3a</a></div></div><div class="element-content" layout="row" layout-wrap><div \nflex="20" flex-xs="10" class="button" ng-repeat="item in vm.numbersArr"><div class="button-content"><md-button \nclass="md-raised md-icon-button" \nng-class="{\'md-accent\' : vm.exists(item.id, vm.Thousands), \'md-warn\': item.type === \'cancel\' }" \nng-click="vm.toggle(item.id, vm.Thousands)">{{ item.text }}</md-button></div></div><div flex="25" class="button group">\n<div class="button-content"><md-button ng-click="vm.toggleEven([0,2,4,6,8], vm.Thousands)">Ch\u1EB5n</md-button></div></div>\n<div flex="25" class="button group"><div class="button-content"><md-button \nng-click="vm.toggleEven([1,3,5,7,9], vm.Thousands)">L\u1EBB</md-button></div></div><div flex="25" class="button group"><div \nclass="button-content"><md-button ng-click="vm.toggleEven([0,1,2,3,4], vm.Thousands)">B\xE9</md-button></div></div><div \nflex="25" class="button group"><div class="button-content"><md-button \nng-click="vm.toggleEven([5,6,7,8,9], vm.Thousands)">L\u1EDBn</md-button></div></div></div></div></div><div \nclass="quick-content" layout="row" flex-gt-sm="25" flex-sm="50"><div class="element" flex><div class="element-header" \nlayout="row" layout-align="space-between center"><div>H\xE0ng tr\u0103m</div><div ng-show="vm.Hundreds.length"><a \nng-click="vm.clear(vm.Hundreds)">x\xF3a</a></div></div><div class="element-content" layout="row" layout-wrap><div \nflex="20" flex-xs="10" class="button" ng-repeat="item in vm.numbersArr"><div class="button-content"><md-button \nclass="md-raised md-icon-button" \nng-class="{\'md-accent\' : vm.exists(item.id, vm.Hundreds), \'md-warn\': item.type === \'cancel\' }" \nng-click="vm.toggle(item.id, vm.Hundreds)">{{ item.text }}</md-button></div></div><div flex="25" class="button group">\n<div class="button-content"><md-button ng-click="vm.toggleEven([0,2,4,6,8], vm.Hundreds)">Ch\u1EB5n</md-button></div></div>\n<div flex="25" class="button group"><div class="button-content"><md-button \nng-click="vm.toggleEven([1,3,5,7,9], vm.Hundreds)">L\u1EBB</md-button></div></div><div flex="25" class="button group"><div \nclass="button-content"><md-button ng-click="vm.toggleEven([0,1,2,3,4], vm.Hundreds)">B\xE9</md-button></div></div><div \nflex="25" class="button group"><div class="button-content"><md-button \nng-click="vm.toggleEven([5,6,7,8,9], vm.Hundreds)">L\u1EDBn</md-button></div></div></div></div></div><div \nclass="quick-content" layout="row" flex-gt-sm="25" flex-sm="50"><div class="element" flex><div class="element-header" \nlayout="row" layout-align="space-between center"><div>H\xE0ng ch\u1EE5c</div><div ng-show="vm.Dozens.length"><a \nng-click="vm.clear(vm.Dozens)">x\xF3a</a></div></div><div class="element-content" layout="row" layout-wrap><div flex="20" \nflex-xs="10" class="button" ng-repeat="item in vm.numbersArr"><div class="button-content"><md-button \nclass="md-raised md-icon-button" \nng-class="{\'md-accent\' : vm.exists(item.id, vm.Dozens), \'md-warn\': item.type === \'cancel\' }" \nng-click="vm.toggle(item.id, vm.Dozens)">{{ item.text }}</md-button></div></div><div flex="25" class="button group"><div\n class="button-content"><md-button ng-click="vm.toggleEven([0,2,4,6,8], vm.Dozens)">Ch\u1EB5n</md-button></div></div><div \nflex="25" class="button group"><div class="button-content"><md-button ng-click="vm.toggleEven([1,3,5,7,9], vm.Dozens)">\nL\u1EBB</md-button></div></div><div flex="25" class="button group"><div class="button-content"><md-button \nng-click="vm.toggleEven([0,1,2,3,4], vm.Dozens)">B\xE9</md-button></div></div><div flex="25" class="button group"><div \nclass="button-content"><md-button ng-click="vm.toggleEven([5,6,7,8,9], vm.Dozens)">L\u1EDBn</md-button></div></div></div>\n</div></div><div class="quick-content" layout="row" flex-gt-sm="25" flex-sm="50"><div class="element" flex><div \nclass="element-header" layout="row" layout-align="space-between center"><div>H\xE0ng \u0111\u01A1n v\u1ECB</div><div \nng-show="vm.Units.length"><a ng-click="vm.clear(vm.Units)">x\xF3a</a></div></div><div class="element-content" layout="row" \nlayout-wrap><div flex="20" flex-xs="10" class="button" ng-repeat="item in vm.numbersArr"><div class="button-content">\n<md-button class="md-raised md-icon-button" \nng-class="{\'md-accent\' : vm.exists(item.id, vm.Units), \'md-warn\': item.type === \'cancel\' }" \nng-click="vm.toggle(item.id, vm.Units)">{{ item.text }}</md-button></div></div><div flex="25" class="button group"><div \nclass="button-content"><md-button ng-click="vm.toggleEven([0,2,4,6,8], vm.Units)">Ch\u1EB5n</md-button></div></div><div \nflex="25" class="button group"><div class="button-content"><md-button ng-click="vm.toggleEven([1,3,5,7,9], vm.Units)">L\u1EBB\n</md-button></div></div><div flex="25" class="button group"><div class="button-content"><md-button \nng-click="vm.toggleEven([0,1,2,3,4], vm.Units)">B\xE9</md-button></div></div><div flex="25" class="button group"><div \nclass="button-content"><md-button ng-click="vm.toggleEven([5,6,7,8,9], vm.Units)">L\u1EDBn</md-button></div></div></div>\n</div></div></div><div class="content-betting-wrap" layout="row" layout-xs="column"><div flex-gt-sm="50" flex="100" \nclass="number-table"><div class="number-element" ng-if="vm.numbers[2].length"><div class="element-header" layout="row" \nlayout-align="space-between center"><div>2 C\xC0NG</div><div>{{ vm.numbers[2].length }} S\u1ED1</div></div><div \nclass="element-content" ng-class="{\'full\' : vm.viewFull[2] || vm.numbers[2].length < 24 }"><div class="main-number" \nlayout="row" layout-wrap><div class="repeater-number" ng-repeat="n in vm.numbers[2] | limitTo: vm.repeatLimitTo(2)"><div\n class="inner-number" layout="column" layout-align="space-around center" \nng-class="{\'disabled\': n.disabled || !legend.allowBetting || vm.numbers[2].length > 100 }"><div class="number">\n{{n.number}}</div></div></div></div><div class="view-more" layout="row" layout-align="center end" \nng-if="!vm.viewFull[2] && vm.numbers[2].length > 24"><md-button ng-click="vm.viewFull[2] = true">Xem th\xEAm<md-icon \nmd-font-icon="icon-menu-down" class="s16"></md-icon></md-button></div></div></div><div class="number-element" \nng-if="vm.numbers[3].length"><div class="element-header" layout="row" layout-align="space-between center"><div>3 C\xC0NG\n</div><div>{{ vm.numbers[3].length | currency : \'\' : 0 }} S\u1ED1</div></div><div class="element-content" \nng-class="{\'full\' : vm.viewFull[3] || vm.numbers[3].length < 24 }"><div class="main-number" layout="row" layout-wrap>\n<div class="repeater-number" ng-repeat="n in vm.numbers[3] | limitTo: vm.repeatLimitTo(3)"><div class="inner-number" \nlayout="column" layout-align="space-around center" \nng-class="{\'disabled\': n.disabled || !legend.allowBetting || vm.numbers[3].length > 100 }"><div class="number">\n{{n.number}}</div></div></div></div><div class="view-more" layout="row" layout-align="center end" \nng-if="!vm.viewFull[3] && vm.numbers[3].length > 24 && vm.numbers[3].length <= 100"><md-button \nng-click="vm.viewFull[3] = true">Xem th\xEAm<md-icon md-font-icon="icon-menu-down" class="s16"></md-icon></md-button></div>\n<div class="maximum-message" layout="row" layout-align="center end" ng-if="vm.numbers[3].length > 100"><span>\nM\u1ED7i phi\u1EBFu ch\u1EC9 \u0111\u01B0\u1EE3c \u0111\u1EB7t c\u01B0\u1EE3c t\u1ED1i \u0111a 100 s\u1ED1</span></div></div></div><div class="number-element" \nng-if="vm.numbers[4].length"><div class="element-header" layout="row" layout-align="space-between center"><div>4 C\xC0NG\n</div><div>{{ vm.numbers[4].length | currency : \'\' : 0 }} S\u1ED1</div></div><div class="element-content" \nng-class="{\'full\' : vm.viewFull[4] || vm.numbers[4].length < 24 }"><div class="main-number" layout="row" layout-wrap>\n<div class="repeater-number" ng-repeat="n in vm.numbers[4] | limitTo: vm.repeatLimitTo(4)"><div class="inner-number" \nlayout="column" layout-align="space-around center" \nng-class="{\'disabled\': n.disabled || !legend.allowBetting || vm.numbers[4].length > 100 }"><div class="number">\n{{n.number}}</div></div></div></div><div class="view-more" layout="row" layout-align="center end" \nng-if="!vm.viewFull[4] && vm.numbers[4].length > 24 && vm.numbers[4].length <= 100"><md-button \nng-click="vm.viewFull[4] = true">Xem th\xEAm<md-icon md-font-icon="icon-menu-down" class="s16"></md-icon></md-button></div>\n<div class="maximum-message" layout="row" layout-align="center end" ng-if="vm.numbers[4].length > 100"><span>\nM\u1ED7i phi\u1EBFu ch\u1EC9 \u0111\u01B0\u1EE3c \u0111\u1EB7t c\u01B0\u1EE3c t\u1ED1i \u0111a 100 s\u1ED1</span></div></div></div></div><div flex-gt-sm="50" flex="100" \nclass="main-right-betting-form quick"><div layout="column" class="betting-form-wrap" \nng-if="vm.numbers[2].length || vm.numbers[3].length || vm.numbers[4].length"><div class="betting-form" layout="column">\n<div class="betting-form-header"><div layout="row"><div flex="30">\u0110\u1EB7t c\u01B0\u1EE3c</div><div flex="70" class="text-right">\n{{ vm.GameType | legendGame }}</div></div></div><div class="betting-form-content"><form name="form" \nclass="md-inline-form" layout="column" ng-submit="vm.submitBetting()" novalidate><div class="quick-bet-types" \nlayout="row" ng-repeat="items in vm.BetTypes" ng-if="!vm.checkAllow(items.numbers, item.BetType)"><div flex="30">\n{{ items.group }}</div><div flex="70" layout="row" layout-wrap><div flex="50" ng-repeat="item in items.BetTypes">\n<md-checkbox ng-checked="vm.exists(item.BetType, vm.selected)" ng-click="vm.toggle(item.BetType, vm.selected)" \nng-disabled="vm.checkAllow(items.numbers, item.BetType)">{{ item.Label }}</md-checkbox></div></div></div><div \nlayout="row"><div class="sub-title" flex="30">S\u1ED1 \u0111i\u1EC3m</div><div flex="70" class="form-group"><input type="tel" \nid="bet-input" class="bet-input" ng-model="vm.betPoint" maxlength="5" ng-disabled="vm.checkAllowInput()" ng-currency \nselect-on-click numeric-only ng-change="vm.stepper.update()" autocomplete="off" tabindex="2"><div class="line"></div>\n</div></div><div layout="row" layout-wrap layout-align="space-between center" class="padding-top-16 bet-stepper-wrap" \nng-class="{\'has-individual\' : vm.betStepper.length === 10 }"><div class="bet-stepper" \nng-repeat="item in vm.betStepper track by $index" ng-class="{\'individual\' : item.individual}"><md-button \nng-class="{\'active\': item.active}" ng-click="vm.stepper.select(item)">{{ item.value | currency : \'\' : 0 }}</md-button>\n</div></div><div layout="row" class="padding-top-16"><div flex="30" class="padding-right-8"><md-button \nclass="betting-button cancel-button" ng-click="vm.resetBetting()"><md-icon md-font-icon="icon-close"></md-icon>\n</md-button></div><div flex="70"><md-button class="betting-button" type="submit" ng-disabled="vm.totalMoney === 0">\n\u0110\u1EB7t c\u01B0\u1EE3c</md-button></div></div></form><div layout="row" class="padding-top-8" ng-if="$root.termInfo !== undefined"><div\n class="sub-title" flex="35">Phi\xEAn m\u1EDF th\u01B0\u1EDFng</div><div flex="65" class="text-bold">{{ $root.termInfo.Term | term }} <em>\n({{ $root.termInfo.DrawResultAt | amDateFormat : \'HH:mm\' }})</em></div></div><div layout="row" class="padding-top-8">\n<div class="sub-title" flex="35">T\u1ED5ng \u0111i\u1EC3m</div><div flex="65" class="text-bold">\n{{ vm.totalPoint() | currency : \'\' : 0 }}</div></div><div layout="row" class="padding-top-8"><div class="sub-title" \nflex="35">Th\xE0nh ti\u1EC1n</div><div flex="65" class="text-bold">{{ vm.totalMoney | currency : \'\' : 0 }}</div></div><div \nlayout="row" class="balance" ng-if="$root.isAuthenticated"><div class="sub-title secondary" flex="35">S\u1ED1 d\u01B0</div><div \nflex="65" class="text-bold sub-title secondary" layout="row" layout-align="space-between center">\n{{ $root.User.Balance | currency : \'\' : 0 }}<md-button class="md-icon-button" ng-click="$root.updateBalance()" \nng-disabled="$root.User.updating"><md-icon md-font-icon="icon-refresh" class="s16" \nng-class="{\'rotating\' : $root.User.updating }"></md-icon></md-button></div></div></div></div></div></div></div></div>');
$templateCache.put('app/main/results/legendary/templates/northern.html','<div class="results-table" layout="column"><div class="text-label" layout="row" layout-align="space-between center">\n\u0110\xE0i Mi\u1EC1n B\u1EAFc phi\xEAn {{ item.Term | term }}<md-button class="md-icon-button" ng-click="vm.watchVideo(item, $event)">\n<md-icon md-font-icon="icon-play-circle"></md-icon></md-button></div><div class="draw-result-label">\nTh\u1EDDi gian m\u1EDF th\u01B0\u1EDFng {{ item.DrawResultAt | amDateFormat : \'DD/MM/YYYY HH:mm\' }}</div><div layout="row"><div flex="70">\n<table class="table" cellspacing="0"><tbody><tr class="jackpot"><td>\u0110B</td><td><div class="padding-8">{{item.Jackpot}}\n</div></td></tr><tr><td>G1</td><td><div class="padding-8">{{item.First}}</div></td></tr><tr><td>G2</td><td><div \nlayout="row"><div flex="50" class="padding-8">{{item.Second[0]}}</div><div flex="50" class="padding-8">\n{{item.Second[1]}}</div></div></td></tr><tr><td>G3</td><td><div layout="column" class="double"><div layout="row" \nflex="100"><div flex="33" class="padding-8">{{item.Third[0]}}</div><div flex="33" class="padding-8">{{item.Third[1]}}\n</div><div flex="33" class="padding-8">{{item.Third[2]}}</div></div><div layout="row" flex="100"><div flex="33" \nclass="padding-8">{{item.Third[3]}}</div><div flex="33" class="padding-8">{{item.Third[4]}}</div><div flex="33" \nclass="padding-8">{{item.Third[5]}}</div></div></div></td></tr><tr><td>G4</td><td><div layout="row"><div flex="25" \nclass="padding-8">{{item.Fourth[0]}}</div><div flex="25" class="padding-8">{{item.Fourth[1]}}</div><div flex="25" \nclass="padding-8">{{item.Fourth[2]}}</div><div flex="25" class="padding-8">{{item.Fourth[3]}}</div></div></td></tr><tr>\n<td>G5</td><td><div layout="column" class="double"><div layout="row" flex="100"><div flex="33" class="padding-8">\n{{item.Fifth[0]}}</div><div flex="33" class="padding-8">{{item.Fifth[1]}}</div><div flex="33" class="padding-8">\n{{item.Fifth[2]}}</div></div><div layout="row" flex="100"><div flex="33" class="padding-8">{{item.Fifth[3]}}</div><div \nflex="33" class="padding-8">{{item.Fifth[4]}}</div><div flex="33" class="padding-8">{{item.Fifth[5]}}</div></div></div>\n</td></tr><tr><td>G6</td><td><div layout="row"><div flex="33" class="padding-8">{{item.Sixth[0]}}</div><div flex="33" \nclass="padding-8">{{item.Sixth[1]}}</div><div flex="33" class="padding-8">{{item.Sixth[2]}}</div></div></td></tr><tr>\n<td>G7</td><td><div layout="row"><div flex="25" class="padding-8">{{item.Seventh[0]}}</div><div flex="25" \nclass="padding-8">{{item.Seventh[1]}}</div><div flex="25" class="padding-8">{{item.Seventh[2]}}</div><div flex="25" \nclass="padding-8">{{item.Seventh[3]}}</div></div></td></tr></tbody></table></div><div flex="30"><table \nclass="table matrix" cellspacing="0"><tbody><tr ng-repeat="(key, arr) in item.matrix"><td><div>{{key}}</div></td><td>\n<span ng-repeat="item in arr" ng-class="{\'jack\': item.jack}">{{item.value}}</span></td></tr></tbody></table></div></div>\n</div>');
$templateCache.put('app/main/results/legendary/templates/southern.html','<div class="results-table"><div class="text-label" layout="row" layout-align="space-between center">\n\u0110\xE0i Mi\u1EC1n Nam phi\xEAn {{ item.Term | term }}<md-button class="md-icon-button" ng-click="vm.watchVideo(item, $event)">\n<md-icon md-font-icon="icon-play-circle"></md-icon></md-button></div><div class="draw-result-label">\nTh\u1EDDi gian m\u1EDF th\u01B0\u1EDFng {{ item.DrawResultAt | amDateFormat : \'DD/MM/YYYY HH:mm\' }}</div><div layout="row"><div flex="70">\n<table class="table southward" cellspacing="0"><tbody><tr><td>G8</td><td><div class="padding-8">{{item.Eighth}}</div>\n</td></tr><tr><td>G7</td><td><div class="padding-8">{{item.Seventh}}</div></td></tr><tr><td>G6</td><td><div \nlayout="row" class="padding-8"><div flex="33">{{item.Sixth[0]}}</div><div flex="33">{{item.Sixth[1]}}</div><div \nflex="33">{{item.Sixth[2]}}</div></div></td></tr><tr><td>G5</td><td><div class="padding-8">{{item.Fifth}}</div></td>\n</tr><tr><td>G4</td><td><div layout="row" class="padding-8 double" layout-wrap><div flex="33">{{item.Fourth[0]}}</div>\n<div flex="33">{{item.Fourth[1]}}</div><div flex="33">{{item.Fourth[2]}}</div><div flex="33">{{item.Fourth[3]}}</div>\n<div flex="33">{{item.Fourth[4]}}</div><div flex="33">{{item.Fourth[5]}}</div><div flex="100">{{item.Fourth[6]}}</div>\n</div></td></tr><tr><td>G3</td><td><div layout="row" class="padding-8"><div flex="50">{{item.Third[0]}}</div><div \nflex="50">{{item.Third[1]}}</div></div></td></tr><tr><td>G2</td><td><div class="padding-8">{{item.Second}}</div></td>\n</tr><tr><td>G1</td><td><div class="padding-8">{{item.First}}</div></td></tr><tr class="jackpot"><td>\u0110B</td><td><div \nclass="padding-8">{{item.Jackpot}}</div></td></tr></tbody></table></div><div flex="30"><table class="table matrix" \ncellspacing="0"><tbody><tr ng-repeat="(key, arr) in item.matrix"><td><div class="font-size-16">{{key}}</div></td><td>\n<span ng-repeat="item in arr" ng-class="{\'jack\': item.jack}">{{item.value}}</span></td></tr></tbody></table></div></div>\n</div>');
$templateCache.put('app/main/account/bet-list/traditional/full/full.html','<div id="statement" class="page-layout simple fullwidth bet-list" layout="column" print-section><div \nclass="bet-list-title" layout="row" layout-align="space-between center"><md-button class="md-icon-button" \nui-sref="app.account.bet-list.traditional"><md-icon md-font-icon="icon-keyboard-backspace"></md-icon></md-button><h2 \nclass="primary">B\u1EA3ng c\u01B0\u1EE3c - T\u1EA5t c\u1EA3</h2><span></span></div><div class="bet-list-batch" ng-if="vm.tickets.length"><table \nclass="table one-table md-primary-bg" ms-responsive-table print-table="people" datatable datatable="ng" \ndt-options="vm.dtOptions"><thead><tr><th>M\xE3 c\u01B0\u1EE3c</th><th>Th\u1EDDi gian</th><th><div class="table-header"><span \nclass="column-title">Th\u1EC3 lo\u1EA1i</span></div></th><th>Ph\xE1t th\u01B0\u1EDFng</th><th>S\u1ED1 ch\u1ECDn</th><th>Ti\u1EC1n \u0111\u1EA7u</th><th><div \nclass="table-header"><span class="column-title">\u0110i\u1EC3m</span></div></th><th><div class="table-header"><span \nclass="column-title">Th\xE0nh ti\u1EC1n</span></div></th></tr></thead><tbody><tr ng-repeat="bet in vm.tickets" \nng-class="{\'canceled\': bet.CancelledAt}"><td>{{bet.Term}}-{{bet.TicketNumber}}</td><td>\n{{bet.CreatedAt | amDateFormat : \'H:mm:ss\' }}</td><td>{{bet.GameType | blGame }} - {{bet.BetType | bet }}</td><td>\n{{bet.Payouts | currency : \'\' : 0}}</td><td>{{bet.Numbers | joinArr }} <sub class="prizeNr" \nng-if="bet.BetType === 20 || bet.BetType === 27">[{{bet.PrizeNr}}]</sub></td><td>{{bet.Price | currency : \'\' : 0 }}</td>\n<td>{{bet.Point | currency : \'\' : 0}}</td><td>{{bet.Amount | currency : \'\' : 0}}</td></tr></tbody><tfoot \nng-if="vm.hasMoreTickets"><tr><td colspan="8" class="hasMoreTickets" ng-class="{\'disabled\': vm.loading}"><a \nng-click="vm.ticketByTerm(vm.ltID)">Xem ti\u1EBFp</a><md-icon md-font-icon="icon-refresh" class="s16 rotating" \nng-show="vm.loading"></md-icon></td></tr></tfoot></table></div><div layout="row" layout-align="center center" \nng-if="vm.loading" ng-class="{\'padding-48\' : vm.loading}"><md-progress-circular class="md-hue-2" md-diameter="40px">\n</md-progress-circular></div><div ng-if="!vm.tickets.length && !vm.loading"><h3 \nclass="text-center padding-top-24 primary">Qu\xFD kh\xE1ch ch\u01B0a c\xF3 \u0111\u01A1n c\u01B0\u1EE3c n\xE0o trong k\u1EF3 n\xE0y!</h3></div></div>');
$templateCache.put('app/main/account/bet-list/traditional/batch/batch.html','<div id="statement" class="page-layout simple fullwidth bet-list" layout="column" print-section><div \nclass="bet-list-title" layout="row" layout-align="space-between center"><md-button class="md-icon-button" \nui-sref="app.account.bet-list.traditional"><md-icon md-font-icon="icon-keyboard-backspace"></md-icon></md-button><h2 \nclass="primary">B\u1EA3ng c\u01B0\u1EE3c</h2><span></span></div><div class="bet-list-batch" ng-if="vm.tickets.length"><table \nclass="table one-table md-primary-bg" ms-responsive-table print-table="people" datatable datatable="ng" \ndt-options="vm.dtOptions"><thead><tr><th>M\xE3 c\u01B0\u1EE3c</th><th>Th\u1EDDi gian</th><th><div class="table-header"><span \nclass="column-title">Th\u1EC3 lo\u1EA1i</span></div></th><th>Ph\xE1t th\u01B0\u1EDFng</th><th>S\u1ED1 ch\u1ECDn</th><th>Ti\u1EC1n \u0111\u1EA7u</th><th><div \nclass="table-header"><span class="column-title">\u0110i\u1EC3m</span></div></th><th><div class="table-header"><span \nclass="column-title">Th\xE0nh ti\u1EC1n</span></div></th></tr></thead><tbody><tr ng-repeat="bet in vm.tickets" \nng-class="{\'canceled\': bet.CancelledAt}"><td>{{vm.term}}-{{bet.TicketNumber}}</td><td>\n{{bet.CreatedAt | amDateFormat : \'H:mm:ss\' }}</td><td>{{bet.GameType | blGame }} - {{bet.BetType | bet }}</td><td>\n{{bet.Payouts | currency : \'\' : 0}}</td><td>{{bet.Numbers | joinArr }} <sub class="prizeNr" \nng-if="bet.BetType === 20 || bet.BetType === 27">[{{bet.PrizeNr}}]</sub></td><td>{{bet.Price | currency : \'\' : 0 }}</td>\n<td>{{bet.Point | currency : \'\' : 0}}</td><td>{{bet.Amount | currency : \'\' : 0}}</td></tr></tbody><tfoot \nng-if="vm.hasMoreTickets"><tr><td colspan="8" class="hasMoreTickets" ng-class="{\'disabled\': vm.loading}"><a \nng-click="vm.ticketByBatchId(vm.ltID)">Xem ti\u1EBFp</a><md-icon md-font-icon="icon-refresh" class="s16 rotating" \nng-show="vm.loading"></md-icon></td></tr></tfoot></table></div><div layout="row" layout-align="center center" \nng-if="vm.loading" ng-class="{\'padding-48\' : vm.loading}"><md-progress-circular class="md-hue-2" md-diameter="40px">\n</md-progress-circular></div><div ng-if="!vm.tickets.length && !vm.loading"><h3 \nclass="text-center padding-top-24 primary">Qu\xFD kh\xE1ch ch\u01B0a c\xF3 \u0111\u01A1n c\u01B0\u1EE3c n\xE0o trong k\u1EF3 n\xE0y!</h3></div></div>');
$templateCache.put('app/main/account/bet-list/legendary/batch/batch.html','<div id="statement" class="page-layout simple fullwidth bet-list" layout="column" print-section><div \nclass="bet-list-title" layout="row" layout-align="space-between center"><md-button class="md-icon-button" \nui-sref="app.account.bet-list.legendary"><md-icon md-font-icon="icon-keyboard-backspace"></md-icon></md-button><h2>\nB\u1EA3ng c\u01B0\u1EE3c</h2><span></span></div><div class="bet-list-batch" ng-if="vm.tickets.length"><table class="table one-table" \nms-responsive-table print-table="people" datatable datatable="ng" dt-options="vm.dtOptions"><thead><tr><th>M\xE3 c\u01B0\u1EE3c</th>\n<th>Th\u1EDDi gian</th><th><div class="table-header"><span class="column-title">Th\u1EC3 lo\u1EA1i</span></div></th><th>Ph\xE1t th\u01B0\u1EDFng\n</th><th>S\u1ED1 ch\u1ECDn</th><th>Ti\u1EC1n \u0111\u1EA7u</th><th><div class="table-header"><span class="column-title">\u0110i\u1EC3m</span></div></th>\n<th><div class="table-header"><span class="column-title">Th\xE0nh ti\u1EC1n</span></div></th></tr></thead><tbody><tr \nng-repeat="bet in vm.tickets" ng-class="{\'canceled\': bet.CancelledAt}"><td>{{vm.term | term }}-{{bet.TicketNumber}}</td>\n<td>{{bet.CreatedAt | amDateFormat : \'H:mm:ss\' }}</td><td>\n{{bet.GameType | legendGame }} - {{bet.BetType | bet : false : bet.GameType }}</td><td>\n{{bet.Payouts | currency : \'\' : 0}}</td><td>{{bet.Numbers | joinArr }} <sub class="prizeNr" \nng-if="bet.BetType === 20 || bet.BetType === 27 || bet.BetType === 28">[{{bet.PrizeNr}}]</sub> <sub class="prizeNr" \nng-if="bet.BetType === 26">[{{bet.PrizeNr-4}}]</sub></td><td>{{bet.Price | currency : \'\' : 0 }}</td><td>\n{{bet.Point | currency : \'\' : 0}}</td><td>{{bet.Amount | currency : \'\' : 0}}</td></tr></tbody><tfoot \nng-if="vm.hasMoreTickets"><tr><td colspan="8" class="hasMoreTickets" ng-class="{\'disabled\': vm.loading}"><a \nng-click="vm.ticketByBatchId(vm.ltID)">Xem ti\u1EBFp</a><md-icon md-font-icon="icon-refresh" class="s16 rotating" \nng-show="vm.loading"></md-icon></td></tr></tfoot></table></div><div layout="row" layout-align="center center" \nng-if="vm.loading" ng-class="{\'padding-48\' : vm.loading}"><md-progress-circular class="md-hue-2" md-diameter="40px">\n</md-progress-circular></div><div ng-if="!vm.tickets.length && !vm.loading"><h3 class="text-center padding-top-24">\nQu\xFD kh\xE1ch ch\u01B0a c\xF3 \u0111\u01A1n c\u01B0\u1EE3c n\xE0o trong k\u1EF3 n\xE0y!</h3></div></div>');
$templateCache.put('app/main/account/bet-list/legendary/full/full.html','<div id="statement" class="page-layout simple fullwidth bet-list" layout="column" print-section><div \nclass="bet-list-title" layout="row" layout-align="space-between center"><md-button class="md-icon-button" \nui-sref="app.account.bet-list.legendary"><md-icon md-font-icon="icon-keyboard-backspace"></md-icon></md-button><h2>\nB\u1EA3ng c\u01B0\u1EE3c - T\u1EA5t c\u1EA3</h2><span></span></div><div class="bet-list-batch" ng-if="vm.tickets.length"><table \nclass="table one-table" ms-responsive-table print-table="people" datatable datatable="ng" dt-options="vm.dtOptions">\n<thead><tr><th>M\xE3 c\u01B0\u1EE3c</th><th>Th\u1EDDi gian</th><th><div class="table-header"><span class="column-title">Th\u1EC3 lo\u1EA1i</span>\n</div></th><th>Ph\xE1t th\u01B0\u1EDFng</th><th>S\u1ED1 ch\u1ECDn</th><th>Ti\u1EC1n \u0111\u1EA7u</th><th><div class="table-header"><span \nclass="column-title">\u0110i\u1EC3m</span></div></th><th><div class="table-header"><span class="column-title">Th\xE0nh ti\u1EC1n</span>\n</div></th></tr></thead><tbody><tr ng-repeat="bet in vm.tickets" ng-class="{\'canceled\': bet.CancelledAt}"><td>\n{{ bet.Term | term }}-{{bet.TicketNumber}}</td><td>{{bet.CreatedAt | amDateFormat : \'H:mm:ss\' }}</td><td>\n{{bet.GameType | legendGame }} - {{bet.BetType | bet : false : bet.GameType }}</td><td>\n{{bet.Payouts | currency : \'\' : 0}}</td><td>{{bet.Numbers | joinArr }} <sub class="prizeNr" \nng-if="bet.BetType === 20 || bet.BetType === 27 || bet.BetType === 28">[{{bet.PrizeNr}}]</sub> <sub class="prizeNr" \nng-if="bet.BetType === 26">[{{bet.PrizeNr-4}}]</sub></td><td>{{bet.Price | currency : \'\' : 0 }}</td><td>\n{{bet.Point | currency : \'\' : 0}}</td><td>{{bet.Amount | currency : \'\' : 0}}</td></tr></tbody><tfoot \nng-if="vm.hasMoreTickets"><tr><td colspan="8" class="hasMoreTickets" ng-class="{\'disabled\': vm.loading}"><a \nng-click="vm.ticketByTerm(vm.ltID)">Xem ti\u1EBFp</a><md-icon md-font-icon="icon-refresh" class="s16 rotating" \nng-show="vm.loading"></md-icon></td></tr></tfoot></table></div><div layout="row" layout-align="center center" \nng-if="vm.loading" ng-class="{\'padding-48\' : vm.loading}"><md-progress-circular class="md-hue-2" md-diameter="40px">\n</md-progress-circular></div><div ng-if="!vm.tickets.length && !vm.loading"><h3 class="text-center padding-top-24">\nQu\xFD kh\xE1ch ch\u01B0a c\xF3 \u0111\u01A1n c\u01B0\u1EE3c n\xE0o trong k\u1EF3 n\xE0y!</h3></div></div>');
$templateCache.put('app/main/account/statement/lottery/bet/bet.html','<div id="statement" class="page-layout simple fullwidth" layout="column"><h2 class="primary">\nSao k\xEA - {{ vm.data.game | game }} - {{ vm.data.bet | bet }}</h2><div ng-if="vm.reports.length"><table \nclass="table one-table md-primary-bg" ms-responsive-table><thead><tr><th colspan="10">{{ vm.date }}</th></tr><tr><th \nclass="mw-100">M\xE3 c\u01B0\u1EE3c</th><th>Th\u1EDDi gian</th><th>S\u1ED1 ch\u1ECDn</th><th class="mw-100">Ph\xE1t th\u01B0\u1EDFng</th><th>Ti\u1EC1n \u0111\u1EA7u</th><th>\n\u0110i\u1EC3m</th><th class="mw-100">Th\xE0nh ti\u1EC1n</th><th>Th\u1EAFng thua</th></tr></thead><tbody><tr ng-repeat="d in vm.reports" \nng-class="{ \'text-win\' : d.WinLose > 0 }"><td>{{ d.Term }}.{{ d.TicketNumber }}</td><td>\n{{ d.CreatedAt | amDateFormat : \'HH:mm:ss\' }}</td><td ng-if="vm.data.bet != 5 && vm.data.bet != 6">\n{{ d.Numbers.toString() }} <sub ng-if="d.MultiPay !== undefined && d.MultiPay !== 1 && d.MultiPay !== 0">\nx {{d.MultiPay}}</sub> <sup ng-if="d.PrizeNr">[{{d.PrizeNr}}]</sup></td><td \nng-if="vm.data.bet == 5 || vm.data.bet == 6">{{ d.Numbers.toString() }}</td><td>{{ d.Payouts | sabaCurrency }}</td><td>\n{{ d.Price | sabaCurrency }}</td><td>{{ d.Point | sabaCurrency }}</td><td>{{ d.Amount | sabaCurrency }}</td><td \nng-class="{ \'warn\' : d.WinLose < 0 }">{{ d.WinLose | sabaCurrency }}</td></tr></tbody><tfoot ng-if="vm.thereMore"><tr>\n<td colspan="10" class="there-more"><span ng-click="vm.fetchReport( vm.lastID );">Xem ti\u1EBFp</span></td></tr></tfoot>\n<tfoot ng-if="!vm.thereMore"><tr><td colspan="5">T\u1ED5ng c\u1ED9ng</td><td>\n{{ vm.reports | sumOfValue : \'Point\' | sabaCurrency }}</td><td>{{ vm.reports | sumOfValue : \'Amount\' | sabaCurrency }}\n</td><td ng-class="{ \'warn\' : (vm.reports | sumOfValue : \'WinLose\') < 0 }">\n{{ vm.reports | sumOfValue : \'WinLose\' | sabaCurrency }}</td></tr></tfoot></table></div><div layout="row" \nclass="margin-top-64" layout-align="center center" ng-if="vm.loading"><md-progress-circular class="md-hue-2" \nmd-diameter="40px"></md-progress-circular></div><div ng-if="!vm.reports.length && !vm.loading"><h3 \nclass="text-center padding-top-24 primary">Qu\xFD kh\xE1ch kh\xF4ng c\xF3 b\xE1o bi\u1EC3u trong 2 tu\u1EA7n g\u1EA7n \u0111\xE2y</h3></div></div>');
$templateCache.put('app/main/account/statement/lottery/date/date.html','<div id="statement" class="page-layout simple fullwidth" layout="column"><h2 class="primary">Sao k\xEA</h2><div \nng-if="vm.reports.length"><table class="table one-table md-primary-bg" ms-responsive-table><thead><tr><th colspan="7">\n{{ vm.date }}</th></tr><tr><th class="mw-120">\u0110\xE0i m\u1EDF th\u01B0\u1EDFng</th><th>S\u1ED1 phi\u1EBFu</th><th>T\u1ED5ng \u0111i\u1EC3m</th><th>Ti\u1EC1n c\u01B0\u1EE3c</th>\n<th>Hoa h\u1ED3ng</th><th>Th\u1EAFng thua</th></tr></thead><tbody><tr ng-repeat="d in vm.reports"><td><a \nui-sref="app.account.statement.lottery.game({game: d.GameType, time: vm.time})">{{ d.GameType | game }}</a></td><td>\n{{ d.Quantity | sabaCurrency }}</td><td>{{ d.Point | sabaCurrency }}</td><td>{{ d.Amount | sabaCurrency }}</td><td>\n{{ d.Commission | sabaCurrency }}</td><td ng-class="{\'warn\' : d.WinLose < 0 }">{{ d.WinLose | sabaCurrency }}</td></tr>\n</tbody><tfoot><tr><td>T\u1ED5ng c\u1ED9ng</td><td>{{ vm.reports | sumOfValue : \'Quantity\' | sabaCurrency }}</td><td>\n{{ vm.reports | sumOfValue : \'Point\' | sabaCurrency }}</td><td>{{ vm.reports | sumOfValue : \'Amount\' | sabaCurrency }}\n</td><td>{{ vm.reports | sumOfValue : \'Commission\' | sabaCurrency }}</td><td \nng-class="{\'warn\' : (vm.reports | sumOfValue : \'WinLose\') < 0 }">\n{{ vm.reports | sumOfValue : \'WinLose\' | sabaCurrency }}</td></tr></tfoot></table></div><div layout="row" \nclass="margin-top-64" layout-align="center center" ng-if="vm.loading"><md-progress-circular class="md-hue-2" \nmd-diameter="40px"></md-progress-circular></div><div ng-if="!vm.reports.length && !vm.loading"><h3 \nclass="text-center padding-top-24 primary">Qu\xFD kh\xE1ch kh\xF4ng c\xF3 b\xE1o bi\u1EC3u trong 2 tu\u1EA7n g\u1EA7n \u0111\xE2y</h3></div></div>');
$templateCache.put('app/main/account/statement/casino/game/game.html','<div id="statement" class="page-layout simple fullwidth" layout="column"><h2 class="primary">\nSao k\xEA - {{ vm.data.game | LegendCasino }}</h2><div ng-if="vm.reports.length"><table \nclass="table one-table casino md-primary-bg" ms-responsive-table><thead><tr><th colspan="8">{{ vm.date }}</th></tr><tr>\n<th>V\xE1n ch\u01A1i</th><th>C\u01B0\u1EE3c</th><th>K\u1EBFt qu\u1EA3</th><th>Ti\u1EC1n c\u01B0\u1EE3c</th><th>Hoa h\u1ED3ng</th><th>Th\u1EAFng thua</th></tr></thead><tbody>\n<tr ng-repeat="d in vm.reports" ng-class="{\'canceled\': d.Status === -1}"><td><div layout="column"><div class="bold">\n{{ d.AreaNumber }}.{{ d.GameNumber }}-{{ d.GameRound }}</div></div></td><td>{{ d.BetType | SedieBet }}</td><td \nclass="sedie-result"><div layout="column"><div><img ng-src="assets/images/results/{{d.GameResult}}.png"></div><div \nng-if="d.WinLose < 0" class="warn">Thua</div><div ng-if="d.WinLose > 0" class="win">Th\u1EAFng</div></div></td><td><div \nlayout="column"><div>{{ d.Amount| sabaCurrency }}</div></div></td><td><div layout="column"><div>\n{{ d.Commission| sabaCurrency }}</div></div></td><td><div layout="column"><div class="bold" \nng-class="{ \'warn\' : d.WinLose < 0 }">{{ d.WinLose | sabaCurrency }}</div></div></td></tr></tbody><tfoot \nng-if="vm.thereMore"><tr><td colspan="6" class="there-more"><span \nng-click="vm.fetchReport( vm.reports[vm.reports.length - 1].Id );">Xem ti\u1EBFp</span></td></tr></tfoot></table></div><div \nlayout="row" class="margin-top-64" layout-align="center center" ng-if="vm.loading"><md-progress-circular \nclass="md-hue-2" md-diameter="40px"></md-progress-circular></div><div ng-if="!vm.reports.length && !vm.loading"><h3 \nclass="text-center padding-top-24 primary">Qu\xFD kh\xE1ch kh\xF4ng c\xF3 b\xE1o bi\u1EC3u trong 2 tu\u1EA7n g\u1EA7n \u0111\xE2y</h3></div></div>');
$templateCache.put('app/main/account/statement/casino/date/date.html','<div id="statement" class="page-layout simple fullwidth" layout="column"><h2 class="primary">Sao k\xEA 789-Casino</h2><div \nng-if="vm.reports.length"><table class="table one-table md-primary-bg" ms-responsive-table><thead><tr><th colspan="7">\n{{ vm.date }}</th></tr><tr><th class="mw-120">Game</th><th>S\u1ED1 phi\u1EBFu</th><th>Ti\u1EC1n c\u01B0\u1EE3c</th><th class="mw-120">\nTi\u1EC1n c\u01B0\u1EE3c th\u1EF1c</th><th>Hoa h\u1ED3ng</th><th>Th\u1EAFng thua</th></tr></thead><tbody><tr ng-repeat="d in vm.reports"><td><a \nng-click="vm.gotoGame({game: d.GameType, time: vm.time})">{{ d.GameType | LegendCasino }}</a></td><td>\n{{ d.Quantity | sabaCurrency }}</td><td>{{ d.Amount | sabaCurrency }}</td><td>{{ d.NetAmount | sabaCurrency }}</td><td>\n{{ d.Commission | sabaCurrency }}</td><td ng-class="{\'warn\' : d.WinLose < 0 }">{{ d.WinLose | sabaCurrency }}</td></tr>\n</tbody><tfoot><tr><td>T\u1ED5ng c\u1ED9ng</td><td>{{ vm.reports | sumOfValue : \'Quantity\' | sabaCurrency }}</td><td>\n{{ vm.reports | sumOfValue : \'Amount\' | sabaCurrency }}</td><td>\n{{ vm.reports | sumOfValue : \'NetAmount\' | sabaCurrency }}</td><td>\n{{ vm.reports | sumOfValue : \'Commission\' | sabaCurrency }}</td><td \nng-class="{\'warn\' : (vm.reports | sumOfValue : \'WinLose\') < 0 }">\n{{ vm.reports | sumOfValue : \'WinLose\' | sabaCurrency }}</td></tr></tfoot></table></div><div layout="row" \nclass="margin-top-64" layout-align="center center" ng-if="vm.loading"><md-progress-circular class="md-hue-2" \nmd-diameter="40px"></md-progress-circular></div><div ng-if="!vm.reports.length && !vm.loading"><h3 \nclass="text-center padding-top-24 primary">Qu\xFD kh\xE1ch kh\xF4ng c\xF3 b\xE1o bi\u1EC3u trong 2 tu\u1EA7n g\u1EA7n \u0111\xE2y</h3></div></div>');
$templateCache.put('app/main/account/statement/legendary/bet/bet.html','<div id="statement" class="page-layout simple fullwidth" layout="column"><h2>\nSao k\xEA - {{ vm.data.game | legendGame }} - {{ vm.data.bet | bet : false : vm.data.game }}</h2><div \nng-if="vm.reports.length"><table class="table one-table" ms-responsive-table><thead><tr><th colspan="10">{{ vm.date }}\n</th></tr><tr><th class="mw-100">M\xE3 c\u01B0\u1EE3c</th><th>Th\u1EDDi gian</th><th>S\u1ED1 ch\u1ECDn</th><th class="mw-100">Ph\xE1t th\u01B0\u1EDFng</th><th>\nTi\u1EC1n \u0111\u1EA7u</th><th>\u0110i\u1EC3m</th><th class="mw-100">Th\xE0nh ti\u1EC1n</th><th>Th\u1EAFng thua</th></tr></thead><tbody><tr \nng-repeat="d in vm.reports" ng-class="{ \'text-win\' : d.WinLose > 0 }"><td>{{ d.Term | term }}.{{ d.TicketNumber }}</td>\n<td>{{ d.CreatedAt | amDateFormat : \'HH:mm:ss\' }}</td><td ng-if="vm.data.bet != 5 && vm.data.bet != 6">\n{{ d.Numbers.toString() }} <sub ng-if="d.MultiPay !== undefined && d.MultiPay !== 1 && d.MultiPay !== 0">\nx {{d.MultiPay}}</sub> <sup ng-if="d.PrizeNr && vm.BetType !== 26">[{{d.PrizeNr}}]</sup> <sup \nng-if="d.PrizeNr && vm.BetType === 26">[{{d.PrizeNr-4}}]</sup></td><td ng-if="vm.data.bet == 5 || vm.data.bet == 6">\n{{ d.Numbers.toString() }}</td><td>{{ d.Payouts | sabaCurrency }}</td><td>{{ d.Price | sabaCurrency }}</td><td>\n{{ d.Point | sabaCurrency }}</td><td>{{ d.Amount | sabaCurrency }}</td><td ng-class="{ \'warn\' : d.WinLose < 0 }">\n{{ d.WinLose | sabaCurrency }}</td></tr></tbody><tfoot ng-if="vm.thereMore"><tr><td colspan="10" class="there-more">\n<span ng-click="vm.fetchReport( vm.lastID );">Xem ti\u1EBFp</span></td></tr></tfoot><tfoot ng-if="!vm.thereMore"><tr><td \ncolspan="5">T\u1ED5ng c\u1ED9ng</td><td>{{ vm.reports | sumOfValue : \'Point\' | sabaCurrency }}</td><td>\n{{ vm.reports | sumOfValue : \'Amount\' | sabaCurrency }}</td><td \nng-class="{ \'warn\' : (vm.reports | sumOfValue : \'WinLose\') < 0 }">\n{{ vm.reports | sumOfValue : \'WinLose\' | sabaCurrency }}</td></tr></tfoot></table></div><div layout="row" \nclass="margin-top-64" layout-align="center center" ng-if="vm.loading"><md-progress-circular class="md-hue-2" \nmd-diameter="40px"></md-progress-circular></div><div ng-if="!vm.reports.length && !vm.loading"><h3 \nclass="text-center padding-top-24">Qu\xFD kh\xE1ch kh\xF4ng c\xF3 b\xE1o bi\u1EC3u trong 2 tu\u1EA7n g\u1EA7n \u0111\xE2y</h3></div></div>');
$templateCache.put('app/main/account/statement/lottery/game/game.html','<div id="statement" class="page-layout simple fullwidth" layout="column"><h2 class="primary">\nSao k\xEA - {{ vm.data.game | game }}</h2><div ng-if="vm.reports.length"><table class="table one-table md-primary-bg" \nms-responsive-table><thead><tr><th colspan="8">{{ vm.date }}</th></tr><tr><th>Ki\u1EC3u c\u01B0\u1EE3c</th><th>S\u1ED1 phi\u1EBFu</th><th \nclass="mw-120">T\u1ED5ng \u0111i\u1EC3m</th><th>Ti\u1EC1n c\u01B0\u1EE3c</th><th>Hoa h\u1ED3ng</th><th>Th\u1EAFng thua</th></tr></thead><tbody><tr \nng-repeat="d in vm.reports"><td><a \nui-sref="app.account.statement.lottery.bet({game: vm.data.game, bet: d.BetType, time: vm.data.time})">\n{{ d.BetType | bet }}</a></td><td>{{ d.Quantity | sabaCurrency }}</td><td>{{ d.Point | sabaCurrency }}</td><td>\n{{ d.Amount| sabaCurrency }}</td><td>{{ d.Commission| sabaCurrency }}</td><td ng-class="{ \'warn\' : d.WinLose < 0 }">\n{{ d.WinLose | sabaCurrency }}</td></tr></tbody><tfoot><tr><td colspan="1">T\u1ED5ng c\u1ED9ng</td><td>\n{{ vm.reports | sumOfValue : \'Quantity\' | sabaCurrency }}</td><td>{{ vm.reports | sumOfValue : \'Point\' | sabaCurrency }}\n</td><td>{{ vm.reports | sumOfValue : \'Amount\' | sabaCurrency }}</td><td>\n{{ vm.reports | sumOfValue : \'Commission\' | sabaCurrency }}</td><td \nng-class="{\'warn\' : (vm.reports | sumOfValue : \'WinLose\') < 0 }">\n{{ vm.reports | sumOfValue : \'WinLose\' | sabaCurrency }}</td></tr></tfoot></table></div><div layout="row" \nclass="margin-top-64" layout-align="center center" ng-if="vm.loading"><md-progress-circular class="md-hue-2" \nmd-diameter="40px"></md-progress-circular></div><div ng-if="!vm.reports.length && !vm.loading"><h3 \nclass="text-center padding-top-24 primary">Qu\xFD kh\xE1ch kh\xF4ng c\xF3 b\xE1o bi\u1EC3u trong 2 tu\u1EA7n g\u1EA7n \u0111\xE2y</h3></div></div>');
$templateCache.put('app/main/account/statement/legendary/game/game.html','<div id="statement" class="page-layout simple fullwidth" layout="column"><h2>Sao k\xEA - {{ vm.data.game | legendGame }}\n</h2><div ng-if="vm.reports.length"><table class="table one-table" ms-responsive-table><thead><tr><th colspan="8">\n{{ vm.date }}</th></tr><tr><th>Ki\u1EC3u c\u01B0\u1EE3c</th><th>S\u1ED1 phi\u1EBFu</th><th class="mw-120">T\u1ED5ng \u0111i\u1EC3m</th><th>Ti\u1EC1n c\u01B0\u1EE3c</th><th>\nHoa h\u1ED3ng</th><th>Th\u1EAFng thua</th></tr></thead><tbody><tr ng-repeat="d in vm.reports"><td><a \nui-sref="app.account.statement.legend.bet({game: vm.data.game, bet: d.BetType, term: vm.data.term})">\n{{ d.BetType | bet : false : vm.data.game }}</a></td><td>{{ d.Quantity | sabaCurrency }}</td><td>\n{{ d.Point | sabaCurrency }}</td><td>{{ d.Amount| sabaCurrency }}</td><td>{{ d.Commission| sabaCurrency }}</td><td \nng-class="{ \'warn\' : d.WinLose < 0 }">{{ d.WinLose | sabaCurrency }}</td></tr></tbody><tfoot><tr><td colspan="1">\nT\u1ED5ng c\u1ED9ng</td><td>{{ vm.reports | sumOfValue : \'Quantity\' | sabaCurrency }}</td><td>\n{{ vm.reports | sumOfValue : \'Point\' | sabaCurrency }}</td><td>{{ vm.reports | sumOfValue : \'Amount\' | sabaCurrency }}\n</td><td>{{ vm.reports | sumOfValue : \'Commission\' | sabaCurrency }}</td><td \nng-class="{\'warn\' : (vm.reports | sumOfValue : \'WinLose\') < 0 }">\n{{ vm.reports | sumOfValue : \'WinLose\' | sabaCurrency }}</td></tr></tfoot></table></div><div layout="row" \nclass="margin-top-64" layout-align="center center" ng-if="vm.loading"><md-progress-circular class="md-hue-2" \nmd-diameter="40px"></md-progress-circular></div><div ng-if="!vm.reports.length && !vm.loading"><h3 \nclass="text-center padding-top-24">Qu\xFD kh\xE1ch kh\xF4ng c\xF3 b\xE1o bi\u1EC3u trong 2 tu\u1EA7n g\u1EA7n \u0111\xE2y</h3></div></div>');
$templateCache.put('app/main/account/statement/legendary/term/term.html','<div id="statement" class="page-layout simple fullwidth" layout="column"><h2>Sao k\xEA</h2><div ng-if="vm.reports.length">\n<table class="table one-table" ms-responsive-table><thead><tr><th colspan="7">{{ vm.date }}</th></tr><tr><th \nclass="mw-120">Phi\xEAn m\u1EDF th\u01B0\u1EDFng</th><th>S\u1ED1 phi\u1EBFu</th><th>T\u1ED5ng \u0111i\u1EC3m</th><th>Ti\u1EC1n c\u01B0\u1EE3c</th><th>Hoa h\u1ED3ng</th><th>Th\u1EAFng thua\n</th></tr></thead><tbody><tr ng-repeat="d in vm.reports"><td><a \nui-sref="app.account.statement.legend.game({game: vm.game, time: vm.time, term: d.Term})">{{ d.Term | term }}</a></td>\n<td>{{ d.Quantity | sabaCurrency }}</td><td>{{ d.Point | sabaCurrency }}</td><td>{{ d.Amount | sabaCurrency }}</td><td>\n{{ d.Commission | sabaCurrency }}</td><td ng-class="{\'warn\' : d.WinLose < 0 }">{{ d.WinLose | sabaCurrency }}</td></tr>\n</tbody><tfoot><tr><td>T\u1ED5ng c\u1ED9ng</td><td>{{ vm.reports | sumOfValue : \'Quantity\' | sabaCurrency }}</td><td>\n{{ vm.reports | sumOfValue : \'Point\' | sabaCurrency }}</td><td>{{ vm.reports | sumOfValue : \'Amount\' | sabaCurrency }}\n</td><td>{{ vm.reports | sumOfValue : \'Commission\' | sabaCurrency }}</td><td \nng-class="{\'warn\' : (vm.reports | sumOfValue : \'WinLose\') < 0 }">\n{{ vm.reports | sumOfValue : \'WinLose\' | sabaCurrency }}</td></tr></tfoot></table></div><div layout="row" \nclass="margin-top-64" layout-align="center center" ng-if="vm.loading"><md-progress-circular class="md-hue-2" \nmd-diameter="40px"></md-progress-circular></div><div ng-if="!vm.reports.length && !vm.loading"><h3 \nclass="text-center padding-top-24">Qu\xFD kh\xE1ch kh\xF4ng c\xF3 b\xE1o bi\u1EC3u trong 2 tu\u1EA7n g\u1EA7n \u0111\xE2y</h3></div></div>');
$templateCache.put('app/main/account/statement/saba/items/items.html','<div id="statement" class="page-layout simple fullwidth" layout="column"><h2 class="primary">\nSao k\xEA - {{ vm.data.SportGroup | SportGroup }}</h2><div ng-if="vm.reports.length"><table \nclass="table one-table casino saba md-primary-bg" ms-responsive-table><thead><tr><th colspan="8">{{ vm.date }}</th></tr>\n<tr><th>M\xE3 c\u01B0\u1EE3c</th><th>V\xE1n ch\u01A1i</th><th ng-if="vm.data.SportGroup !== 3">T\u1EF7 l\u1EC7</th><th>Ti\u1EC1n c\u01B0\u1EE3c</th><th>Th\u1EAFng thua\n</th><th>Tr\u1EA1ng th\xE1i</th></tr></thead><tbody><tr ng-repeat="item in vm.reports"><td class="tx"><div layout="column"><div \nclass="bold">Ref No.{{ item.Tx }}</div><div class="date">{{ item.TxAt | amDateFormat : \'DD/MM/YYYY HH:mm:ss\' }}</div>\n</div></td><td class="event"><div \nng-if="vm.data.SportGroup === 0 && item.SingleParlayData === undefined && item.IsLive === \'1\'" \nng-include="\'app/main/account/statement/saba/items/template/sport-live.html\'"></div><div \nng-if="vm.data.SportGroup === 0 && item.SingleParlayData === undefined && item.IsLive === \'0\' && item.ParlayType !== \'System Parlay\' && item.ParlayType !== \'MixParlay\'" \nng-include="\'app/main/account/statement/saba/items/template/sport-dead.html\'"></div><div \nng-if="vm.data.SportGroup === 0 && item.SingleParlayData === undefined && item.ParlayType === \'System Parlay\'" \nng-include="\'app/main/account/statement/saba/items/template/system-parlay.html\'"></div><div \nng-if="vm.data.SportGroup === 0 && item.SingleParlayData === undefined && item.ParlayType === \'MixParlay\'" \nng-include="\'app/main/account/statement/saba/items/template/mix-parlay.html\'"></div><div \nng-if="vm.data.SportGroup === 0 && item.SingleParlayData !== undefined" \nng-include="\'app/main/account/statement/saba/items/template/single-parlay.html\'"></div><div \nng-if="vm.data.SportGroup === 1" ng-include="\'app/main/account/statement/saba/items/template/number-game.html\'"></div>\n<div ng-if="vm.data.SportGroup === 3" ng-include="\'app/main/account/statement/saba/items/template/arcadia-gaming.html\'">\n</div><div ng-if="vm.data.SportGroup === 2 && item.ParlayData === undefined" \nng-include="\'app/main/account/statement/saba/items/template/virtual-sport.html\'"></div><div \nng-if="vm.data.SportGroup === 2 && item.ParlayData !== undefined" \nng-include="\'app/main/account/statement/saba/items/template/virtual-mix-parlay.html\'"></div><div \nng-if="vm.data.SportGroup === 4 || vm.data.SportGroup === 7" \nng-include="\'app/main/account/statement/saba/items/template/saba-club.html\'"></div><div \nng-if="vm.data.SportGroup === 5 || vm.data.SportGroup === 6" \nng-include="\'app/main/account/statement/saba/items/template/keno.html\'"></div></td><td class="odds" \nng-if="vm.data.SportGroup !== 3"><div class="td-wrap"><div class="box" layout="row" layout-align="end center" \nng-if="item.ParlayType === \'System Parlay\' || item.ParlayType === \'MixParlay\'" \nng-click="vm.ParlayDetails(item, $event)"><span><md-icon md-font-icon="icon-information" class="s24"></md-icon></span>\n</div><div layout="column" layout-align="space-between end" \nng-if="item.ParlayType !== \'System Parlay\' && item.ParlayType !== \'MixParlay\'"><div class="odd" \nng-class="{\'warn\' : item.Odds < 0 }">{{ item.Odds }}</div><div class="odd-type" \nng-if="vm.data.SportGroup === 0 || vm.data.SportGroup === 1 || vm.data.SportGroup === 2">\n{{ item.OddsType | SabaOddsType }}</div></div></div></td><td class="stake"><div class="stake td-wrap">\n{{ item.Stake | sabaCurrency }}</div></td><td class="win-lose"><div layout="column"><div class="bold" \nng-class="{ \'warn\' : item.WinLose < 0 }">{{ item.WinLose | sabaCurrency }}</div><div>\n{{ item.CommissionPercent | sabaCurrency }}% - {{ item.Commission | sabaCurrency }}</div></div></td><td \nclass="ticket-status"><div class="td-wrap"><div class="ticket-status">{{ item.TicketStatus | SabaTicketStatus }}</div>\n<div class="ticket-result" ng-click="vm.ticketResult(item, $event)" \nng-if="vm.data.SportGroup === 0 || vm.data.SportGroup === 1 || vm.data.SportGroup === 2">K\u1EBFt qu\u1EA3</div></div></td></tr>\n</tbody><tfoot ng-if="vm.thereMore"><tr><td colspan="6" class="there-more"><span \nng-click="vm.fetchReport( vm.reports[vm.reports.length - 1].Id );">Xem ti\u1EBFp</span></td></tr></tfoot></table></div><div \nlayout="row" class="margin-top-64" layout-align="center center" ng-if="vm.loading"><md-progress-circular \nclass="md-hue-2" md-diameter="40px"></md-progress-circular></div><div ng-if="!vm.reports.length && !vm.loading"><h3 \nclass="text-center padding-top-24 primary">Qu\xFD kh\xE1ch kh\xF4ng c\xF3 b\xE1o bi\u1EC3u trong 2 tu\u1EA7n g\u1EA7n \u0111\xE2y</h3></div></div>');
$templateCache.put('app/main/account/statement/legendary/date/date.html','<div id="statement" class="page-layout simple fullwidth" layout="column"><h2>Sao k\xEA</h2><div ng-if="vm.reports.length">\n<table class="table one-table" ms-responsive-table><thead><tr><th colspan="7">{{ vm.date }}</th></tr><tr><th \nclass="mw-120">\u0110\xE0i m\u1EDF th\u01B0\u1EDFng</th><th>S\u1ED1 phi\u1EBFu</th><th>T\u1ED5ng \u0111i\u1EC3m</th><th>Ti\u1EC1n c\u01B0\u1EE3c</th><th>Hoa h\u1ED3ng</th><th>Th\u1EAFng thua\n</th></tr></thead><tbody><tr ng-repeat="d in vm.reports"><td><a \nui-sref="app.account.statement.legend.term({game: d.GameType, date: vm.time})">{{ d.GameType | legendGame }}</a></td>\n<td>{{ d.Quantity | sabaCurrency }}</td><td>{{ d.Point | sabaCurrency }}</td><td>{{ d.Amount | sabaCurrency }}</td><td>\n{{ d.Commission | sabaCurrency }}</td><td ng-class="{\'warn\' : d.WinLose < 0 }">{{ d.WinLose | sabaCurrency }}</td></tr>\n</tbody><tfoot><tr><td>T\u1ED5ng c\u1ED9ng</td><td>{{ vm.reports | sumOfValue : \'Quantity\' | sabaCurrency }}</td><td>\n{{ vm.reports | sumOfValue : \'Point\' | sabaCurrency }}</td><td>{{ vm.reports | sumOfValue : \'Amount\' | sabaCurrency }}\n</td><td>{{ vm.reports | sumOfValue : \'Commission\' | sabaCurrency }}</td><td \nng-class="{\'warn\' : (vm.reports | sumOfValue : \'WinLose\') < 0 }">\n{{ vm.reports | sumOfValue : \'WinLose\' | sabaCurrency }}</td></tr></tfoot></table></div><div layout="row" \nclass="margin-top-64" layout-align="center center" ng-if="vm.loading"><md-progress-circular class="md-hue-2" \nmd-diameter="40px"></md-progress-circular></div><div ng-if="!vm.reports.length && !vm.loading"><h3 \nclass="text-center padding-top-24">Qu\xFD kh\xE1ch kh\xF4ng c\xF3 b\xE1o bi\u1EC3u trong 2 tu\u1EA7n g\u1EA7n \u0111\xE2y</h3></div></div>');
$templateCache.put('app/main/account/statement/saba/sport/sport.html','<div id="statement" class="page-layout simple fullwidth" layout="column"><h2 class="primary">Sao k\xEA Bong88</h2><div \nng-if="vm.reports.length"><table class="table one-table md-primary-bg" ms-responsive-table><thead><tr><th colspan="7">\n{{ vm.date }}</th></tr><tr><th class="mw-120">Nh\xF3m th\u1EC3 thao</th><th>S\u1ED1 phi\u1EBFu</th><th>Ti\u1EC1n c\u01B0\u1EE3c</th><th class="mw-120">\nTi\u1EC1n c\u01B0\u1EE3c th\u1EF1c</th><th>Hoa h\u1ED3ng</th><th>Th\u1EAFng thua</th></tr></thead><tbody><tr ng-repeat="d in vm.reports"><td><a \nui-sref="app.account.statement.saba.items({sport: d.SportGroup, date: vm.time})">{{ d.SportGroup | SportGroup }}</a>\n</td><td>{{ d.Quantity | sabaCurrency }}</td><td>{{ d.Amount | sabaCurrency }}</td><td>{{ d.NetAmount | sabaCurrency }}\n</td><td>{{ d.Commission | sabaCurrency }}</td><td ng-class="{\'warn\' : d.WinLose < 0 }">{{ d.WinLose | sabaCurrency }}\n</td></tr></tbody><tfoot><tr><td>T\u1ED5ng c\u1ED9ng</td><td>{{ vm.reports | sumOfValue : \'Quantity\' | sabaCurrency }}</td><td>\n{{ vm.reports | sumOfValue : \'Amount\' | sabaCurrency }}</td><td>\n{{ vm.reports | sumOfValue : \'NetAmount\' | sabaCurrency }}</td><td>\n{{ vm.reports | sumOfValue : \'Commission\' | sabaCurrency }}</td><td \nng-class="{\'warn\' : (vm.reports | sumOfValue : \'WinLose\') < 0 }">\n{{ vm.reports | sumOfValue : \'WinLose\' | sabaCurrency }}</td></tr></tfoot></table></div><div layout="row" \nclass="margin-top-64" layout-align="center center" ng-if="vm.loading"><md-progress-circular class="md-hue-2" \nmd-diameter="40px"></md-progress-circular></div><div ng-if="!vm.reports.length && !vm.loading"><h3 \nclass="text-center padding-top-24 primary">Qu\xFD kh\xE1ch kh\xF4ng c\xF3 b\xE1o bi\u1EC3u trong 2 tu\u1EA7n g\u1EA7n \u0111\xE2y</h3></div></div>');
$templateCache.put('app/main/account/statement/wm-casino/date/date.html','<div id="statement" class="page-layout simple fullwidth" layout="column"><h2 class="primary">Sao k\xEA WM-Casino</h2><div \nng-if="vm.reports.length"><table class="table one-table md-primary-bg" ms-responsive-table><thead><tr><th colspan="7">\n{{ vm.date }}</th></tr><tr><th class="mw-120">Game</th><th>S\u1ED1 phi\u1EBFu</th><th>Ti\u1EC1n c\u01B0\u1EE3c</th><th class="mw-120">\nTi\u1EC1n c\u01B0\u1EE3c th\u1EF1c</th><th>Hoa h\u1ED3ng</th><th>Th\u1EAFng thua</th></tr></thead><tbody><tr ng-repeat="d in vm.reports"><td><a \nui-sref="app.account.statement.wm-casino.game({game: d.GameType, time: vm.time})">{{ d.GameType | WMGame }}</a></td><td>\n{{ d.Quantity | sabaCurrency }}</td><td>{{ d.Amount | sabaCurrency }}</td><td>{{ d.NetAmount | sabaCurrency }}</td><td>\n{{ d.Commission | sabaCurrency }}</td><td ng-class="{\'warn\' : d.WinLose < 0 }">{{ d.WinLose | sabaCurrency }}</td></tr>\n</tbody><tfoot><tr><td>T\u1ED5ng c\u1ED9ng</td><td>{{ vm.reports | sumOfValue : \'Quantity\' | sabaCurrency }}</td><td>\n{{ vm.reports | sumOfValue : \'Amount\' | sabaCurrency }}</td><td>\n{{ vm.reports | sumOfValue : \'NetAmount\' | sabaCurrency }}</td><td>\n{{ vm.reports | sumOfValue : \'Commission\' | sabaCurrency }}</td><td \nng-class="{\'warn\' : (vm.reports | sumOfValue : \'WinLose\') < 0 }">\n{{ vm.reports | sumOfValue : \'WinLose\' | sabaCurrency }}</td></tr></tfoot></table></div><div layout="row" \nclass="margin-top-64" layout-align="center center" ng-if="vm.loading"><md-progress-circular class="md-hue-2" \nmd-diameter="40px"></md-progress-circular></div><div ng-if="!vm.reports.length && !vm.loading"><h3 \nclass="text-center padding-top-24 primary">Qu\xFD kh\xE1ch kh\xF4ng c\xF3 b\xE1o bi\u1EC3u trong 2 tu\u1EA7n g\u1EA7n \u0111\xE2y</h3></div></div>');
$templateCache.put('app/main/account/statement/wm-casino/game/game.html','<div id="statement" class="page-layout simple fullwidth" layout="column"><h2 class="primary">\nSao k\xEA - {{ vm.data.game | WMGame }}</h2><div ng-if="vm.reports.length"><table \nclass="table one-table casino md-primary-bg" ms-responsive-table><thead><tr><th colspan="8">{{ vm.date }}</th></tr><tr>\n<th>M\xE3 c\u01B0\u1EE3c</th><th>V\xE1n ch\u01A1i</th><th>C\u01B0\u1EE3c</th><th>Tr\u1EA1ng th\xE1i</th><th>Ti\u1EC1n c\u01B0\u1EE3c</th><th>Th\u1EAFng thua</th></tr></thead>\n<tbody><tr ng-repeat="d in vm.reports"><td><div layout="column"><div class="bold">Ref No.{{ d.BetId }}</div><div \nclass="date">{{ d.BetAt | amDateFormat : \'DD/MM/YYYY HH:mm:ss\' }}</div></div></td><td><div layout="column"><div \nclass="bold">{{ vm.data.game | WMGame }} - {{ d.TableId }}</div><div>{{ d.Round }}-{{ d.SubRound }}</div></div></td><td>\n{{ d.Bet }}</td><td><div layout="column"><div class="bold">{{ d.GameResult }}</div><div ng-if="d.WinLose < 0" \nclass="warn">Thua</div><div ng-if="d.WinLose > 0" class="win">Th\u1EAFng</div></div></td><td><div layout="column"><div>\n{{ d.Amount| sabaCurrency }}</div><div class="bold">{{ d.NetAmount| sabaCurrency }}</div></div></td><td><div \nlayout="column"><div class="bold" ng-class="{ \'warn\' : d.WinLose < 0 }">{{ d.WinLose | sabaCurrency }}</div><div>\n{{ d.CommissionPercent | sabaCurrency }}% - {{ d.Commission | sabaCurrency }}</div></div></td></tr></tbody><tfoot \nng-if="vm.thereMore"><tr><td colspan="6" class="there-more"><span \nng-click="vm.fetchReport( vm.reports[vm.reports.length - 1].Id );">Xem ti\u1EBFp</span></td></tr></tfoot></table></div><div \nlayout="row" class="margin-top-64" layout-align="center center" ng-if="vm.loading"><md-progress-circular \nclass="md-hue-2" md-diameter="40px"></md-progress-circular></div><div ng-if="!vm.reports.length && !vm.loading"><h3 \nclass="text-center padding-top-24 primary">Qu\xFD kh\xE1ch kh\xF4ng c\xF3 b\xE1o bi\u1EC3u trong 2 tu\u1EA7n g\u1EA7n \u0111\xE2y</h3></div></div>');
$templateCache.put('app/main/traditional/northern-2nd/2d/27lo/27lo.html','<div class="main-game" layout-gt-sm="row" layout="column"><div flex-gt-sm="70" flex="100" class="content-number-wrap">\n<div layout="column" class="content-number md-whiteframe-1dp md-primary-bg"><div class="row-input-numbers"><form \nclass="md-inline-form" ng-submit="vm.submitKeyNumber()" novalidate layout="row"><input type="tel" autocomplete="off" \ngo-focus="vm.focusVar" class="input-numbers-array md-one-input" placeholder="D\xE3y s\u1ED1" ng-model="vm.keynumber" \nng-keyup="vm.inputKeyNumber($event)" tabindex="1" ng-disabled="!$root.allowBetting"><md-button \nclass="md-raised key-number" type="button" ng-click="vm.submitKeyNumber(true)" ng-disabled="!vm.keynumber.length">\nTh\xEAm v\xE0o</md-button></form></div><table><tbody><tr hide show-gt-xs><td><md-checkbox md-no-ink aria-label="Checkbox" \nng-checked="vm.exists(20)" ng-click="vm.groupNumbers(20)" ng-disabled="!$root.allowBetting"></md-checkbox></td><td \ncolspan="10" layout="row" class="row-check"><div layout="row" layout-align="center"><md-checkbox md-no-ink \naria-label="Checkbox" ng-checked="vm.exists(10)" ng-click="vm.groupNumbers(10)" ng-disabled="!$root.allowBetting">\n</md-checkbox></div><div layout="row" layout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" \nng-checked="vm.exists(11)" ng-click="vm.groupNumbers(11)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div \nlayout="row" layout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(12)" \nng-click="vm.groupNumbers(12)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(13)" \nng-click="vm.groupNumbers(13)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(14)" \nng-click="vm.groupNumbers(14)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(15)" \nng-click="vm.groupNumbers(15)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(16)" \nng-click="vm.groupNumbers(16)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(17)" \nng-click="vm.groupNumbers(17)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(18)" \nng-click="vm.groupNumbers(18)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(19)" \nng-click="vm.groupNumbers(19)" ng-disabled="!$root.allowBetting"></md-checkbox></div></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(0)" \nng-click="vm.groupNumbers(0)" ng-disabled="!$root.allowBetting"></md-checkbox></td><td colspan="10" rowspan="10" \nclass="main-number"><div class="repeater-number" ng-repeat="n in vm.numbers"><div class="inner-number md-one-number" \nlayout="column" ng-click="vm.selectNumber(n)" \nng-class="{\'active\' : n.selected, \'changed-price\': n.priceChanged && $root.allowBetting, \'stop\': n.disabled || !$root.allowBetting }">\n<div class="number">{{n.number}}</div><div class="price except md-accent-fg md-hue-1" hide show-gt-xs><span \nng-class="{\'price-up\' : n.price > vm.basePrice, \'zero\' : n.price === 0}">{{n.price | currency : \'\' : 0 }}</span></div>\n</div></div></td></tr><tr><td layout="row" layout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" \nng-checked="vm.exists(1)" ng-click="vm.groupNumbers(1)" ng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr>\n<td layout="row" layout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(2)" \nng-click="vm.groupNumbers(2)" ng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(3)" \nng-click="vm.groupNumbers(3)" ng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(4)" \nng-click="vm.groupNumbers(4)" ng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(5)" \nng-click="vm.groupNumbers(5)" ng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(6)" \nng-click="vm.groupNumbers(6)" ng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(7)" \nng-click="vm.groupNumbers(7)" ng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(8)" \nng-click="vm.groupNumbers(8)" ng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(9)" \nng-click="vm.groupNumbers(9)" ng-disabled="!$root.allowBetting"></md-checkbox></td></tr></tbody></table></div></div><div\n flex-gt-sm="30" flex="100" layout="column" class="main-right-betting-form"><div layout="column" \nclass="betting-form-wrap"><div class="betting-form md-whiteframe-1dp md-primary-bg" layout="column"><div \nclass="betting-form-header"><div layout="row"><div flex="30">\u0110\u1EB7t c\u01B0\u1EE3c</div><div flex="70" class="text-right">\n2D 27 L\xF4 - Mi\u1EC1n B\u1EAFc 2</div></div></div><div class="betting-form-content"><form name="basicForm" class="md-inline-form" \nng-submit="vm.submitBetting()" novalidate><div layout="row" class="padding-top-8"><div \nclass="sub-title padding-right-8" flex="30"><span class="text-boxed-one">S\u1ED1 \u0111i\u1EC3m</span></div><div flex="70" \nlayout="row"><input type="tel" id="bet-input" class="bet-input md-one-input" maxlength="5" ng-model="vm.inputPoint" \nng-currency numeric-only select-on-click ng-disabled="!(vm.numbers | filter : {selected : true}).length" \nautocomplete="off" maxlength="6"></div></div><div layout="row" class="padding-top-8"><div flex="30" \nclass="padding-right-8"><md-button class="betting-button cancel-button md-warn md-raised" \nng-disabled="!(vm.numbers | filter : {selected : true}).length" ng-click="vm.resetBetting()"><md-icon \nmd-font-icon="icon-close"></md-icon></md-button></div><div flex="70"><md-button \nclass="betting-button md-raised md-accent" type="submit" ng-disabled="vm.totalMoney() === 0">\u0110\u1EB7t c\u01B0\u1EE3c</md-button></div>\n</div><div class="ignore-price"><md-checkbox ng-model="vm.ignorePrice" aria-label="Ignore Price">\nKh\xF4ng h\u1ECFi l\u1EA1i khi c\xF3 gi\xE1 thay \u0111\u1ED5i</md-checkbox></div></form><div layout="row" class="padding-top-16"><div \nclass="sub-title" flex="30">T\u1ED5ng \u0111i\u1EC3m</div><div flex="70" class="text-bold">{{vm.sumPoint | currency : \'\' : 0 }}</div>\n</div><div layout="row" class="padding-top-8"><div class="sub-title" flex="30">Th\xE0nh ti\u1EC1n</div><div flex="70" \nclass="text-bold">{{vm.sumMoney | currency : \'\' : 0 }}</div></div><div layout="row" class="padding-top-8" \nng-show="(vm.numbers | filter : {selected : true}).length" ng-click="vm.showFull = !vm.showFull"><div \nclass="sub-title number" ng-class="{\'full\' : vm.showFull}"><div>Danh s\xE1ch</div><span class="md-accent-fg md-hue-1" \nng-repeat="n in vm.numbers | filter : {selected : true}">{{n.number}}<span ng-if="!$last">,&nbsp;</span></span></div>\n</div><div layout="row" class="padding-top-8" ng-if="$root.isAuthenticated"><div class="sub-title secondary" flex="30">\nC\u01B0\u1EE3c t\u1ED1i \u0111a</div><div flex="70" class="text-bold sub-title secondary">{{vm.purchaseLimit | currency : \'\' : 0 }} \u0110i\u1EC3m\n</div></div><div layout="row" class="balance" ng-if="$root.isAuthenticated"><div class="sub-title secondary" flex="30">\nS\u1ED1 d\u01B0</div><div flex="70" class="text-bold sub-title secondary" layout="row" layout-align="space-between center">\n{{ $root.User.Balance | currency : \'\' : 0 }}<md-button class="md-icon-button" ng-click="$root.updateBalance()" \nng-disabled="$root.User.updating"><md-icon md-font-icon="icon-refresh" class="s16" \nng-class="{\'rotating\' : $root.User.updating }"></md-icon></md-button></div></div></div></div></div><div layout="column" \nclass="recent-betting-list" ng-include="\'app/main/traditional/betting/recent-ticket.html\'" \nng-show="$root.latestTicket.length"></div></div></div>');
$templateCache.put('app/main/traditional/northern-2nd/2d/row-bet/row-bet.html','<div class="main-game" layout="row"><div layout="column" class="row-bet-southern md-whiteframe-1dp md-primary-bg" \nflex="70"><div class="table-wrap"><table class="table"><thead><tr><th rowspan="2">S\u1ED1</th><th colspan="4">2D</th><th \nrowspan="2">Th\xE0nh ti\u1EC1n</th></tr><tr><th>\u0110\u1EA7u</th><th>\u0110u\xF4i</th><th>\u0110\u1EA7u \u0110u\xF4i</th><th>27 L\xF4</th></tr></thead><tbody><tr \nng-repeat="row in vm.rowsBets"><td>{{row.name}}</td><td><input type="text" class="md-one-input" maxlength="5" \nng-model="row.point[7]" ng-currency numeric-only select-on-click ng-class="{\'transparent\': row.point[7] === 0 }"></td>\n<td><input type="text" class="md-one-input force-disabled" disabled="disabled" maxlength="5" ng-model="row.point[8]" \nng-currency numeric-only select-on-click ng-class="{\'transparent\': row.point[8] === 0 }"></td><td><input type="text" \nclass="md-one-input force-disabled" disabled="disabled" maxlength="5" ng-model="row.point[78]" ng-currency numeric-only \nselect-on-click ng-class="{\'transparent\': row.point[78] === 0 }"></td><td><input type="text" \nclass="md-one-input force-disabled" disabled="disabled" maxlength="5" ng-model="row.point[9]" ng-currency numeric-only \nselect-on-click ng-class="{\'transparent\': row.point[9] === 0 }"></td><td class="width-150">\n{{ row.money | currency : \'\' : 0 }}</td></tr></tbody><tfoot><tr><td colspan="5">T\u1ED5ng ti\u1EC1n</td><td>\n{{ vm.sumMoney | currency : \'\' : 0 }}</td></tr></tfoot></table></div></div><div flex="30" \nclass="row-bet main-right-betting-form" layout="column"><div layout="column" class="betting-form-wrap"><div \nclass="betting-form"><div class="betting-form-content" layout="row"><div flex="30" class="padding-right-8"><md-button \nclass="betting-button cancel-button md-warn md-raised" ng-disabled="vm.checkDisabledReset()" ng-click="vm.declareRow()">\n<md-icon md-font-icon="icon-close" class="s20"></md-icon></md-button></div><div flex="70"><md-button \nclass="betting-button md-raised md-accent" ng-click="vm.submitBetting()" ng-disabled="vm.totalMoney() === 0">\u0110\u1EB7t c\u01B0\u1EE3c\n</md-button></div></div></div></div><div layout="column" class="recent-betting-list" \nng-include="\'app/main/traditional/betting/recent-ticket.html\'" ng-show="$root.latestTicket.length"></div></div></div>');
$templateCache.put('app/main/traditional/northern-2nd/2d/dau-duoi/dau-duoi.html','<div class="main-game" layout-gt-sm="row" layout="column"><div flex-gt-sm="70" flex="100" layout="column" \nclass="content-number-wrap"><div layout="column" class="content-number md-whiteframe-1dp md-primary-bg"><div \nclass="row-input-numbers"><form class="md-inline-form" ng-submit="vm.submitKeyNumber()" novalidate layout="row"><input \ntype="tel" autocomplete="off" go-focus="vm.focusVar" class="input-numbers-array md-one-input" placeholder="D\xE3y s\u1ED1" \nng-model="vm.keynumber" ng-keyup="vm.inputKeyNumber($event)" tabindex="1" ng-disabled="!$root.allowBetting"><md-button \nclass="md-raised key-number" type="button" ng-click="vm.submitKeyNumber(true)" ng-disabled="!vm.keynumber.length">\nTh\xEAm v\xE0o</md-button></form></div><table><tbody><tr hide show-gt-xs><td><md-checkbox md-no-ink aria-label="Checkbox" \nng-checked="vm.exists(20)" ng-click="vm.groupNumbers(20)" ng-disabled="!$root.allowBetting"></md-checkbox></td><td \ncolspan="10" layout="row" class="row-check"><div layout="row" layout-align="center"><md-checkbox md-no-ink \naria-label="Checkbox" ng-checked="vm.exists(10)" ng-click="vm.groupNumbers(10)" ng-disabled="!$root.allowBetting">\n</md-checkbox></div><div layout="row" layout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" \nng-checked="vm.exists(11)" ng-click="vm.groupNumbers(11)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div \nlayout="row" layout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(12)" \nng-click="vm.groupNumbers(12)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(13)" \nng-click="vm.groupNumbers(13)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(14)" \nng-click="vm.groupNumbers(14)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(15)" \nng-click="vm.groupNumbers(15)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(16)" \nng-click="vm.groupNumbers(16)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(17)" \nng-click="vm.groupNumbers(17)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(18)" \nng-click="vm.groupNumbers(18)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(19)" \nng-click="vm.groupNumbers(19)" ng-disabled="!$root.allowBetting"></md-checkbox></div></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(0)" \nng-click="vm.groupNumbers(0)" ng-disabled="!$root.allowBetting"></md-checkbox></td><td colspan="10" rowspan="10" \nclass="main-number"><div class="repeater-number" ng-repeat="n in vm.numbers"><div class="inner-number md-one-number" \nlayout="column" ng-click="vm.selectNumber(n)" \nng-class="{\'active\' : n.selected,  \'changed-price\': n.priceChanged[vm.betID] && $root.allowBetting, \'stop\': n.disabled[vm.betID] || !$root.allowBetting }">\n<div class="number">{{n.number}}</div><div class="price except md-accent-fg md-hue-1"><span \nng-class="{\'price-up\' : n.price[vm.betID] > vm.basePrice, \'zero\' : n.price[vm.betID] === 0}">\n{{n.price[vm.betID] | currency : \'\' : 0 }}</span></div></div></div></td></tr><tr><td layout="row" layout-align="center">\n<md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(1)" ng-click="vm.groupNumbers(1)" \nng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" layout-align="center"><md-checkbox \nmd-no-ink aria-label="Checkbox" ng-checked="vm.exists(2)" ng-click="vm.groupNumbers(2)" \nng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" layout-align="center"><md-checkbox \nmd-no-ink aria-label="Checkbox" ng-checked="vm.exists(3)" ng-click="vm.groupNumbers(3)" \nng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" layout-align="center"><md-checkbox \nmd-no-ink aria-label="Checkbox" ng-checked="vm.exists(4)" ng-click="vm.groupNumbers(4)" \nng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" layout-align="center"><md-checkbox \nmd-no-ink aria-label="Checkbox" ng-checked="vm.exists(5)" ng-click="vm.groupNumbers(5)" \nng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" layout-align="center"><md-checkbox \nmd-no-ink aria-label="Checkbox" ng-checked="vm.exists(6)" ng-click="vm.groupNumbers(6)" \nng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" layout-align="center"><md-checkbox \nmd-no-ink aria-label="Checkbox" ng-checked="vm.exists(7)" ng-click="vm.groupNumbers(7)" \nng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" layout-align="center"><md-checkbox \nmd-no-ink aria-label="Checkbox" ng-checked="vm.exists(8)" ng-click="vm.groupNumbers(8)" \nng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" layout-align="center"><md-checkbox \nmd-no-ink aria-label="Checkbox" ng-checked="vm.exists(9)" ng-click="vm.groupNumbers(9)" \nng-disabled="!$root.allowBetting"></md-checkbox></td></tr></tbody></table></div></div><div flex-gt-sm="30" flex="100" \nlayout="column" class="main-right-betting-form"><div layout="column" class="betting-form-wrap"><div \nclass="betting-form md-whiteframe-1dp md-primary-bg" layout="column"><div class="betting-form-header"><div layout="row">\n<div flex="30">\u0110\u1EB7t c\u01B0\u1EE3c</div><div flex="70" class="text-right">2D \u0110\u1EA7u - Mi\u1EC1n B\u1EAFc 2</div></div></div><div \nclass="betting-form-content"><form name="basicForm" class="md-inline-form" ng-submit="vm.submitBetting()" novalidate>\n<div layout="row" class="padding-top-8"><div class="sub-title padding-right-8" flex="30"><span class="text-boxed-one">\nS\u1ED1 \u0111i\u1EC3m</span></div><div flex="70" layout="row"><div flex="100" class="bet-input-1"><input type="tel" \nclass="bet-input md-one-input" maxlength="5" ng-model="vm.inputPointDau" ng-currency numeric-only select-on-click \nng-disabled="!(vm.numbers | filter : {selected : true}).length" autocomplete="off" tabindex="2"></div></div></div><div \nlayout="row" class="padding-top-8"><div flex="30" class="padding-right-8"><md-button \nclass="betting-button cancel-button md-warn md-raised" ng-disabled="!(vm.numbers | filter : {selected : true}).length" \nng-click="vm.resetBetting()"><md-icon md-font-icon="icon-close" class="s20"></md-icon></md-button></div><div flex="70">\n<md-button class="betting-button md-raised md-accent" type="submit" ng-disabled="vm.totalMoney() === 0">\u0110\u1EB7t c\u01B0\u1EE3c\n</md-button></div></div><div class="ignore-price"><md-checkbox ng-model="vm.ignorePrice" aria-label="Ignore Price">\nKh\xF4ng h\u1ECFi l\u1EA1i khi c\xF3 gi\xE1 thay \u0111\u1ED5i</md-checkbox></div></form><div layout="row" class="padding-top-16"><div \nclass="sub-title" flex="30">T\u1ED5ng \u0111i\u1EC3m</div><div flex="70" class="text-bold">{{vm.sumPoint | currency : \'\' : 0 }}</div>\n</div><div layout="row" class="padding-top-8"><div class="sub-title" flex="30">Th\xE0nh ti\u1EC1n</div><div flex="70" \nclass="text-bold">{{vm.sumMoney | currency : \'\' : 0 }}</div></div><div layout="row" class="padding-top-8" \nng-show="(vm.numbers | filter : {selected : true}).length" ng-click="vm.showFull = !vm.showFull"><div \nclass="sub-title number" ng-class="{\'full\' : vm.showFull}"><div>Danh s\xE1ch</div><span class="md-accent-fg md-hue-1" \nng-repeat="n in vm.numbers | filter : {selected : true}">{{n.number}}<span ng-if="!$last">,&nbsp;</span></span></div>\n</div><div layout="row" class="padding-top-8" ng-if="$root.isAuthenticated"><div class="sub-title secondary" flex="30">\nT\u1ED1i \u0111a</div><div flex="70" class="text-bold sub-title secondary">{{vm.purchaseLimit | currency : \'\' : 0 }} \u0110i\u1EC3m</div>\n</div><div layout="row" class="balance" ng-if="$root.isAuthenticated"><div class="sub-title secondary" flex="30">S\u1ED1 d\u01B0\n</div><div flex="70" class="text-bold sub-title secondary" layout="row" layout-align="space-between center">\n{{ $root.User.Balance | currency : \'\' : 0 }}<md-button class="md-icon-button" ng-click="$root.updateBalance()" \nng-disabled="$root.User.updating"><md-icon md-font-icon="icon-refresh" class="s16" \nng-class="{\'rotating\' : $root.User.updating }"></md-icon></md-button></div></div></div></div></div><div layout="column" \nclass="recent-betting-list" ng-include="\'app/main/traditional/betting/recent-ticket.html\'" \nng-show="$root.latestTicket.length"></div></div></div>');
$templateCache.put('app/main/traditional/northern-2nd/4d/duoi/duoi.html','<div class="main-game" layout-gt-sm="row" layout="column"><div flex-gt-sm="70" flex="100" class="content-number-wrap">\n<div layout="column" class="content-number md-whiteframe-1dp md-primary-bg"><div class="navi-button margin-bottom-8">\n<div flex class="number-filter-4d" layout="row"><md-button class="md-raised" ns-popover ns-popover-template="popooxx" \nns-popover-placement="bottom" ns-popover-hide-on-inside-click="true" ns-popover-theme="ns-popover-tooltip-theme">OOXX\n</md-button><md-button class="md-raised" ns-popover ns-popover-template="popoxxo" ns-popover-placement="bottom" \nns-popover-hide-on-inside-click="true" ns-popover-theme="ns-popover-tooltip-theme">OXXO</md-button><md-button \nclass="md-raised" ns-popover ns-popover-template="popoxox" ns-popover-placement="bottom" \nns-popover-hide-on-inside-click="true" ns-popover-theme="ns-popover-tooltip-theme">OXOX</md-button><md-button \nclass="md-raised" ns-popover ns-popover-template="popxoxo" ns-popover-placement="bottom" \nns-popover-hide-on-inside-click="true" ns-popover-theme="ns-popover-tooltip-theme">XOXO</md-button><md-button \nclass="md-raised" ns-popover ns-popover-template="popxoox" ns-popover-placement="bottom" \nns-popover-hide-on-inside-click="true" ns-popover-theme="ns-popover-tooltip-theme">XOOX</md-button><md-button \nclass="md-raised" ns-popover ns-popover-template="popxxoo" ns-popover-placement="bottom" \nns-popover-hide-on-inside-click="true" ns-popover-theme="ns-popover-tooltip-theme">XXOO</md-button></div></div><table>\n<tbody><tr hide show-gt-xs><td></td><td colspan="10" layout="row" class="row-check"><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(10)" \nng-click="vm.groupNumbers(10)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(11)" \nng-click="vm.groupNumbers(11)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(12)" \nng-click="vm.groupNumbers(12)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(13)" \nng-click="vm.groupNumbers(13)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(14)" \nng-click="vm.groupNumbers(14)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(15)" \nng-click="vm.groupNumbers(15)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(16)" \nng-click="vm.groupNumbers(16)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(17)" \nng-click="vm.groupNumbers(17)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(18)" \nng-click="vm.groupNumbers(18)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(19)" \nng-click="vm.groupNumbers(19)" ng-disabled="!$root.allowBetting"></md-checkbox></div></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(0)" \nng-click="vm.groupNumbers(0)" ng-disabled="!$root.allowBetting"></md-checkbox></td><td colspan="10" rowspan="10" \nclass="main-number"><div class="repeater-number" ng-repeat="n in vm.numbers"><div class="inner-number md-one-number" \nlayout="column" ng-click="vm.selectNumber(n)" \nng-class="{\'active\' : n.selected, \'changed-price\': n.priceChanged && $root.allowBetting, \'stop\': n.disabled || !$root.allowBetting}">\n<div class="number d4">{{n.number}}</div><div class="price except md-accent-fg md-hue-1"><span \nng-class="{\'price-up\' : n.price > vm.basePrice, \'zero\' : n.price === 0}">{{n.price | currency : \'\' : 0 }}</span></div>\n</div></div></td></tr><tr><td layout="row" layout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" \nng-checked="vm.exists(1)" ng-click="vm.groupNumbers(1)" ng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr>\n<td layout="row" layout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(2)" \nng-click="vm.groupNumbers(2)" ng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(3)" \nng-click="vm.groupNumbers(3)" ng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(4)" \nng-click="vm.groupNumbers(4)" ng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(5)" \nng-click="vm.groupNumbers(5)" ng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(6)" \nng-click="vm.groupNumbers(6)" ng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(7)" \nng-click="vm.groupNumbers(7)" ng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(8)" \nng-click="vm.groupNumbers(8)" ng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(9)" \nng-click="vm.groupNumbers(9)" ng-disabled="!$root.allowBetting"></md-checkbox></td></tr></tbody></table></div></div><div\n flex-gt-sm="30" flex="100" layout="column" class="main-right-betting-form"><div layout="column" \nclass="betting-form-wrap"><div class="betting-form md-whiteframe-1dp md-primary-bg" layout="column"><div \nclass="betting-form-header"><div layout="row"><div flex="30">\u0110\u1EB7t c\u01B0\u1EE3c</div><div flex="70" class="text-right">\n{{vm.betID | bet}} - Mi\u1EC1n B\u1EAFc 2</div></div></div><div class="betting-form-content"><form name="basicForm" \nclass="md-inline-form" ng-submit="vm.submitBetting()" novalidate><div layout="row" class="padding-top-8"><div \nclass="sub-title padding-right-8" flex="30"><span class="text-boxed-one">S\u1ED1 \u0111i\u1EC3m</span></div><div flex="70" \nlayout="row"><input type="tel" class="bet-input md-one-input" ng-model="vm.inputPoint" ng-currency numeric-only \nselect-on-click ng-disabled="!(vm.numbers | filter : {selected : true}).length" autocomplete="off" maxlength="5"></div>\n</div><div layout="row" class="padding-top-8"><div flex="30" class="padding-right-8"><md-button \nclass="betting-button cancel-button md-warn md-raised" ng-disabled="!(vm.numbers | filter : {selected : true}).length" \nng-click="vm.resetBetting()"><md-icon md-font-icon="icon-close" class="s20"></md-icon></md-button></div><div flex="70">\n<md-button class="betting-button md-raised md-accent" type="submit" ng-disabled="vm.totalMoney() === 0">\u0110\u1EB7t c\u01B0\u1EE3c\n</md-button></div></div><div class="ignore-price"><md-checkbox ng-model="vm.ignorePrice" aria-label="Ignore Price">\nKh\xF4ng h\u1ECFi l\u1EA1i khi c\xF3 gi\xE1 thay \u0111\u1ED5i</md-checkbox></div></form><div layout="row" class="padding-top-16"><div \nclass="sub-title" flex="30">T\u1ED5ng \u0111i\u1EC3m</div><div flex="70" class="text-bold">{{vm.sumPoint | currency : \'\' : 0 }}</div>\n</div><div layout="row" class="padding-top-8"><div class="sub-title" flex="30">Th\xE0nh ti\u1EC1n</div><div flex="70" \nclass="text-bold">{{vm.sumMoney | currency : \'\' : 0 }}</div></div><div layout="row" class="padding-top-8" \nng-show="(vm.numbers | filter : {selected : true}).length" ng-click="vm.showFull = !vm.showFull"><div \nclass="sub-title number" ng-class="{\'full\' : vm.showFull}"><div>Danh s\xE1ch</div><span class="md-accent-fg md-hue-1" \nng-repeat="n in vm.numbers | filter : {selected : true}">{{n.number}}<span ng-if="!$last">,&nbsp;</span></span></div>\n</div><div layout="row" class="padding-top-8" ng-if="$root.isAuthenticated"><div class="sub-title secondary" flex="30">\nT\u1ED1i \u0111a</div><div flex="70" class="text-bold sub-title secondary">{{vm.purchaseLimit | currency : \'\' : 0 }} \u0110i\u1EC3m</div>\n</div><div layout="row" class="balance" ng-if="$root.isAuthenticated"><div class="sub-title secondary" flex="30">S\u1ED1 d\u01B0\n</div><div flex="70" class="text-bold sub-title secondary" layout="row" layout-align="space-between center">\n{{ $root.User.Balance | currency : \'\' : 0 }}<md-button class="md-icon-button" ng-click="$root.updateBalance()" \nng-disabled="$root.User.updating"><md-icon md-font-icon="icon-refresh" class="s16" \nng-class="{\'rotating\' : $root.User.updating }"></md-icon></md-button></div></div></div></div></div><div layout="column" \nclass="recent-betting-list" ng-include="\'app/main/traditional/betting/recent-ticket.html\'" \nng-show="$root.latestTicket.length"></div></div></div><script type="text/ng-template" id="popooxx">\n<div class="triangle"></div>    <div class="ns-popover-tooltip">\n        <div layout="column" class="panel">\n            <div class="header" layout="row" layout-align="space-between center">\n                <h3>OOXX</h3>\n                <md-button class="md-icon-button"><md-icon md-font-icon="icon-close" ng-click="hidePopover()"></md-icon></md-button>\n            </div>\n            <div class="content">\n                <md-button ng-repeat="pop in vm.popooxx" md-no-ink ng-class="{\'md-warn\': vm.cond4d.name === pop.name}" ng-click="vm.changeLabel(pop)">{{pop.name}}</md-button>\n            </div>\n        </div>\n    </div></script><script type="text/ng-template" id="popoxxo"><div class="triangle"></div>\n    <div class="ns-popover-tooltip">\n        <div layout="column" class="panel">\n            <div class="header" layout="row" layout-align="space-between center">\n                <h3>OXXO</h3>\n                <md-button class="md-icon-button"><md-icon md-font-icon="icon-close" ng-click="hidePopover()"></md-icon></md-button>\n            </div>\n            <div class="content">\n                <md-button ng-repeat="pop in vm.popoxxo" md-no-ink ng-class="{\'md-warn\': vm.cond4d.name === pop.name}" ng-click="vm.changeLabel(pop)">{{pop.name}}</md-button>\n            </div>\n        </div>\n    </div></script><script type="text/ng-template" id="popoxox"><div class="triangle"></div>\n    <div class="ns-popover-tooltip">\n        <div layout="column" class="panel">\n            <div class="header" layout="row" layout-align="space-between center">\n                <h3>OXOX</h3>\n                <md-button class="md-icon-button"><md-icon md-font-icon="icon-close" ng-click="hidePopover()"></md-icon></md-button>\n            </div>\n            <div class="content">\n                <md-button ng-repeat="pop in vm.popoxox" md-no-ink ng-class="{\'md-warn\': vm.cond4d.name === pop.name}" ng-click="vm.changeLabel(pop)">{{pop.name}}</md-button>\n            </div>\n        </div>\n    </div></script><script type="text/ng-template" id="popxoxo"><div class="triangle"></div>\n    <div class="ns-popover-tooltip">\n        <div layout="column" class="panel">\n            <div class="header" layout="row" layout-align="space-between center">\n                <h3>XOXO</h3>\n                <md-button class="md-icon-button"><md-icon md-font-icon="icon-close" ng-click="hidePopover()"></md-icon></md-button>\n            </div>\n            <div class="content">\n                <md-button ng-repeat="pop in vm.popxoxo" md-no-ink ng-class="{\'md-warn\': vm.cond4d.name === pop.name}" ng-click="vm.changeLabel(pop)">{{pop.name}}</md-button>\n            </div>\n        </div>\n    </div></script><script type="text/ng-template" id="popxoox"><div class="triangle"></div>\n    <div class="ns-popover-tooltip">\n        <div layout="column" class="panel">\n            <div class="header" layout="row" layout-align="space-between center">\n                <h3>XOOX</h3>\n                <md-button class="md-icon-button"><md-icon md-font-icon="icon-close" ng-click="hidePopover()"></md-icon></md-button>\n            </div>\n            <div class="content">\n                <md-button ng-repeat="pop in vm.popxoox" md-no-ink ng-class="{\'md-warn\': vm.cond4d.name === pop.name}" ng-click="vm.changeLabel(pop)">{{pop.name}}</md-button>\n            </div>\n        </div>\n    </div></script><script type="text/ng-template" id="popxxoo"><div class="triangle"></div>\n    <div class="ns-popover-tooltip">\n        <div layout="column" class="panel">\n            <div class="header" layout="row" layout-align="space-between center">\n                <h3>XXOO</h3>\n                <md-button class="md-icon-button"><md-icon md-font-icon="icon-close" ng-click="hidePopover()"></md-icon></md-button>\n            </div>\n            <div class="content">\n                <md-button ng-repeat="pop in vm.popxxoo" md-no-ink ng-class="{\'md-warn\': vm.cond4d.name === pop.name}" ng-click="vm.changeLabel(pop)">{{pop.name}}</md-button>\n            </div>\n        </div>\n    </div></script>');
$templateCache.put('app/main/traditional/northern-2nd/3d/23lo/23lo.html','<div class="main-game" layout-gt-sm="row" layout="column"><div flex-gt-sm="70" flex="100" class="content-number-wrap">\n<div layout="column" class="content-number md-whiteframe-1dp md-primary-bg"><div class="number-filter" layout="row" \nlayout-xs="column"><div layout="row" class="hundreds"><span class="label">\u0110\u1EA7u</span> <span ng-click="vm.changeLabel(0)" \nng-class="{\'active\': vm.label === 0}">0</span> <span ng-click="vm.changeLabel(1)" ng-class="{\'active\': vm.label === 1}">\n1</span> <span ng-click="vm.changeLabel(2)" ng-class="{\'active\': vm.label === 2}">2</span> <span \nng-click="vm.changeLabel(3)" ng-class="{\'active\': vm.label === 3}">3</span> <span ng-click="vm.changeLabel(4)" \nng-class="{\'active\': vm.label === 4}">4</span> <span ng-click="vm.changeLabel(5)" ng-class="{\'active\': vm.label === 5}">\n5</span> <span ng-click="vm.changeLabel(6)" ng-class="{\'active\': vm.label === 6}">6</span> <span \nng-click="vm.changeLabel(7)" ng-class="{\'active\': vm.label === 7}">7</span> <span ng-click="vm.changeLabel(8)" \nng-class="{\'active\': vm.label === 8}">8</span> <span ng-click="vm.changeLabel(9)" ng-class="{\'active\': vm.label === 9}">\n9</span></div><div layout="row" class="hundreds"><span class="label">Gi\u1EEFa</span> <span ng-click="vm.changeLabel(10)" \nng-class="{\'active\': vm.label === 10}">0</span> <span ng-click="vm.changeLabel(11)" \nng-class="{\'active\': vm.label === 11}">1</span> <span ng-click="vm.changeLabel(12)" \nng-class="{\'active\': vm.label === 12}">2</span> <span ng-click="vm.changeLabel(13)" \nng-class="{\'active\': vm.label === 13}">3</span> <span ng-click="vm.changeLabel(14)" \nng-class="{\'active\': vm.label === 14}">4</span> <span ng-click="vm.changeLabel(15)" \nng-class="{\'active\': vm.label === 15}">5</span> <span ng-click="vm.changeLabel(16)" \nng-class="{\'active\': vm.label === 16}">6</span> <span ng-click="vm.changeLabel(17)" \nng-class="{\'active\': vm.label === 17}">7</span> <span ng-click="vm.changeLabel(18)" \nng-class="{\'active\': vm.label === 18}">8</span> <span ng-click="vm.changeLabel(19)" \nng-class="{\'active\': vm.label === 19}">9</span></div></div><table><tbody><tr hide show-gt-xs><td></td><td colspan="10" \nlayout="row" class="row-check"><div layout="row" layout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" \nng-checked="vm.exists(10)" ng-click="vm.groupNumbers(10)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div \nlayout="row" layout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(11)" \nng-click="vm.groupNumbers(11)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(12)" \nng-click="vm.groupNumbers(12)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(13)" \nng-click="vm.groupNumbers(13)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(14)" \nng-click="vm.groupNumbers(14)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(15)" \nng-click="vm.groupNumbers(15)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(16)" \nng-click="vm.groupNumbers(16)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(17)" \nng-click="vm.groupNumbers(17)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(18)" \nng-click="vm.groupNumbers(18)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(19)" \nng-click="vm.groupNumbers(19)" ng-disabled="!$root.allowBetting"></md-checkbox></div></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(0)" \nng-click="vm.groupNumbers(0)" ng-disabled="!$root.allowBetting"></md-checkbox></td><td colspan="10" rowspan="10" \nclass="main-number"><div class="repeater-number" ng-repeat="n in vm.numbers"><div class="inner-number md-one-number" \nlayout="column" ng-click="vm.selectNumber(n)" \nng-class="{\'active\' : n.selected, \'changed-price\': n.priceChanged && $root.allowBetting, \'stop\': n.disabled || !$root.allowBetting}">\n<div class="number d3">{{n.number}}</div><div class="price except md-accent-fg md-hue-1"><span \nng-class="{\'price-up\' : n.price > vm.basePrice, \'zero\' : n.price === 0}">{{n.price | currency : \'\' : 0 }}</span></div>\n</div></div></td></tr><tr><td layout="row" layout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" \nng-checked="vm.exists(1)" ng-click="vm.groupNumbers(1)" ng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr>\n<td layout="row" layout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(2)" \nng-click="vm.groupNumbers(2)" ng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(3)" \nng-click="vm.groupNumbers(3)" ng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(4)" \nng-click="vm.groupNumbers(4)" ng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(5)" \nng-click="vm.groupNumbers(5)" ng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(6)" \nng-click="vm.groupNumbers(6)" ng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(7)" \nng-click="vm.groupNumbers(7)" ng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(8)" \nng-click="vm.groupNumbers(8)" ng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(9)" \nng-click="vm.groupNumbers(9)" ng-disabled="!$root.allowBetting"></md-checkbox></td></tr></tbody></table></div></div><div\n flex-gt-sm="30" flex="100" layout="column" class="main-right-betting-form"><div layout="column" \nclass="betting-form-wrap"><div class="betting-form md-whiteframe-1dp md-primary-bg" layout="column"><div \nclass="betting-form-header"><div layout="row"><div flex="30">\u0110\u1EB7t c\u01B0\u1EE3c</div><div flex="70" class="text-right">\n3D 23 L\xF4 - Mi\u1EC1n B\u1EAFc 2</div></div></div><div class="betting-form-content"><form name="basicForm" class="md-inline-form" \nng-submit="vm.submitBetting()" novalidate><div layout="row" class="padding-top-8"><div \nclass="sub-title padding-right-8" flex="30"><span class="text-boxed-one">S\u1ED1 \u0111i\u1EC3m</span></div><div flex="70" \nlayout="row"><input type="tel" class="bet-input md-one-input" ng-model="vm.inputPoint" maxlength="5" ng-currency \nnumeric-only select-on-click ng-disabled="!(vm.numbers | filter : {selected : true}).length" autocomplete="off" \nmaxlength="6"></div></div><div layout="row" class="padding-top-8"><div flex="30" class="padding-right-8"><md-button \nclass="betting-button cancel-button md-warn md-raised" ng-disabled="!(vm.numbers | filter : {selected : true}).length" \nng-click="vm.resetBetting()"><md-icon md-font-icon="icon-close" class="s20"></md-icon></md-button></div><div flex="70">\n<md-button class="betting-button md-raised md-accent" type="submit" ng-disabled="vm.totalMoney() === 0">\u0110\u1EB7t c\u01B0\u1EE3c\n</md-button></div></div><div class="ignore-price"><md-checkbox ng-model="vm.ignorePrice" aria-label="Ignore Price">\nKh\xF4ng h\u1ECFi l\u1EA1i khi c\xF3 gi\xE1 thay \u0111\u1ED5i</md-checkbox></div></form><div layout="row" class="padding-top-16"><div \nclass="sub-title" flex="30">T\u1ED5ng \u0111i\u1EC3m</div><div flex="70" class="text-bold">{{vm.sumPoint | currency : \'\' : 0 }}</div>\n</div><div layout="row" class="padding-top-8"><div class="sub-title" flex="30">Th\xE0nh ti\u1EC1n</div><div flex="70" \nclass="text-bold">{{vm.sumMoney | currency : \'\' : 0 }}</div></div><div layout="row" class="padding-top-8" \nng-show="(vm.numbers | filter : {selected : true}).length" ng-click="vm.showFull = !vm.showFull"><div \nclass="sub-title number" ng-class="{\'full\' : vm.showFull}"><div>Danh s\xE1ch</div><span class="md-accent-fg md-hue-1" \nng-repeat="n in vm.numbers | filter : {selected : true}">{{n.number}}<span ng-if="!$last">,&nbsp;</span></span></div>\n</div><div layout="row" class="padding-top-8" ng-if="$root.isAuthenticated"><div class="sub-title secondary" flex="30">\nT\u1ED1i \u0111a</div><div flex="70" class="text-bold sub-title secondary">{{vm.purchaseLimit | currency : \'\' : 0 }} \u0110i\u1EC3m</div>\n</div><div layout="row" class="balance" ng-if="$root.isAuthenticated"><div class="sub-title secondary" flex="30">S\u1ED1 d\u01B0\n</div><div flex="70" class="text-bold sub-title secondary" layout="row" layout-align="space-between center">\n{{ $root.User.Balance | currency : \'\' : 0 }}<md-button class="md-icon-button" ng-click="$root.updateBalance()" \nng-disabled="$root.User.updating"><md-icon md-font-icon="icon-refresh" class="s16" \nng-class="{\'rotating\' : $root.User.updating }"></md-icon></md-button></div></div></div></div></div><div layout="column" \nclass="recent-betting-list" ng-include="\'app/main/traditional/betting/recent-ticket.html\'" \nng-show="$root.latestTicket.length"></div></div></div>');
$templateCache.put('app/main/traditional/northern-2nd/3d/dauduoi/dauduoi.html','<div class="main-game" layout-gt-sm="row" layout="column"><div flex-gt-sm="70" flex="100" class="content-number-wrap">\n<div layout="column" class="content-number md-whiteframe-1dp md-primary-bg"><div class="number-filter" layout="row" \nlayout-xs="column"><div layout="row" class="hundreds"><span class="label">\u0110\u1EA7u</span> <span ng-click="vm.changeLabel(0)" \nng-class="{\'active\': vm.label === 0}">0</span> <span ng-click="vm.changeLabel(1)" ng-class="{\'active\': vm.label === 1}">\n1</span> <span ng-click="vm.changeLabel(2)" ng-class="{\'active\': vm.label === 2}">2</span> <span \nng-click="vm.changeLabel(3)" ng-class="{\'active\': vm.label === 3}">3</span> <span ng-click="vm.changeLabel(4)" \nng-class="{\'active\': vm.label === 4}">4</span> <span ng-click="vm.changeLabel(5)" ng-class="{\'active\': vm.label === 5}">\n5</span> <span ng-click="vm.changeLabel(6)" ng-class="{\'active\': vm.label === 6}">6</span> <span \nng-click="vm.changeLabel(7)" ng-class="{\'active\': vm.label === 7}">7</span> <span ng-click="vm.changeLabel(8)" \nng-class="{\'active\': vm.label === 8}">8</span> <span ng-click="vm.changeLabel(9)" ng-class="{\'active\': vm.label === 9}">\n9</span></div><div layout="row" class="hundreds"><span class="label">Gi\u1EEFa</span> <span ng-click="vm.changeLabel(10)" \nng-class="{\'active\': vm.label === 10}">0</span> <span ng-click="vm.changeLabel(11)" \nng-class="{\'active\': vm.label === 11}">1</span> <span ng-click="vm.changeLabel(12)" \nng-class="{\'active\': vm.label === 12}">2</span> <span ng-click="vm.changeLabel(13)" \nng-class="{\'active\': vm.label === 13}">3</span> <span ng-click="vm.changeLabel(14)" \nng-class="{\'active\': vm.label === 14}">4</span> <span ng-click="vm.changeLabel(15)" \nng-class="{\'active\': vm.label === 15}">5</span> <span ng-click="vm.changeLabel(16)" \nng-class="{\'active\': vm.label === 16}">6</span> <span ng-click="vm.changeLabel(17)" \nng-class="{\'active\': vm.label === 17}">7</span> <span ng-click="vm.changeLabel(18)" \nng-class="{\'active\': vm.label === 18}">8</span> <span ng-click="vm.changeLabel(19)" \nng-class="{\'active\': vm.label === 19}">9</span></div></div><table><tbody><tr hide show-gt-xs><td></td><td colspan="10" \nlayout="row" class="row-check"><div layout="row" layout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" \nng-checked="vm.exists(10)" ng-click="vm.groupNumbers(10)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div \nlayout="row" layout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(11)" \nng-click="vm.groupNumbers(11)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(12)" \nng-click="vm.groupNumbers(12)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(13)" \nng-click="vm.groupNumbers(13)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(14)" \nng-click="vm.groupNumbers(14)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(15)" \nng-click="vm.groupNumbers(15)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(16)" \nng-click="vm.groupNumbers(16)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(17)" \nng-click="vm.groupNumbers(17)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(18)" \nng-click="vm.groupNumbers(18)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(19)" \nng-click="vm.groupNumbers(19)" ng-disabled="!$root.allowBetting"></md-checkbox></div></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(0)" \nng-click="vm.groupNumbers(0)" ng-disabled="!$root.allowBetting"></md-checkbox></td><td colspan="10" rowspan="10" \nclass="main-number"><div class="repeater-number" ng-repeat="n in vm.numbers"><div class="inner-number md-one-number" \nlayout="column" ng-click="vm.selectNumber(n)" \nng-class="{\'active\' : n.selected,  \'changed-price\': n.priceChanged[vm.betID] && $root.allowBetting, \'stop\': n.disabled[vm.betID] || !$root.allowBetting}">\n<div class="number d3">{{n.number}}</div><div class="price except md-accent-fg md-hue-1"><span \nng-class="{\'price-up\' : n.price[vm.betID] > vm.basePrice, \'zero\' : n.price[vm.betID] === 0}">\n{{n.price[vm.betID] | currency : \'\' : 0 }}</span></div></div></div></td></tr><tr><td layout="row" layout-align="center">\n<md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(1)" ng-click="vm.groupNumbers(1)" \nng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" layout-align="center"><md-checkbox \nmd-no-ink aria-label="Checkbox" ng-checked="vm.exists(2)" ng-click="vm.groupNumbers(2)" \nng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" layout-align="center"><md-checkbox \nmd-no-ink aria-label="Checkbox" ng-checked="vm.exists(3)" ng-click="vm.groupNumbers(3)" \nng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" layout-align="center"><md-checkbox \nmd-no-ink aria-label="Checkbox" ng-checked="vm.exists(4)" ng-click="vm.groupNumbers(4)" \nng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" layout-align="center"><md-checkbox \nmd-no-ink aria-label="Checkbox" ng-checked="vm.exists(5)" ng-click="vm.groupNumbers(5)" \nng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" layout-align="center"><md-checkbox \nmd-no-ink aria-label="Checkbox" ng-checked="vm.exists(6)" ng-click="vm.groupNumbers(6)" \nng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" layout-align="center"><md-checkbox \nmd-no-ink aria-label="Checkbox" ng-checked="vm.exists(7)" ng-click="vm.groupNumbers(7)" \nng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" layout-align="center"><md-checkbox \nmd-no-ink aria-label="Checkbox" ng-checked="vm.exists(8)" ng-click="vm.groupNumbers(8)" \nng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" layout-align="center"><md-checkbox \nmd-no-ink aria-label="Checkbox" ng-checked="vm.exists(9)" ng-click="vm.groupNumbers(9)" \nng-disabled="!$root.allowBetting"></md-checkbox></td></tr></tbody></table></div></div><div flex-gt-sm="30" flex="100" \nlayout="column" class="main-right-betting-form"><div layout="column" class="betting-form-wrap"><div \nclass="betting-form md-whiteframe-1dp md-primary-bg" layout="column"><div class="betting-form-header"><div layout="row">\n<div flex="30">\u0110\u1EB7t c\u01B0\u1EE3c</div><div flex="70" class="text-right">3D \u0110\u1EA7u \u0110u\xF4i - Mi\u1EC1n B\u1EAFc 2</div></div></div><div \nclass="betting-form-content"><form name="basicForm" class="md-inline-form" ng-submit="vm.submitBetting()" novalidate>\n<div layout="row" class="padding-top-8" flex="70" flex-offset="30"><div flex="33">\u0110\u1EA7u</div><div flex="33">\u0110u\xF4i</div><div\n flex="33">\u0110\u1EA7u \u0110u\xF4i</div></div><div layout="row" class="padding-top-8"><div class="sub-title padding-right-8" flex="30">\n<span class="text-boxed-one">S\u1ED1 \u0111i\u1EC3m</span></div><div flex="70" layout="row"><div flex="33" class="bet-input-1"><input \ntype="tel" class="bet-input md-one-input" maxlength="5" ng-model="vm.inputPointDau" ng-currency numeric-only \nselect-on-click ng-disabled="!(vm.numbers | filter : {selected : true}).length" autocomplete="off" tabindex="2"></div>\n<div flex="33" class="bet-input-2"><input type="tel" class="bet-input md-one-input" maxlength="5" \nng-model="vm.inputPointDuoi" ng-currency numeric-only select-on-click \nng-disabled="!(vm.numbers | filter : {selected : true}).length" autocomplete="off" tabindex="2"></div><div flex="33" \nclass="bet-input-3"><input type="tel" class="bet-input md-one-input" maxlength="5" ng-model="vm.inputPointDd" \nng-currency numeric-only select-on-click ng-disabled="!(vm.numbers | filter : {selected : true}).length" \nautocomplete="off" tabindex="2"></div></div></div><div layout="row" class="padding-top-8"><div flex="30" \nclass="padding-right-8"><md-button class="betting-button cancel-button md-warn md-raised" \nng-disabled="!(vm.numbers | filter : {selected : true}).length" ng-click="vm.resetBetting()"><md-icon \nmd-font-icon="icon-close" class="s20"></md-icon></md-button></div><div flex="70"><md-button \nclass="betting-button md-raised md-accent" type="submit" ng-disabled="vm.totalMoney() === 0">\u0110\u1EB7t c\u01B0\u1EE3c</md-button></div>\n</div><div class="ignore-price"><md-checkbox ng-model="vm.ignorePrice" aria-label="Ignore Price">\nKh\xF4ng h\u1ECFi l\u1EA1i khi c\xF3 gi\xE1 thay \u0111\u1ED5i</md-checkbox></div></form><div layout="row" class="padding-top-16"><div \nclass="sub-title" flex="30">T\u1ED5ng \u0111i\u1EC3m</div><div flex="70" class="text-bold">{{vm.sumPoint | currency : \'\' : 0 }}</div>\n</div><div layout="row" class="padding-top-8"><div class="sub-title" flex="30">Th\xE0nh ti\u1EC1n</div><div flex="70" \nclass="text-bold">{{vm.sumMoney | currency : \'\' : 0 }}</div></div><div layout="row" class="padding-top-8" \nng-show="(vm.numbers | filter : {selected : true}).length" ng-click="vm.showFull = !vm.showFull"><div \nclass="sub-title number" ng-class="{\'full\' : vm.showFull}"><div>Danh s\xE1ch</div><span class="md-accent-fg md-hue-1" \nng-repeat="n in vm.numbers | filter : {selected : true}">{{n.number}}<span ng-if="!$last">,&nbsp;</span></span></div>\n</div><div layout="row" class="padding-top-8" ng-if="$root.isAuthenticated"><div class="sub-title secondary" flex="30">\nT\u1ED1i \u0111a</div><div flex="70" class="text-bold sub-title secondary">{{vm.purchaseLimit | currency : \'\' : 0 }} \u0110i\u1EC3m</div>\n</div><div layout="row" class="balance" ng-if="$root.isAuthenticated"><div class="sub-title secondary" flex="30">S\u1ED1 d\u01B0\n</div><div flex="70" class="text-bold sub-title secondary" layout="row" layout-align="space-between center">\n{{ $root.User.Balance | currency : \'\' : 0 }}<md-button class="md-icon-button" ng-click="$root.updateBalance()" \nng-disabled="$root.User.updating"><md-icon md-font-icon="icon-refresh" class="s16" \nng-class="{\'rotating\' : $root.User.updating }"></md-icon></md-button></div></div></div></div></div><div layout="column" \nclass="recent-betting-list" ng-include="\'app/main/traditional/betting/recent-ticket.html\'" \nng-show="$root.latestTicket.length"></div></div></div>');
$templateCache.put('app/main/traditional/southern/2d/18lo/18lo.html','<div class="main-game" layout-gt-sm="row" layout="column"><div flex-gt-sm="70" flex="100" class="content-number-wrap">\n<div layout="column" class="content-number md-whiteframe-1dp md-primary-bg"><div class="row-input-numbers"><form \nclass="md-inline-form" ng-submit="vm.submitKeyNumber()" novalidate layout="row"><input type="tel" autocomplete="off" \ngo-focus="vm.focusVar" class="input-numbers-array md-one-input" placeholder="D\xE3y s\u1ED1" ng-model="vm.keynumber" \nng-keyup="vm.inputKeyNumber($event)" tabindex="1" ng-disabled="!$root.allowBetting"><md-button \nclass="md-raised key-number" type="button" ng-click="vm.submitKeyNumber(true)" ng-disabled="!vm.keynumber.length">\nTh\xEAm v\xE0o</md-button></form></div><table><tbody><tr hide show-gt-xs><td><md-checkbox md-no-ink aria-label="Checkbox" \nng-checked="vm.exists(20)" ng-click="vm.groupNumbers(20)" ng-disabled="!$root.allowBetting"></md-checkbox></td><td \ncolspan="10" layout="row" class="row-check"><div layout="row" layout-align="center"><md-checkbox md-no-ink \naria-label="Checkbox" ng-checked="vm.exists(10)" ng-click="vm.groupNumbers(10)" ng-disabled="!$root.allowBetting">\n</md-checkbox></div><div layout="row" layout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" \nng-checked="vm.exists(11)" ng-click="vm.groupNumbers(11)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div \nlayout="row" layout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(12)" \nng-click="vm.groupNumbers(12)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(13)" \nng-click="vm.groupNumbers(13)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(14)" \nng-click="vm.groupNumbers(14)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(15)" \nng-click="vm.groupNumbers(15)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(16)" \nng-click="vm.groupNumbers(16)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(17)" \nng-click="vm.groupNumbers(17)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(18)" \nng-click="vm.groupNumbers(18)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(19)" \nng-click="vm.groupNumbers(19)" ng-disabled="!$root.allowBetting"></md-checkbox></div></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(0)" \nng-click="vm.groupNumbers(0)" ng-disabled="!$root.allowBetting"></md-checkbox></td><td colspan="10" rowspan="10" \nclass="main-number"><div class="repeater-number" ng-repeat="n in vm.numbers"><div \nclass="inner-number miennam md-one-number" layout="row" ng-click="vm.selectNumber(n)" \nng-class="{\'active\' : n.selected, \'changed-price\': n.priceChanged, \'stop\' : !$root.allowBetting }"><div flex="50" \nclass="price md-accent-fg md-hue-1" layout="column" hide show-gt-xs><div><span \nng-class="{\'price-up\': n.price[15][2] > n.basePrice, \'stop\' : n.disabled[15][2]}">{{n.price[15][2]}}</span></div><div>\n<span ng-class="{\'price-up\': n.price[15][3] > n.basePrice, \'stop\' : n.disabled[15][3]}">{{n.price[15][3]}}</span></div>\n<div><span ng-class="{\'price-up\': n.price[15][4] > n.basePrice, \'stop\' : n.disabled[15][4]}">{{n.price[15][4]}}</span>\n</div></div><div flex="50" flex-xs="100" class="number">{{n.number}}</div></div></div></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(1)" \nng-click="vm.groupNumbers(1)" ng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(2)" \nng-click="vm.groupNumbers(2)" ng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(3)" \nng-click="vm.groupNumbers(3)" ng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(4)" \nng-click="vm.groupNumbers(4)" ng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(5)" \nng-click="vm.groupNumbers(5)" ng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(6)" \nng-click="vm.groupNumbers(6)" ng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(7)" \nng-click="vm.groupNumbers(7)" ng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(8)" \nng-click="vm.groupNumbers(8)" ng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(9)" \nng-click="vm.groupNumbers(9)" ng-disabled="!$root.allowBetting"></md-checkbox></td></tr></tbody></table></div></div><div\n flex-gt-sm="30" flex="100" layout="column" class="main-right-betting-form"><div layout="column" \nclass="betting-form-wrap"><div class="betting-form md-whiteframe-1dp md-primary-bg" layout="column"><div \nclass="betting-form-header"><div layout="row"><div flex="30">\u0110\u1EB7t c\u01B0\u1EE3c</div><div flex="70" class="text-right">\n2D 18L\xF4 - Mi\u1EC1n Nam</div></div></div><div class="betting-form-content"><form name="basicForm" class="md-inline-form" \nng-submit="vm.submitBetting()" novalidate><div layout="row" class="padding-top-8"><div \nclass="sub-title padding-right-8" flex="30"><span class="text-boxed-one">S\u1ED1 \u0111i\u1EC3m</span></div><div flex="70" \nlayout="row"><input type="tel" id="bet-input" class="bet-input md-one-input" maxlength="5" ng-model="vm.inputPoint" \nng-currency numeric-only select-on-click ng-disabled="!(vm.numbers | filter : {selected : true}).length" \nautocomplete="off"></div></div><div layout="row" class="regirons"><div class="sub-title padding-right-8" flex="30"><span\n class="text-boxed-one">Ch\u1ECDn \u0111\xE0i</span></div><div flex="70" layout="column"><div ng-repeat="regiron in one.regirons">\n<md-checkbox aria-label="Checkbox" ng-checked="one.exists(regiron.GameType)" \nng-disabled="one.checkAllowBetting(regiron.GameType)" ng-click="one.toggle(regiron.GameType)">{{regiron.CityName}}\n</md-checkbox></div></div></div><div layout="row" class="padding-top-8"><div flex="30" class="padding-right-8">\n<md-button class="betting-button cancel-button md-warn md-raised" \nng-disabled="!(vm.numbers | filter : {selected : true}).length" ng-click="vm.resetBetting()"><md-icon \nmd-font-icon="icon-close" class="s20"></md-icon></md-button></div><div flex="70"><md-button \nclass="betting-button md-raised md-accent" type="submit" ng-disabled="vm.totalPoint() === 0">\u0110\u1EB7t c\u01B0\u1EE3c</md-button></div>\n</div><div class="ignore-price"><md-checkbox ng-model="vm.ignorePrice" aria-label="Ignore Price">\nKh\xF4ng h\u1ECFi l\u1EA1i khi c\xF3 gi\xE1 thay \u0111\u1ED5i</md-checkbox></div></form><div layout="row" class="padding-top-16"><div \nclass="sub-title" flex="30">T\u1ED5ng \u0111i\u1EC3m</div><div flex="70" class="text-bold">{{vm.totalPoint() | currency : \'\' : 0 }}\n</div></div><div layout="row" class="padding-top-8"><div class="sub-title" flex="30">Th\xE0nh ti\u1EC1n</div><div flex="70" \nclass="text-bold">{{vm.totalMoney() | currency : \'\' : 0 }}</div></div><div layout="row" class="padding-top-8" \nng-show="(vm.numbers | filter : {selected : true}).length" ng-click="vm.showFull = !vm.showFull"><div \nclass="sub-title number" ng-class="{\'full\' : vm.showFull}"><div>Danh s\xE1ch</div><span class="md-accent-fg md-hue-1" \nng-repeat="n in vm.numbers | filter : {selected : true}">{{n.number}}<span ng-if="!$last">,&nbsp;</span></span></div>\n</div><div layout="row" class="padding-top-8" ng-if="$root.isAuthenticated"><div class="sub-title secondary" flex="30">\nT\u1ED1i \u0111a</div><div flex="70" class="text-bold sub-title secondary">{{vm.purchaseLimit(2,15) | currency : \'\' : 0 }} \u0110i\u1EC3m\n</div></div><div layout="row" class="balance" ng-if="$root.isAuthenticated"><div class="sub-title secondary" flex="30">\nS\u1ED1 d\u01B0</div><div flex="70" class="text-bold sub-title secondary" layout="row" layout-align="space-between center">\n{{ $root.User.Balance | currency : \'\' : 0 }}<md-button class="md-icon-button" ng-click="$root.updateBalance()" \nng-disabled="$root.User.updating"><md-icon md-font-icon="icon-refresh" class="s16" \nng-class="{\'rotating\' : $root.User.updating }"></md-icon></md-button></div></div></div></div></div><div layout="column" \nclass="recent-betting-list" ng-include="\'app/main/traditional/betting/recent-ticket.html\'" \nng-show="$root.latestTicket.length"></div></div></div>');
$templateCache.put('app/main/traditional/southern/2d/18lodau/18lodau.html','<div class="main-game" layout-gt-sm="row" layout="column"><div flex-gt-sm="70" flex="100" class="content-number-wrap">\n<div layout="column" class="content-number md-whiteframe-1dp md-primary-bg"><div class="row-input-numbers"><form \nclass="md-inline-form" ng-submit="vm.submitKeyNumber()" novalidate layout="row"><input type="tel" autocomplete="off" \ngo-focus="vm.focusVar" class="input-numbers-array md-one-input" placeholder="D\xE3y s\u1ED1" ng-model="vm.keynumber" \nng-keyup="vm.inputKeyNumber($event)" tabindex="1" ng-disabled="!$root.allowBetting"><md-button \nclass="md-raised key-number" type="button" ng-click="vm.submitKeyNumber(true)" ng-disabled="!vm.keynumber.length">\nTh\xEAm v\xE0o</md-button></form></div><table><tbody><tr hide show-gt-xs><td><md-checkbox md-no-ink aria-label="Checkbox" \nng-checked="vm.exists(20)" ng-click="vm.groupNumbers(20)" ng-disabled="!$root.allowBetting"></md-checkbox></td><td \ncolspan="10" layout="row" class="row-check"><div layout="row" layout-align="center"><md-checkbox md-no-ink \naria-label="Checkbox" ng-checked="vm.exists(10)" ng-click="vm.groupNumbers(10)" ng-disabled="!$root.allowBetting">\n</md-checkbox></div><div layout="row" layout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" \nng-checked="vm.exists(11)" ng-click="vm.groupNumbers(11)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div \nlayout="row" layout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(12)" \nng-click="vm.groupNumbers(12)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(13)" \nng-click="vm.groupNumbers(13)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(14)" \nng-click="vm.groupNumbers(14)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(15)" \nng-click="vm.groupNumbers(15)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(16)" \nng-click="vm.groupNumbers(16)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(17)" \nng-click="vm.groupNumbers(17)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(18)" \nng-click="vm.groupNumbers(18)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(19)" \nng-click="vm.groupNumbers(19)" ng-disabled="!$root.allowBetting"></md-checkbox></div></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(0)" \nng-click="vm.groupNumbers(0)" ng-disabled="!$root.allowBetting"></md-checkbox></td><td colspan="10" rowspan="10" \nclass="main-number"><div class="repeater-number" ng-repeat="n in vm.numbers"><div \nclass="inner-number miennam md-one-number" layout="row" ng-click="vm.selectNumber(n)" \nng-class="{\'active\' : n.selected, \'changed-price\': n.priceChanged, \'stop\' : !$root.allowBetting }"><div flex="50" \nclass="price md-accent-fg md-hue-1" layout="column" hide show-gt-xs><div><span \nng-class="{\'price-up\': n.price[30][2] > n.basePrice, \'stop\' : n.disabled[30][2]}">{{n.price[30][2]}}</span></div><div>\n<span ng-class="{\'price-up\': n.price[30][3] > n.basePrice, \'stop\' : n.disabled[30][3]}">{{n.price[30][3]}}</span></div>\n<div><span ng-class="{\'price-up\': n.price[30][4] > n.basePrice, \'stop\' : n.disabled[30][4]}">{{n.price[30][4]}}</span>\n</div></div><div flex="50" flex-xs="100" class="number">{{n.number}}</div></div></div></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(1)" \nng-click="vm.groupNumbers(1)" ng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(2)" \nng-click="vm.groupNumbers(2)" ng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(3)" \nng-click="vm.groupNumbers(3)" ng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(4)" \nng-click="vm.groupNumbers(4)" ng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(5)" \nng-click="vm.groupNumbers(5)" ng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(6)" \nng-click="vm.groupNumbers(6)" ng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(7)" \nng-click="vm.groupNumbers(7)" ng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(8)" \nng-click="vm.groupNumbers(8)" ng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(9)" \nng-click="vm.groupNumbers(9)" ng-disabled="!$root.allowBetting"></md-checkbox></td></tr></tbody></table></div></div><div\n flex-gt-sm="30" flex="100" layout="column" class="main-right-betting-form"><div layout="column" \nclass="betting-form-wrap"><div class="betting-form md-whiteframe-1dp md-primary-bg" layout="column"><div \nclass="betting-form-header"><div layout="row"><div flex="30">\u0110\u1EB7t c\u01B0\u1EE3c</div><div flex="70" class="text-right">\n2D 18L\xF4 \u0110\u1EA7u - Mi\u1EC1n Nam</div></div></div><div class="betting-form-content"><form name="basicForm" class="md-inline-form" \nng-submit="vm.submitBetting()" novalidate><div layout="row" class="padding-top-8"><div \nclass="sub-title padding-right-8" flex="30"><span class="text-boxed-one">S\u1ED1 \u0111i\u1EC3m</span></div><div flex="70" \nlayout="row"><input type="tel" id="bet-input" class="bet-input md-one-input" maxlength="5" ng-model="vm.inputPoint" \nng-currency numeric-only select-on-click ng-disabled="!(vm.numbers | filter : {selected : true}).length" \nautocomplete="off"></div></div><div layout="row" class="regirons"><div class="sub-title padding-right-8" flex="30"><span\n class="text-boxed-one">Ch\u1ECDn \u0111\xE0i</span></div><div flex="70" layout="column"><div ng-repeat="regiron in one.regirons">\n<md-checkbox aria-label="Checkbox" ng-checked="one.exists(regiron.GameType)" \nng-disabled="one.checkAllowBetting(regiron.GameType)" ng-click="one.toggle(regiron.GameType)">{{regiron.CityName}}\n</md-checkbox></div></div></div><div layout="row" class="padding-top-8"><div flex="30" class="padding-right-8">\n<md-button class="betting-button cancel-button md-warn md-raised" \nng-disabled="!(vm.numbers | filter : {selected : true}).length" ng-click="vm.resetBetting()"><md-icon \nmd-font-icon="icon-close" class="s20"></md-icon></md-button></div><div flex="70"><md-button \nclass="betting-button md-raised md-accent" type="submit" ng-disabled="vm.totalPoint() === 0">\u0110\u1EB7t c\u01B0\u1EE3c</md-button></div>\n</div><div class="ignore-price"><md-checkbox ng-model="vm.ignorePrice" aria-label="Ignore Price">\nKh\xF4ng h\u1ECFi l\u1EA1i khi c\xF3 gi\xE1 thay \u0111\u1ED5i</md-checkbox></div></form><div layout="row" class="padding-top-16"><div \nclass="sub-title" flex="30">T\u1ED5ng \u0111i\u1EC3m</div><div flex="70" class="text-bold">{{vm.totalPoint() | currency : \'\' : 0 }}\n</div></div><div layout="row" class="padding-top-8"><div class="sub-title" flex="30">Th\xE0nh ti\u1EC1n</div><div flex="70" \nclass="text-bold">{{vm.totalMoney() | currency : \'\' : 0 }}</div></div><div layout="row" class="padding-top-8" \nng-show="(vm.numbers | filter : {selected : true}).length" ng-click="vm.showFull = !vm.showFull"><div \nclass="sub-title number" ng-class="{\'full\' : vm.showFull}"><div>Danh s\xE1ch</div><span class="md-accent-fg md-hue-1" \nng-repeat="n in vm.numbers | filter : {selected : true}">{{n.number}}<span ng-if="!$last">,&nbsp;</span></span></div>\n</div><div layout="row" class="padding-top-8" ng-if="$root.isAuthenticated"><div class="sub-title secondary" flex="30">\nT\u1ED1i \u0111a</div><div flex="70" class="text-bold sub-title secondary">{{vm.purchaseLimit(2,30) | currency : \'\' : 0 }} \u0110i\u1EC3m\n</div></div><div layout="row" class="balance" ng-if="$root.isAuthenticated"><div class="sub-title secondary" flex="30">\nS\u1ED1 d\u01B0</div><div flex="70" class="text-bold sub-title secondary" layout="row" layout-align="space-between center">\n{{ $root.User.Balance | currency : \'\' : 0 }}<md-button class="md-icon-button" ng-click="$root.updateBalance()" \nng-disabled="$root.User.updating"><md-icon md-font-icon="icon-refresh" class="s16" \nng-class="{\'rotating\' : $root.User.updating }"></md-icon></md-button></div></div></div></div></div><div layout="column" \nclass="recent-betting-list" ng-include="\'app/main/traditional/betting/recent-ticket.html\'" \nng-show="$root.latestTicket.length"></div></div></div>');
$templateCache.put('app/main/traditional/southern/2d/duoi/duoi.html','<div class="main-game" layout-gt-sm="row" layout="column"><div flex-gt-sm="70" flex="100" class="content-number-wrap">\n<div layout="column" class="content-number md-whiteframe-1dp md-primary-bg"><div class="row-input-numbers"><form \nclass="md-inline-form" ng-submit="vm.submitKeyNumber()" novalidate layout="row"><input type="tel" autocomplete="off" \ngo-focus="vm.focusVar" class="input-numbers-array md-one-input" placeholder="D\xE3y s\u1ED1" ng-model="vm.keynumber" \nng-keyup="vm.inputKeyNumber($event)" tabindex="1" ng-disabled="!$root.allowBetting"><md-button \nclass="md-raised key-number" type="button" ng-click="vm.submitKeyNumber(true)" ng-disabled="!vm.keynumber.length">\nTh\xEAm v\xE0o</md-button></form></div><table><tbody><tr hide show-gt-xs><td><md-checkbox md-no-ink aria-label="Checkbox" \nng-checked="vm.exists(20)" ng-click="vm.groupNumbers(20)" ng-disabled="!$root.allowBetting"></md-checkbox></td><td \ncolspan="10" layout="row" class="row-check"><div layout="row" layout-align="center"><md-checkbox md-no-ink \naria-label="Checkbox" ng-checked="vm.exists(10)" ng-click="vm.groupNumbers(10)" ng-disabled="!$root.allowBetting">\n</md-checkbox></div><div layout="row" layout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" \nng-checked="vm.exists(11)" ng-click="vm.groupNumbers(11)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div \nlayout="row" layout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(12)" \nng-click="vm.groupNumbers(12)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(13)" \nng-click="vm.groupNumbers(13)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(14)" \nng-click="vm.groupNumbers(14)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(15)" \nng-click="vm.groupNumbers(15)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(16)" \nng-click="vm.groupNumbers(16)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(17)" \nng-click="vm.groupNumbers(17)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(18)" \nng-click="vm.groupNumbers(18)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(19)" \nng-click="vm.groupNumbers(19)" ng-disabled="!$root.allowBetting"></md-checkbox></div></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(0)" \nng-click="vm.groupNumbers(0)" ng-disabled="!$root.allowBetting"></md-checkbox></td><td colspan="10" rowspan="10" \nclass="main-number"><div class="repeater-number" ng-repeat="n in vm.numbers"><div \nclass="inner-number miennam md-one-number" layout="row" ng-click="vm.selectNumber(n)" \nng-class="{\'active\' : n.selected, \'changed-price\': n.priceChanged, \'stop\' : !$root.allowBetting }"><div flex="50" \nclass="price md-accent-fg md-hue-1" layout="column" hide show-gt-xs><div><span \nng-class="{\'price-up\': n.price[8][2] > n.basePrice, \'stop\' : n.disabled[8][2], \'zero\': n.price[8][2] === 0 }">\n{{n.price[8][2]}}</span></div><div><span \nng-class="{\'price-up\': n.price[8][3] > n.basePrice, \'stop\' : n.disabled[8][3], \'zero\': n.price[8][3] === 0 }">\n{{n.price[8][3]}}</span></div><div><span \nng-class="{\'price-up\': n.price[8][4] > n.basePrice, \'stop\' : n.disabled[8][4], \'zero\': n.price[8][4] === 0 }">\n{{n.price[8][4]}}</span></div></div><div flex="50" flex-xs="100" class="number">{{n.number}}</div></div></div></td></tr>\n<tr><td layout="row" layout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(1)" \nng-click="vm.groupNumbers(1)" ng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(2)" \nng-click="vm.groupNumbers(2)" ng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(3)" \nng-click="vm.groupNumbers(3)" ng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(4)" \nng-click="vm.groupNumbers(4)" ng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(5)" \nng-click="vm.groupNumbers(5)" ng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(6)" \nng-click="vm.groupNumbers(6)" ng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(7)" \nng-click="vm.groupNumbers(7)" ng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(8)" \nng-click="vm.groupNumbers(8)" ng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(9)" \nng-click="vm.groupNumbers(9)" ng-disabled="!$root.allowBetting"></md-checkbox></td></tr></tbody></table></div></div><div\n flex-gt-sm="30" flex="100" layout="column" class="main-right-betting-form"><div layout="column" \nclass="betting-form-wrap"><div class="betting-form md-whiteframe-1dp md-primary-bg" layout="column"><div \nclass="betting-form-header"><div layout="row"><div flex="30">\u0110\u1EB7t c\u01B0\u1EE3c</div><div flex="70" class="text-right">\n{{vm.betID | bet}} - Mi\u1EC1n Nam</div></div></div><div class="betting-form-content"><form name="basicForm" \nclass="md-inline-form" ng-submit="vm.submitBetting()" novalidate><div layout="row" class="padding-top-8" flex="70" \nflex-offset="30"><div flex="33">\u0110\u1EA7u</div><div flex="33">\u0110u\xF4i</div><div flex="33">\u0110\u1EA7u \u0110u\xF4i</div></div><div layout="row" \nclass="padding-top-8"><div class="sub-title padding-right-8" flex="30"><span class="text-boxed-one">S\u1ED1 \u0111i\u1EC3m</span></div>\n<div flex="70" layout="row"><div flex="33" class="bet-input-1"><input type="tel" class="bet-input md-one-input" \nmaxlength="5" ng-model="vm.inputPointDau" ng-currency numeric-only select-on-click \nng-disabled="!(vm.numbers | filter : {selected : true}).length" autocomplete="off" tabindex="2"></div><div flex="33" \nclass="bet-input-2"><input type="tel" class="bet-input md-one-input" maxlength="5" ng-model="vm.inputPointDuoi" \nng-currency numeric-only select-on-click ng-disabled="!(vm.numbers | filter : {selected : true}).length" \nautocomplete="off" tabindex="2"></div><div flex="33" class="bet-input-3"><input type="tel" \nclass="bet-input md-one-input" maxlength="5" ng-model="vm.inputPointDd" ng-currency numeric-only select-on-click \nng-disabled="!(vm.numbers | filter : {selected : true}).length" autocomplete="off" tabindex="2"></div></div></div><div \nlayout="row" class="regirons"><div class="sub-title padding-right-8" flex="30"><span class="text-boxed-one">Ch\u1ECDn \u0111\xE0i\n</span></div><div flex="70" layout="column"><div ng-repeat="regiron in one.regirons"><md-checkbox aria-label="Checkbox" \nng-checked="one.exists(regiron.GameType)" ng-disabled="one.checkAllowBetting(regiron.GameType)" \nng-click="one.toggle(regiron.GameType)">{{regiron.CityName}}</md-checkbox></div></div></div><div layout="row" \nclass="padding-top-8"><div flex="30" class="padding-right-8"><md-button \nclass="betting-button cancel-button md-warn md-raised" ng-disabled="!(vm.numbers | filter : {selected : true}).length" \nng-click="vm.resetBetting()"><md-icon md-font-icon="icon-close" class="s20"></md-icon></md-button></div><div flex="70">\n<md-button class="betting-button md-raised md-accent" type="submit" ng-disabled="vm.totalPoint() === 0">\u0110\u1EB7t c\u01B0\u1EE3c\n</md-button></div></div><div class="ignore-price"><md-checkbox ng-model="vm.ignorePrice" aria-label="Ignore Price">\nKh\xF4ng h\u1ECFi l\u1EA1i khi c\xF3 gi\xE1 thay \u0111\u1ED5i</md-checkbox></div></form><div layout="row" class="padding-top-16"><div \nclass="sub-title" flex="30">T\u1ED5ng \u0111i\u1EC3m</div><div flex="70" class="text-bold">{{vm.totalPoint() | currency : \'\' : 0 }}\n</div></div><div layout="row" class="padding-top-8"><div class="sub-title" flex="30">Th\xE0nh ti\u1EC1n</div><div flex="70" \nclass="text-bold">{{vm.totalMoney() | currency : \'\' : 0 }}</div></div><div layout="row" class="padding-top-8" \nng-show="(vm.numbers | filter : {selected : true}).length" ng-click="vm.showFull = !vm.showFull"><div \nclass="sub-title number" ng-class="{\'full\' : vm.showFull}"><div>Danh s\xE1ch</div><span class="md-accent-fg md-hue-1" \nng-repeat="n in vm.numbers | filter : {selected : true}">{{n.number}}<span ng-if="!$last">,&nbsp;</span></span></div>\n</div><div layout="row" class="padding-top-8" ng-if="$root.isAuthenticated"><div class="sub-title secondary" flex="30">\nT\u1ED1i \u0111a</div><div flex="70" class="text-bold sub-title secondary">{{vm.purchaseLimit(2,8) | currency : \'\' : 0 }} \u0110i\u1EC3m\n</div></div><div layout="row" class="balance" ng-if="$root.isAuthenticated"><div class="sub-title secondary" flex="30">\nS\u1ED1 d\u01B0</div><div flex="70" class="text-bold sub-title secondary" layout="row" layout-align="space-between center">\n{{ $root.User.Balance | currency : \'\' : 0 }}<md-button class="md-icon-button" ng-click="$root.updateBalance()" \nng-disabled="$root.User.updating"><md-icon md-font-icon="icon-refresh" class="s16" \nng-class="{\'rotating\' : $root.User.updating }"></md-icon></md-button></div></div></div></div></div><div layout="column" \nclass="recent-betting-list" ng-include="\'app/main/traditional/betting/recent-ticket.html\'" \nng-show="$root.latestTicket.length"></div></div></div>');
$templateCache.put('app/main/traditional/southern/2d/row-bet/row-bet.html','<div class="main-game" layout="row"><div layout="column" class="row-bet-southern md-whiteframe-1dp md-primary-bg" \nflex="70"><div class="table-wrap"><table class="table"><thead><tr><th rowspan="2">S\u1ED1</th><th rowspan="2"><div \nlayout="column" layout-align="space-between center"><div>18A</div><div><md-checkbox aria-label="Select All" \nng-checked="vm.checkedAll(2)" md-indeterminate="vm.isIndeterminate(2)" ng-click="vm.toggleAll(2)"></md-checkbox></div>\n</div></th><th rowspan="2"><div layout="column" layout-align="space-between center"><div>18B</div><div><md-checkbox \naria-label="Select All" ng-checked="vm.checkedAll(3)" md-indeterminate="vm.isIndeterminate(3)" \nng-click="vm.toggleAll(3)"></md-checkbox></div></div></th><th rowspan="2"><div layout="column" \nlayout-align="space-between center"><div>18C</div><div><md-checkbox aria-label="Select All" \nng-checked="vm.checkedAll(4)" md-indeterminate="vm.isIndeterminate(4)" ng-click="vm.toggleAll(4)"></md-checkbox></div>\n</div></th><th colspan="4">2D</th><th rowspan="2">Th\xE0nh ti\u1EC1n</th></tr><tr><th>\u0110\u1EA7u</th><th>\u0110u\xF4i</th><th>\u0110\u1EA7u/\u0110u\xF4i</th><th>\n18 L\xF4</th></tr></thead><tbody><tr ng-repeat="row in vm.rowsBets"><td>{{row.name}}</td><td><md-checkbox \nng-model="row.regirons[2]" aria-label="A"></md-checkbox></td><td><md-checkbox ng-model="row.regirons[3]" aria-label="B">\n</md-checkbox></td><td><md-checkbox ng-model="row.regirons[4]" aria-label="C"></md-checkbox></td><td><input type="text" \nclass="md-one-input" maxlength="5" ng-model="row.point[7]" ng-currency numeric-only select-on-click \nng-class="{\'transparent\': row.point[7] === 0 }"></td><td><input type="text" class="md-one-input" maxlength="5" \nng-model="row.point[8]" ng-currency numeric-only select-on-click ng-class="{\'transparent\': row.point[8] === 0 }"></td>\n<td><input type="text" class="md-one-input" maxlength="5" ng-model="row.point[78]" ng-currency numeric-only \nselect-on-click ng-class="{\'transparent\': row.point[78] === 0 }"></td><td><input type="text" class="md-one-input" \nmaxlength="5" ng-model="row.point[15]" ng-currency numeric-only select-on-click \nng-class="{\'transparent\': row.point[15] === 0 }"></td><td>{{vm.sumRowMoney(row) | currency : \'\' : 0 }}</td></tr></tbody>\n<tfoot><tr><td colspan="8">T\u1ED5ng ti\u1EC1n</td><td>{{ vm.total | currency : \'\' : 0 }}</td></tr></tfoot></table></div></div>\n<div flex="30" class="row-bet main-right-betting-form" layout="column"><div layout="column" class="betting-form-wrap">\n<div class="betting-form"><div class="betting-form-content" layout="row"><div flex="30" class="padding-right-8">\n<md-button class="betting-button cancel-button md-warn md-raised" ng-disabled="vm.checkDisabledReset()" \nng-click="vm.declareRow()"><md-icon md-font-icon="icon-close" class="s20"></md-icon></md-button></div><div flex="70">\n<md-button class="betting-button md-raised md-accent" ng-click="vm.submitBetting()" ng-disabled="vm.totalMoney() === 0">\n\u0110\u1EB7t c\u01B0\u1EE3c</md-button></div></div></div></div><div layout="column" class="recent-betting-list" \nng-include="\'app/main/traditional/betting/recent-ticket.html\'" ng-show="$root.latestTicket.length"></div></div></div>');
$templateCache.put('app/main/traditional/southern/2d/dau/dau.html','<div class="main-game" layout-gt-sm="row" layout="column"><div flex-gt-sm="70" flex="100" class="content-number-wrap">\n<div layout="column" class="content-number md-whiteframe-1dp md-primary-bg"><div class="row-input-numbers"><form \nclass="md-inline-form" ng-submit="vm.submitKeyNumber()" novalidate layout="row"><input type="tel" autocomplete="off" \ngo-focus="vm.focusVar" class="input-numbers-array md-one-input" placeholder="D\xE3y s\u1ED1" ng-model="vm.keynumber" \nng-keyup="vm.inputKeyNumber($event)" tabindex="1" ng-disabled="!$root.allowBetting"><md-button \nclass="md-raised key-number" type="button" ng-click="vm.submitKeyNumber(true)" ng-disabled="!vm.keynumber.length">\nTh\xEAm v\xE0o</md-button></form></div><table><tbody><tr hide show-gt-xs><td><md-checkbox md-no-ink aria-label="Checkbox" \nng-checked="vm.exists(20)" ng-click="vm.groupNumbers(20)" ng-disabled="!$root.allowBetting"></md-checkbox></td><td \ncolspan="10" layout="row" class="row-check"><div layout="row" layout-align="center"><md-checkbox md-no-ink \naria-label="Checkbox" ng-checked="vm.exists(10)" ng-click="vm.groupNumbers(10)" ng-disabled="!$root.allowBetting">\n</md-checkbox></div><div layout="row" layout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" \nng-checked="vm.exists(11)" ng-click="vm.groupNumbers(11)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div \nlayout="row" layout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(12)" \nng-click="vm.groupNumbers(12)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(13)" \nng-click="vm.groupNumbers(13)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(14)" \nng-click="vm.groupNumbers(14)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(15)" \nng-click="vm.groupNumbers(15)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(16)" \nng-click="vm.groupNumbers(16)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(17)" \nng-click="vm.groupNumbers(17)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(18)" \nng-click="vm.groupNumbers(18)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(19)" \nng-click="vm.groupNumbers(19)" ng-disabled="!$root.allowBetting"></md-checkbox></div></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(0)" \nng-click="vm.groupNumbers(0)" ng-disabled="!$root.allowBetting"></md-checkbox></td><td colspan="10" rowspan="10" \nclass="main-number"><div class="repeater-number" ng-repeat="n in vm.numbers"><div \nclass="inner-number miennam md-one-number" layout="row" ng-click="vm.selectNumber(n)" \nng-class="{\'active\' : n.selected, \'changed-price\': n.priceChanged, \'stop\' : !$root.allowBetting }"><div flex="50" \nclass="price md-accent-fg md-hue-1" layout="column" hide show-gt-xs><div><span \nng-class="{\'price-up\': n.price[7][2] > n.basePrice, \'stop\' : n.disabled[7][2], \'zero\': n.price[7][2] === 0 }">\n{{n.price[7][2]}}</span></div><div><span \nng-class="{\'price-up\': n.price[7][3] > n.basePrice, \'stop\' : n.disabled[7][3], \'zero\': n.price[7][3] === 0 }">\n{{n.price[7][3]}}</span></div><div><span \nng-class="{\'price-up\': n.price[7][4] > n.basePrice, \'stop\' : n.disabled[7][4], \'zero\': n.price[7][4] === 0 }">\n{{n.price[7][4]}}</span></div></div><div flex="50" flex-xs="100" class="number">{{n.number}}</div></div></div></td></tr>\n<tr><td layout="row" layout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(1)" \nng-click="vm.groupNumbers(1)" ng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(2)" \nng-click="vm.groupNumbers(2)" ng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(3)" \nng-click="vm.groupNumbers(3)" ng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(4)" \nng-click="vm.groupNumbers(4)" ng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(5)" \nng-click="vm.groupNumbers(5)" ng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(6)" \nng-click="vm.groupNumbers(6)" ng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(7)" \nng-click="vm.groupNumbers(7)" ng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(8)" \nng-click="vm.groupNumbers(8)" ng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(9)" \nng-click="vm.groupNumbers(9)" ng-disabled="!$root.allowBetting"></md-checkbox></td></tr></tbody></table></div></div><div\n flex-gt-sm="30" flex="100" layout="column" class="main-right-betting-form"><div layout="column" \nclass="betting-form-wrap"><div class="betting-form md-whiteframe-1dp md-primary-bg" layout="column"><div \nclass="betting-form-header"><div layout="row"><div flex="30">\u0110\u1EB7t c\u01B0\u1EE3c</div><div flex="70" class="text-right">\n{{vm.betID | bet}} - Mi\u1EC1n Nam</div></div></div><div class="betting-form-content"><form name="basicForm" \nclass="md-inline-form" ng-submit="vm.submitBetting()" novalidate><div layout="row" class="padding-top-8" flex="70" \nflex-offset="30"><div flex="33">\u0110\u1EA7u</div><div flex="33">\u0110u\xF4i</div><div flex="33">\u0110\u1EA7u \u0110u\xF4i</div></div><div layout="row" \nclass="padding-top-8"><div class="sub-title padding-right-8" flex="30"><span class="text-boxed-one">S\u1ED1 \u0111i\u1EC3m</span></div>\n<div flex="70" layout="row"><div flex="33" class="bet-input-1"><input type="tel" class="bet-input md-one-input" \nmaxlength="5" ng-model="vm.inputPointDau" ng-currency numeric-only select-on-click \nng-disabled="!(vm.numbers | filter : {selected : true}).length" autocomplete="off" tabindex="2"></div><div flex="33" \nclass="bet-input-2"><input type="tel" class="bet-input md-one-input" maxlength="5" ng-model="vm.inputPointDuoi" \nng-currency numeric-only select-on-click ng-disabled="!(vm.numbers | filter : {selected : true}).length" \nautocomplete="off" tabindex="2"></div><div flex="33" class="bet-input-3"><input type="tel" \nclass="bet-input md-one-input" maxlength="5" ng-model="vm.inputPointDd" ng-currency numeric-only select-on-click \nng-disabled="!(vm.numbers | filter : {selected : true}).length" autocomplete="off" tabindex="2"></div></div></div><div \nlayout="row" class="regirons"><div class="sub-title padding-right-8" flex="30"><span class="text-boxed-one">Ch\u1ECDn \u0111\xE0i\n</span></div><div flex="70" layout="column"><div ng-repeat="regiron in one.regirons"><md-checkbox aria-label="Checkbox" \nng-checked="one.exists(regiron.GameType)" ng-disabled="one.checkAllowBetting(regiron.GameType)" \nng-click="one.toggle(regiron.GameType)">{{regiron.CityName}}</md-checkbox></div></div></div><div layout="row" \nclass="padding-top-8"><div flex="30" class="padding-right-8"><md-button \nclass="betting-button cancel-button md-warn md-raised" ng-disabled="!(vm.numbers | filter : {selected : true}).length" \nng-click="vm.resetBetting()"><md-icon md-font-icon="icon-close" class="s20"></md-icon></md-button></div><div flex="70">\n<md-button class="betting-button md-raised md-accent" type="submit" ng-disabled="vm.totalPoint() === 0">\u0110\u1EB7t c\u01B0\u1EE3c\n</md-button></div></div><div class="ignore-price"><md-checkbox ng-model="vm.ignorePrice" aria-label="Ignore Price">\nKh\xF4ng h\u1ECFi l\u1EA1i khi c\xF3 gi\xE1 thay \u0111\u1ED5i</md-checkbox></div></form><div layout="row" class="padding-top-16"><div \nclass="sub-title" flex="30">T\u1ED5ng \u0111i\u1EC3m</div><div flex="70" class="text-bold">{{vm.totalPoint() | currency : \'\' : 0 }}\n</div></div><div layout="row" class="padding-top-8"><div class="sub-title" flex="30">Th\xE0nh ti\u1EC1n</div><div flex="70" \nclass="text-bold">{{vm.totalMoney() | currency : \'\' : 0 }}</div></div><div layout="row" class="padding-top-8" \nng-show="(vm.numbers | filter : {selected : true}).length" ng-click="vm.showFull = !vm.showFull"><div \nclass="sub-title number" ng-class="{\'full\' : vm.showFull}"><div>Danh s\xE1ch</div><span class="md-accent-fg md-hue-1" \nng-repeat="n in vm.numbers | filter : {selected : true}">{{n.number}}<span ng-if="!$last">,&nbsp;</span></span></div>\n</div><div layout="row" class="padding-top-8" ng-if="$root.isAuthenticated"><div class="sub-title secondary" flex="30">\nT\u1ED1i \u0111a</div><div flex="70" class="text-bold sub-title secondary">{{vm.purchaseLimit(2,7) | currency : \'\' : 0 }} \u0110i\u1EC3m\n</div></div><div layout="row" class="balance" ng-if="$root.isAuthenticated"><div class="sub-title secondary" flex="30">\nS\u1ED1 d\u01B0</div><div flex="70" class="text-bold sub-title secondary" layout="row" layout-align="space-between center">\n{{ $root.User.Balance | currency : \'\' : 0 }}<md-button class="md-icon-button" ng-click="$root.updateBalance()" \nng-disabled="$root.User.updating"><md-icon md-font-icon="icon-refresh" class="s16" \nng-class="{\'rotating\' : $root.User.updating }"></md-icon></md-button></div></div></div></div></div><div layout="column" \nclass="recent-betting-list" ng-include="\'app/main/traditional/betting/recent-ticket.html\'" \nng-show="$root.latestTicket.length"></div></div></div>');
$templateCache.put('app/main/traditional/southern/4d/duoi/duoi.html','<div class="main-game" layout-gt-sm="row" layout="column"><div flex-gt-sm="70" flex="100" class="content-number-wrap">\n<div layout="column" class="content-number md-whiteframe-1dp md-primary-bg"><div class="navi-button"><div \nclass="number-filter-4d" layout="row"><md-button class="md-raised" ns-popover ns-popover-template="popooxx" \nns-popover-placement="bottom" ns-popover-hide-on-inside-click="true" ns-popover-theme="ns-popover-tooltip-theme">OOXX\n</md-button><md-button class="md-raised" ns-popover ns-popover-template="popoxxo" ns-popover-placement="bottom" \nns-popover-hide-on-inside-click="true" ns-popover-theme="ns-popover-tooltip-theme">OXXO</md-button><md-button \nclass="md-raised" ns-popover ns-popover-template="popoxox" ns-popover-placement="bottom" \nns-popover-hide-on-inside-click="true" ns-popover-theme="ns-popover-tooltip-theme">OXOX</md-button><md-button \nclass="md-raised" ns-popover ns-popover-template="popxoxo" ns-popover-placement="bottom" \nns-popover-hide-on-inside-click="true" ns-popover-theme="ns-popover-tooltip-theme">XOXO</md-button><md-button \nclass="md-raised" ns-popover ns-popover-template="popxoox" ns-popover-placement="bottom" \nns-popover-hide-on-inside-click="true" ns-popover-theme="ns-popover-tooltip-theme">XOOX</md-button><md-button \nclass="md-raised" ns-popover ns-popover-template="popxxoo" ns-popover-placement="bottom" \nns-popover-hide-on-inside-click="true" ns-popover-theme="ns-popover-tooltip-theme">XXOO</md-button></div></div><table>\n<tbody><tr hide show-gt-xs><td></td><td colspan="10" layout="row" class="row-check"><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(10)" \nng-click="vm.groupNumbers(10)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(11)" \nng-click="vm.groupNumbers(11)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(12)" \nng-click="vm.groupNumbers(12)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(13)" \nng-click="vm.groupNumbers(13)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(14)" \nng-click="vm.groupNumbers(14)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(15)" \nng-click="vm.groupNumbers(15)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(16)" \nng-click="vm.groupNumbers(16)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(17)" \nng-click="vm.groupNumbers(17)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(18)" \nng-click="vm.groupNumbers(18)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(19)" \nng-click="vm.groupNumbers(19)" ng-disabled="!$root.allowBetting"></md-checkbox></div></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(0)" \nng-click="vm.groupNumbers(0)" ng-disabled="!$root.allowBetting"></md-checkbox></td><td colspan="10" rowspan="10" \nclass="main-number"><div class="repeater-number" ng-repeat="n in vm.numbers track by $index"><div \nclass="inner-number miennam md-one-number" layout="row" ng-click="vm.selectNumber(n)" \nng-class="{\'active\' : n.selected, \'changed-price\': n.priceChanged, \'stop\' : !$root.allowBetting }"><div flex="40" \nclass="price md-accent-fg md-hue-1" layout="column" hide show-gt-xs><div><span \nng-class="{\'price-up\': n.price[13][2] > n.basePrice, \'stop\' : n.disabled[13][2]}">{{n.price[13][2]}}</span></div><div>\n<span ng-class="{\'price-up\': n.price[13][3] > n.basePrice, \'stop\' : n.disabled[13][3]}">{{n.price[13][3]}}</span></div>\n<div><span ng-class="{\'price-up\': n.price[13][4] > n.basePrice, \'stop\' : n.disabled[13][4]}">{{n.price[13][4]}}</span>\n</div></div><div flex="60" flex-xs="100" class="number d4">{{n.number}}</div></div></div></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(1)" \nng-click="vm.groupNumbers(1)" ng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(2)" \nng-click="vm.groupNumbers(2)" ng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(3)" \nng-click="vm.groupNumbers(3)" ng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(4)" \nng-click="vm.groupNumbers(4)" ng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(5)" \nng-click="vm.groupNumbers(5)" ng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(6)" \nng-click="vm.groupNumbers(6)" ng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(7)" \nng-click="vm.groupNumbers(7)" ng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(8)" \nng-click="vm.groupNumbers(8)" ng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(9)" \nng-click="vm.groupNumbers(9)" ng-disabled="!$root.allowBetting"></md-checkbox></td></tr></tbody></table></div></div><div\n flex-gt-sm="30" flex="100" layout="column" class="main-right-betting-form"><div layout="column" \nclass="betting-form-wrap"><div class="betting-form md-whiteframe-1dp md-primary-bg" layout="column"><div \nclass="betting-form-header"><div layout="row"><div flex="30">\u0110\u1EB7t c\u01B0\u1EE3c</div><div flex="70" class="text-right">\n4D \u0110u\xF4i - Mi\u1EC1n Nam</div></div></div><div class="betting-form-content"><form name="basicForm" class="md-inline-form" \nng-submit="vm.submitBetting()" novalidate><div layout="row" class="padding-top-8"><div \nclass="sub-title padding-right-8" flex="30"><span class="text-boxed-one">S\u1ED1 \u0111i\u1EC3m</span></div><div flex="70" \nlayout="row"><input type="tel" class="bet-input md-one-input" ng-model="vm.inputPoint" ng-currency numeric-only \nselect-on-click ng-disabled="!(vm.numbers | filter : {selected : true}).length" autocomplete="off" maxlength="5"></div>\n</div><div layout="row" class="regirons"><div class="sub-title padding-right-8" flex="30"><span class="text-boxed-one">\nCh\u1ECDn \u0111\xE0i</span></div><div flex="70" layout="column"><div ng-repeat="regiron in one.regirons"><md-checkbox \naria-label="Checkbox" ng-checked="one.exists(regiron.GameType)" ng-disabled="one.checkAllowBetting(regiron.GameType)" \nng-click="one.toggle(regiron.GameType)">{{regiron.CityName}}</md-checkbox></div></div></div><div layout="row" \nclass="padding-top-8"><div flex="30" class="padding-right-8"><md-button \nclass="betting-button cancel-button md-warn md-raised" ng-disabled="!(vm.numbers | filter : {selected : true}).length" \nng-click="vm.resetBetting()"><md-icon md-font-icon="icon-close" class="s20"></md-icon></md-button></div><div flex="70">\n<md-button class="betting-button md-raised md-accent" type="submit" ng-disabled="vm.totalPoint() === 0">\u0110\u1EB7t c\u01B0\u1EE3c\n</md-button></div></div><div class="ignore-price"><md-checkbox ng-model="vm.ignorePrice" aria-label="Ignore Price">\nKh\xF4ng h\u1ECFi l\u1EA1i khi c\xF3 gi\xE1 thay \u0111\u1ED5i</md-checkbox></div></form><div layout="row" class="padding-top-16"><div \nclass="sub-title" flex="30">T\u1ED5ng \u0111i\u1EC3m</div><div flex="70" class="text-bold">{{vm.totalPoint() | currency : \'\' : 0 }}\n</div></div><div layout="row" class="padding-top-8"><div class="sub-title" flex="30">Th\xE0nh ti\u1EC1n</div><div flex="70" \nclass="text-bold">{{vm.totalMoney() | currency : \'\' : 0 }}</div></div><div layout="row" class="padding-top-8" \nng-show="(vm.numbers | filter : {selected : true}).length" ng-click="vm.showFull = !vm.showFull"><div \nclass="sub-title number" ng-class="{\'full\' : vm.showFull}"><div>Danh s\xE1ch</div><span class="md-accent-fg md-hue-1" \nng-repeat="n in vm.numbers | filter : {selected : true}">{{n.number}}<span ng-if="!$last">,&nbsp;</span></span></div>\n</div><div layout="row" class="padding-top-8" ng-if="$root.isAuthenticated"><div class="sub-title secondary" flex="30">\nT\u1ED1i \u0111a</div><div flex="70" class="text-bold sub-title secondary">{{vm.purchaseLimit(2,13) | currency : \'\' : 0 }} \u0110i\u1EC3m\n</div></div><div layout="row" class="balance" ng-if="$root.isAuthenticated"><div class="sub-title secondary" flex="30">\nS\u1ED1 d\u01B0</div><div flex="70" class="text-bold sub-title secondary" layout="row" layout-align="space-between center">\n{{ $root.User.Balance | currency : \'\' : 0 }}<md-button class="md-icon-button" ng-click="$root.updateBalance()" \nng-disabled="$root.User.updating"><md-icon md-font-icon="icon-refresh" class="s16" \nng-class="{\'rotating\' : $root.User.updating }"></md-icon></md-button></div></div></div></div></div><div layout="column" \nclass="recent-betting-list" ng-include="\'app/main/traditional/betting/recent-ticket.html\'" \nng-show="$root.latestTicket.length"></div></div></div><script type="text/ng-template" id="popooxx">\n<div class="triangle"></div>    <div class="ns-popover-tooltip">\n        <div layout="column" class="panel">\n            <div class="header" layout="row" layout-align="space-between center">\n                <h3>OOXX</h3>\n                <md-button class="md-icon-button"><md-icon md-font-icon="icon-close" ng-click="hidePopover()"></md-icon></md-button>\n            </div>\n            <div class="content">\n                <md-button ng-repeat="pop in vm.popooxx" md-no-ink ng-class="{\'md-warn\': vm.cond4d.name === pop.name}" ng-click="vm.changeLabel(pop)">{{pop.name}}</md-button>\n            </div>\n        </div>\n    </div></script><script type="text/ng-template" id="popoxxo"><div class="triangle"></div>\n    <div class="ns-popover-tooltip">\n        <div layout="column" class="panel">\n            <div class="header" layout="row" layout-align="space-between center">\n                <h3>OXXO</h3>\n                <md-button class="md-icon-button"><md-icon md-font-icon="icon-close" ng-click="hidePopover()"></md-icon></md-button>\n            </div>\n            <div class="content">\n                <md-button ng-repeat="pop in vm.popoxxo" md-no-ink ng-class="{\'md-warn\': vm.cond4d.name === pop.name}" ng-click="vm.changeLabel(pop)">{{pop.name}}</md-button>\n            </div>\n        </div>\n    </div></script><script type="text/ng-template" id="popoxox"><div class="triangle"></div>\n    <div class="ns-popover-tooltip">\n        <div layout="column" class="panel">\n            <div class="header" layout="row" layout-align="space-between center">\n                <h3>OXOX</h3>\n                <md-button class="md-icon-button"><md-icon md-font-icon="icon-close" ng-click="hidePopover()"></md-icon></md-button>\n            </div>\n            <div class="content">\n                <md-button ng-repeat="pop in vm.popoxox" md-no-ink ng-class="{\'md-warn\': vm.cond4d.name === pop.name}" ng-click="vm.changeLabel(pop)">{{pop.name}}</md-button>\n            </div>\n        </div>\n    </div></script><script type="text/ng-template" id="popxoxo"><div class="triangle"></div>\n    <div class="ns-popover-tooltip">\n        <div layout="column" class="panel">\n            <div class="header" layout="row" layout-align="space-between center">\n                <h3>XOXO</h3>\n                <md-button class="md-icon-button"><md-icon md-font-icon="icon-close" ng-click="hidePopover()"></md-icon></md-button>\n            </div>\n            <div class="content">\n                <md-button ng-repeat="pop in vm.popxoxo" md-no-ink ng-class="{\'md-warn\': vm.cond4d.name === pop.name}" ng-click="vm.changeLabel(pop)">{{pop.name}}</md-button>\n            </div>\n        </div>\n    </div></script><script type="text/ng-template" id="popxoox"><div class="triangle"></div>\n    <div class="ns-popover-tooltip">\n        <div layout="column" class="panel">\n            <div class="header" layout="row" layout-align="space-between center">\n                <h3>XOOX</h3>\n                <md-button class="md-icon-button"><md-icon md-font-icon="icon-close" ng-click="hidePopover()"></md-icon></md-button>\n            </div>\n            <div class="content">\n                <md-button ng-repeat="pop in vm.popxoox" md-no-ink ng-class="{\'md-warn\': vm.cond4d.name === pop.name}" ng-click="vm.changeLabel(pop)">{{pop.name}}</md-button>\n            </div>\n        </div>\n    </div></script><script type="text/ng-template" id="popxxoo"><div class="triangle"></div>\n    <div class="ns-popover-tooltip">\n        <div layout="column" class="panel">\n            <div class="header" layout="row" layout-align="space-between center">\n                <h3>XXOO</h3>\n                <md-button class="md-icon-button"><md-icon md-font-icon="icon-close" ng-click="hidePopover()"></md-icon></md-button>\n            </div>\n            <div class="content">\n                <md-button ng-repeat="pop in vm.popxxoo" md-no-ink ng-class="{\'md-warn\': vm.cond4d.name === pop.name}" ng-click="vm.changeLabel(pop)">{{pop.name}}</md-button>\n            </div>\n        </div>\n    </div></script>');
$templateCache.put('app/main/traditional/southern/4d/16lo/16lo.html','<div class="main-game" layout-gt-sm="row" layout="column"><div flex-gt-sm="70" flex="100" class="content-number-wrap">\n<div layout="column" class="content-number md-whiteframe-1dp md-primary-bg"><div class="navi-button"><div \nclass="number-filter-4d" layout="row"><md-button class="md-raised" ns-popover ns-popover-template="popooxx" \nns-popover-placement="bottom" ns-popover-hide-on-inside-click="true" ns-popover-theme="ns-popover-tooltip-theme">OOXX\n</md-button><md-button class="md-raised" ns-popover ns-popover-template="popoxxo" ns-popover-placement="bottom" \nns-popover-hide-on-inside-click="true" ns-popover-theme="ns-popover-tooltip-theme">OXXO</md-button><md-button \nclass="md-raised" ns-popover ns-popover-template="popoxox" ns-popover-placement="bottom" \nns-popover-hide-on-inside-click="true" ns-popover-theme="ns-popover-tooltip-theme">OXOX</md-button><md-button \nclass="md-raised" ns-popover ns-popover-template="popxoxo" ns-popover-placement="bottom" \nns-popover-hide-on-inside-click="true" ns-popover-theme="ns-popover-tooltip-theme">XOXO</md-button><md-button \nclass="md-raised" ns-popover ns-popover-template="popxoox" ns-popover-placement="bottom" \nns-popover-hide-on-inside-click="true" ns-popover-theme="ns-popover-tooltip-theme">XOOX</md-button><md-button \nclass="md-raised" ns-popover ns-popover-template="popxxoo" ns-popover-placement="bottom" \nns-popover-hide-on-inside-click="true" ns-popover-theme="ns-popover-tooltip-theme">XXOO</md-button></div></div><table>\n<tbody><tr hide show-gt-xs><td></td><td colspan="10" layout="row" class="row-check"><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(10)" \nng-click="vm.groupNumbers(10)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(11)" \nng-click="vm.groupNumbers(11)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(12)" \nng-click="vm.groupNumbers(12)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(13)" \nng-click="vm.groupNumbers(13)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(14)" \nng-click="vm.groupNumbers(14)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(15)" \nng-click="vm.groupNumbers(15)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(16)" \nng-click="vm.groupNumbers(16)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(17)" \nng-click="vm.groupNumbers(17)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(18)" \nng-click="vm.groupNumbers(18)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(19)" \nng-click="vm.groupNumbers(19)" ng-disabled="!$root.allowBetting"></md-checkbox></div></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(0)" \nng-click="vm.groupNumbers(0)" ng-disabled="!$root.allowBetting"></md-checkbox></td><td colspan="10" rowspan="10" \nclass="main-number"><div class="repeater-number" ng-repeat="n in vm.numbers track by $index"><div \nclass="inner-number miennam md-one-number" layout="row" ng-click="vm.selectNumber(n)" \nng-class="{\'active\' : n.selected, \'changed-price\': n.priceChanged, \'stop\' : !$root.allowBetting }"><div flex="40" \nclass="price md-accent-fg md-hue-1" layout="column" hide show-gt-xs><div><span \nng-class="{\'price-up\': n.price[19][2] > n.basePrice, \'stop\' : n.disabled[19][2]}">{{n.price[19][2]}}</span></div><div>\n<span ng-class="{\'price-up\': n.price[19][3] > n.basePrice, \'stop\' : n.disabled[19][3]}">{{n.price[19][3]}}</span></div>\n<div><span ng-class="{\'price-up\': n.price[19][4] > n.basePrice, \'stop\' : n.disabled[19][4]}">{{n.price[19][4]}}</span>\n</div></div><div flex="60" flex-xs="100" class="number d4">{{n.number}}</div></div></div></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(1)" \nng-click="vm.groupNumbers(1)" ng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(2)" \nng-click="vm.groupNumbers(2)" ng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(3)" \nng-click="vm.groupNumbers(3)" ng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(4)" \nng-click="vm.groupNumbers(4)" ng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(5)" \nng-click="vm.groupNumbers(5)" ng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(6)" \nng-click="vm.groupNumbers(6)" ng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(7)" \nng-click="vm.groupNumbers(7)" ng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(8)" \nng-click="vm.groupNumbers(8)" ng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(9)" \nng-click="vm.groupNumbers(9)" ng-disabled="!$root.allowBetting"></md-checkbox></td></tr></tbody></table></div></div><div\n flex-gt-sm="30" flex="100" layout="column" class="main-right-betting-form"><div layout="column" \nclass="betting-form-wrap"><div class="betting-form md-whiteframe-1dp md-primary-bg" layout="column"><div \nclass="betting-form-header"><div layout="row"><div flex="30">\u0110\u1EB7t c\u01B0\u1EE3c</div><div flex="70" class="text-right">\n4D 16L\xF4 - Mi\u1EC1n Nam</div></div></div><div class="betting-form-content"><form name="basicForm" class="md-inline-form" \nng-submit="vm.submitBetting()" novalidate><div layout="row" class="padding-top-8"><div \nclass="sub-title padding-right-8" flex="30"><span class="text-boxed-one">S\u1ED1 \u0111i\u1EC3m</span></div><div flex="70" \nlayout="row"><input type="tel" class="bet-input md-one-input" ng-model="vm.inputPoint" ng-currency numeric-only \nselect-on-click ng-disabled="!(vm.numbers | filter : {selected : true}).length" autocomplete="off" maxlength="5"></div>\n</div><div layout="row" class="regirons"><div class="sub-title padding-right-8" flex="30"><span class="text-boxed-one">\nCh\u1ECDn \u0111\xE0i</span></div><div flex="70" layout="column"><div ng-repeat="regiron in one.regirons"><md-checkbox \naria-label="Checkbox" ng-checked="one.exists(regiron.GameType)" ng-disabled="one.checkAllowBetting(regiron.GameType)" \nng-click="one.toggle(regiron.GameType)">{{regiron.CityName}}</md-checkbox></div></div></div><div layout="row" \nclass="padding-top-8"><div flex="30" class="padding-right-8"><md-button \nclass="betting-button cancel-button md-warn md-raised" ng-disabled="!(vm.numbers | filter : {selected : true}).length" \nng-click="vm.resetBetting()"><md-icon md-font-icon="icon-close" class="s20"></md-icon></md-button></div><div flex="70">\n<md-button class="betting-button md-raised md-accent" type="submit" ng-disabled="vm.totalPoint() === 0">\u0110\u1EB7t c\u01B0\u1EE3c\n</md-button></div></div><div class="ignore-price"><md-checkbox ng-model="vm.ignorePrice" aria-label="Ignore Price">\nKh\xF4ng h\u1ECFi l\u1EA1i khi c\xF3 gi\xE1 thay \u0111\u1ED5i</md-checkbox></div></form><div layout="row" class="padding-top-16"><div \nclass="sub-title" flex="30">T\u1ED5ng \u0111i\u1EC3m</div><div flex="70" class="text-bold">{{vm.totalPoint() | currency : \'\' : 0 }}\n</div></div><div layout="row" class="padding-top-8"><div class="sub-title" flex="30">Th\xE0nh ti\u1EC1n</div><div flex="70" \nclass="text-bold">{{vm.totalMoney() | currency : \'\' : 0 }}</div></div><div layout="row" class="padding-top-8" \nng-show="(vm.numbers | filter : {selected : true}).length" ng-click="vm.showFull = !vm.showFull"><div \nclass="sub-title number" ng-class="{\'full\' : vm.showFull}"><div>Danh s\xE1ch</div><span class="md-accent-fg md-hue-1" \nng-repeat="n in vm.numbers | filter : {selected : true}">{{n.number}}<span ng-if="!$last">,&nbsp;</span></span></div>\n</div><div layout="row" class="padding-top-8" ng-if="$root.isAuthenticated"><div class="sub-title secondary" flex="30">\nT\u1ED1i \u0111a</div><div flex="70" class="text-bold sub-title secondary">{{vm.purchaseLimit(2,19) | currency : \'\' : 0 }} \u0110i\u1EC3m\n</div></div><div layout="row" class="balance" ng-if="$root.isAuthenticated"><div class="sub-title secondary" flex="30">\nS\u1ED1 d\u01B0</div><div flex="70" class="text-bold sub-title secondary" layout="row" layout-align="space-between center">\n{{ $root.User.Balance | currency : \'\' : 0 }}<md-button class="md-icon-button" ng-click="$root.updateBalance()" \nng-disabled="$root.User.updating"><md-icon md-font-icon="icon-refresh" class="s16" \nng-class="{\'rotating\' : $root.User.updating }"></md-icon></md-button></div></div></div></div></div><div layout="column" \nclass="recent-betting-list" ng-include="\'app/main/traditional/betting/recent-ticket.html\'" \nng-show="$root.latestTicket.length"></div></div></div><script type="text/ng-template" id="popooxx">\n<div class="triangle"></div>    <div class="ns-popover-tooltip">\n        <div layout="column" class="panel">\n            <div class="header" layout="row" layout-align="space-between center">\n                <h3>OOXX</h3>\n                <md-button class="md-icon-button"><md-icon md-font-icon="icon-close" ng-click="hidePopover()"></md-icon></md-button>\n            </div>\n            <div class="content">\n                <md-button ng-repeat="pop in vm.popooxx" md-no-ink ng-class="{\'md-warn\': vm.cond4d.name === pop.name}" ng-click="vm.changeLabel(pop)">{{pop.name}}</md-button>\n            </div>\n        </div>\n    </div></script><script type="text/ng-template" id="popoxxo"><div class="triangle"></div>\n    <div class="ns-popover-tooltip">\n        <div layout="column" class="panel">\n            <div class="header" layout="row" layout-align="space-between center">\n                <h3>OXXO</h3>\n                <md-button class="md-icon-button"><md-icon md-font-icon="icon-close" ng-click="hidePopover()"></md-icon></md-button>\n            </div>\n            <div class="content">\n                <md-button ng-repeat="pop in vm.popoxxo" md-no-ink ng-class="{\'md-warn\': vm.cond4d.name === pop.name}" ng-click="vm.changeLabel(pop)">{{pop.name}}</md-button>\n            </div>\n        </div>\n    </div></script><script type="text/ng-template" id="popoxox"><div class="triangle"></div>\n    <div class="ns-popover-tooltip">\n        <div layout="column" class="panel">\n            <div class="header" layout="row" layout-align="space-between center">\n                <h3>OXOX</h3>\n                <md-button class="md-icon-button"><md-icon md-font-icon="icon-close" ng-click="hidePopover()"></md-icon></md-button>\n            </div>\n            <div class="content">\n                <md-button ng-repeat="pop in vm.popoxox" md-no-ink ng-class="{\'md-warn\': vm.cond4d.name === pop.name}" ng-click="vm.changeLabel(pop)">{{pop.name}}</md-button>\n            </div>\n        </div>\n    </div></script><script type="text/ng-template" id="popxoxo"><div class="triangle"></div>\n    <div class="ns-popover-tooltip">\n        <div layout="column" class="panel">\n            <div class="header" layout="row" layout-align="space-between center">\n                <h3>XOXO</h3>\n                <md-button class="md-icon-button"><md-icon md-font-icon="icon-close" ng-click="hidePopover()"></md-icon></md-button>\n            </div>\n            <div class="content">\n                <md-button ng-repeat="pop in vm.popxoxo" md-no-ink ng-class="{\'md-warn\': vm.cond4d.name === pop.name}" ng-click="vm.changeLabel(pop)">{{pop.name}}</md-button>\n            </div>\n        </div>\n    </div></script><script type="text/ng-template" id="popxoox"><div class="triangle"></div>\n    <div class="ns-popover-tooltip">\n        <div layout="column" class="panel">\n            <div class="header" layout="row" layout-align="space-between center">\n                <h3>XOOX</h3>\n                <md-button class="md-icon-button"><md-icon md-font-icon="icon-close" ng-click="hidePopover()"></md-icon></md-button>\n            </div>\n            <div class="content">\n                <md-button ng-repeat="pop in vm.popxoox" md-no-ink ng-class="{\'md-warn\': vm.cond4d.name === pop.name}" ng-click="vm.changeLabel(pop)">{{pop.name}}</md-button>\n            </div>\n        </div>\n    </div></script><script type="text/ng-template" id="popxxoo"><div class="triangle"></div>\n    <div class="ns-popover-tooltip">\n        <div layout="column" class="panel">\n            <div class="header" layout="row" layout-align="space-between center">\n                <h3>XXOO</h3>\n                <md-button class="md-icon-button"><md-icon md-font-icon="icon-close" ng-click="hidePopover()"></md-icon></md-button>\n            </div>\n            <div class="content">\n                <md-button ng-repeat="pop in vm.popxxoo" md-no-ink ng-class="{\'md-warn\': vm.cond4d.name === pop.name}" ng-click="vm.changeLabel(pop)">{{pop.name}}</md-button>\n            </div>\n        </div>\n    </div></script>');
$templateCache.put('app/main/traditional/southern/3d/17lo/17lo.html','<div class="main-game" layout-gt-sm="row" layout="column"><div flex-gt-sm="70" flex="100" class="content-number-wrap">\n<div layout="column" class="content-number md-whiteframe-1dp md-primary-bg"><div class="number-filter" layout="row" \nlayout-xs="column"><div layout="row" class="hundreds"><span class="label">\u0110\u1EA7u</span> <span ng-click="vm.changeLabel(0)" \nng-class="{\'active\': vm.label === 0}">0</span> <span ng-click="vm.changeLabel(1)" ng-class="{\'active\': vm.label === 1}">\n1</span> <span ng-click="vm.changeLabel(2)" ng-class="{\'active\': vm.label === 2}">2</span> <span \nng-click="vm.changeLabel(3)" ng-class="{\'active\': vm.label === 3}">3</span> <span ng-click="vm.changeLabel(4)" \nng-class="{\'active\': vm.label === 4}">4</span> <span ng-click="vm.changeLabel(5)" ng-class="{\'active\': vm.label === 5}">\n5</span> <span ng-click="vm.changeLabel(6)" ng-class="{\'active\': vm.label === 6}">6</span> <span \nng-click="vm.changeLabel(7)" ng-class="{\'active\': vm.label === 7}">7</span> <span ng-click="vm.changeLabel(8)" \nng-class="{\'active\': vm.label === 8}">8</span> <span ng-click="vm.changeLabel(9)" ng-class="{\'active\': vm.label === 9}">\n9</span></div><div layout="row" class="hundreds"><span class="label">Gi\u1EEFa</span> <span ng-click="vm.changeLabel(10)" \nng-class="{\'active\': vm.label === 10}">0</span> <span ng-click="vm.changeLabel(11)" \nng-class="{\'active\': vm.label === 11}">1</span> <span ng-click="vm.changeLabel(12)" \nng-class="{\'active\': vm.label === 12}">2</span> <span ng-click="vm.changeLabel(13)" \nng-class="{\'active\': vm.label === 13}">3</span> <span ng-click="vm.changeLabel(14)" \nng-class="{\'active\': vm.label === 14}">4</span> <span ng-click="vm.changeLabel(15)" \nng-class="{\'active\': vm.label === 15}">5</span> <span ng-click="vm.changeLabel(16)" \nng-class="{\'active\': vm.label === 16}">6</span> <span ng-click="vm.changeLabel(17)" \nng-class="{\'active\': vm.label === 17}">7</span> <span ng-click="vm.changeLabel(18)" \nng-class="{\'active\': vm.label === 18}">8</span> <span ng-click="vm.changeLabel(19)" \nng-class="{\'active\': vm.label === 19}">9</span></div></div><table><tbody><tr hide show-gt-xs><td></td><td colspan="10" \nlayout="row" class="row-check"><div layout="row" layout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" \nng-checked="vm.exists(10)" ng-click="vm.groupNumbers(10)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div \nlayout="row" layout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(11)" \nng-click="vm.groupNumbers(11)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(12)" \nng-click="vm.groupNumbers(12)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(13)" \nng-click="vm.groupNumbers(13)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(14)" \nng-click="vm.groupNumbers(14)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(15)" \nng-click="vm.groupNumbers(15)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(16)" \nng-click="vm.groupNumbers(16)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(17)" \nng-click="vm.groupNumbers(17)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(18)" \nng-click="vm.groupNumbers(18)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(19)" \nng-click="vm.groupNumbers(19)" ng-disabled="!$root.allowBetting"></md-checkbox></div></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(0)" \nng-click="vm.groupNumbers(0)" ng-disabled="!$root.allowBetting"></md-checkbox></td><td colspan="10" rowspan="10" \nclass="main-number"><div class="repeater-number" ng-repeat="n in vm.numbers"><div \nclass="inner-number miennam md-one-number" layout="row" ng-click="vm.selectNumber(n)" \nng-class="{\'active\' : n.selected, \'changed-price\': n.priceChanged, \'stop\' : !$root.allowBetting }"><div flex="50" \nclass="price md-accent-fg md-hue-1" layout="column" hide show-gt-xs><div><span \nng-class="{\'price-up\': n.price[17][2] > n.basePrice, \'stop\' : n.disabled[17][2]}">{{n.price[17][2]}}</span></div><div>\n<span ng-class="{\'price-up\': n.price[17][3] > n.basePrice, \'stop\' : n.disabled[17][3]}">{{n.price[17][3]}}</span></div>\n<div><span ng-class="{\'price-up\': n.price[17][4] > n.basePrice, \'stop\' : n.disabled[17][4]}">{{n.price[17][4]}}</span>\n</div></div><div flex="50" flex-xs="100" class="number d3">{{n.number}}</div></div></div></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(1)" \nng-click="vm.groupNumbers(1)" ng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(2)" \nng-click="vm.groupNumbers(2)" ng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(3)" \nng-click="vm.groupNumbers(3)" ng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(4)" \nng-click="vm.groupNumbers(4)" ng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(5)" \nng-click="vm.groupNumbers(5)" ng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(6)" \nng-click="vm.groupNumbers(6)" ng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(7)" \nng-click="vm.groupNumbers(7)" ng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(8)" \nng-click="vm.groupNumbers(8)" ng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(9)" \nng-click="vm.groupNumbers(9)" ng-disabled="!$root.allowBetting"></md-checkbox></td></tr></tbody></table></div></div><div\n flex-gt-sm="30" flex="100" layout="column" class="main-right-betting-form"><div layout="column" \nclass="betting-form-wrap"><div class="betting-form md-whiteframe-1dp md-primary-bg" layout="column"><div \nclass="betting-form-header"><div layout="row"><div flex="30">\u0110\u1EB7t c\u01B0\u1EE3c</div><div flex="70" class="text-right">\n3D 17L\xF4 - Mi\u1EC1n Nam</div></div></div><div class="betting-form-content"><form name="basicForm" class="md-inline-form" \nng-submit="vm.submitBetting()" novalidate><div layout="row" class="padding-top-8"><div \nclass="sub-title padding-right-8" flex="30"><span class="text-boxed-one">S\u1ED1 \u0111i\u1EC3m</span></div><div flex="70" \nlayout="row"><input type="tel" class="bet-input md-one-input" ng-model="vm.inputPoint" maxlength="5" ng-currency \nnumeric-only select-on-click ng-disabled="!(vm.numbers | filter : {selected : true}).length" autocomplete="off"></div>\n</div><div layout="row" class="regirons"><div class="sub-title padding-right-8" flex="30"><span class="text-boxed-one">\nCh\u1ECDn \u0111\xE0i</span></div><div flex="70" layout="column"><div ng-repeat="regiron in one.regirons"><md-checkbox \naria-label="Checkbox" ng-checked="one.exists(regiron.GameType)" ng-disabled="one.checkAllowBetting(regiron.GameType)" \nng-click="one.toggle(regiron.GameType)">{{regiron.CityName}}</md-checkbox></div></div></div><div layout="row" \nclass="padding-top-8"><div flex="30" class="padding-right-8"><md-button \nclass="betting-button cancel-button md-warn md-raised" ng-disabled="!(vm.numbers | filter : {selected : true}).length" \nng-click="vm.resetBetting()"><md-icon md-font-icon="icon-close" class="s20"></md-icon></md-button></div><div flex="70">\n<md-button class="betting-button md-raised md-accent" type="submit" ng-disabled="vm.totalPoint() === 0">\u0110\u1EB7t c\u01B0\u1EE3c\n</md-button></div></div><div class="ignore-price"><md-checkbox ng-model="vm.ignorePrice" aria-label="Ignore Price">\nKh\xF4ng h\u1ECFi l\u1EA1i khi c\xF3 gi\xE1 thay \u0111\u1ED5i</md-checkbox></div></form><div layout="row" class="padding-top-16"><div \nclass="sub-title" flex="30">T\u1ED5ng \u0111i\u1EC3m</div><div flex="70" class="text-bold">{{vm.totalPoint() | currency : \'\' : 0 }}\n</div></div><div layout="row" class="padding-top-8"><div class="sub-title" flex="30">Th\xE0nh ti\u1EC1n</div><div flex="70" \nclass="text-bold">{{vm.totalMoney() | currency : \'\' : 0 }}</div></div><div layout="row" class="padding-top-8" \nng-show="(vm.numbers | filter : {selected : true}).length" ng-click="vm.showFull = !vm.showFull"><div \nclass="sub-title number" ng-class="{\'full\' : vm.showFull}"><div>Danh s\xE1ch</div><span class="md-accent-fg md-hue-1" \nng-repeat="n in vm.numbers | filter : {selected : true}">{{n.number}}<span ng-if="!$last">,&nbsp;</span></span></div>\n</div><div layout="row" class="padding-top-8" ng-if="$root.isAuthenticated"><div class="sub-title secondary" flex="30">\nT\u1ED1i \u0111a</div><div flex="70" class="text-bold sub-title secondary">{{vm.purchaseLimit(2,17) | currency : \'\' : 0 }} \u0110i\u1EC3m\n</div></div><div layout="row" class="balance" ng-if="$root.isAuthenticated"><div class="sub-title secondary" flex="30">\nS\u1ED1 d\u01B0</div><div flex="70" class="text-bold sub-title secondary" layout="row" layout-align="space-between center">\n{{ $root.User.Balance | currency : \'\' : 0 }}<md-button class="md-icon-button" ng-click="$root.updateBalance()" \nng-disabled="$root.User.updating"><md-icon md-font-icon="icon-refresh" class="s16" \nng-class="{\'rotating\' : $root.User.updating }"></md-icon></md-button></div></div></div></div></div><div layout="column" \nclass="recent-betting-list" ng-include="\'app/main/traditional/betting/recent-ticket.html\'" \nng-show="$root.latestTicket.length"></div></div></div>');
$templateCache.put('app/main/traditional/southern/3d/7lo/7lo.html','<div class="main-game" layout-gt-sm="row" layout="column"><div flex-gt-sm="70" flex="100" class="content-number-wrap">\n<div layout="column" class="content-number md-whiteframe-1dp md-primary-bg"><div class="number-filter" layout="row" \nlayout-xs="column"><div layout="row" class="hundreds"><span class="label">\u0110\u1EA7u</span> <span ng-click="vm.changeLabel(0)" \nng-class="{\'active\': vm.label === 0}">0</span> <span ng-click="vm.changeLabel(1)" ng-class="{\'active\': vm.label === 1}">\n1</span> <span ng-click="vm.changeLabel(2)" ng-class="{\'active\': vm.label === 2}">2</span> <span \nng-click="vm.changeLabel(3)" ng-class="{\'active\': vm.label === 3}">3</span> <span ng-click="vm.changeLabel(4)" \nng-class="{\'active\': vm.label === 4}">4</span> <span ng-click="vm.changeLabel(5)" ng-class="{\'active\': vm.label === 5}">\n5</span> <span ng-click="vm.changeLabel(6)" ng-class="{\'active\': vm.label === 6}">6</span> <span \nng-click="vm.changeLabel(7)" ng-class="{\'active\': vm.label === 7}">7</span> <span ng-click="vm.changeLabel(8)" \nng-class="{\'active\': vm.label === 8}">8</span> <span ng-click="vm.changeLabel(9)" ng-class="{\'active\': vm.label === 9}">\n9</span></div><div layout="row" class="hundreds"><span class="label">Gi\u1EEFa</span> <span ng-click="vm.changeLabel(10)" \nng-class="{\'active\': vm.label === 10}">0</span> <span ng-click="vm.changeLabel(11)" \nng-class="{\'active\': vm.label === 11}">1</span> <span ng-click="vm.changeLabel(12)" \nng-class="{\'active\': vm.label === 12}">2</span> <span ng-click="vm.changeLabel(13)" \nng-class="{\'active\': vm.label === 13}">3</span> <span ng-click="vm.changeLabel(14)" \nng-class="{\'active\': vm.label === 14}">4</span> <span ng-click="vm.changeLabel(15)" \nng-class="{\'active\': vm.label === 15}">5</span> <span ng-click="vm.changeLabel(16)" \nng-class="{\'active\': vm.label === 16}">6</span> <span ng-click="vm.changeLabel(17)" \nng-class="{\'active\': vm.label === 17}">7</span> <span ng-click="vm.changeLabel(18)" \nng-class="{\'active\': vm.label === 18}">8</span> <span ng-click="vm.changeLabel(19)" \nng-class="{\'active\': vm.label === 19}">9</span></div></div><table><tbody><tr hide show-gt-xs><td></td><td colspan="10" \nlayout="row" class="row-check"><div layout="row" layout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" \nng-checked="vm.exists(10)" ng-click="vm.groupNumbers(10)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div \nlayout="row" layout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(11)" \nng-click="vm.groupNumbers(11)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(12)" \nng-click="vm.groupNumbers(12)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(13)" \nng-click="vm.groupNumbers(13)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(14)" \nng-click="vm.groupNumbers(14)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(15)" \nng-click="vm.groupNumbers(15)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(16)" \nng-click="vm.groupNumbers(16)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(17)" \nng-click="vm.groupNumbers(17)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(18)" \nng-click="vm.groupNumbers(18)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(19)" \nng-click="vm.groupNumbers(19)" ng-disabled="!$root.allowBetting"></md-checkbox></div></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(0)" \nng-click="vm.groupNumbers(0)" ng-disabled="!$root.allowBetting"></md-checkbox></td><td colspan="10" rowspan="10" \nclass="main-number"><div class="repeater-number" ng-repeat="n in vm.numbers"><div \nclass="inner-number miennam md-one-number" layout="row" ng-click="vm.selectNumber(n)" \nng-class="{\'active\' : n.selected, \'changed-price\': n.priceChanged, \'stop\' : !$root.allowBetting }"><div flex="50" \nclass="price md-accent-fg md-hue-1" layout="column" hide show-gt-xs><div><span \nng-class="{\'price-up\': n.price[18][2] > n.basePrice, \'stop\' : n.disabled[18][2]}">{{n.price[18][2]}}</span></div><div>\n<span ng-class="{\'price-up\': n.price[18][3] > n.basePrice, \'stop\' : n.disabled[18][3]}">{{n.price[18][3]}}</span></div>\n<div><span ng-class="{\'price-up\': n.price[18][4] > n.basePrice, \'stop\' : n.disabled[18][4]}">{{n.price[18][4]}}</span>\n</div></div><div flex="50" flex-xs="100" class="number d3">{{n.number}}</div></div></div></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(1)" \nng-click="vm.groupNumbers(1)" ng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(2)" \nng-click="vm.groupNumbers(2)" ng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(3)" \nng-click="vm.groupNumbers(3)" ng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(4)" \nng-click="vm.groupNumbers(4)" ng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(5)" \nng-click="vm.groupNumbers(5)" ng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(6)" \nng-click="vm.groupNumbers(6)" ng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(7)" \nng-click="vm.groupNumbers(7)" ng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(8)" \nng-click="vm.groupNumbers(8)" ng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(9)" \nng-click="vm.groupNumbers(9)" ng-disabled="!$root.allowBetting"></md-checkbox></td></tr></tbody></table></div></div><div\n flex-gt-sm="30" flex="100" layout="column" class="main-right-betting-form"><div layout="column" \nclass="betting-form-wrap"><div class="betting-form md-whiteframe-1dp md-primary-bg" layout="column"><div \nclass="betting-form-header"><div layout="row"><div flex="30">\u0110\u1EB7t c\u01B0\u1EE3c</div><div flex="70" class="text-right">\n3D 7L\xF4 - Mi\u1EC1n Nam</div></div></div><div class="betting-form-content"><form name="basicForm" class="md-inline-form" \nng-submit="vm.submitBetting()" novalidate><div layout="row" class="padding-top-8"><div class="sub-title" flex="30">\nS\u1ED1 \u0111i\u1EC3m</div><div flex="70" layout="row"><input type="tel" class="bet-input md-one-input" ng-model="vm.inputPoint" \nng-currency numeric-only select-on-click ng-disabled="!(vm.numbers | filter : {selected : true}).length" \nautocomplete="off" maxlength="5"></div></div><div layout="row" class="regirons"><div class="sub-title padding-right-8" \nflex="30"><span class="text-boxed-one">Ch\u1ECDn \u0111\xE0i</span></div><div flex="70" layout="column"><div \nng-repeat="regiron in one.regirons"><md-checkbox aria-label="Checkbox" ng-checked="one.exists(regiron.GameType)" \nng-disabled="one.checkAllowBetting(regiron.GameType)" ng-click="one.toggle(regiron.GameType)">{{regiron.CityName}}\n</md-checkbox></div></div></div><div layout="row" class="padding-top-8"><div flex="30" class="padding-right-8">\n<md-button class="betting-button cancel-button md-warn md-raised" \nng-disabled="!(vm.numbers | filter : {selected : true}).length" ng-click="vm.resetBetting()"><md-icon \nmd-font-icon="icon-close" class="s20"></md-icon></md-button></div><div flex="70"><md-button \nclass="betting-button md-raised md-accent" type="submit" ng-disabled="vm.totalPoint() === 0">\u0110\u1EB7t c\u01B0\u1EE3c</md-button></div>\n</div><div class="ignore-price"><md-checkbox ng-model="vm.ignorePrice" aria-label="Ignore Price">\nKh\xF4ng h\u1ECFi l\u1EA1i khi c\xF3 gi\xE1 thay \u0111\u1ED5i</md-checkbox></div></form><div layout="row" class="padding-top-16"><div \nclass="sub-title" flex="30">T\u1ED5ng \u0111i\u1EC3m</div><div flex="70" class="text-bold">{{vm.totalPoint() | currency : \'\' : 0 }}\n</div></div><div layout="row" class="padding-top-8"><div class="sub-title" flex="30">Th\xE0nh ti\u1EC1n</div><div flex="70" \nclass="text-bold">{{vm.totalMoney() | currency : \'\' : 0 }}</div></div><div layout="row" class="padding-top-8" \nng-show="(vm.numbers | filter : {selected : true}).length" ng-click="vm.showFull = !vm.showFull"><div \nclass="sub-title number" ng-class="{\'full\' : vm.showFull}"><div>Danh s\xE1ch</div><span class="md-accent-fg md-hue-1" \nng-repeat="n in vm.numbers | filter : {selected : true}">{{n.number}}<span ng-if="!$last">,&nbsp;</span></span></div>\n</div><div layout="row" class="padding-top-8" ng-if="$root.isAuthenticated"><div class="sub-title secondary" flex="30">\nT\u1ED1i \u0111a</div><div flex="70" class="text-bold sub-title secondary">{{vm.purchaseLimit(2,18) | currency : \'\' : 0 }} \u0110i\u1EC3m\n</div></div><div layout="row" class="balance" ng-if="$root.isAuthenticated"><div class="sub-title secondary" flex="30">\nS\u1ED1 d\u01B0</div><div flex="70" class="text-bold sub-title secondary" layout="row" layout-align="space-between center">\n{{ $root.User.Balance | currency : \'\' : 0 }}<md-button class="md-icon-button" ng-click="$root.updateBalance()" \nng-disabled="$root.User.updating"><md-icon md-font-icon="icon-refresh" class="s16" \nng-class="{\'rotating\' : $root.User.updating }"></md-icon></md-button></div></div></div></div></div><div layout="column" \nclass="recent-betting-list" ng-include="\'app/main/traditional/betting/recent-ticket.html\'" \nng-show="$root.latestTicket.length"></div></div></div>');
$templateCache.put('app/main/traditional/southern/3d/dau/dau.html','<div class="main-game" layout-gt-sm="row" layout="column"><div flex-gt-sm="70" flex="100" class="content-number-wrap">\n<div layout="column" class="content-number md-whiteframe-1dp md-primary-bg"><div class="number-filter" layout="row" \nlayout-xs="column"><div layout="row" class="hundreds"><span class="label">\u0110\u1EA7u</span> <span ng-click="vm.changeLabel(0)" \nng-class="{\'active\': vm.label === 0}">0</span> <span ng-click="vm.changeLabel(1)" ng-class="{\'active\': vm.label === 1}">\n1</span> <span ng-click="vm.changeLabel(2)" ng-class="{\'active\': vm.label === 2}">2</span> <span \nng-click="vm.changeLabel(3)" ng-class="{\'active\': vm.label === 3}">3</span> <span ng-click="vm.changeLabel(4)" \nng-class="{\'active\': vm.label === 4}">4</span> <span ng-click="vm.changeLabel(5)" ng-class="{\'active\': vm.label === 5}">\n5</span> <span ng-click="vm.changeLabel(6)" ng-class="{\'active\': vm.label === 6}">6</span> <span \nng-click="vm.changeLabel(7)" ng-class="{\'active\': vm.label === 7}">7</span> <span ng-click="vm.changeLabel(8)" \nng-class="{\'active\': vm.label === 8}">8</span> <span ng-click="vm.changeLabel(9)" ng-class="{\'active\': vm.label === 9}">\n9</span></div><div layout="row" class="hundreds"><span class="label">Gi\u1EEFa</span> <span ng-click="vm.changeLabel(10)" \nng-class="{\'active\': vm.label === 10}">0</span> <span ng-click="vm.changeLabel(11)" \nng-class="{\'active\': vm.label === 11}">1</span> <span ng-click="vm.changeLabel(12)" \nng-class="{\'active\': vm.label === 12}">2</span> <span ng-click="vm.changeLabel(13)" \nng-class="{\'active\': vm.label === 13}">3</span> <span ng-click="vm.changeLabel(14)" \nng-class="{\'active\': vm.label === 14}">4</span> <span ng-click="vm.changeLabel(15)" \nng-class="{\'active\': vm.label === 15}">5</span> <span ng-click="vm.changeLabel(16)" \nng-class="{\'active\': vm.label === 16}">6</span> <span ng-click="vm.changeLabel(17)" \nng-class="{\'active\': vm.label === 17}">7</span> <span ng-click="vm.changeLabel(18)" \nng-class="{\'active\': vm.label === 18}">8</span> <span ng-click="vm.changeLabel(19)" \nng-class="{\'active\': vm.label === 19}">9</span></div></div><table><tbody><tr hide show-gt-xs><td></td><td colspan="10" \nlayout="row" class="row-check"><div layout="row" layout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" \nng-checked="vm.exists(10)" ng-click="vm.groupNumbers(10)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div \nlayout="row" layout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(11)" \nng-click="vm.groupNumbers(11)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(12)" \nng-click="vm.groupNumbers(12)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(13)" \nng-click="vm.groupNumbers(13)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(14)" \nng-click="vm.groupNumbers(14)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(15)" \nng-click="vm.groupNumbers(15)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(16)" \nng-click="vm.groupNumbers(16)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(17)" \nng-click="vm.groupNumbers(17)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(18)" \nng-click="vm.groupNumbers(18)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(19)" \nng-click="vm.groupNumbers(19)" ng-disabled="!$root.allowBetting"></md-checkbox></div></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(0)" \nng-click="vm.groupNumbers(0)" ng-disabled="!$root.allowBetting"></md-checkbox></td><td colspan="10" rowspan="10" \nclass="main-number"><div class="repeater-number" ng-repeat="n in vm.numbers"><div \nclass="inner-number miennam md-one-number" layout="row" ng-click="vm.selectNumber(n)" \nng-class="{\'active\' : n.selected, \'changed-price\': n.priceChanged, \'stop\' : !$root.allowBetting }"><div flex="50" \nclass="price md-accent-fg md-hue-1" layout="column" hide show-gt-xs><div><span \nng-class="{\'price-up\': n.price[10][2] > n.basePrice, \'stop\' : n.disabled[10][2]}">{{n.price[10][2]}}</span></div><div>\n<span ng-class="{\'price-up\': n.price[10][3] > n.basePrice, \'stop\' : n.disabled[10][3]}">{{n.price[10][3]}}</span></div>\n<div><span ng-class="{\'price-up\': n.price[10][4] > n.basePrice, \'stop\' : n.disabled[10][4]}">{{n.price[10][4]}}</span>\n</div></div><div flex="50" flex-xs="100" class="number d3">{{n.number}}</div></div></div></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(1)" \nng-click="vm.groupNumbers(1)" ng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(2)" \nng-click="vm.groupNumbers(2)" ng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(3)" \nng-click="vm.groupNumbers(3)" ng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(4)" \nng-click="vm.groupNumbers(4)" ng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(5)" \nng-click="vm.groupNumbers(5)" ng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(6)" \nng-click="vm.groupNumbers(6)" ng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(7)" \nng-click="vm.groupNumbers(7)" ng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(8)" \nng-click="vm.groupNumbers(8)" ng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(9)" \nng-click="vm.groupNumbers(9)" ng-disabled="!$root.allowBetting"></md-checkbox></td></tr></tbody></table></div></div><div\n flex-gt-sm="30" flex="100" layout="column" class="main-right-betting-form"><div layout="column" \nclass="betting-form-wrap"><div class="betting-form md-whiteframe-1dp md-primary-bg" layout="column"><div \nclass="betting-form-header"><div layout="row"><div flex="30">\u0110\u1EB7t c\u01B0\u1EE3c</div><div flex="70" class="text-right">\n{{vm.betID | bet}} - Mi\u1EC1n Nam</div></div></div><div class="betting-form-content"><form name="basicForm" \nclass="md-inline-form" ng-submit="vm.submitBetting()" novalidate><div layout="row" class="padding-top-8" flex="70" \nflex-offset="30"><div flex="33">\u0110\u1EA7u</div><div flex="33">\u0110u\xF4i</div><div flex="33">\u0110\u1EA7u \u0110u\xF4i</div></div><div layout="row" \nclass="padding-top-8"><div class="sub-title padding-right-8" flex="30"><span class="text-boxed-one">S\u1ED1 \u0111i\u1EC3m</span></div>\n<div flex="70" layout="row"><div flex="33" class="bet-input-1"><input type="tel" class="bet-input md-one-input" \nmaxlength="5" ng-model="vm.inputPointDau" ng-currency numeric-only select-on-click \nng-disabled="!(vm.numbers | filter : {selected : true}).length" autocomplete="off" tabindex="2"></div><div flex="33" \nclass="bet-input-2"><input type="tel" class="bet-input md-one-input" maxlength="5" ng-model="vm.inputPointDuoi" \nng-currency numeric-only select-on-click ng-disabled="!(vm.numbers | filter : {selected : true}).length" \nautocomplete="off" tabindex="2"></div><div flex="33" class="bet-input-3"><input type="tel" \nclass="bet-input md-one-input" maxlength="5" ng-model="vm.inputPointDd" ng-currency numeric-only select-on-click \nng-disabled="!(vm.numbers | filter : {selected : true}).length" autocomplete="off" tabindex="2"></div></div></div><div \nlayout="row" class="regirons"><div class="sub-title padding-right-8" flex="30"><span class="text-boxed-one">Ch\u1ECDn \u0111\xE0i\n</span></div><div flex="70" layout="column"><div ng-repeat="regiron in one.regirons"><md-checkbox aria-label="Checkbox" \nng-checked="one.exists(regiron.GameType)" ng-disabled="one.checkAllowBetting(regiron.GameType)" \nng-click="one.toggle(regiron.GameType)">{{regiron.CityName}}</md-checkbox></div></div></div><div layout="row" \nclass="padding-top-8"><div flex="30" class="padding-right-8"><md-button \nclass="betting-button cancel-button md-warn md-raised" ng-disabled="!(vm.numbers | filter : {selected : true}).length" \nng-click="vm.resetBetting()"><md-icon md-font-icon="icon-close" class="s20"></md-icon></md-button></div><div flex="70">\n<md-button class="betting-button md-raised md-accent" type="submit" ng-disabled="vm.totalPoint() === 0">\u0110\u1EB7t c\u01B0\u1EE3c\n</md-button></div></div><div class="ignore-price"><md-checkbox ng-model="vm.ignorePrice" aria-label="Ignore Price">\nKh\xF4ng h\u1ECFi l\u1EA1i khi c\xF3 gi\xE1 thay \u0111\u1ED5i</md-checkbox></div></form><div layout="row" class="padding-top-16"><div \nclass="sub-title" flex="30">T\u1ED5ng \u0111i\u1EC3m</div><div flex="70" class="text-bold">{{vm.totalPoint() | currency : \'\' : 0 }}\n</div></div><div layout="row" class="padding-top-8"><div class="sub-title" flex="30">Th\xE0nh ti\u1EC1n</div><div flex="70" \nclass="text-bold">{{vm.totalMoney() | currency : \'\' : 0 }}</div></div><div layout="row" class="padding-top-8" \nng-show="(vm.numbers | filter : {selected : true}).length" ng-click="vm.showFull = !vm.showFull"><div \nclass="sub-title number" ng-class="{\'full\' : vm.showFull}"><div>Danh s\xE1ch</div><span class="md-accent-fg md-hue-1" \nng-repeat="n in vm.numbers | filter : {selected : true}">{{n.number}}<span ng-if="!$last">,&nbsp;</span></span></div>\n</div><div layout="row" class="padding-top-8" ng-if="$root.isAuthenticated"><div class="sub-title secondary" flex="30">\nT\u1ED1i \u0111a</div><div flex="70" class="text-bold sub-title secondary">{{vm.purchaseLimit(2,10) | currency : \'\' : 0 }} \u0110i\u1EC3m\n</div></div><div layout="row" class="balance" ng-if="$root.isAuthenticated"><div class="sub-title secondary" flex="30">\nS\u1ED1 d\u01B0</div><div flex="70" class="text-bold sub-title secondary" layout="row" layout-align="space-between center">\n{{ $root.User.Balance | currency : \'\' : 0 }}<md-button class="md-icon-button" ng-click="$root.updateBalance()" \nng-disabled="$root.User.updating"><md-icon md-font-icon="icon-refresh" class="s16" \nng-class="{\'rotating\' : $root.User.updating }"></md-icon></md-button></div></div></div></div></div><div layout="column" \nclass="recent-betting-list" ng-include="\'app/main/traditional/betting/recent-ticket.html\'" \nng-show="$root.latestTicket.length"></div></div></div>');
$templateCache.put('app/main/traditional/southern/3d/duoi/duoi.html','<div class="main-game" layout-gt-sm="row" layout="column"><div flex-gt-sm="70" flex="100" class="content-number-wrap">\n<div layout="column" class="content-number md-whiteframe-1dp md-primary-bg"><div class="number-filter" layout="row" \nlayout-xs="column"><div layout="row" class="hundreds"><span class="label">\u0110\u1EA7u</span> <span ng-click="vm.changeLabel(0)" \nng-class="{\'active\': vm.label === 0}">0</span> <span ng-click="vm.changeLabel(1)" ng-class="{\'active\': vm.label === 1}">\n1</span> <span ng-click="vm.changeLabel(2)" ng-class="{\'active\': vm.label === 2}">2</span> <span \nng-click="vm.changeLabel(3)" ng-class="{\'active\': vm.label === 3}">3</span> <span ng-click="vm.changeLabel(4)" \nng-class="{\'active\': vm.label === 4}">4</span> <span ng-click="vm.changeLabel(5)" ng-class="{\'active\': vm.label === 5}">\n5</span> <span ng-click="vm.changeLabel(6)" ng-class="{\'active\': vm.label === 6}">6</span> <span \nng-click="vm.changeLabel(7)" ng-class="{\'active\': vm.label === 7}">7</span> <span ng-click="vm.changeLabel(8)" \nng-class="{\'active\': vm.label === 8}">8</span> <span ng-click="vm.changeLabel(9)" ng-class="{\'active\': vm.label === 9}">\n9</span></div><div layout="row" class="hundreds"><span class="label">Gi\u1EEFa</span> <span ng-click="vm.changeLabel(10)" \nng-class="{\'active\': vm.label === 10}">0</span> <span ng-click="vm.changeLabel(11)" \nng-class="{\'active\': vm.label === 11}">1</span> <span ng-click="vm.changeLabel(12)" \nng-class="{\'active\': vm.label === 12}">2</span> <span ng-click="vm.changeLabel(13)" \nng-class="{\'active\': vm.label === 13}">3</span> <span ng-click="vm.changeLabel(14)" \nng-class="{\'active\': vm.label === 14}">4</span> <span ng-click="vm.changeLabel(15)" \nng-class="{\'active\': vm.label === 15}">5</span> <span ng-click="vm.changeLabel(16)" \nng-class="{\'active\': vm.label === 16}">6</span> <span ng-click="vm.changeLabel(17)" \nng-class="{\'active\': vm.label === 17}">7</span> <span ng-click="vm.changeLabel(18)" \nng-class="{\'active\': vm.label === 18}">8</span> <span ng-click="vm.changeLabel(19)" \nng-class="{\'active\': vm.label === 19}">9</span></div></div><table><tbody><tr hide show-gt-xs><td></td><td colspan="10" \nlayout="row" class="row-check"><div layout="row" layout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" \nng-checked="vm.exists(10)" ng-click="vm.groupNumbers(10)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div \nlayout="row" layout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(11)" \nng-click="vm.groupNumbers(11)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(12)" \nng-click="vm.groupNumbers(12)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(13)" \nng-click="vm.groupNumbers(13)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(14)" \nng-click="vm.groupNumbers(14)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(15)" \nng-click="vm.groupNumbers(15)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(16)" \nng-click="vm.groupNumbers(16)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(17)" \nng-click="vm.groupNumbers(17)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(18)" \nng-click="vm.groupNumbers(18)" ng-disabled="!$root.allowBetting"></md-checkbox></div><div layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(19)" \nng-click="vm.groupNumbers(19)" ng-disabled="!$root.allowBetting"></md-checkbox></div></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(0)" \nng-click="vm.groupNumbers(0)" ng-disabled="!$root.allowBetting"></md-checkbox></td><td colspan="10" rowspan="10" \nclass="main-number"><div class="repeater-number" ng-repeat="n in vm.numbers"><div \nclass="inner-number miennam md-one-number" layout="row" ng-click="vm.selectNumber(n)" \nng-class="{\'active\' : n.selected, \'changed-price\': n.priceChanged, \'stop\' : !$root.allowBetting }"><div flex="50" \nclass="price md-accent-fg md-hue-1" layout="column" hide show-gt-xs><div><span \nng-class="{\'price-up\': n.price[11][2] > n.basePrice, \'stop\' : n.disabled[11][2]}">{{n.price[11][2]}}</span></div><div>\n<span ng-class="{\'price-up\': n.price[11][3] > n.basePrice, \'stop\' : n.disabled[11][3]}">{{n.price[11][3]}}</span></div>\n<div><span ng-class="{\'price-up\': n.price[11][4] > n.basePrice, \'stop\' : n.disabled[11][4]}">{{n.price[11][4]}}</span>\n</div></div><div flex="50" flex-xs="100" class="number d3">{{n.number}}</div></div></div></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(1)" \nng-click="vm.groupNumbers(1)" ng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(2)" \nng-click="vm.groupNumbers(2)" ng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(3)" \nng-click="vm.groupNumbers(3)" ng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(4)" \nng-click="vm.groupNumbers(4)" ng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(5)" \nng-click="vm.groupNumbers(5)" ng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(6)" \nng-click="vm.groupNumbers(6)" ng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(7)" \nng-click="vm.groupNumbers(7)" ng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(8)" \nng-click="vm.groupNumbers(8)" ng-disabled="!$root.allowBetting"></md-checkbox></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.exists(9)" \nng-click="vm.groupNumbers(9)" ng-disabled="!$root.allowBetting"></md-checkbox></td></tr></tbody></table></div></div><div\n flex-gt-sm="30" flex="100" layout="column" class="main-right-betting-form"><div layout="column" \nclass="betting-form-wrap"><div class="betting-form md-whiteframe-1dp md-primary-bg" layout="column"><div \nclass="betting-form-header"><div layout="row"><div flex="30">\u0110\u1EB7t c\u01B0\u1EE3c</div><div flex="70" class="text-right">\n{{vm.betID | bet}} - Mi\u1EC1n Nam</div></div></div><div class="betting-form-content"><form name="basicForm" \nclass="md-inline-form" ng-submit="vm.submitBetting()" novalidate><div layout="row" class="padding-top-8" flex="70" \nflex-offset="30"><div flex="33">\u0110\u1EA7u</div><div flex="33">\u0110u\xF4i</div><div flex="33">\u0110\u1EA7u \u0110u\xF4i</div></div><div layout="row" \nclass="padding-top-8"><div class="sub-title padding-right-8" flex="30"><span class="text-boxed-one">S\u1ED1 \u0111i\u1EC3m</span></div>\n<div flex="70" layout="row"><div flex="33" class="bet-input-1"><input type="tel" class="bet-input md-one-input" \nmaxlength="5" ng-model="vm.inputPointDau" ng-currency numeric-only select-on-click \nng-disabled="!(vm.numbers | filter : {selected : true}).length" autocomplete="off" tabindex="2"></div><div flex="33" \nclass="bet-input-2"><input type="tel" class="bet-input md-one-input" maxlength="5" ng-model="vm.inputPointDuoi" \nng-currency numeric-only select-on-click ng-disabled="!(vm.numbers | filter : {selected : true}).length" \nautocomplete="off" tabindex="2"></div><div flex="33" class="bet-input-3"><input type="tel" \nclass="bet-input md-one-input" maxlength="5" ng-model="vm.inputPointDd" ng-currency numeric-only select-on-click \nng-disabled="!(vm.numbers | filter : {selected : true}).length" autocomplete="off" tabindex="2"></div></div></div><div \nlayout="row" class="regirons"><div class="sub-title padding-right-8" flex="30"><span class="text-boxed-one">Ch\u1ECDn \u0111\xE0i\n</span></div><div flex="70" layout="column"><div ng-repeat="regiron in one.regirons"><md-checkbox aria-label="Checkbox" \nng-checked="one.exists(regiron.GameType)" ng-disabled="one.checkAllowBetting(regiron.GameType)" \nng-click="one.toggle(regiron.GameType)">{{regiron.CityName}}</md-checkbox></div></div></div><div layout="row" \nclass="padding-top-8"><div flex="30" class="padding-right-8"><md-button \nclass="betting-button cancel-button md-warn md-raised" ng-disabled="!(vm.numbers | filter : {selected : true}).length" \nng-click="vm.resetBetting()"><md-icon md-font-icon="icon-close" class="s20"></md-icon></md-button></div><div flex="70">\n<md-button class="betting-button md-raised md-accent" type="submit" ng-disabled="vm.totalPoint() === 0">\u0110\u1EB7t c\u01B0\u1EE3c\n</md-button></div></div><div class="ignore-price"><md-checkbox ng-model="vm.ignorePrice" aria-label="Ignore Price">\nKh\xF4ng h\u1ECFi l\u1EA1i khi c\xF3 gi\xE1 thay \u0111\u1ED5i</md-checkbox></div></form><div layout="row" class="padding-top-16"><div \nclass="sub-title" flex="30">T\u1ED5ng \u0111i\u1EC3m</div><div flex="70" class="text-bold">{{vm.totalPoint() | currency : \'\' : 0 }}\n</div></div><div layout="row" class="padding-top-8"><div class="sub-title" flex="30">Th\xE0nh ti\u1EC1n</div><div flex="70" \nclass="text-bold">{{vm.totalMoney() | currency : \'\' : 0 }}</div></div><div layout="row" class="padding-top-8" \nng-show="(vm.numbers | filter : {selected : true}).length" ng-click="vm.showFull = !vm.showFull"><div \nclass="sub-title number" ng-class="{\'full\' : vm.showFull}"><div>Danh s\xE1ch</div><span class="md-accent-fg md-hue-1" \nng-repeat="n in vm.numbers | filter : {selected : true}">{{n.number}}<span ng-if="!$last">,&nbsp;</span></span></div>\n</div><div layout="row" class="padding-top-8" ng-if="$root.isAuthenticated"><div class="sub-title secondary" flex="30">\nT\u1ED1i \u0111a</div><div flex="70" class="text-bold sub-title secondary">{{vm.purchaseLimit(2,11) | currency : \'\' : 0 }} \u0110i\u1EC3m\n</div></div><div layout="row" class="balance" ng-if="$root.isAuthenticated"><div class="sub-title secondary" flex="30">\nS\u1ED1 d\u01B0</div><div flex="70" class="text-bold sub-title secondary" layout="row" layout-align="space-between center">\n{{ $root.User.Balance | currency : \'\' : 0 }}<md-button class="md-icon-button" ng-click="$root.updateBalance()" \nng-disabled="$root.User.updating"><md-icon md-font-icon="icon-refresh" class="s16" \nng-class="{\'rotating\' : $root.User.updating }"></md-icon></md-button></div></div></div></div></div><div layout="column" \nclass="recent-betting-list" ng-include="\'app/main/traditional/betting/recent-ticket.html\'" \nng-show="$root.latestTicket.length"></div></div></div>');
$templateCache.put('app/main/legendary/southern/2d/jackpot/legend.southern.2d.jackpot.html','<div class="main-game" layout-gt-sm="row" layout="column"><div flex-gt-sm="60" flex="100" class="content-number-wrap">\n<div layout="column" class="content-number"><div class="row-input-numbers"><form class="md-inline-form" \nng-submit="vm.number.submit()" novalidate layout="row"><div class="form-group" layout="column"><input type="tel" \nautocomplete="off" class="input-numbers-array" placeholder="D\xE3y s\u1ED1" ng-model="vm.keyNumber" \nng-keyup="vm.number.typing($event)" tabindex="1" ng-disabled="!legend.allowBetting"><div class="line"></div></div>\n<md-button class="md-raised" type="button" ng-click="vm.number.submit(true)" ng-disabled="!vm.keyNumber.length">Th\xEAm v\xE0o\n</md-button></form></div><div class="table-number-wrap"><table><tbody><tr hide show-gt-xs><td><md-checkbox md-no-ink \naria-label="Checkbox" ng-checked="vm.number.checkbox.exists(20)" ng-click="vm.number.checkbox.group(20)" \nng-disabled="!legend.allowBetting"></md-checkbox></td><td colspan="10" layout="row" class="row-check"><div flex="10">\n<md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.number.checkbox.exists(10)" \nng-click="vm.number.checkbox.group(10)" ng-disabled="!legend.allowBetting"></md-checkbox></div><div flex="10">\n<md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.number.checkbox.exists(11)" \nng-click="vm.number.checkbox.group(11)" ng-disabled="!legend.allowBetting"></md-checkbox></div><div flex="10">\n<md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.number.checkbox.exists(12)" \nng-click="vm.number.checkbox.group(12)" ng-disabled="!legend.allowBetting"></md-checkbox></div><div flex="10">\n<md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.number.checkbox.exists(13)" \nng-click="vm.number.checkbox.group(13)" ng-disabled="!legend.allowBetting"></md-checkbox></div><div flex="10">\n<md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.number.checkbox.exists(14)" \nng-click="vm.number.checkbox.group(14)" ng-disabled="!legend.allowBetting"></md-checkbox></div><div flex="10">\n<md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.number.checkbox.exists(15)" \nng-click="vm.number.checkbox.group(15)" ng-disabled="!legend.allowBetting"></md-checkbox></div><div flex="10">\n<md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.number.checkbox.exists(16)" \nng-click="vm.number.checkbox.group(16)" ng-disabled="!legend.allowBetting"></md-checkbox></div><div flex="10">\n<md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.number.checkbox.exists(17)" \nng-click="vm.number.checkbox.group(17)" ng-disabled="!legend.allowBetting"></md-checkbox></div><div flex="10">\n<md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.number.checkbox.exists(18)" \nng-click="vm.number.checkbox.group(18)" ng-disabled="!legend.allowBetting"></md-checkbox></div><div flex="10">\n<md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.number.checkbox.exists(19)" \nng-click="vm.number.checkbox.group(19)" ng-disabled="!legend.allowBetting"></md-checkbox></div></td></tr><tr><td>\n<md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.number.checkbox.exists(0)" \nng-click="vm.number.checkbox.group(0)" ng-disabled="!legend.allowBetting"></md-checkbox></td><td colspan="10" \nrowspan="10"><div class="main-number" layout="row" layout-wrap><div flex="10" class="repeater-number" \nng-repeat="n in vm.numbers"><div class="inner-number" layout="column" layout-align="space-around center" \nng-click="vm.number.select(n)" \nng-class="{\'active\' : n.selected,  \'changed-price\': n.priceChanged && legend.allowBetting, \'disabled\': n.disabled[vm.betId] || !legend.allowBetting}">\n<div class="number">{{n.number}}</div></div></div></div></td></tr><tr><td><md-checkbox md-no-ink aria-label="Checkbox" \nng-checked="vm.number.checkbox.exists(1)" ng-click="vm.number.checkbox.group(1)" ng-disabled="!legend.allowBetting">\n</md-checkbox></td></tr><tr><td><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.number.checkbox.exists(2)" \nng-click="vm.number.checkbox.group(2)" ng-disabled="!legend.allowBetting"></md-checkbox></td></tr><tr><td><md-checkbox \nmd-no-ink aria-label="Checkbox" ng-checked="vm.number.checkbox.exists(3)" ng-click="vm.number.checkbox.group(3)" \nng-disabled="!legend.allowBetting"></md-checkbox></td></tr><tr><td><md-checkbox md-no-ink aria-label="Checkbox" \nng-checked="vm.number.checkbox.exists(4)" ng-click="vm.number.checkbox.group(4)" ng-disabled="!legend.allowBetting">\n</md-checkbox></td></tr><tr><td><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.number.checkbox.exists(5)" \nng-click="vm.number.checkbox.group(5)" ng-disabled="!legend.allowBetting"></md-checkbox></td></tr><tr><td><md-checkbox \nmd-no-ink aria-label="Checkbox" ng-checked="vm.number.checkbox.exists(6)" ng-click="vm.number.checkbox.group(6)" \nng-disabled="!legend.allowBetting"></md-checkbox></td></tr><tr><td><md-checkbox md-no-ink aria-label="Checkbox" \nng-checked="vm.number.checkbox.exists(7)" ng-click="vm.number.checkbox.group(7)" ng-disabled="!legend.allowBetting">\n</md-checkbox></td></tr><tr><td><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.number.checkbox.exists(8)" \nng-click="vm.number.checkbox.group(8)" ng-disabled="!legend.allowBetting"></md-checkbox></td></tr><tr><td><md-checkbox \nmd-no-ink aria-label="Checkbox" ng-checked="vm.number.checkbox.exists(9)" ng-click="vm.number.checkbox.group(9)" \nng-disabled="!legend.allowBetting"></md-checkbox></td></tr></tbody></table></div></div></div><div flex-gt-sm="40" \nflex="100" layout="column" class="main-right-betting-form"><div layout="column" class="betting-form-wrap"><div \nclass="betting-form" layout="column"><div class="betting-form-header"><div layout="row"><div flex="30">\u0110\u1EB7t c\u01B0\u1EE3c</div>\n<div flex="70" class="text-right">{{ vm.betId | bet }} - Mi\u1EC1n Nam</div></div></div><div class="betting-form-content">\n<form name="form" class="md-inline-form" layout="column" ng-submit="vm.submitBetting()" novalidate><div layout="row" \nflex="70" flex-offset="30"><div flex="33" class="sub-title">\u0110\u1EA7u</div><div flex="33" class="sub-title">\u0110u\xF4i</div><div \nflex="33" class="sub-title">\u0110\u1EA7u \u0110u\xF4i</div></div><div layout="row" class="padding-top-8"><div class="sub-title" \nflex="30">S\u1ED1 \u0111i\u1EC3m</div><div flex="70" layout="row"><div flex="33" class="form-group"><input type="tel" \nclass="bet-input" maxlength="5" ng-model="vm.betPoint[7]" ng-change="vm.stepper.update(7)" ng-currency numeric-only \nselect-on-click ng-disabled="!(vm.numbers | filter : {selected : true}).length" autocomplete="off" tabindex="2"><div \nclass="line"></div></div><div flex="33" class="form-group"><input type="tel" class="bet-input" maxlength="5" \nng-model="vm.betPoint[8]" ng-change="vm.stepper.update(8)" ng-currency numeric-only select-on-click \nng-disabled="!(vm.numbers | filter : {selected : true}).length" autocomplete="off" tabindex="3"><div class="line"></div>\n</div><div flex="33" class="form-group"><input type="tel" class="bet-input" maxlength="5" ng-model="vm.betPoint[78]" \nng-change="vm.stepper.update(78)" ng-currency numeric-only select-on-click \nng-disabled="!(vm.numbers | filter : {selected : true}).length" autocomplete="off" tabindex="4"><div class="line"></div>\n</div></div></div><div layout="row" layout-wrap layout-align="space-between center" \nclass="padding-top-16 bet-stepper-wrap" ng-class="{\'has-individual\' : vm.betStepper.length === 10 }"><div \nclass="bet-stepper" ng-repeat="item in vm.betStepper track by $index" ng-class="{\'individual\' : item.individual}">\n<md-button ng-class="{\'active\': item.active}" ng-click="vm.stepper.select(item)">{{ item.value | currency : \'\' : 0 }}\n</md-button></div></div><div layout="row" class="padding-top-16"><div flex="30" class="padding-right-8"><md-button \nclass="betting-button cancel-button" ng-disabled="!(vm.numbers | filter : {selected : true}).length" \nng-click="vm.resetBetting()"><md-icon md-font-icon="icon-close"></md-icon></md-button></div><div flex="70"><md-button \nclass="betting-button" type="submit" ng-disabled="vm.totalMoney === 0">\u0110\u1EB7t c\u01B0\u1EE3c</md-button></div></div><div \nclass="ignore-price" layout="row" hide><md-checkbox ng-model="vm.ignorePrice" aria-label="Ignore Price">\nKh\xF4ng h\u1ECFi l\u1EA1i khi c\xF3 gi\xE1 thay \u0111\u1ED5i</md-checkbox></div></form><div layout="row" class="padding-top-8" \nng-if="$root.termInfo !== undefined"><div class="sub-title" flex="30">Phi\xEAn m\u1EDF th\u01B0\u1EDFng</div><div flex="70" \nclass="text-bold">{{ $root.termInfo.Term | term }} <em>({{ $root.termInfo.DrawResultAt | amDateFormat : \'HH:mm\' }})</em>\n</div></div><div layout="row" class="padding-top-8"><div class="sub-title" flex="30">Gi\xE1 b\xE1n</div><div flex="70" \nclass="text-bold">{{ vm.basePrice[7] | currency : \'\' : 0 }}</div></div><div layout="row"><div class="sub-title" \nflex="30">T\u1ED5ng \u0111i\u1EC3m</div><div flex="70" class="text-bold">{{ vm.totalPoint() | currency : \'\' : 0 }}</div></div><div \nlayout="row"><div class="sub-title" flex="30">Th\xE0nh ti\u1EC1n</div><div flex="70" class="text-bold">\n{{ vm.totalMoney() | currency : \'\' : 0 }}</div></div><div layout="row" \nng-show="(vm.numbers | filter : {selected : true}).length" ng-click="vm.showFull = !vm.showFull"><div \nclass="sub-title number" ng-class="{\'full\' : vm.showFull}"><div><span>Danh s\xE1ch:</span> <span class="n">\n{{ vm.number.selected() }}</span></div></div></div><div layout="row" ng-if="$root.isAuthenticated"><div \nclass="sub-title secondary" flex="30">Tr\u1EA3 th\u01B0\u1EDFng</div><div flex="70" class="text-bold sub-title secondary">\n{{vm.payouts | currency : \'\' : 0 }}</div></div><div layout="row" class="balance" ng-if="$root.isAuthenticated"><div \nclass="sub-title secondary" flex="30">S\u1ED1 d\u01B0</div><div flex="70" class="text-bold sub-title secondary" layout="row" \nlayout-align="space-between center">{{ $root.User.Balance | currency : \'\' : 0 }}<md-button class="md-icon-button" \nng-click="$root.updateBalance()" ng-disabled="$root.User.updating"><md-icon md-font-icon="icon-refresh" class="s16" \nng-class="{\'rotating\' : $root.User.updating }"></md-icon></md-button></div></div></div></div></div></div></div>');
$templateCache.put('app/main/legendary/southern/3d/jackpot/legend.southern.3d.jackpot.html','<div class="main-game" layout-gt-sm="row" layout="column"><div flex-gt-sm="60" flex="100" class="content-number-wrap">\n<div layout="column" class="content-number"><div class="number-filter" layout="column" \nlayout-align="space-between center"><div layout="row" class="hundreds"><span class="label">\u0110\u1EA7u</span> <span \nng-click="vm.changeLabel(0)" ng-class="{\'active\': vm.label === 0}">0</span> <span ng-click="vm.changeLabel(1)" \nng-class="{\'active\': vm.label === 1}">1</span> <span ng-click="vm.changeLabel(2)" ng-class="{\'active\': vm.label === 2}">\n2</span> <span ng-click="vm.changeLabel(3)" ng-class="{\'active\': vm.label === 3}">3</span> <span \nng-click="vm.changeLabel(4)" ng-class="{\'active\': vm.label === 4}">4</span> <span ng-click="vm.changeLabel(5)" \nng-class="{\'active\': vm.label === 5}">5</span> <span ng-click="vm.changeLabel(6)" ng-class="{\'active\': vm.label === 6}">\n6</span> <span ng-click="vm.changeLabel(7)" ng-class="{\'active\': vm.label === 7}">7</span> <span \nng-click="vm.changeLabel(8)" ng-class="{\'active\': vm.label === 8}">8</span> <span ng-click="vm.changeLabel(9)" \nng-class="{\'active\': vm.label === 9}">9</span></div><div layout="row" class="hundreds"><span class="label">Gi\u1EEFa</span> \n<span ng-click="vm.changeLabel(10)" ng-class="{\'active\': vm.label === 10}">0</span> <span ng-click="vm.changeLabel(11)" \nng-class="{\'active\': vm.label === 11}">1</span> <span ng-click="vm.changeLabel(12)" \nng-class="{\'active\': vm.label === 12}">2</span> <span ng-click="vm.changeLabel(13)" \nng-class="{\'active\': vm.label === 13}">3</span> <span ng-click="vm.changeLabel(14)" \nng-class="{\'active\': vm.label === 14}">4</span> <span ng-click="vm.changeLabel(15)" \nng-class="{\'active\': vm.label === 15}">5</span> <span ng-click="vm.changeLabel(16)" \nng-class="{\'active\': vm.label === 16}">6</span> <span ng-click="vm.changeLabel(17)" \nng-class="{\'active\': vm.label === 17}">7</span> <span ng-click="vm.changeLabel(18)" \nng-class="{\'active\': vm.label === 18}">8</span> <span ng-click="vm.changeLabel(19)" \nng-class="{\'active\': vm.label === 19}">9</span></div></div><div class="table-number-wrap"><table><tbody><tr hide \nshow-gt-xs><td></td><td colspan="10" layout="row" class="row-check"><div flex="10"><md-checkbox md-no-ink \naria-label="Checkbox" ng-checked="vm.number.checkbox.exists(10)" ng-click="vm.number.checkbox.group(10)" \nng-disabled="!legend.allowBetting"></md-checkbox></div><div flex="10"><md-checkbox md-no-ink aria-label="Checkbox" \nng-checked="vm.number.checkbox.exists(11)" ng-click="vm.number.checkbox.group(11)" ng-disabled="!legend.allowBetting">\n</md-checkbox></div><div flex="10"><md-checkbox md-no-ink aria-label="Checkbox" \nng-checked="vm.number.checkbox.exists(12)" ng-click="vm.number.checkbox.group(12)" ng-disabled="!legend.allowBetting">\n</md-checkbox></div><div flex="10"><md-checkbox md-no-ink aria-label="Checkbox" \nng-checked="vm.number.checkbox.exists(13)" ng-click="vm.number.checkbox.group(13)" ng-disabled="!legend.allowBetting">\n</md-checkbox></div><div flex="10"><md-checkbox md-no-ink aria-label="Checkbox" \nng-checked="vm.number.checkbox.exists(14)" ng-click="vm.number.checkbox.group(14)" ng-disabled="!legend.allowBetting">\n</md-checkbox></div><div flex="10"><md-checkbox md-no-ink aria-label="Checkbox" \nng-checked="vm.number.checkbox.exists(15)" ng-click="vm.number.checkbox.group(15)" ng-disabled="!legend.allowBetting">\n</md-checkbox></div><div flex="10"><md-checkbox md-no-ink aria-label="Checkbox" \nng-checked="vm.number.checkbox.exists(16)" ng-click="vm.number.checkbox.group(16)" ng-disabled="!legend.allowBetting">\n</md-checkbox></div><div flex="10"><md-checkbox md-no-ink aria-label="Checkbox" \nng-checked="vm.number.checkbox.exists(17)" ng-click="vm.number.checkbox.group(17)" ng-disabled="!legend.allowBetting">\n</md-checkbox></div><div flex="10"><md-checkbox md-no-ink aria-label="Checkbox" \nng-checked="vm.number.checkbox.exists(18)" ng-click="vm.number.checkbox.group(18)" ng-disabled="!legend.allowBetting">\n</md-checkbox></div><div flex="10"><md-checkbox md-no-ink aria-label="Checkbox" \nng-checked="vm.number.checkbox.exists(19)" ng-click="vm.number.checkbox.group(19)" ng-disabled="!legend.allowBetting">\n</md-checkbox></div></td></tr><tr><td><md-checkbox md-no-ink aria-label="Checkbox" \nng-checked="vm.number.checkbox.exists(0)" ng-click="vm.number.checkbox.group(0)" ng-disabled="!legend.allowBetting">\n</md-checkbox></td><td colspan="10" rowspan="10"><div class="main-number" layout="row" layout-wrap><div flex="10" \nclass="repeater-number" ng-repeat="n in vm.numbers"><div class="inner-number" layout="column" \nlayout-align="space-around center" ng-click="vm.number.select(n)" \nng-class="{\'active\' : n.selected, \'changed-price\': n.priceChanged && legend.allowBetting, \'disabled\': n.disabled[vm.betId] || !legend.allowBetting}">\n<div class="number d3">{{n.number}}</div></div></div></div></td></tr><tr><td><md-checkbox md-no-ink \naria-label="Checkbox" ng-checked="vm.number.checkbox.exists(1)" ng-click="vm.number.checkbox.group(1)" \nng-disabled="!legend.allowBetting"></md-checkbox></td></tr><tr><td><md-checkbox md-no-ink aria-label="Checkbox" \nng-checked="vm.number.checkbox.exists(2)" ng-click="vm.number.checkbox.group(2)" ng-disabled="!legend.allowBetting">\n</md-checkbox></td></tr><tr><td><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.number.checkbox.exists(3)" \nng-click="vm.number.checkbox.group(3)" ng-disabled="!legend.allowBetting"></md-checkbox></td></tr><tr><td><md-checkbox \nmd-no-ink aria-label="Checkbox" ng-checked="vm.number.checkbox.exists(4)" ng-click="vm.number.checkbox.group(4)" \nng-disabled="!legend.allowBetting"></md-checkbox></td></tr><tr><td><md-checkbox md-no-ink aria-label="Checkbox" \nng-checked="vm.number.checkbox.exists(5)" ng-click="vm.number.checkbox.group(5)" ng-disabled="!legend.allowBetting">\n</md-checkbox></td></tr><tr><td><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.number.checkbox.exists(6)" \nng-click="vm.number.checkbox.group(6)" ng-disabled="!legend.allowBetting"></md-checkbox></td></tr><tr><td><md-checkbox \nmd-no-ink aria-label="Checkbox" ng-checked="vm.number.checkbox.exists(7)" ng-click="vm.number.checkbox.group(7)" \nng-disabled="!legend.allowBetting"></md-checkbox></td></tr><tr><td><md-checkbox md-no-ink aria-label="Checkbox" \nng-checked="vm.number.checkbox.exists(8)" ng-click="vm.number.checkbox.group(8)" ng-disabled="!legend.allowBetting">\n</md-checkbox></td></tr><tr><td><md-checkbox md-no-ink aria-label="Checkbox" ng-checked="vm.number.checkbox.exists(9)" \nng-click="vm.number.checkbox.group(9)" ng-disabled="!legend.allowBetting"></md-checkbox></td></tr></tbody></table></div>\n</div></div><div flex-gt-sm="40" flex="100" layout="column" class="main-right-betting-form"><div layout="column" \nclass="betting-form-wrap"><div class="betting-form" layout="column"><div class="betting-form-header"><div layout="row">\n<div flex="30">\u0110\u1EB7t c\u01B0\u1EE3c</div><div flex="70" class="text-right">{{ vm.betId | bet }} - Mi\u1EC1n Nam</div></div></div><div \nclass="betting-form-content"><form name="basicForm" class="md-inline-form" ng-submit="vm.submitBetting()" novalidate>\n<div layout="row" flex="70" flex-offset="30"><div flex="33" class="sub-title">\u0110\u1EA7u</div><div flex="33" class="sub-title">\n\u0110u\xF4i</div><div flex="33" class="sub-title">\u0110\u1EA7u \u0110u\xF4i</div></div><div layout="row" class="padding-top-8"><div \nclass="sub-title" flex="30">S\u1ED1 \u0111i\u1EC3m</div><div flex="70" layout="row"><div flex="33" class="form-group"><input \ntype="tel" class="bet-input" maxlength="5" ng-model="vm.betPoint[10]" ng-change="vm.stepper.update(10)" ng-currency \nnumeric-only select-on-click ng-disabled="!(vm.numbers | filter : {selected : true}).length" autocomplete="off" \ntabindex="2"><div class="line"></div></div><div flex="33" class="form-group"><input type="tel" class="bet-input" \nmaxlength="5" ng-model="vm.betPoint[11]" ng-change="vm.stepper.update(11)" ng-currency numeric-only select-on-click \nng-disabled="!(vm.numbers | filter : {selected : true}).length" autocomplete="off" tabindex="3"><div class="line"></div>\n</div><div flex="33" class="form-group"><input type="tel" class="bet-input" maxlength="5" ng-model="vm.betPoint[101]" \nng-change="vm.stepper.update(101)" ng-currency numeric-only select-on-click \nng-disabled="!(vm.numbers | filter : {selected : true}).length" autocomplete="off" tabindex="4"><div class="line"></div>\n</div></div></div><div layout="row" layout-wrap layout-align="space-between center" \nclass="padding-top-16 bet-stepper-wrap" ng-class="{\'has-individual\' : vm.betStepper.length === 10 }"><div \nclass="bet-stepper" ng-repeat="item in vm.betStepper track by $index" ng-class="{\'individual\' : item.individual}">\n<md-button ng-class="{\'active\': item.active}" ng-click="vm.stepper.select(item)">{{ item.value | currency : \'\' : 0 }}\n</md-button></div></div><div layout="row" class="padding-top-8"><div flex="30" class="padding-right-8"><md-button \nclass="betting-button cancel-button" ng-disabled="!(vm.numbers | filter : {selected : true}).length" \nng-click="vm.resetBetting()"><md-icon md-font-icon="icon-close"></md-icon></md-button></div><div flex="70"><md-button \nclass="betting-button" type="submit" ng-disabled="vm.totalMoney() === 0">\u0110\u1EB7t c\u01B0\u1EE3c</md-button></div></div><div \nclass="ignore-price" hide><md-checkbox ng-model="vm.ignorePrice" aria-label="Ignore Price">\nKh\xF4ng h\u1ECFi l\u1EA1i khi c\xF3 gi\xE1 thay \u0111\u1ED5i</md-checkbox></div></form><div layout="row" class="padding-top-8" \nng-if="$root.termInfo !== undefined"><div class="sub-title" flex="30">Phi\xEAn m\u1EDF th\u01B0\u1EDFng</div><div flex="70" \nclass="text-bold">{{ $root.termInfo.Term | term }} <em>({{ $root.termInfo.DrawResultAt | amDateFormat : \'HH:mm\' }})</em>\n</div></div><div layout="row" class="padding-top-8"><div class="sub-title" flex="30">Gi\xE1 b\xE1n</div><div flex="70" \nclass="text-bold">{{ vm.basePrice[10] | currency : \'\' : 0 }}</div></div><div layout="row"><div class="sub-title" \nflex="30">T\u1ED5ng \u0111i\u1EC3m</div><div flex="70" class="text-bold">{{vm.totalPoint() | currency : \'\' : 0 }}</div></div><div \nlayout="row"><div class="sub-title" flex="30">Th\xE0nh ti\u1EC1n</div><div flex="70" class="text-bold">\n{{vm.totalMoney() | currency : \'\' : 0 }}</div></div><div layout="row" \nng-show="(vm.numbers | filter : {selected : true}).length" ng-click="vm.showFull = !vm.showFull"><div \nclass="sub-title number" ng-class="{\'full\' : vm.showFull}"><div><span>Danh s\xE1ch:</span> <span class="n">\n{{ vm.number.selected() }}</span></div></div></div><div layout="row" ng-if="$root.isAuthenticated"><div \nclass="sub-title secondary" flex="30">Tr\u1EA3 th\u01B0\u1EDFng</div><div flex="70" class="text-bold sub-title secondary">\n{{ vm.payouts | currency : \'\' : 0 }}</div></div><div layout="row" class="balance" ng-if="$root.isAuthenticated"><div \nclass="sub-title secondary" flex="30">S\u1ED1 d\u01B0</div><div flex="70" class="text-bold sub-title secondary" layout="row" \nlayout-align="space-between center">{{ $root.User.Balance | currency : \'\' : 0 }}<md-button class="md-icon-button" \nng-click="$root.updateBalance()" ng-disabled="$root.User.updating"><md-icon md-font-icon="icon-refresh" class="s16" \nng-class="{\'rotating\' : $root.User.updating }"></md-icon></md-button></div></div></div></div></div></div></div>');
$templateCache.put('app/main/account/statement/casino/game/presidential/presidential.html','<div id="statement" class="page-layout simple fullwidth" layout="column"><h2>Sao k\xEA - {{ vm.data.game | LegendCasino }}\n</h2><div ng-if="vm.reports.length"><table class="table one-table casino" ms-responsive-table><thead><tr><th \ncolspan="8">{{ vm.date }}</th></tr><tr><th>#</th><th>C\u01B0\u1EE3c</th><th>Tr\u1EA1ng th\xE1i</th><th>Ti\u1EC1n c\u01B0\u1EE3c</th><th>Hoa h\u1ED3ng</th><th>\nTh\u1EAFng thua</th></tr></thead><tbody><tr ng-repeat="d in vm.reports"><td><div layout="column"><div class="bold">\n{{ d.BetNumber }}</div></div></td><td>{{ d.BetType | candidate }}</td><td class="sedie-result"><div layout="column">\n<div><img ng-src="assets/images/results/{{d.GameResult}}.png"></div><div ng-if="d.WinLose < 0" class="warn">Thua</div>\n<div ng-if="d.WinLose > 0" class="win">Th\u1EAFng</div></div></td><td><div layout="column"><div>{{ d.Amount| sabaCurrency }}\n</div></div></td><td><div layout="column"><div>{{ d.Commission| sabaCurrency }}</div></div></td><td><div \nlayout="column"><div class="bold" ng-class="{ \'warn\' : d.WinLose < 0 }">{{ d.WinLose | sabaCurrency }}</div></div></td>\n</tr></tbody><tfoot ng-if="vm.thereMore"><tr><td colspan="6" class="there-more"><span \nng-click="vm.fetchReport( vm.reports[vm.reports.length - 1].Id );">Xem ti\u1EBFp</span></td></tr></tfoot></table></div><div \nlayout="row" class="margin-top-64" layout-align="center center" ng-if="vm.loading"><md-progress-circular \nclass="md-hue-2" md-diameter="40px"></md-progress-circular></div><div ng-if="!vm.reports.length && !vm.loading"><h3 \nclass="text-center padding-top-24">Qu\xFD kh\xE1ch kh\xF4ng c\xF3 b\xE1o bi\u1EC3u trong 2 tu\u1EA7n g\u1EA7n \u0111\xE2y</h3></div></div>');
$templateCache.put('app/main/account/statement/saba/items/template/arcadia-gaming.html','<div layout="column" layout-align="space-between end" class="arcadia-gaming"><div class="system-parlay" layout="row">\n<div class="box" ng-click="vm.getRNGBetItems(item)" ng-class="{\'processing\' : item.betItemUpdating}"><md-icon \nng-if="!item.showBetItem && !item.betItemUpdating" md-font-icon="icon-menu-down" class="s20"></md-icon><md-icon \nng-if="item.showBetItem && !item.betItemUpdating" md-font-icon="icon-menu-right" class="s20"></md-icon>\n<md-progress-circular ng-show="item.betItemUpdating" class="md-warn" md-diameter="20px"></md-progress-circular></div>\n<span class="bet-type">{{ item.BetTypeTrans }}</span></div><div>{{ item.SportType | sabaSportsBet }}</div><div \nclass="table-game">Table Games</div><div class="parlay-data" layout="column"><div class="parlay-wrap" \nng-repeat="bet in item.RNGBetItems" ng-show="item.showBetItem"><div class="parlay" layout="column"><div \nclass="sport-type"><span>{{ bet.BetTypeTrans }}</span></div><div class="bet-team" layout="column"><div layout="row" \nclass="parlay-hdp"><span>Ti\u1EC1n c\u01B0\u1EE3c: </span><span class="favorite">{{bet.Stake | sabaCurrency }}</span> <span \nclass="favorite" ng-hide="bet.Stake = bet.BetAmount">/ {{bet.BetAmount | sabaCurrency }}</span></div></div><div \nclass="league">Th\u1EAFng thua: {{ bet.WinLose | sabaCurrency }}</div><div class="match-at">\n{{ bet.TxAt | amDateFormat : \'DD/MM/YYYY HH:mm\' }}</div><div class="ticket-status"><span>\n{{ bet.TicketStatus | SabaTicketStatus }}</span></div></div></div></div></div>');
$templateCache.put('app/main/account/statement/saba/items/template/dialog.parlay.html','<md-dialog aria-label="saba-parlay" class="saba-parlay-dialog"><md-toolbar class="md-accent"><div \nclass="md-toolbar-tools"><h2>C\xE1 c\u01B0\u1EE3c t\u1ED5ng h\u1EE3p chi ti\u1EBFt</h2><span flex></span><md-button class="md-icon-button" \nng-click="cancel()"><md-icon md-font-icon="icon-close" aria-label="Close dialog"></md-icon></md-button></div>\n</md-toolbar><md-dialog-content><div class="md-dialog-content"><div><table class="simple"><thead><tr><th>L\u1EF1a ch\u1ECDn</th>\n<th>T\u1EF7 l\u1EC7 c\u01B0\u1EE3c</th><th>Ti\u1EC1n c\u01B0\u1EE3c</th><th>Th\u1EAFng thua</th><th>Tr\u1EA1ng th\xE1i</th></tr></thead><tbody ng-if="MixParlay"><tr>\n<td><div class="parlay-data"><div class="parlay" ng-repeat="item in ticket.ParlayData"><div class="content"><span>\n{{item.HomeTeamNameEn}}</span> - <span>{{item.AwayTeamNameEn}}</span></div></div></div></td><td><div class="odd" \nng-class="{\'warn\' : ticket.nOdds < 0 }">{{ ticket.nOdds | currency : \'\' : 4 }}</div></td><td><div class="stake">\n{{ ticket.Stake | sabaCurrency }}</div></td><td><div class="win-lose" ng-class="{\'warn\' : ticket.WinLose < 0 }">\n{{ ticket.WinLose | sabaCurrency }}</div></td><td><div class="ticket-status">\n{{ ticket.TicketStatus | SabaTicketStatus }}</div></td></tr></tbody><tbody ng-if="!MixParlay"><tr \nng-repeat="ticket in SystemParlay"><td><div class="parlay-data"><div class="parlay" \nng-repeat="item in ticket.SystemParlayDetail"><div class="content"><span>{{item.HomeTeamNameEn}}</span> - <span>\n{{item.AwayTeamNameEn}}</span></div></div></div></td><td><div class="odd" ng-class="{\'warn\' : ticket.nOdds < 0 }">\n{{ ticket.nOdds | currency : \'\' : 4 }}</div></td><td><div class="stake">{{ ticket.Stake | sabaCurrency }}</div></td><td>\n<div class="win-lose" ng-class="{\'warn\' : ticket.WinLose < 0 }">{{ ticket.WinLose | sabaCurrency }}</div></td><td><div \nclass="ticket-status">{{ ticket.TicketStatus | SabaTicketStatus }}</div></td></tr></tbody><tfoot><tr><td colspan="2">\nT\u1ED5ng c\u1ED9ng</td><td>{{ SystemParlay | sumByKey : \'Stake\' | sabaCurrency }}</td><td>\n{{ SystemParlay | sumByKey : \'WinLose\' | sabaCurrency }}</td><td></td></tr></tfoot></table></div></div>\n</md-dialog-content></md-dialog>');
$templateCache.put('app/main/account/statement/saba/items/template/keno.html','<div layout="column" layout-align="space-between end" class="saba-club"><div class="keno-bet-type">{{ item.BetTeam }}\n</div><div class="saba-sport-type capitalize">{{ item.LotteryBetType }}</div><div layout="row" class="keno-game"><div \nclass="keno-game-type">{{ item.SportType | sabaSportsBet }}</div><div class="keno-bet-type">{{ item.BetTypeTrans }}\n</div><div class="keno-match-id">[{{ item.MatchId }}]</div></div></div>');
$templateCache.put('app/main/account/statement/saba/items/template/mix-parlay.html','<div layout="column" layout-align="space-between end"><div class="system-parlay" layout="row"><div class="box" \nng-click="vm.showParlayData(item)" ng-class="{\'processing\' : item.parlayUpdating}"><md-icon \nng-if="!item.parlayUpdating && !item.showParlay" md-font-icon="icon-menu-right" class="s20"></md-icon><md-icon \nng-if="!item.parlayUpdating && item.showParlay" md-font-icon="icon-menu-down" class="s20"></md-icon>\n<md-progress-circular ng-show="item.parlayUpdating" class="md-warn" md-diameter="20px"></md-progress-circular></div>\n<span class="favorite">{{ item.ParlayType }}</span></div><div class="combo-type-mix"><span>{{item.ComboType}}</span> \n<span class="odds">@ {{item.nOdds | currency : \'\' : 4}}</span></div><div class="parlay-data" layout="column"><div \nclass="parlay-wrap" ng-repeat="parlay in item.ParlayData" ng-show="item.showParlay"><div class="parlay" layout="column">\n<div class="sport-type"><span>{{ parlay.SportType | sabaSportsBet }}</span> / <span>{{ parlay.BetTypeTrans }}</span>\n</div><div class="bet-team" layout="column"><div>{{ parlay.BetTeamTrans }}</div><div layout="row" class="parlay-hdp">\n<span class="handicap" ng-if="parlay.HomeHdp >= parlay.AwayHdp">{{parlay.HomeHdp}}</span> <span class="handicap" \nng-if="parlay.AwayHdp > parlay.HomeHdp">{{parlay.AwayHdp}}</span> <span class="favorite" \nng-show="parlay.HomeScore && parlay.AwayScore">[{{parlay.HomeScore}}-{{parlay.AwayScore}}]</span> <span class="odds">\n@ {{ parlay.Odds }}</span></div></div><div>{{ parlay.HomeTeamNameEn }} - {{ parlay.AwayTeamNameEn }}</div><div \nclass="league">{{ parlay.LeagueNameEn }}</div><div class="match-at">\n{{ parlay.MatchAt | amDateFormat : \'DD/MM/YYYY HH:mm\' }}</div><div class="ticket-status"><span>\n{{ parlay.TicketStatus | SabaTicketStatus }}</span></div></div></div></div></div>');
$templateCache.put('app/main/account/statement/saba/items/template/number-game.html','<div layout="column" layout-align="space-between end" class="number-game"><div><span class="sport-type">\n{{ item.SportType | sabaSportsBet }}</span> / <span class="bet-type">{{ item.BetTypeTrans }}</span></div><div \nclass="odds" layout="column"><span class="bet-team">{{ item.BetTeamTrans }}</span> <span class="ball">\n[{{ item.LastBallNo }}]</span></div><div>S\u1ED1. {{ item.MatchDetails.GameNo }}</div><div class="league"><span \nng-if="!item.LeagueName" class="info" ng-click="vm.updateLeagueInfo(item)">League Info</span> <span \nng-if="item.LeagueName" class="name">{{ item.LeagueName }}</span></div><div class="match-at">\n{{ item.TxAt | amDateFormat : \'DD/MM/YYYY HH:mm\' }}</div></div>');
$templateCache.put('app/main/account/statement/saba/items/template/saba-club.html','<div layout="column" layout-align="space-between end" class="saba-club"><div class="club-bet-type">\n{{ item.BetTypeTrans }}</div><div class="saba-sport-type">{{ item.SportType | sabaSportsBet }}</div><div \nclass="system-parlay" layout="row"><div class="box" ng-click="vm.getRNGBetItems(item)" \nng-class="{\'processing\' : item.betItemUpdating}"><md-icon ng-if="!item.showBetItem && !item.betItemUpdating" \nmd-font-icon="icon-menu-down" class="s20"></md-icon><md-icon ng-if="item.showBetItem && !item.betItemUpdating" \nmd-font-icon="icon-menu-right" class="s20"></md-icon><md-progress-circular ng-show="item.betItemUpdating" \nclass="md-warn" md-diameter="20px"></md-progress-circular></div><span class="bet-type">Chi ti\u1EBFt</span></div><div \nclass="parlay-data" layout="column"><div class="parlay-wrap" ng-repeat="bet in item.RNGBetItems" \nng-show="item.showBetItem"><div class="parlay" layout="column"><div class="sport-type"><span>{{ bet.BetTypeTrans }}\n</span></div><div class="bet-team" layout="column"><div layout="row" class="parlay-hdp"><span>Ti\u1EC1n c\u01B0\u1EE3c: </span><span \nclass="favorite">{{bet.Stake | sabaCurrency }}</span> <span class="favorite" ng-hide="bet.Stake = bet.BetAmount">\n/ {{bet.BetAmount | sabaCurrency }}</span></div></div><div class="league">Th\u1EAFng thua: {{ bet.WinLose | sabaCurrency }}\n</div><div class="match-at">Ref: {{ bet.Tx }}</div><div class="match-at">\n{{ bet.TxAt | amDateFormat : \'DD/MM/YYYY HH:mm\' }}</div><div class="ticket-status"><span>\n{{ bet.TicketStatus | SabaTicketStatus }}</span></div></div></div></div></div>');
$templateCache.put('app/main/account/statement/saba/items/template/single-parlay.html','<div layout="column" layout-align="space-between end"><div class="system-parlay" layout="row"><div class="box" \nng-click="item.showParlay = !item.showParlay"><md-icon md-font-icon="icon-menu-right" class="s20" \nng-show="!item.showParlay"></md-icon><md-icon md-font-icon="icon-menu-down" class="s20" ng-show="item.showParlay">\n</md-icon></div><span class="bet-type">{{ item.BetTypeTrans }}</span></div><div>\n{{ item.HomeTeamNameEn }} - {{ item.AwayTeamNameEn }}</div><div><span class="sport-type">\n{{ item.SportType | sabaSportsBet }}</span> {{ item.LeagueNameEn }}</div><div class="match-at">\n{{ item.MatchAt | amDateFormat : \'DD/MM/YYYY HH:mm\' }}</div><div class="single-parlay-data" layout="column" \nng-show="item.showParlay"><div class="parlay-wrap" ng-repeat="parlay in item.SingleParlayData"><div class="parlay" \nlayout="column"><div class="league">{{ parlay.SelectionName }}</div><div class="ticket-status"><span>\n{{ parlay.Status | SabaTicketStatus }}</span></div></div></div></div></div>');
$templateCache.put('app/main/account/statement/saba/items/template/sport-dead.html','<div layout="column" layout-align="space-between end"><div><span class="favorite" \nng-class="{ \'advantage\' : item.Hdp > 0, \'over\': item.BetTeamTrans === \'over\', \'under\': item.BetTeamTrans === \'under\' }">\n{{ item.BetTeamTrans }}</span> <span class="handicap">{{item.Hdp}}</span></div><div class="bet-type text-right">\n{{ item.BetTypeTrans | BetTag : item.BetTag }}</div><div class="text-right" ng-if="item.HomeTeamNameEn !== undefined">\n{{ item.HomeTeamNameEn }} - {{ item.AwayTeamNameEn }}</div><div class="text-right"><span class="sport-type">\n{{ item.SportType | sabaSportsBet }}</span> {{ item.LeagueNameEn }}</div><div class="match-at">\n{{ item.MatchAt | amDateFormat : \'DD/MM/YYYY HH:mm\' }}</div></div>');
$templateCache.put('app/main/account/statement/saba/items/template/sport-live.html','<div layout="column" layout-align="space-between end"><div><span class="favorite" \nng-class="{ \'advantage\' : item.Hdp > 0, \'over\': item.BetTeamTrans === \'over\', \'under\': item.BetTeamTrans === \'under\' }">\n{{ item.BetTeamTrans }}</span> <span class="handicap">{{item.Hdp}}</span> <span class="favorite" \nng-if="vm.showScore(item)">[{{item.HomeScore}}-{{item.AwayScore}}]</span> <span class="favorite" \nng-if="!vm.showScore(item)">[Live]</span></div><div class="bet-type">{{ item.BetTypeTrans | BetTag : item.BetTag }}\n</div><div class="text-right">{{ item.HomeTeamNameEn }} - {{ item.AwayTeamNameEn }}</div><div class="text-right"><span \nclass="sport-type">{{ item.SportType | sabaSportsBet }}</span> {{ item.LeagueNameEn }}</div><div class="match-at">\n{{ item.MatchAt | amDateFormat : \'DD/MM/YYYY HH:mm\' }}</div></div>');
$templateCache.put('app/main/account/statement/saba/items/template/system-parlay.html','<div layout="column" layout-align="space-between end"><div class="system-parlay" layout="row"><div class="box" \nng-click="vm.showParlayData(item)" ng-class="{\'processing\' : item.parlayUpdating}"><md-icon \nng-if="!item.parlayUpdating && !item.showParlay" md-font-icon="icon-menu-right" class="s20"></md-icon><md-icon \nng-if="!item.parlayUpdating && item.showParlay" md-font-icon="icon-menu-down" class="s20"></md-icon>\n<md-progress-circular ng-show="item.parlayUpdating" class="md-warn" md-diameter="20px"></md-progress-circular></div>\n<span class="favorite">{{ item.ParlayType }} <span ng-if="item.IsLucky === \'True\'">(Via Lucky)</span></span></div><div \nclass="combo-type">{{item.ComboType}}</div><div class="parlay-data" layout="column"><div class="parlay-wrap" \nng-repeat="parlay in item.ParlayData" ng-show="item.showParlay"><div class="parlay" layout="column"><div \nclass="sport-type"><span>{{ parlay.SportType | sabaSportsBet }}</span> / <span>{{ parlay.BetTypeTrans }}</span></div>\n<div class="bet-team" layout="column"><div>{{ parlay.BetTeamTrans }}</div><div layout="row" class="parlay-hdp"><span \nclass="handicap" ng-if="parlay.HomeHdp >= parlay.AwayHdp">{{parlay.HomeHdp}}</span> <span class="handicap" \nng-if="parlay.AwayHdp > parlay.HomeHdp">{{parlay.AwayHdp}}</span> <span class="favorite" \nng-show="parlay.HomeScore && parlay.AwayScore">[{{parlay.HomeScore}}-{{parlay.AwayScore}}]</span> <span class="odds">\n@ {{ parlay.Odds }}</span></div></div><div>{{ parlay.HomeTeamNameEn }} - {{ parlay.AwayTeamNameEn }}</div><div \nclass="league">{{ parlay.LeagueNameEn }}</div><div class="match-at">\n{{ parlay.MatchAt | amDateFormat : \'DD/MM/YYYY HH:mm\' }}</div><div class="ticket-status"><span>\n{{ parlay.TicketStatus | SabaTicketStatus }}</span></div></div></div></div></div>');
$templateCache.put('app/main/account/statement/saba/items/template/virtual-mix-parlay.html','<div layout="column" layout-align="space-between end"><div class="system-parlay" layout="row"><div class="box" \nng-click="vm.showParlayData(item)" ng-class="{\'processing\' : item.parlayUpdating}"><md-icon \nng-if="!item.parlayUpdating && !item.showParlay" md-font-icon="icon-menu-right" class="s20"></md-icon><md-icon \nng-if="!item.parlayUpdating && item.showParlay" md-font-icon="icon-menu-down" class="s20"></md-icon>\n<md-progress-circular ng-show="item.parlayUpdating" class="md-warn" md-diameter="20px"></md-progress-circular></div>\n<span class="favorite">{{ item.BetTypeTrans }}</span></div><div class="combo-type-mix"><span>\nC\u01B0\u1EE3c {{item.ParlayData.length }} </span><span class="odds">@ {{item.Odds | currency : \'\' : 4}}</span></div><div \nclass="parlay-data" layout="column"><div class="parlay-wrap" ng-repeat="parlay in item.ParlayData" \nng-show="item.showParlay"><div class="parlay" layout="column"><div class="sport-type"><span>\n{{ parlay.SportType | sabaSportsBet }}</span> / <span>{{ parlay.BetTypeTrans }}</span></div><div class="bet-team" \nlayout="column"><div>{{ parlay.BetTeamTrans }}</div><div layout="row" class="parlay-hdp"><span class="handicap" \nng-if="parlay.HomeHdp >= parlay.AwayHdp">{{parlay.HomeHdp}}</span> <span class="handicap" \nng-if="parlay.AwayHdp > parlay.HomeHdp">{{parlay.AwayHdp}}</span> <span class="favorite" \nng-show="parlay.HomeScore && parlay.AwayScore">[{{parlay.HomeScore}}-{{parlay.AwayScore}}]</span> <span class="odds">\n@ {{ parlay.Odds }}</span></div></div><div>{{ parlay.HomeTeamNameEn }} - {{ parlay.AwayTeamNameEn }}</div><div \nclass="league">{{ parlay.LeagueNameEn }}</div><div class="match-at">\n{{ parlay.MatchAt | amDateFormat : \'DD/MM/YYYY HH:mm\' }}</div><div class="ticket-status"><span>\n{{ parlay.TicketStatus | SabaTicketStatus }}</span></div></div></div></div></div>');
$templateCache.put('app/main/account/statement/saba/items/template/virtual-sport.html','<div layout="column" layout-align="space-between end"><div><span class="favorite">{{ item.SportType | sabaSportsBet }}\n</span> / <span class="favorite">{{ item.BetTypeTrans }}</span></div><div class="hdp" layout="column"><span>\n{{ item.BetTeamTrans }}</span> <span>{{ item.Hdp }}</span></div><div>\n{{ item.HomeTeamNameEn }} - {{ item.AwayTeamNameEn }}</div><div class="text-right"><span class="sport-type">\n{{ vm.data.SportGroup | SportGroup }}</span> <span>{{ item.MatchDetails.VirtualSportInfo }}</span></div><div \nclass="match-at">{{ item.MatchAt | amDateFormat : \'DD/MM/YYYY HH:mm\' }}</div></div>');
$templateCache.put('app/main/account/statement/saba/items/template/result/blank.html','<md-dialog aria-label="saba-parlay" class="saba-result-dialog"><md-toolbar class="md-accent"><div \nclass="md-toolbar-tools"><h2>K\u1EBFt qu\u1EA3</h2><span flex></span><md-button class="md-icon-button" ng-click="cancel()">\n<md-icon md-font-icon="icon-close" aria-label="Close dialog"></md-icon></md-button></div></md-toolbar>\n<md-dialog-content><div class="md-dialog-content"><div><table class="simple"><thead><tr><th>L\u1EF1a ch\u1ECDn</th><th>T\u1EF7 l\u1EC7 c\u01B0\u1EE3c\n</th><th>Ti\u1EC1n c\u01B0\u1EE3c</th><th>Th\u1EAFng thua</th><th>Tr\u1EA1ng th\xE1i</th></tr></thead><tbody><tr><td></td><td></td><td></td><td>\n</td><td></td></tr></tbody></table></div></div></md-dialog-content></md-dialog>');
$templateCache.put('app/main/account/statement/saba/items/template/result/single-parlay.html','<md-dialog aria-label="saba-parlay" class="saba-result-dialog"><md-toolbar class="md-accent"><div \nclass="md-toolbar-tools"><h2>K\u1EBFt qu\u1EA3 {{ item.SportType | sabaSportsBet }}</h2><span flex></span><md-button \nclass="md-icon-button" ng-click="cancel()"><md-icon md-font-icon="icon-close" aria-label="Close dialog"></md-icon>\n</md-button></div></md-toolbar><md-dialog-content class="single-parlay"><div class="md-dialog-content"><div \nclass="match"><div class="home-away" layout="row" layout-align="center center"><div class="home">\n{{ item.HomeTeamNameEn }}</div><div class="score"><span>\n{{ item.MatchDetails.HomeScore }} - {{ item.MatchDetails.AwayScore }}</span></div><div class="away">\n{{ item.AwayTeamNameEn }}</div></div></div><div><table class="simple"><thead><tr><th>L\u1EF1a ch\u1ECDn</th><th>Tr\u1EA1ng th\xE1i</th>\n</tr></thead><tbody><tr ng-repeat="parlay in item.SingleParlayData"><td>{{ parlay.SelectionName }}</td><td>\n{{ parlay.Status | SabaTicketStatus }}</td></tr></tbody><tfoot><tr><td>K\u1EBFt qu\u1EA3 cu\u1ED1i c\xF9ng</td><td>\n{{ item.TicketStatus | SabaTicketStatus }}</td></tr></tfoot></table></div></div></md-dialog-content></md-dialog>');
$templateCache.put('app/main/account/statement/saba/items/template/result/sport-live.html','<md-dialog aria-label="saba-parlay" class="saba-result-dialog"><md-toolbar class="md-accent"><div \nclass="md-toolbar-tools"><h2>K\u1EBFt qu\u1EA3 {{ item.SportType | sabaSportsBet }}</h2><span flex></span><md-button \nclass="md-icon-button" ng-click="cancel()"><md-icon md-font-icon="icon-close" aria-label="Close dialog"></md-icon>\n</md-button></div></md-toolbar><md-dialog-content class="sport-live"><div class="md-dialog-content"><div class="match">\n<div class="home-away" layout="row" layout-align="center center"><div class="home" \nng-class="{\'win\' : item.MatchDetails.HomeScore > item.MatchDetails.AwayScore }">{{ item.HomeTeamNameEn }}</div>-<div \nclass="away" ng-class="{\'win\' : item.MatchDetails.HomeScore < item.MatchDetails.AwayScore }">{{ item.AwayTeamNameEn }}\n</div></div></div><div class="result" layout="row" layout-align="space-between center"><div flex class="half-time" \nlayout="column"><div class="header">Hi\u1EC7p 1</div><div class="score"><span>\n{{ item.MatchDetails.HtHomeScore }} - {{ item.MatchDetails.HtAwayScore }}</span></div></div><div flex class="full-time">\n<div class="header">C\u1EA3 tr\u1EADn</div><div class="score"><span>\n{{ item.MatchDetails.HomeScore }} - {{ item.MatchDetails.AwayScore }}</span></div></div></div></div></md-dialog-content>\n</md-dialog>');
$templateCache.put('app/main/account/statement/saba/items/template/result/system-parlay.html','<md-dialog aria-label="saba-parlay" class="saba-result-dialog"><md-toolbar class="md-accent"><div \nclass="md-toolbar-tools"><h2>K\u1EBFt qu\u1EA3</h2><span flex></span><md-button class="md-icon-button" ng-click="cancel()">\n<md-icon md-font-icon="icon-close" aria-label="Close dialog"></md-icon></md-button></div></md-toolbar><md-dialog-content\n class="sport-live system-parlay"><div class="md-dialog-content" ng-repeat="parlay in item.ParlayData"><div \nclass="match"><div class="sport-type">{{ parlay.SportType | sabaSportsBet }}</div><div class="home-away" layout="row" \nlayout-align="center center"><div class="home" ng-class="{\'win\' : parlay.HomeScore > parlay.AwayScore }">\n{{ parlay.HomeTeamNameEn }}</div>-<div class="away" ng-class="{\'win\' : parlay.HomeScore < parlay.AwayScore }">\n{{ parlay.AwayTeamNameEn }}</div></div></div><div class="result" layout="row" layout-align="space-between center"><div \nflex class="half-time" layout="column"><div class="header">Hi\u1EC7p 1</div><div class="score"><span>\n{{ parlay.HtHomeScore }} - {{ parlay.HtAwayScore }}</span></div></div><div flex class="full-time"><div class="header">\nC\u1EA3 tr\u1EADn</div><div class="score"><span>{{ parlay.HomeScore }} - {{ parlay.AwayScore }}</span></div></div></div></div>\n</md-dialog-content></md-dialog>');}]);